{"litestar-litestar/file_system.py-info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 8 items\n\ntests/unit/test_file_system.py FF                                        [ 25%]\ntests/unit/test_response/test_file_response.py F                         [ 37%]\ntests/unit/test_file_system.py F.                                        [ 62%]\ntests/unit/test_response/test_file_response.py .                         [ 75%]\ntests/unit/test_file_system.py F.                                        [100%]\n\n=================================== FAILURES ===================================\n______ test_file_adapter_info_handles_permission_exception[file_system0] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2461/test_file_adapter_info_handles0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f782aa9a770>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        with pytest.raises(NotAuthorizedException):\n>           await adapter.info(path=file)\n\ntests/unit/test_file_system.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f782aa9a770>\npath = '/tmp/pytest-of-root/pytest-2461/test_file_adapter_info_handles0/test.txt'\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path), **kwargs)\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path), **kwargs)\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n______ test_file_adapter_info_handles_permission_exception[file_system1] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2461/test_file_adapter_info_handles1')\nfile_system = <fsspec.implementations.local.LocalFileSystem object at 0x7f782aa9a200>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n_________________________ test_file_with_symbolic_link _________________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2461/test_file_with_symbolic_link0')\n\n    async def test_file_with_symbolic_link(tmpdir: \"Path\") -> None:\n        path = tmpdir / \"text.txt\"\n        path.write_text(\"content\", \"utf-8\")\n    \n        linked = tmpdir / \"alt.txt\"\n        os.symlink(path, linked, target_is_directory=False)\n    \n        fs = BaseLocalFileSystem()\n>       file_info = await fs.info(linked)\n\ntests/unit/test_response/test_file_response.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f782a7f0070>\npath = local('/tmp/pytest-of-root/pytest-2461/test_file_with_symbolic_link0/alt.txt')\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path), **kwargs)\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path), **kwargs)\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n____ test_file_adapter_info_handles_file_not_found_exception[file_system0] _____\n\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f782aa99f60>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    async def test_file_adapter_info_handles_file_not_found_exception(file_system: \"FileSystemProtocol\") -> None:\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        with pytest.raises(FileNotFoundError):\n>           await adapter.info(path=\"non_existing_file.txt\")\n\ntests/unit/test_file_system.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f782aa99f60>\npath = 'non_existing_file.txt', kwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path), **kwargs)\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path), **kwargs)\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n_____________________ test_file_adapter_info[file_system0] _____________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2461/test_file_adapter_info_file_sy0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f782aa9ab30>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"Suspected fsspec issue\", strict=False)\n    async def test_file_adapter_info(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        result = file.stat()\n    \n>       assert await adapter.info(file) == {\n            \"gid\": result.st_gid,\n            \"ino\": result.st_ino,\n            \"islink\": False,\n            \"mode\": result.st_mode,\n            \"mtime\": result.st_mtime,\n            \"name\": str(file),\n            \"nlink\": 1,\n            \"created\": result.st_ctime,\n            \"size\": result.st_size,\n            \"type\": \"file\",\n            \"uid\": result.st_uid,\n        }\n\ntests/unit/test_file_system.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f782aa9ab30>\npath = '/tmp/pytest-of-root/pytest-2461/test_file_adapter_info_file_sy0/test.txt'\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path), **kwargs)\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path), **kwargs)\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system1]\nFAILED tests/unit/test_response/test_file_response.py::test_file_with_symbolic_link\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_file_not_found_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info[file_system0]\n========================= 5 failed, 3 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-has_inner_subclass_of": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py ..       [100%]\n\n============================== 2 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-get_type_hints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_typing.py .                                              [100%]\n\n============================== 1 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-from_kwarg": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 569\n    from litestar.typing import FieldDefinition\n    ^^^^\nSyntaxError: invalid syntax\n\n\n"], "litestar-litestar/typing.py-from_parameter": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_utils/test_signature.py F...                             [100%]\n\n=================================== FAILURES ===================================\n_ test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation _\n\n    def test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation() -> None:\n        \"\"\"Test FieldDefinition raises ImproperlyConfigured if no annotation.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD)\n>       with pytest.raises(ImproperlyConfiguredException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.ImproperlyConfiguredException'>\n\ntests/unit/test_utils/test_signature.py:116: Failed\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation\n========================= 1 failed, 3 passed in 0.10s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_success_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n__________________ test_create_response_for_response_subclass __________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f7bd011dfc0>\n\n    def test_create_response_for_response_subclass(create_factory: CreateFactoryFixture) -> None:\n        class CustomResponse(Response[T]):\n            pass\n    \n        @get(path=\"/test\", name=\"test\", signature_types=[CustomResponse])\n        def handler() -> CustomResponse[DataclassPerson]:\n            return CustomResponse(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n        response = factory.create_success_response()\n    \n        assert response.content\n>       assert isinstance(response.content[\"application/json\"], OpenAPIMediaType)\nE       KeyError: 'application/json'\n\ntests/unit/test_openapi/test_responses.py:478: KeyError\n______________________ test_response_generation_with_dto _______________________\n\nself = <MagicMock name='mock.create_openapi_schema' id='140169748320448'>\nargs = ()\nkwargs = {'field_definition': FieldDefinition(raw=typing.Dict[str, typing.Any], annotation=typing.Dict[str, typing.Any], type_w...34855011596896', 'schema_creator': <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f7bd01aa200>}\nmsg = \"Expected 'create_openapi_schema' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'create_openapi_schema' to be called once. Called 0 times.\n\n/usr/local/lib/python3.10/unittest/mock.py:930: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f7bd011ecb0>\n\n    def test_response_generation_with_dto(create_factory: CreateFactoryFixture) -> None:\n        mock_dto = MagicMock(spec=AbstractDTO)\n        mock_dto.create_openapi_schema.return_value = Schema()\n    \n        @post(path=\"/form-upload\", return_dto=mock_dto)  # pyright: ignore\n        async def handler(data: Dict[str, Any]) -> Dict[str, Any]:\n            return data\n    \n        Litestar(route_handlers=[handler])\n    \n        factory = create_factory(handler)\n        field_definition = FieldDefinition.from_annotation(Dict[str, Any])\n        factory.create_success_response()\n>       mock_dto.create_openapi_schema.assert_called_once_with(\n            field_definition=field_definition, handler_id=handler.handler_id, schema_creator=factory.schema_creator\n        )\nE       AssertionError: Expected 'create_openapi_schema' to be called once. Called 0 times.\n\ntests/unit/test_openapi/test_responses.py:516: AssertionError\n_______________ test_create_success_response_with_response_class _______________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f7bd0191510>\n\n    def test_create_success_response_with_response_class(create_factory: CreateFactoryFixture) -> None:\n        @get(path=\"/test\", name=\"test\")\n        def handler() -> Response[DataclassPerson]:\n            return Response(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n        response = factory.create_success_response()\n    \n        assert response.content\n>       reference = response.content[\"application/json\"].schema\nE       KeyError: 'application/json'\n\ntests/unit/test_openapi/test_responses.py:238: KeyError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_response_for_response_subclass\nFAILED tests/unit/test_openapi/test_responses.py::test_response_generation_with_dto\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_with_response_class\n======================== 3 failed, 2 warnings in 0.14s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_additional_responses": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_create_additional_responses _______________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f02821820e0>\n\n    def test_create_additional_responses(create_factory: CreateFactoryFixture) -> None:\n        @dataclass\n        class ServerError:\n            message: str\n    \n        class AuthenticationError(TypedDict):\n            message: str\n    \n        class UnknownError(TypedDict):\n            message: str\n    \n        @get(\n            responses={\n                401: ResponseSpec(data_container=AuthenticationError, description=\"Authentication error\"),\n                500: ResponseSpec(data_container=ServerError, generate_examples=False, media_type=MediaType.TEXT),\n                505: ResponseSpec(data_container=UnknownError),\n            }\n        )\n        def handler() -> DataclassPerson:\n            return DataclassPersonFactory.build()\n    \n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n    \n>       first_response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f0282234250>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       additional_responses = self.route_handler.get_additional_responses()\nE       AttributeError: 'get' object has no attribute 'get_additional_responses'\n\nlitestar/_openapi/responses.py:235: AttributeError\n________________ test_additional_responses_with_custom_examples ________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f028205fd90>\n\n    def test_additional_responses_with_custom_examples(create_factory: CreateFactoryFixture) -> None:\n        @get(responses={200: ResponseSpec(DataclassPerson, examples=[Example(value={\"string\": \"example\", \"number\": 1})])})\n        def handler() -> DataclassPerson:\n            return DataclassPersonFactory.build()\n    \n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n>       status_code, response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f028219fc10>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       additional_responses = self.route_handler.get_additional_responses()\nE       AttributeError: 'get' object has no attribute 'get_additional_responses'\n\nlitestar/_openapi/responses.py:235: AttributeError\n________ test_create_success_response_no_content_explicit_responsespec _________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f028205feb0>\n\n    def test_create_success_response_no_content_explicit_responsespec(\n        create_factory: CreateFactoryFixture,\n    ) -> None:\n        @delete(\n            path=\"/test\",\n            responses={HTTP_204_NO_CONTENT: ResponseSpec(None, description=\"Custom description\")},\n            name=\"test\",\n        )\n        def handler() -> None:\n            return None\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n>       status, response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f0282118eb0>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       additional_responses = self.route_handler.get_additional_responses()\nE       AttributeError: 'delete' object has no attribute 'get_additional_responses'\n\nlitestar/_openapi/responses.py:235: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_additional_responses\nFAILED tests/unit/test_openapi/test_responses.py::test_additional_responses_with_custom_examples\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_no_content_explicit_responsespec\n======================== 3 failed, 2 warnings in 0.14s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/path_item.py-create_path_item": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_path_item.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________ test_handler_excluded_from_schema _______________________\n\ncreate_factory = <function create_factory.<locals>.factory at 0x7fb481a1a200>\n\n    def test_handler_excluded_from_schema(create_factory: CreateFactoryFixture) -> None:\n        @get(\"/\", sync_to_thread=False)\n        def handler_1() -> None: ...\n    \n        @delete(\"/\", include_in_schema=False, sync_to_thread=False)\n        def handler_2() -> None: ...\n    \n        app = Litestar(route_handlers=[handler_1, handler_2])\n        index = find_index(app.routes, lambda x: x.path_format == \"/\")\n        route_with_multiple_methods = cast(\"HTTPRoute\", app.routes[index])\n        factory = create_factory(route_with_multiple_methods)\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7fb481a64070>\n\n    def create_path_item(self) -> PathItem:\n        \"\"\"Create a PathItem for the given route parsing all http_methods into Operation Models.\n    \n        Returns:\n            A PathItem instance.\n        \"\"\"\n>       for http_method, handlers in self.route.route_handlers.items():\nE       AttributeError: 'list' object has no attribute 'items'\n\nlitestar/_openapi/path_item.py:38: AttributeError\n_______________ test_create_path_item_use_handler_docstring_true _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb4819cd380>\ncreate_factory = <function create_factory.<locals>.factory at 0x7fb48100b010>\n\n    def test_create_path_item_use_handler_docstring_true(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        factory.context.openapi_config.use_handler_docstrings = True\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7fb4819d3910>\n\n    def create_path_item(self) -> PathItem:\n        \"\"\"Create a PathItem for the given route parsing all http_methods into Operation Models.\n    \n        Returns:\n            A PathItem instance.\n        \"\"\"\n>       for http_method, handlers in self.route.route_handlers.items():\nE       AttributeError: 'list' object has no attribute 'items'\n\nlitestar/_openapi/path_item.py:38: AttributeError\n______________ test_create_path_item_use_handler_docstring_false _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb4819cf680>\ncreate_factory = <function create_factory.<locals>.factory at 0x7fb48100a290>\n\n    def test_create_path_item_use_handler_docstring_false(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        assert not factory.context.openapi_config.use_handler_docstrings\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7fb4819d3880>\n\n    def create_path_item(self) -> PathItem:\n        \"\"\"Create a PathItem for the given route parsing all http_methods into Operation Models.\n    \n        Returns:\n            A PathItem instance.\n        \"\"\"\n>       for http_method, handlers in self.route.route_handlers.items():\nE       AttributeError: 'list' object has no attribute 'items'\n\nlitestar/_openapi/path_item.py:38: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_path_item.py::test_handler_excluded_from_schema\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_true\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_false\n======================== 3 failed, 2 warnings in 0.14s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/schema_generation/schema.py-for_field_definition": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py FF....F            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_create_for_computed_field[True] _____________________\n\nprefer_alias = True\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        ref = schema_creator.for_field_definition(field_definition)\n>       assert isinstance(ref, Reference)\nE       assert False\nE        +  where False = isinstance(Schema(all_of=None, any_of=None, one_of=None, schema_not=None, schema_if=None, then=None, schema_else=None, dependent_...d=None, read_only=None, write_only=None, examples=None, discriminator=None, xml=None, external_docs=None, example=None), Reference)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:679: AssertionError\n____________________ test_create_for_computed_field[False] _____________________\n\nprefer_alias = False\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        ref = schema_creator.for_field_definition(field_definition)\n>       assert isinstance(ref, Reference)\nE       assert False\nE        +  where False = isinstance(Schema(all_of=None, any_of=None, one_of=None, schema_not=None, schema_if=None, then=None, schema_else=None, dependent_...d=None, read_only=None, write_only=None, examples=None, discriminator=None, xml=None, external_docs=None, example=None), Reference)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:679: AssertionError\n____ test_create_schema_for_pydantic_model_with_unhashable_literal_default _____\n\ncreate_module = <function create_module.<locals>.wrapped at 0x7ff991761000>\n\n    def test_create_schema_for_pydantic_model_with_unhashable_literal_default(\n        create_module: \"Callable[[str], ModuleType]\",\n    ) -> None:\n        \"\"\"Test that a model with unhashable literal defaults is correctly handled.\"\"\"\n        module = create_module(\n            \"\"\"\n    from pydantic import BaseModel, Field\n    \n    class Model(BaseModel):\n        id: int\n        dict_default: dict = {}\n        dict_default_in_field: dict = Field(default={})\n        dict_default_in_factory: dict = Field(default_factory=dict)\n        list_default: list = []\n        list_default_in_field: list = Field(default=[])\n        list_default_in_factory: list = Field(default_factory=list)\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Model))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:645: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/schema_generation/schema.py:328: in for_field_definition\n    return self.for_plugin(field_definition, plugin)\nlitestar/_openapi/schema_generation/schema.py:507: in for_plugin\n    schema = plugin.to_openapi_schema(field_definition=field_definition, schema_creator=self)\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:241: in to_openapi_schema\n    return self.for_pydantic_model(field_definition=field_definition, schema_creator=schema_creator)\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:317: in for_pydantic_model\n    return schema_creator.create_component_schema(\nlitestar/_openapi/schema_generation/schema.py:643: in create_component_schema\n    schema.properties = {k: self.for_field_definition(v) for k, v in property_fields.items()}\nlitestar/_openapi/schema_generation/schema.py:643: in <dictcomp>\n    schema.properties = {k: self.for_field_definition(v) for k, v in property_fields.items()}\nlitestar/_openapi/schema_generation/schema.py:344: in for_field_definition\n    return self.for_object_type(field_definition)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7ff9914faa80>\nfield_definition = FieldDefinition(raw=typing.Annotated[list, FieldInfo(annotation=list, required=False, default=[]), []], annotation=<cl...xtra=None, annotation=<_EmptyEnum.EMPTY: 0>, header=None, cookie=None, query=None, required=None), name='list_default')\n\n    def for_object_type(self, field_definition: FieldDefinition) -> Schema:\n        \"\"\"Create schema for object types (dict, Mapping, list, Sequence etc.) types.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.has_inner_subclass_of(UploadFile):\n            return self.for_upload_file(field_definition)\n    \n        if field_definition.is_mapping:\n            return Schema(\n                type=OpenAPIType.OBJECT,\n                additional_properties=(\n                    self.for_field_definition(field_definition.inner_types[1])\n                    if field_definition.inner_types and len(field_definition.inner_types) == 2\n                    else None\n                ),\n            )\n    \n        if field_definition.is_non_string_sequence or field_definition.is_non_string_iterable:\n            # filters out ellipsis from tuple[int, ...] type annotations\n            inner_types = (f for f in field_definition.inner_types if f.annotation is not Ellipsis)\n            items = list(map(self.for_field_definition, inner_types or ()))\n    \n            return Schema(\n                type=OpenAPIType.ARRAY,\n>               items=Schema(one_of=items) if len(items) > 1 else items[0],\n            )\nE           IndexError: list index out of range\n\nlitestar/_openapi/schema_generation/schema.py:483: IndexError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_unhashable_literal_default\n========================= 3 failed, 4 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/typescript_converter/converter.py-convert_openapi_to_typescript": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_openapi/test_typescript_converter/test_converter.py F    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_openapi_to_typescript_converter _____________________\n\nperson_controller = <class 'tests.unit.test_openapi.conftest.create_person_controller.<locals>.PersonController'>\npet_controller = <class 'tests.unit.test_openapi.conftest.create_pet_controller.<locals>.PetController'>\n\n    def test_openapi_to_typescript_converter(person_controller: Type[Controller], pet_controller: Type[Controller]) -> None:\n        BaseFactory.seed_random(1)\n        app = Litestar(route_handlers=[person_controller, pet_controller])\n        assert app.openapi_schema\n    \n>       result = convert_openapi_to_typescript(openapi_schema=app.openapi_schema)\n\ntests/unit/test_openapi/test_typescript_converter/test_converter.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nopenapi_schema = OpenAPI(info=Info(title='Litestar API', version='1.0.0', summary=None, description=None, terms_of_service=None, contac...one, security_schemes=None, links=None, callbacks=None, path_items=None), security=None, tags=None, external_docs=None)\nnamespace = 'API'\n\n    def convert_openapi_to_typescript(openapi_schema: OpenAPI, namespace: str = \"API\") -> TypeScriptNamespace:\n        \"\"\"Convert an OpenAPI Schema instance to a TypeScript namespace. This function is the main entry point for the\n        TypeScript converter.\n    \n        Args:\n            openapi_schema: An OpenAPI Schema instance.\n            namespace: The namespace to use.\n    \n        Returns:\n            A TypeScript namespace representing the generated types.\n        \"\"\"\n        components = openapi_schema.components\n        typescript_interfaces = []\n    \n        # Parse each path in the OpenAPI schema\n        for path, path_item in openapi_schema.paths.items():\n            # Parse operations in path item\n>           for http_method, operation in path_item.operations.items():\nE           AttributeError: 'PathItem' object has no attribute 'operations'. Did you mean: 'options'?\n\nlitestar/_openapi/typescript_converter/converter.py:271: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_converter.py::test_openapi_to_typescript_converter\n======================== 1 failed, 2 warnings in 0.12s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/typescript_converter/types.py-write": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py . [ 11%]\n.FF.F...                                                                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_typescript_named_interface ________________________\n\n    def test_typescript_named_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n>       assert interface.write() == \"export interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\"\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptInterface(name='MyInterface', properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript interface.\n    \n        Example:\n            export interface MyInterface {\n                key: string;\n                optional?: number;\n            };\n    \n        Returns:\n            A typescript string\n        \"\"\"\n>       interface = TypeScriptAnonymousInterface(properties=self.properties)\nE       TypeError: Can't instantiate abstract class TypeScriptAnonymousInterface with abstract method write\n\nlitestar/_openapi/typescript_converter/types.py:229: TypeError\n__________________________ test_typescript_namespace ___________________________\n\n    def test_typescript_namespace() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n    \n        enum = TypeScriptEnum(name=\"MyEnum\", values=((\"FIRST\", \"a\"), (\"SECOND\", \"b\")))\n        namespace = TypeScriptNamespace(\"MyNamespace\", values=(interface, enum))\n    \n>       assert (\n            namespace.write()\n            == 'export namespace MyNamespace {\\n\\texport enum MyEnum {\\n\\tFIRST = \"a\",\\n\\tSECOND = \"b\",\\n};\\n\\n\\texport interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\\n};'\n        )\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/typescript_converter/types.py:314: in write\n    members = \"\\t\" + \"\\n\\n\\t\".join([value.write() for value in sorted(self.values, key=lambda el: el.name)])\nlitestar/_openapi/typescript_converter/types.py:314: in <listcomp>\n    members = \"\\t\" + \"\\n\\n\\t\".join([value.write() for value in sorted(self.values, key=lambda el: el.name)])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptInterface(name='MyInterface', properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript interface.\n    \n        Example:\n            export interface MyInterface {\n                key: string;\n                optional?: number;\n            };\n    \n        Returns:\n            A typescript string\n        \"\"\"\n>       interface = TypeScriptAnonymousInterface(properties=self.properties)\nE       TypeError: Can't instantiate abstract class TypeScriptAnonymousInterface with abstract method write\n\nlitestar/_openapi/typescript_converter/types.py:229: TypeError\n_____________________ test_typescript_anonymous_interface ______________________\n\n    def test_typescript_anonymous_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n>       interface = TypeScriptAnonymousInterface(properties=(first_prop, second_prop))\nE       TypeError: Can't instantiate abstract class TypeScriptAnonymousInterface with abstract method write\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:64: TypeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_named_interface\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_namespace\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_anonymous_interface\n=================== 3 failed, 6 passed, 2 warnings in 0.09s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/testing/helpers.py-create_test_client": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_static_files/test_create_static_router.py ..             [100%]\n\n============================== 2 passed in 0.08s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/testing/client/sync_client.py-websocket_connect": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/examples/test_websockets.py F                                      [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_custom_websocket_class __________________________\n\n    def test_custom_websocket_class():\n        client = TestClient(app=custom_websocket_class_app)\n    \n>       with client.websocket_connect(\"/\") as ws:\n\ntests/examples/test_websockets.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.testing.client.sync_client.TestClient object at 0x7fe126a0e7a0>\nurl = '/', subprotocols = (), params = None, headers = None, cookies = None\nauth = <httpx._client.UseClientDefault object at 0x7fe127678220>\nfollow_redirects = False, timeout = None, extensions = None\n\n    def websocket_connect(\n        self,\n        url: str,\n        subprotocols: Sequence[str] = (),\n        params: QueryParamTypes = None,\n        headers: HeaderTypes = None,\n        cookies: CookieTypes = None,\n        auth: AuthTypes = USE_CLIENT_DEFAULT,\n        follow_redirects: bool = False,\n        timeout: TimeoutTypes = None,\n        extensions: dict = None\n    ) -> WebSocketTestSession:\n        \"\"\"Sends a GET request to establish a websocket connection.\n    \n        Args:\n            url: Request URL.\n            subprotocols: Websocket subprotocols.\n            params: Query parameters.\n            headers: Request headers.\n            cookies: Request cookies.\n            auth: Auth headers.\n            follow_redirects: Whether to follow redirects.\n            timeout: Request timeout.\n            extensions: Dictionary of ASGI extensions.\n    \n        Returns:\n            A `WebSocketTestSession <litestar.testing.WebSocketTestSession>` instance.\n        \"\"\"\n        request_headers = self.headers.copy()\n        if headers:\n            request_headers.update(headers)\n    \n        transport = TestClientTransport(\n            client=self,\n>           raise_server_exceptions=self.raise_server_exceptions,\n            root_path=self.root_path,\n            is_websocket=True\n        )\nE       AttributeError: 'TestClient' object has no attribute 'raise_server_exceptions'\n\nlitestar/testing/client/sync_client.py:140: AttributeError\n=========================== short test summary info ============================\nFAILED tests/examples/test_websockets.py::test_custom_websocket_class - Attri...\n============================== 1 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/contrib/pydantic/pydantic_schema_plugin.py-for_pydantic_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py FFFFF        [100%]\n\n=================================== FAILURES ===================================\n____________ test_exclude_private_fields[V1ModelWithPrivateFields] _____________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1ModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1ModelWithPrivateFields'>, annot...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc1513dc300>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n        \"\"\"Create a schema object for a given pydantic model class.\n    \n        Args:\n            field_definition: FieldDefinition instance.\n            schema_creator: An instance of the schema creator class\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Ensure that the schema creator has matching alias preferences\n        if schema_creator.prefer_alias != cls.prefer_alias:\n            schema_creator.prefer_alias = True\n    \n        # Create field definitions for computed fields in the pydantic model\n>       computed_fields = create_field_definitions_for_computed_fields(field_definition.annotation)\nE       TypeError: create_field_definitions_for_computed_fields() missing 1 required positional argument: 'prefer_alias'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: TypeError\n_________ test_exclude_private_fields[V1GenericModelWithPrivateFields] _________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1GenericModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1GenericModelWithPrivateFields'>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc1514140c0>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n        \"\"\"Create a schema object for a given pydantic model class.\n    \n        Args:\n            field_definition: FieldDefinition instance.\n            schema_creator: An instance of the schema creator class\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Ensure that the schema creator has matching alias preferences\n        if schema_creator.prefer_alias != cls.prefer_alias:\n            schema_creator.prefer_alias = True\n    \n        # Create field definitions for computed fields in the pydantic model\n>       computed_fields = create_field_definitions_for_computed_fields(field_definition.annotation)\nE       TypeError: create_field_definitions_for_computed_fields() missing 1 required positional argument: 'prefer_alias'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: TypeError\n____________ test_exclude_private_fields[V2ModelWithPrivateFields] _____________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2ModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2ModelWithPrivateFields'>, annot...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc1513dd5c0>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n        \"\"\"Create a schema object for a given pydantic model class.\n    \n        Args:\n            field_definition: FieldDefinition instance.\n            schema_creator: An instance of the schema creator class\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Ensure that the schema creator has matching alias preferences\n        if schema_creator.prefer_alias != cls.prefer_alias:\n            schema_creator.prefer_alias = True\n    \n        # Create field definitions for computed fields in the pydantic model\n>       computed_fields = create_field_definitions_for_computed_fields(field_definition.annotation)\nE       TypeError: create_field_definitions_for_computed_fields() missing 1 required positional argument: 'prefer_alias'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: TypeError\n_________ test_exclude_private_fields[V2GenericModelWithPrivateFields] _________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2GenericModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2GenericModelWithPrivateFields'>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc1514562c0>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n        \"\"\"Create a schema object for a given pydantic model class.\n    \n        Args:\n            field_definition: FieldDefinition instance.\n            schema_creator: An instance of the schema creator class\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Ensure that the schema creator has matching alias preferences\n        if schema_creator.prefer_alias != cls.prefer_alias:\n            schema_creator.prefer_alias = True\n    \n        # Create field definitions for computed fields in the pydantic model\n>       computed_fields = create_field_definitions_for_computed_fields(field_definition.annotation)\nE       TypeError: create_field_definitions_for_computed_fields() missing 1 required positional argument: 'prefer_alias'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: TypeError\n_________________________ test_v2_constrained_secrets __________________________\n\n    def test_v2_constrained_secrets() -> None:\n        # https://github.com/litestar-org/litestar/issues/3148\n        class Model(pydantic_v2.BaseModel):\n            string: pydantic_v2.SecretStr = pydantic_v2.Field(min_length=1)\n            bytes_: pydantic_v2.SecretBytes = pydantic_v2.Field(min_length=1)\n    \n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(Model), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.test_v2_constrained_secrets.<loca...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc1514de900>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n        \"\"\"Create a schema object for a given pydantic model class.\n    \n        Args:\n            field_definition: FieldDefinition instance.\n            schema_creator: An instance of the schema creator class\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Ensure that the schema creator has matching alias preferences\n        if schema_creator.prefer_alias != cls.prefer_alias:\n            schema_creator.prefer_alias = True\n    \n        # Create field definitions for computed fields in the pydantic model\n>       computed_fields = create_field_definitions_for_computed_fields(field_definition.annotation)\nE       TypeError: create_field_definitions_for_computed_fields() missing 1 required positional argument: 'prefer_alias'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V1ModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V1GenericModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V2ModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V2GenericModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_v2_constrained_secrets\n============================== 5 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_kwargs/cleanup.py-cleanup": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_kwargs/test_cleanup_group.py FFFF                        [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_add_on_closed_raises ___________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7f2b79db86d0>\nasync_generator = <async_generator object async_generator.<locals>.func at 0x7f2b79daa440>\n\n    async def test_add_on_closed_raises(\n        generator: Generator[str, None, None], async_generator: AsyncGenerator[str, None]\n    ) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n        await group.cleanup()\n    \n>       with pytest.raises(RuntimeError):\nE       Failed: DID NOT RAISE <class 'RuntimeError'>\n\ntests/unit/test_kwargs/test_cleanup_group.py:90: Failed\n____________________________ test_cleanup_multiple _____________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7f2b79cb8e40>\nasync_generator = <async_generator object async_generator.<locals>.func at 0x7f2b79daa3c0>\ncleanup_mock = <MagicMock id='139824703749808'>\nasync_cleanup_mock = <MagicMock id='139824703741216'>\n\n    async def test_cleanup_multiple(\n        generator: Generator[str, None, None],\n        async_generator: AsyncGenerator[str, None],\n        cleanup_mock: MagicMock,\n        async_cleanup_mock: MagicMock,\n    ) -> None:\n        next(generator)\n        await async_next(async_generator)\n        group = DependencyCleanupGroup([generator, async_generator])\n    \n        await group.cleanup()\n    \n        cleanup_mock.assert_called_once()\n        async_cleanup_mock.assert_called_once()\n>       assert group._closed\nE       assert False\nE        +  where False = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7f2b79c34af0>._closed\n\ntests/unit/test_kwargs/test_cleanup_group.py:70: AssertionError\n________________________ test_cleanup_on_closed_raises _________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7f2b79cb8f90>\n\n    async def test_cleanup_on_closed_raises(generator: Generator[str, None, None]) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n        await group.cleanup()\n>       with pytest.raises(RuntimeError):\nE       Failed: DID NOT RAISE <class 'RuntimeError'>\n\ntests/unit/test_kwargs/test_cleanup_group.py:78: Failed\n_________________________________ test_cleanup _________________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7f2b79cb9770>\ncleanup_mock = <MagicMock id='139824704099168'>\n\n    async def test_cleanup(generator: Generator[str, None, None], cleanup_mock: MagicMock) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n        await group.cleanup()\n    \n        cleanup_mock.assert_called_once()\n>       assert group._closed\nE       assert False\nE        +  where False = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7f2b79c90c40>._closed\n\ntests/unit/test_kwargs/test_cleanup_group.py:53: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_add_on_closed_raises\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_multiple - ...\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_on_closed_raises\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup - assert False\n============================== 4 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_asgi/routing_trie/mapping.py-build_route_middleware_stack": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py FFF               [100%]\n\n=================================== FAILURES ===================================\n_______________ test_build_route_middleware_stack_no_middleware ________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fb4a76c76a0>\n\n    def test_build_route_middleware_stack_no_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # if there is no middleware for the route, then we don't need to wrap route.handle in\n        # exception handling middleware. Exceptions can safely be caught by the outermost exception\n        # handling middleware.\n    \n        @get(\"/\")\n        async def handler() -> None:\n            pass\n    \n>       app = Litestar(route_handlers=[handler], openapi_config=None)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7fb4a76cecd0>\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb4a74cc510>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x5623a4a2d1f0>\n\n    def build_route_middleware_stack(\n        app: Litestar,\n        route: HTTPRoute | WebSocketRoute | ASGIRoute,\n        route_handler: RouteHandlerType\n    ) -> ASGIApp:\n        \"\"\"Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n    \n        # Start with the final ASGI application from the route handler\n>       asgi_app = route_handler.asgi_handler()\nE       AttributeError: 'get' object has no attribute 'asgi_handler'\n\nlitestar/_asgi/routing_trie/mapping.py:188: AttributeError\n______________ test_build_route_middleware_stack_with_middleware _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fb4a74f4280>\n\n    def test_build_route_middleware_stack_with_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # proves that if there is middleware, the route handler is wrapped in the exception handling\n        # middleware, before being wrapped in the middleware stack.\n        mock_middleware = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[mock_middleware])\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7fb4a761d780>\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb4a7576f10>\nroute_handler = <litestar.handlers.http_handlers.base.HTTPRouteHandler object at 0x5623a4aab3c0>\n\n    def build_route_middleware_stack(\n        app: Litestar,\n        route: HTTPRoute | WebSocketRoute | ASGIRoute,\n        route_handler: RouteHandlerType\n    ) -> ASGIApp:\n        \"\"\"Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n    \n        # Start with the final ASGI application from the route handler\n>       asgi_app = route_handler.asgi_handler()\nE       AttributeError: 'HTTPRouteHandler' object has no attribute 'asgi_handler'\n\nlitestar/_asgi/routing_trie/mapping.py:188: AttributeError\n_________ test_build_route_middleware_stack_with_starlette_middleware __________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fb4a74cb550>\n\n    def test_build_route_middleware_stack_with_starlette_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # test our support for starlette's Middleware class\n        class Middleware:\n            \"\"\"A Starlette ``Middleware`` class.\n    \n            See https://github.com/encode/starlette/blob/23c81da94b57701eabd43f582093442e6811f81d/starlette/middleware/__init__.py#L4-L17\n            \"\"\"\n    \n            def __init__(self, cls: Any, **options: Any) -> None:\n                self.cls = cls\n                self.options = options\n    \n            def __iter__(self) -> Iterator[Any]:\n                as_tuple = (self.cls, self.options)\n                return iter(as_tuple)\n    \n        mock_middleware = MagicMock()\n        mock_middleware_arg = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[Middleware(mock_middleware, arg=mock_middleware_arg)])  # type: ignore[list-item]\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7fb4a761e320>\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb4a759af10>\nroute_handler = <litestar.handlers.http_handlers.base.HTTPRouteHandler object at 0x5623a4ab2e80>\n\n    def build_route_middleware_stack(\n        app: Litestar,\n        route: HTTPRoute | WebSocketRoute | ASGIRoute,\n        route_handler: RouteHandlerType\n    ) -> ASGIApp:\n        \"\"\"Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n    \n        # Start with the final ASGI application from the route handler\n>       asgi_app = route_handler.asgi_handler()\nE       AttributeError: 'HTTPRouteHandler' object has no attribute 'asgi_handler'\n\nlitestar/_asgi/routing_trie/mapping.py:188: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_no_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_starlette_middleware\n============================== 3 failed in 0.18s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/signature.py-from_fn": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 12 items\n\ntests/unit/test_signature/test_validation.py F                           [  8%]\ntests/unit/test_response/test_response_to_asgi_response.py FF            [ 25%]\ntests/unit/test_signature/test_parsing.py FF                             [ 41%]\ntests/unit/test_utils/test_signature.py F                                [ 50%]\ntests/unit/test_signature/test_parsing.py FF                             [ 66%]\ntests/unit/test_signature/test_validation.py FFF                         [ 91%]\ntests/unit/test_signature/test_parsing.py F                              [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_create_signature_validation _______________________\n\n    def test_create_signature_validation() -> None:\n        @get()\n        def my_fn(typed: int, untyped) -> None:  # type: ignore[no-untyped-def]\n            pass\n    \n        with pytest.raises(ImproperlyConfiguredException):\n            SignatureModel.create(\n                dependency_name_set=set(),\n                fn=my_fn.fn,\n                data_dto=None,\n>               parsed_signature=ParsedSignature.from_fn(my_fn.fn, {}),\n                type_decoders=[],\n            )\n\ntests/unit/test_signature/test_validation.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_create_signature_validation.<locals>.my_fn at 0x7ff410498e50>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n____________________ test_to_response_async_await[asyncio] _____________________\n\nanyio_backend = 'asyncio'\n\n    async def test_to_response_async_await(anyio_backend: str) -> None:\n        @route(http_method=HttpMethod.POST, path=\"/person\")\n        async def handler(data: DataclassPerson) -> DataclassPerson:\n            assert isinstance(data, DataclassPerson)\n            return data\n    \n        person_instance = DataclassPersonFactory.build()\n        handler._signature_model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=handler.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(handler.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_response/test_response_to_asgi_response.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_to_response_async_await.<locals>.handler at 0x7ff40fe38d30>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n______________________ test_to_response_async_await[trio] ______________________\n\nanyio_backend = 'trio'\n\n    async def test_to_response_async_await(anyio_backend: str) -> None:\n        @route(http_method=HttpMethod.POST, path=\"/person\")\n        async def handler(data: DataclassPerson) -> DataclassPerson:\n            assert isinstance(data, DataclassPerson)\n            return data\n    \n        person_instance = DataclassPersonFactory.build()\n        handler._signature_model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=handler.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(handler.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_response/test_response_to_asgi_response.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_to_response_async_await.<locals>.handler at 0x7ff40fe38af0>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n_________________ test_field_definition_is_non_string_iterable _________________\n\n    def test_field_definition_is_non_string_iterable() -> None:\n        def fn(a: Iterable[int], b: Optional[Iterable[int]]) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_field_definition_is_non_string_iterable.<locals>.fn at 0x7ff40fe3a830>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n____________ test_create_function_signature_model_parameter_parsing ____________\n\n    def test_create_function_signature_model_parameter_parsing() -> None:\n        @get()\n        def my_fn(a: int, b: str, c: Optional[bytes], d: bytes = b\"123\", e: Optional[dict] = None) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=my_fn.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(my_fn.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_create_function_signature_model_parameter_parsing.<locals>.my_fn at 0x7ff40fe389d0>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n____________________________ test_parsed_signature _____________________________\n\n    def test_parsed_signature() -> None:\n        \"\"\"Test ParsedSignature.\"\"\"\n    \n        def fn(foo: int, bar: Optional[List[int]] = None) -> None: ...\n    \n>       parsed_sig = ParsedSignature.from_fn(fn, get_fn_type_hints(fn))\n\ntests/unit/test_utils/test_signature.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_parsed_signature.<locals>.fn at 0x7ff40fe3b250>\nsignature_namespace = {'bar': typing.Optional[typing.List[int]], 'foo': <class 'int'>, 'return': <class 'NoneType'>}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n_________________ test_field_definition_is_non_string_sequence _________________\n\n    def test_field_definition_is_non_string_sequence() -> None:\n        def fn(a: Sequence[int], b: Optional[Sequence[int]]) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, signature_namespace={}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_field_definition_is_non_string_sequence.<locals>.fn at 0x7ff40fe39360>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n__________________________ test_dto_data_typed_as_any __________________________\n\n    def test_dto_data_typed_as_any() -> None:\n        \"\"\"DTOs already validate the payload, we don't need the signature model to do it too.\n    \n        https://github.com/litestar-org/litestar/issues/2149\n        \"\"\"\n    \n        @dataclass\n        class Test:\n            a: str\n    \n        dto = DataclassDTO[Test]\n    \n        def fn(data: Test) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=dto,\n>           parsed_signature=ParsedSignature.from_fn(fn, signature_namespace={\"Test\": Test}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_dto_data_typed_as_any.<locals>.fn at 0x7ff40fe39480>\nsignature_namespace = {'Test': <class 'tests.unit.test_signature.test_parsing.test_dto_data_typed_as_any.<locals>.Test'>}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n_____________________ test_validation_error_exception_key ______________________\n\n    def test_validation_error_exception_key() -> None:\n        from dataclasses import dataclass\n    \n        @dataclass\n        class OtherChild:\n            val: List[int]\n    \n        @dataclass\n        class Child:\n            val: int\n            other_val: int\n    \n        @dataclass\n        class Parent:\n            child: Child\n            other_child: OtherChild\n    \n        @get(\"/\")\n        def handler(data: Parent) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=handler,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(handler.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_validation.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_validation_error_exception_key.<locals>.handler at 0x7ff40fe3b6d0>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n________ test_parse_values_from_connection_kwargs_with_multiple_errors _________\n\n    def test_parse_values_from_connection_kwargs_with_multiple_errors() -> None:\n        def fn(a: Annotated[int, Parameter(gt=5)], b: Annotated[int, Parameter(lt=5)]) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_validation.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_parse_values_from_connection_kwargs_with_multiple_errors.<locals>.fn at 0x7ff40fe39240>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n_______________ test_parses_values_from_connection_kwargs_raises _______________\n\n    def test_parses_values_from_connection_kwargs_raises() -> None:\n        def fn(a: int) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_validation.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_parses_values_from_connection_kwargs_raises.<locals>.fn at 0x7ff40fe38b80>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n________ test_create_function_signature_model_ignore_return_annotation _________\n\n    def test_create_function_signature_model_ignore_return_annotation() -> None:\n        @get(path=\"/health\", status_code=HTTP_204_NO_CONTENT)\n        async def health_check() -> None:\n            return None\n    \n        signature_model_type = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=health_check.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(health_check.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_create_function_signature_model_ignore_return_annotation.<locals>.health_check at 0x7ff40fc94ca0>\nsignature_namespace = {}\n\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n        \"\"\"Parse a function signature.\n    \n        Args:\n            fn: Any callable.\n            signature_namespace: mapping of names to types for forward reference resolution\n    \n        Returns:\n            ParsedSignature\n        \"\"\"\n        # Obtain the function's signature using the inspect module.\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:214: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_signature/test_validation.py::test_create_signature_validation\nFAILED tests/unit/test_response/test_response_to_asgi_response.py::test_to_response_async_await[asyncio]\nFAILED tests/unit/test_response/test_response_to_asgi_response.py::test_to_response_async_await[trio]\nFAILED tests/unit/test_signature/test_parsing.py::test_field_definition_is_non_string_iterable\nFAILED tests/unit/test_signature/test_parsing.py::test_create_function_signature_model_parameter_parsing\nFAILED tests/unit/test_utils/test_signature.py::test_parsed_signature - NameE...\nFAILED tests/unit/test_signature/test_parsing.py::test_field_definition_is_non_string_sequence\nFAILED tests/unit/test_signature/test_parsing.py::test_dto_data_typed_as_any\nFAILED tests/unit/test_signature/test_validation.py::test_validation_error_exception_key\nFAILED tests/unit/test_signature/test_validation.py::test_parse_values_from_connection_kwargs_with_multiple_errors\nFAILED tests/unit/test_signature/test_validation.py::test_parses_values_from_connection_kwargs_raises\nFAILED tests/unit/test_signature/test_parsing.py::test_create_function_signature_model_ignore_return_annotation\n============================== 12 failed in 0.23s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/deprecation.py-deprecated": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_utils/test_deprecation.py .                              [100%]\n\n============================== 1 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/sync.py-ensure_async_callable": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 6 items\n\ntests/unit/test_utils/test_sync.py ......                                [100%]\n\n============================== 6 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/typing.py-expand_type_var_in_type_hint": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_typing.py ..........                          [100%]\n\n============================== 10 passed in 0.09s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/dataclass.py-simple_asdict": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_datastructures/test_headers.py ...                       [100%]\n\n============================== 3 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/path.py-join_paths": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_path.py ..........                            [100%]\n\n============================== 10 passed in 0.07s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/helpers.py-get_name": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 11 items\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py .               [  9%]\ntests/unit/test_utils/test_helpers.py ......                             [ 63%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py ..           [ 81%]\ntests/unit/test_openapi/test_schema.py ..                                [100%]\n\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 11 passed, 2 warnings in 0.08s ========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/predicates.py-is_dataclass_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_utils/test_dataclass.py .                                [100%]\n\n============================== 1 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/predicates.py-is_class_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_utils/test_predicates.py ___________\ntests/unit/test_utils/test_predicates.py:204: in <module>\n    (Annotated[ClassVar[int], \"abc\"], True),\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1677: in __class_getitem__\n    origin = _type_check(params[0], msg)\n/usr/local/lib/python3.10/typing.py:167: in _type_check\n    raise TypeError(f\"{arg} is not valid as type argument\")\nE   TypeError: typing.ClassVar[int] is not valid as type argument\n=========================== short test summary info ============================\nERROR tests/unit/test_utils/test_predicates.py - TypeError: typing.ClassVar[i...\n=============================== 1 error in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_utils/test_predicates.py::test_is_class_var\n\n"], "litestar-litestar/utils/module_loader.py-import_string": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_utils/test_module_loader.py ..F                          [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_import_string ______________________________\n\n    def test_import_string() -> None:\n        cls = import_string(\"litestar.config.compression.CompressionConfig\")\n        assert type(cls) == type(CompressionConfig)\n    \n        with pytest.raises(ImportError):\n>           _ = import_string(\"CompressionConfigNew\")\n\ntests/unit/test_utils/test_module_loader.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/utils/module_loader.py:62: in import_string\n    module = import_module(module_path)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1047: in _gcd_import\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = '', package = None, level = 0\n\n>   ???\nE   ValueError: Empty module name\n\n<frozen importlib._bootstrap>:981: ValueError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_module_loader.py::test_import_string - Valu...\n========================= 1 failed, 2 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/channels/backends/redis.py-unsubscribe": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_unsubscribe_without_subscription\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\n"], "litestar-litestar/channels/backends/redis.py-publish": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_stream_backend_expires\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_streams_backend_flushall\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_shutdown_leftover_messages\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_publish_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_publish_not_initialized_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-stream_events": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-get_history": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_psycopg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\n"], "litestar-litestar/dto/_backend.py-create_transfer_model_type": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._codegen_backend.DTOCodegenBackend object at 0x7f5fb19c8ae0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:435: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7f5fb189b040>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:435: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\n============================== 2 failed in 0.15s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_builtins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py ..       [100%]\n\n============================== 2 passed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_raw": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py ....     [100%]\n\n============================== 4 passed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-encode_data": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 6 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py .F.F.F   [100%]\n\n=================================== FAILURES ===================================\n__________________ test_backend_encode_data[default_backend] ___________________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7fe4dc0feda0>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_encode_data(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.encode_data(STRUCTURED)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fe4dc704c40>\ndata = DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n        \"\"\"Encode data into a ``LitestarEncodableType``.\n    \n        Args:\n            data: Data to encode.\n    \n        Returns:\n            Encoded data.\n        \"\"\"\n        encoded_data = _transfer_instance_data(\n            destination_type=self.model_type,\n            source_instance=data,\n            field_definitions=self.parsed_field_definitions,\n            is_data_field=self.is_data_field,\n        )\n>       return cast(LitestarEncodableType, encoded_data)\nE       NameError: name 'LitestarEncodableType' is not defined\n\nlitestar/dto/_backend.py:343: NameError\n_______ test_transfer_only_touches_included_attributes[default_backend] ________\n\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_transfer_only_touches_included_attributes(backend_cls: type[DTOBackend]) -> None:\n        \"\"\"Ensure attribute that are not included are never touched in any way during\n        transfer.\n    \n        https://github.com/litestar-org/litestar/issues/2125\n        \"\"\"\n        mock = MagicMock()\n    \n        @dataclass()\n        class Foo:\n            id: str\n            bar: str = \"\"\n    \n        class Factory(DataclassDTO):\n            config = DTOConfig(include={\"excluded\"})\n    \n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=Factory,\n            field_definition=TransferDTOFieldDefinition.from_annotation(Foo),\n            model_type=Foo,\n            wrapper_attribute_name=None,\n            is_data_field=False,\n        )\n    \n        Foo.bar = property(fget=lambda s: mock(return_value=\"\"), fset=lambda s, v: None)  # type: ignore[assignment]\n    \n>       backend.encode_data(Foo(id=\"1\"))\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:337: in encode_data\n    encoded_data = _transfer_instance_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndestination_type = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.test_transfer_only_touches_included_attributes.<locals>.Foo'>\nsource_instance = test_transfer_only_touches_included_attributes.<locals>.Foo(id='1', bar=<MagicMock name='mock()' id='140620921998016'>)\nfield_definitions = (TransferDTOFieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), origin=None, args=(), me... dto_field=DTOField(mark=None)), nested_field_info=None), serialization_name=None, is_partial=False, is_excluded=True))\nis_data_field = False\n\n    def _transfer_instance_data(\n        destination_type: type[Any],\n        source_instance: Any,\n        field_definitions: tuple[TransferDTOFieldDefinition, ...],\n        is_data_field: bool,\n    ) -> Any:\n        \"\"\"Create instance of ``destination_type`` with data from ``source_instance``.\n    \n        Args:\n            destination_type: the model type received by the DTO on type narrowing.\n            source_instance: primitive data that has been parsed and validated via the backend.\n            field_definitions: model field definitions.\n            is_data_field: whether the given field is a 'data' kwarg field.\n    \n        Returns:\n            Data parsed into ``model_type``.\n        \"\"\"\n        unstructured_data = {}\n    \n        for field_definition in field_definitions:\n            if not is_data_field:\n                if field_definition.is_excluded:\n                    continue\n            elif not (\n                field_definition.name in source_instance\n                if isinstance(source_instance, Mapping)\n                else hasattr(source_instance, field_definition.name)\n            ):\n                continue\n    \n            transfer_type = field_definition.transfer_type\n            source_value = (\n                source_instance[field_definition.name]\n                if isinstance(source_instance, Mapping)\n                else getattr(source_instance, field_definition.name)\n            )\n    \n            if field_definition.is_partial and is_data_field and source_value is UNSET:\n                continue\n    \n            unstructured_data[field_definition.name] = _transfer_type_data(\n                source_value=source_value,\n                transfer_type=transfer_type,\n                nested_as_dict=destination_type is dict,\n                is_data_field=is_data_field,\n            )\n    \n>       return destination_type(**unstructured_data)\nE       TypeError: test_transfer_only_touches_included_attributes.<locals>.Foo.__init__() missing 1 required positional argument: 'id'\n\nlitestar/dto/_backend.py:643: TypeError\n_____________ test_backend_encode_collection_data[default_backend] _____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7fe4db06f1c0>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_encode_collection_data(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.encode_data([STRUCTURED])\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:337: in encode_data\n    encoded_data = _transfer_instance_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndestination_type = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.DC'>\nsource_instance = [DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)]\nfield_definitions = (TransferDTOFieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=None, args=(), me...efinition=None, name=''), nested_field_info=None)), serialization_name=None, is_partial=False, is_excluded=False), ...)\nis_data_field = True\n\n    def _transfer_instance_data(\n        destination_type: type[Any],\n        source_instance: Any,\n        field_definitions: tuple[TransferDTOFieldDefinition, ...],\n        is_data_field: bool,\n    ) -> Any:\n        \"\"\"Create instance of ``destination_type`` with data from ``source_instance``.\n    \n        Args:\n            destination_type: the model type received by the DTO on type narrowing.\n            source_instance: primitive data that has been parsed and validated via the backend.\n            field_definitions: model field definitions.\n            is_data_field: whether the given field is a 'data' kwarg field.\n    \n        Returns:\n            Data parsed into ``model_type``.\n        \"\"\"\n        unstructured_data = {}\n    \n        for field_definition in field_definitions:\n            if not is_data_field:\n                if field_definition.is_excluded:\n                    continue\n            elif not (\n                field_definition.name in source_instance\n                if isinstance(source_instance, Mapping)\n                else hasattr(source_instance, field_definition.name)\n            ):\n                continue\n    \n            transfer_type = field_definition.transfer_type\n            source_value = (\n                source_instance[field_definition.name]\n                if isinstance(source_instance, Mapping)\n                else getattr(source_instance, field_definition.name)\n            )\n    \n            if field_definition.is_partial and is_data_field and source_value is UNSET:\n                continue\n    \n            unstructured_data[field_definition.name] = _transfer_type_data(\n                source_value=source_value,\n                transfer_type=transfer_type,\n                nested_as_dict=destination_type is dict,\n                is_data_field=is_data_field,\n            )\n    \n>       return destination_type(**unstructured_data)\nE       TypeError: DC.__init__() missing 4 required positional arguments: 'a', 'nested', 'nested_list', and 'nested_mapping'\n\nlitestar/dto/_backend.py:643: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_encode_data[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_transfer_only_touches_included_attributes[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_encode_collection_data[default_backend]\n========================= 3 failed, 3 passed in 0.21s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-_create_transfer_model_type_annotation": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py F.FFF.FFF   [100%]\n\n=================================== FAILURES ===================================\n_______ test_create_transfer_model_type_annotation_tuple_type_not_nested _______\n\n    def test_create_transfer_model_type_annotation_tuple_type_not_nested() -> None:\n        transfer_type = TupleType(\n            field_definition=FieldDefinition.from_annotation(Tuple[str, int]),\n            inner_types=(\n                SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n                SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            ),\n            has_nested=False,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Tuple[str, int]\nE       AssertionError: assert tuple[SimpleType(field_definition=FieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), or...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)] == typing.Tuple[str, int]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:107: AssertionError\n______ test_create_transfer_model_type_annotation_mapping_type_not_nested ______\n\n    def test_create_transfer_model_type_annotation_mapping_type_not_nested() -> None:\n        transfer_type = MappingType(\n            field_definition=FieldDefinition.from_annotation(Dict[str, int]),\n            key_type=SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n            value_type=SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            has_nested=False,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Dict[str, int]\nE       AssertionError: assert dict[SimpleType(field_definition=FieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), ori...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)] == typing.Dict[str, int]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:80: AssertionError\n_________ test_create_transfer_model_type_annotation_tuple_type_nested _________\n\n    def test_create_transfer_model_type_annotation_tuple_type_nested() -> None:\n        transfer_type = TupleType(\n            field_definition=FieldDefinition.from_annotation(Tuple[str, DataModel]),\n            inner_types=(\n                SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n                SimpleType(\n                    field_definition=FieldDefinition.from_annotation(DataModel),\n                    nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n                ),\n            ),\n            has_nested=True,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Tuple[str, TransferModel]\nE       AssertionError: assert tuple[SimpleType(field_definition=FieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), or...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))] == typing.Tuple[str, tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:123: AssertionError\n_____ test_create_transfer_model_type_annotation_unexpected_transfer_type ______\n\n    def test_create_transfer_model_type_annotation_unexpected_transfer_type() -> None:\n        transfer_type = CompositeType(field_definition=FieldDefinition.from_annotation(Union[str, int]), has_nested=False)\n        with pytest.raises(RuntimeError):\n>           _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = CompositeType(field_definition=FieldDefinition(raw=typing.Union[str, int], annotation=typing.Union[str, int], type_wra...definition=None, name='')), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), has_nested=False)\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n        \"\"\"Create a type annotation for a transfer model.\n    \n        Uses the parsed type that originates from the data model and the transfer model generated to represent a nested\n        type to reconstruct the type annotation for the transfer model.\n        \"\"\"\n        if isinstance(transfer_type, SimpleType):\n            if transfer_type.nested_field_info:\n                return transfer_type.nested_field_info.model\n            return transfer_type.field_definition.annotation\n    \n        if isinstance(transfer_type, CollectionType):\n            return transfer_type.field_definition.instantiable_origin[transfer_type.inner_type]\n    \n        if isinstance(transfer_type, MappingType):\n            return transfer_type.field_definition.instantiable_origin[\n                transfer_type.key_type, transfer_type.value_type\n            ]\n    \n        if isinstance(transfer_type, TupleType):\n            return transfer_type.field_definition.instantiable_origin[\n                tuple(inner_type for inner_type in transfer_type.inner_types)\n            ]\n    \n        if isinstance(transfer_type, UnionType):\n            return transfer_type.field_definition.instantiable_origin[\n                tuple(inner_type for inner_type in transfer_type.inner_types)\n            ]\n    \n>       raise TypeError(f\"Unknown transfer type: {transfer_type}\")\nE       TypeError: Unknown transfer type: CompositeType(field_definition=FieldDefinition(raw=typing.Union[str, int], annotation=typing.Union[str, int], type_wrappers=set(), origin=typing.Union, args=(<class 'str'>, <class 'int'>), metadata=(), instantiable_origin=typing.Union, safe_generic_origin=typing.Union, inner_types=(FieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), origin=None, args=(), metadata=(), instantiable_origin=None, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=None, args=(), metadata=(), instantiable_origin=None, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), has_nested=False)\n\nlitestar/dto/_backend.py:913: TypeError\n______ test_create_transfer_model_type_annotation_collection_type_nested _______\n\n    def test_create_transfer_model_type_annotation_collection_type_nested() -> None:\n        transfer_type = CollectionType(\n            field_definition=FieldDefinition.from_annotation(List[DataModel]),\n            inner_type=SimpleType(\n                field_definition=FieldDefinition.from_annotation(DataModel),\n                nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n            ),\n            has_nested=True,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == List[TransferModel]\nE       AssertionError: assert list[SimpleType(field_definition=FieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))] == typing.List[tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:69: AssertionError\n____ test_create_transfer_model_type_annotation_collection_type_not_nested _____\n\n    def test_create_transfer_model_type_annotation_collection_type_not_nested() -> None:\n        transfer_type = CollectionType(\n            field_definition=FieldDefinition.from_annotation(List[int]),\n            inner_type=SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            has_nested=False,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == List[int]\nE       AssertionError: assert list[SimpleType(field_definition=FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), ori...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)] == typing.List[int]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:56: AssertionError\n________ test_create_transfer_model_type_annotation_mapping_type_nested ________\n\n    def test_create_transfer_model_type_annotation_mapping_type_nested() -> None:\n        transfer_type = MappingType(\n            field_definition=FieldDefinition.from_annotation(Dict[str, DataModel]),\n            key_type=SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n            value_type=SimpleType(\n                field_definition=FieldDefinition.from_annotation(DataModel),\n                nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n            ),\n            has_nested=True,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Dict[str, TransferModel]\nE       AssertionError: assert dict[SimpleType(field_definition=FieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), ori...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))] == typing.Dict[str, tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:94: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_tuple_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_mapping_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_tuple_type_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_unexpected_transfer_type\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_collection_type_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_collection_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_mapping_type_nested\n========================= 7 failed, 2 passed in 0.13s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/response/file.py-start_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_response/test_file_response.py FF                        [100%]\n\n=================================== FAILURES ===================================\n______________ test_file_response_with_missing_file_raises_error _______________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2465/test_file_response_with_missin0')\n\n    async def test_file_response_with_missing_file_raises_error(tmpdir: Path) -> None:\n        path = tmpdir / \"404.txt\"\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=path, filename=\"404.txt\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/response/file.py:215: in start_response\n    await send(start_event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n_ = {'headers': [(b'content-type', b'text/plain; charset=utf-8'), (b'content-disposition', b'attachment; filename=\"404.txt\"')], 'status': 200, 'type': 'http.response.start'}\n\n    async def empty_send(_: Message) -> NoReturn:  # pragma: no cover\n        \"\"\"Raise a ``RuntimeError``.\n    \n        Serves as a placeholder ``send`` function.\n    \n        Args:\n            _: An ASGI message\n    \n        Raises:\n            RuntimeError\n        \"\"\"\n>       raise RuntimeError()\nE       RuntimeError\n\nlitestar/connection/base.py:53: RuntimeError\n________________ test_file_response_with_directory_raises_error ________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2465/test_file_response_with_direct0')\n\n    async def test_file_response_with_directory_raises_error(tmpdir: Path) -> None:\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=tmpdir, filename=\"example.png\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/response/file.py:215: in start_response\n    await send(start_event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n_ = {'headers': [(b'content-type', b'image/png'), (b'content-disposition', b'attachment; filename=\"example.png\"')], 'status': 200, 'type': 'http.response.start'}\n\n    async def empty_send(_: Message) -> NoReturn:  # pragma: no cover\n        \"\"\"Raise a ``RuntimeError``.\n    \n        Serves as a placeholder ``send`` function.\n    \n        Args:\n            _: An ASGI message\n    \n        Raises:\n            RuntimeError\n        \"\"\"\n>       raise RuntimeError()\nE       RuntimeError\n\nlitestar/connection/base.py:53: RuntimeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_missing_file_raises_error\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_directory_raises_error\n============================== 2 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nsys:1: RuntimeWarning: coroutine 'FileSystemAdapter.info' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"], "litestar-litestar/connection/request.py-json": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 71 items\n\ntests/unit/test_dto/test_factory/test_integration.py ................... [ 26%]\n....................................................                     [100%]\n\n============================== 71 passed in 0.91s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/multi_dicts.py-close": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_datastructures/test_multi_dicts.py .                     [100%]\n\n============================== 1 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/url.py-from_scope": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_datastructures/test_url.py FF                            [100%]\n\n=================================== FAILURES ===================================\n________________________ test_url_from_scope_with_host _________________________\n\ncreate_scope = <function create_scope.<locals>.inner at 0x7f34daf901f0>\n\n    def test_url_from_scope_with_host(create_scope: Callable[..., \"Scope\"]) -> None:\n        scope = create_scope(headers=[(b\"host\", b\"testserver.local:42\")])\n    \n        url = URL.from_scope(scope)\n    \n>       assert url.netloc == \"testserver.local:42\"\nE       AssertionError: assert 'testserver' == 'testserver.local:42'\nE         \nE         - testserver.local:42\nE         + testserver\n\ntests/unit/test_datastructures/test_url.py:109: AssertionError\n_____________________________ test_url_from_scope ______________________________\n\ncreate_scope = <function create_scope.<locals>.inner at 0x7f34dab70160>\n\n    def test_url_from_scope(create_scope: Callable[..., \"Scope\"]) -> None:\n        scope = create_scope(\n            scheme=\"https\",\n            server=(\"testserver.local\", 70),\n            root_path=\"/foo\",\n            path=\"/bar\",\n            query_string=\"bar=baz\",\n            headers=[],\n        )\n    \n        url = URL.from_scope(scope)\n    \n        assert url.scheme == \"https\"\n        assert url.netloc == \"testserver.local:70\"\n>       assert url.path == \"/foo/bar\"\nE       AssertionError: assert '/bar' == '/foo/bar'\nE         \nE         - /foo/bar\nE         + /bar\n\ntests/unit/test_datastructures/test_url.py:100: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_url.py::test_url_from_scope_with_host\nFAILED tests/unit/test_datastructures/test_url.py::test_url_from_scope - Asse...\n============================== 2 failed in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/headers.py-to_header": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_datastructures/test_headers.py .                         [ 20%]\ntests/unit/test_response/test_response_headers.py ....                   [100%]\n\n============================== 5 passed in 0.14s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/middleware/session/server_side.py-delete": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_security/test_session_auth.py .                          [ 33%]\ntests/unit/test_middleware/test_session/test_server_side_backend.py ..   [100%]\n\n============================== 3 passed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "marimo-marimo/_islands/island_generator.py-add_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/_islands/test_island_generator.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n>       block1 = generator.add_code(\"import marimo as mo\")\n\ntests/_islands/test_island_generator.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fe6150fb400>\ncode = 'import marimo as mo', display_code = True, display_output = True\nis_raw = False, is_reactive = True\n\n    def add_code(\n        self,\n        code: str,\n        display_code: bool = True,\n        display_output: bool = True,\n        is_raw: bool = False,\n        is_reactive: bool = True,\n    ) -> MarimoIslandStub:\n        \"\"\"\n        Add a code cell to the app.\n    \n        *Args:*\n    \n        - code (str): The code to add to the app.\n        - display_code (bool): Whether to display the code in the HTML.\n        - display_output (bool): Whether to display the output in the HTML.\n        - is_raw (bool): Whether to handle the code without formatting.\n        - is_reactive (bool): Whether this code block will run with pyodide.\n    \n        *Returns:*\n    \n        - MarimoIslandStub: The stub representing the added code block.\n        \"\"\"\n        cell_id = self._app.cell_manager.create_cell_id()\n        stub = MarimoIslandStub(\n            display_code=display_code,\n            display_output=display_output,\n            is_reactive=is_reactive,\n            cell_id=cell_id,\n            app_id=self._app_id,\n            code=code,\n        )\n        self._stubs.append(stub)\n        if not is_raw:\n            code = dedent(code)\n    \n        # Add the code to the internal app\n>       cell = Cell(code=code, cell_id=cell_id)\nE       TypeError: Cell.__init__() got an unexpected keyword argument 'code'\n\nmarimo/_islands/island_generator.py:254: TypeError\n________________________________ test_add_code _________________________________\n\n    def test_add_code():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\n\ntests/_islands/test_island_generator.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fe614e6aaa0>\ncode = \"print('Hello, World!')\", display_code = True, display_output = True\nis_raw = False, is_reactive = True\n\n    def add_code(\n        self,\n        code: str,\n        display_code: bool = True,\n        display_output: bool = True,\n        is_raw: bool = False,\n        is_reactive: bool = True,\n    ) -> MarimoIslandStub:\n        \"\"\"\n        Add a code cell to the app.\n    \n        *Args:*\n    \n        - code (str): The code to add to the app.\n        - display_code (bool): Whether to display the code in the HTML.\n        - display_output (bool): Whether to display the output in the HTML.\n        - is_raw (bool): Whether to handle the code without formatting.\n        - is_reactive (bool): Whether this code block will run with pyodide.\n    \n        *Returns:*\n    \n        - MarimoIslandStub: The stub representing the added code block.\n        \"\"\"\n        cell_id = self._app.cell_manager.create_cell_id()\n        stub = MarimoIslandStub(\n            display_code=display_code,\n            display_output=display_output,\n            is_reactive=is_reactive,\n            cell_id=cell_id,\n            app_id=self._app_id,\n            code=code,\n        )\n        self._stubs.append(stub)\n        if not is_raw:\n            code = dedent(code)\n    \n        # Add the code to the internal app\n>       cell = Cell(code=code, cell_id=cell_id)\nE       TypeError: Cell.__init__() got an unexpected keyword argument 'code'\n\nmarimo/_islands/island_generator.py:254: TypeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\n\ntests/_islands/test_island_generator.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fe614e85b40>\ncode = \"print('Hello, World!')\", display_code = True, display_output = True\nis_raw = False, is_reactive = True\n\n    def add_code(\n        self,\n        code: str,\n        display_code: bool = True,\n        display_output: bool = True,\n        is_raw: bool = False,\n        is_reactive: bool = True,\n    ) -> MarimoIslandStub:\n        \"\"\"\n        Add a code cell to the app.\n    \n        *Args:*\n    \n        - code (str): The code to add to the app.\n        - display_code (bool): Whether to display the code in the HTML.\n        - display_output (bool): Whether to display the output in the HTML.\n        - is_raw (bool): Whether to handle the code without formatting.\n        - is_reactive (bool): Whether this code block will run with pyodide.\n    \n        *Returns:*\n    \n        - MarimoIslandStub: The stub representing the added code block.\n        \"\"\"\n        cell_id = self._app.cell_manager.create_cell_id()\n        stub = MarimoIslandStub(\n            display_code=display_code,\n            display_output=display_output,\n            is_reactive=is_reactive,\n            cell_id=cell_id,\n            app_id=self._app_id,\n            code=code,\n        )\n        self._stubs.append(stub)\n        if not is_raw:\n            code = dedent(code)\n    \n        # Add the code to the internal app\n>       cell = Cell(code=code, cell_id=cell_id)\nE       TypeError: Cell.__init__() got an unexpected keyword argument 'code'\n\nmarimo/_islands/island_generator.py:254: TypeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, islands!')\")\n\ntests/_islands/test_island_generator.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fe614e67010>\ncode = \"print('Hello, islands!')\", display_code = True, display_output = True\nis_raw = False, is_reactive = True\n\n    def add_code(\n        self,\n        code: str,\n        display_code: bool = True,\n        display_output: bool = True,\n        is_raw: bool = False,\n        is_reactive: bool = True,\n    ) -> MarimoIslandStub:\n        \"\"\"\n        Add a code cell to the app.\n    \n        *Args:*\n    \n        - code (str): The code to add to the app.\n        - display_code (bool): Whether to display the code in the HTML.\n        - display_output (bool): Whether to display the output in the HTML.\n        - is_raw (bool): Whether to handle the code without formatting.\n        - is_reactive (bool): Whether this code block will run with pyodide.\n    \n        *Returns:*\n    \n        - MarimoIslandStub: The stub representing the added code block.\n        \"\"\"\n        cell_id = self._app.cell_manager.create_cell_id()\n        stub = MarimoIslandStub(\n            display_code=display_code,\n            display_output=display_output,\n            is_reactive=is_reactive,\n            cell_id=cell_id,\n            app_id=self._app_id,\n            code=code,\n        )\n        self._stubs.append(stub)\n        if not is_raw:\n            code = dedent(code)\n    \n        # Add the code to the internal app\n>       cell = Cell(code=code, cell_id=cell_id)\nE       TypeError: Cell.__init__() got an unexpected keyword argument 'code'\n\nmarimo/_islands/island_generator.py:254: TypeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - TypeError: Cell...\nFAILED tests/_islands/test_island_generator.py::test_add_code - TypeError: Ce...\nFAILED tests/_islands/test_island_generator.py::test_build - TypeError: Cell....\nFAILED tests/_islands/test_island_generator.py::test_render_head - TypeError:...\n============================== 4 failed in 0.07s ===============================\n\n"], "marimo-marimo/_islands/island_generator.py-build": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_islands/test_island_generator.py FFF                              [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n        block1 = generator.add_code(\"import marimo as mo\")\n        block2 = generator.add_code(\"mo.md('Hello, islands!')\")\n    \n>       await generator.build()\n\ntests/_islands/test_island_generator.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_islands/island_generator.py:273: in build\n    cell_configs = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f22cdd807c0>\n\n    cell_configs = [\n>       CellConfig(cell_id=stub._cell_id, reactive=stub._is_reactive)\n        for stub in self._stubs\n    ]\nE   TypeError: CellConfig.__init__() got an unexpected keyword argument 'cell_id'\n\nmarimo/_islands/island_generator.py:274: TypeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, World!')\")\n    \n        # Check if the app is built successfully\n>       app = await generator.build()\n\ntests/_islands/test_island_generator.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_islands/island_generator.py:273: in build\n    cell_configs = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f22cdbf76d0>\n\n    cell_configs = [\n>       CellConfig(cell_id=stub._cell_id, reactive=stub._is_reactive)\n        for stub in self._stubs\n    ]\nE   TypeError: CellConfig.__init__() got an unexpected keyword argument 'cell_id'\n\nmarimo/_islands/island_generator.py:274: TypeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, islands!')\")\n>       await generator.build()\n\ntests/_islands/test_island_generator.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_islands/island_generator.py:273: in build\n    cell_configs = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f22cdea0580>\n\n    cell_configs = [\n>       CellConfig(cell_id=stub._cell_id, reactive=stub._is_reactive)\n        for stub in self._stubs\n    ]\nE   TypeError: CellConfig.__init__() got an unexpected keyword argument 'cell_id'\n\nmarimo/_islands/island_generator.py:274: TypeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - TypeError: Cell...\nFAILED tests/_islands/test_island_generator.py::test_build - TypeError: CellC...\nFAILED tests/_islands/test_island_generator.py::test_render_head - TypeError:...\n============================== 3 failed in 0.07s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-build_dataclass": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_utils/test_parse_dataclass.py ..                                  [100%]\n\n============================== 2 passed in 0.03s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-parse_raw": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_plugins/stateless/icon.py-icon": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_plugins/stateless/test_icon.py F                                  [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_mo_icon _________________________________\n\n    def test_mo_icon() -> None:\n>       assert (\n            icon(\"lucide:leaf\").text\n            == \"<iconify-icon icon='lucide:leaf' inline></iconify-icon>\"\n        )\n\ntests/_plugins/stateless/test_icon.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nicon_name = 'lucide:leaf', size = None, color = None, inline = True, flip = None\nrotate = None, style = None\n\n    @mddoc\n    def icon(icon_name: str, size: Union[int, float, None] = None, color: Optional[str] = None, inline: bool = True, flip: Optional[Literal['horizontal', 'vertical', 'both']] = None, rotate: Optional[Literal[90, 180, 270]] = None, style: Optional[dict] = None) -> Html:\n        \"\"\"\n        Displays an icon. These icons are referenced by name from the\n        [Iconify](https://iconify.design/) library.\n    \n        They are named in the format `icon-set:icon-name`, e.g.\n        `lucide:leaf`.\n    \n        Icons are lazily loaded from a CDN, so they will not be loaded when\n        not connected to the internet.\n    \n        These can be used in buttons, tabs, and other UI elements.\n    \n        **Args.**\n    \n        - `icon_name`: the name of the icon to display\n        - `size`: the size of the icon in pixels\n        - `color`: the color of the icon\n        - `inline`: whether to display the icon inline or as a block element\n        - `flip`: whether to flip the icon horizontally, vertically, or both\n        - `rotate`: whether to rotate the icon 90, 180, or 270 degrees\n        - `style`: a dictionary of CSS styles to apply to the icon\n    \n        **Returns.**\n    \n        - An `Html` object.\n        \"\"\"\n    \n        # Convert size to a CSS size string\n        size_str = _space_to_string(size)\n    \n        # Create a style dictionary, start with an empty or provided style\n        icon_style = style or {}\n    \n        # Set size and color in the style dictionary, if provided\n        if size_str:\n            icon_style['font-size'] = size_str\n        if color:\n            icon_style['color'] = color\n    \n        # Handle flipping by adding to style transformations\n        if flip:\n            flip_transform = {\"horizontal\": \"scaleX(-1)\", \"vertical\": \"scaleY(-1)\", \"both\": \"scale(-1, -1)\"}\n            icon_style['transform'] = flip_transform.get(flip, \"\")\n    \n        # Handle rotation transformations\n        if rotate:\n            rotation_transform = f\"rotate({rotate}deg)\"\n            # If there's already a transform, append to it\n            if 'transform' in icon_style:\n                icon_style['transform'] += f\" {rotation_transform}\"\n            else:\n                icon_style['transform'] = rotation_transform\n    \n        # Create class string based on display type\n        class_name = \"icon-inline\" if inline else \"icon-block\"\n    \n        # Utilize helper functions to generate styled HTML representation\n>       return h('span', {'class': class_name, 'style': create_style(icon_style)}, icon_name)\nE       TypeError: '_HTMLBuilder' object is not callable\n\nmarimo/_plugins/stateless/icon.py:71: TypeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/stateless/test_icon.py::test_mo_icon - TypeError: '_HTM...\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_plugins/stateless/image.py-image": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_plugins/stateless/test_image.py F                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_image __________________________________\n\n    async def test_image() -> None:\n>       result = image(\n            \"https://marimo.io/logo.png\",\n        )\n\ntests/_plugins/stateless/test_image.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'https://marimo.io/logo.png', alt = None, width = None, height = None\nrounded = False, style = None\n\n    @mddoc\n    def image(src: ImageLike, alt: Optional[str] = None, width: Optional[int] = None, height: Optional[int] = None, rounded: bool = False, style: Optional[dict] = None) -> Html:\n        \"\"\"\n        Render an image as HTML.\n    \n        **Args.**\n    \n        - `src`: a path or URL to an image, a file-like object\n            (opened in binary mode), or array-like object.\n        - `alt`: the alt text of the image\n        - `width`: the width of the image in pixels\n        - `height`: the height of the image in pixels\n        - `rounded`: whether to round the corners of the image\n        - `style`: a dictionary of CSS styles to apply to the image\n    \n        **Returns.**\n    \n        `Html` object\n        \"\"\"\n    \n        # Normalize the image\n        normalized_src = _normalize_image(src)\n    \n        # Handle style and rounded corners\n        css_styles = style or {}\n        if width is not None:\n            css_styles['width'] = f'{width}px'\n        if height is not None:\n            css_styles['height'] = f'{height}px'\n        if rounded:\n            css_styles['border-radius'] = '50%'\n    \n        # Create the style string\n        style_str = create_style(css_styles)\n    \n        # Render the HTML\n        img_html = h('img', {\n>           'src': io_to_data_url(normalized_src),\n            'alt': alt or '',\n            'style': style_str\n        })\nE       TypeError: io_to_data_url() missing 1 required positional argument: 'fallback_mime_type'\n\nmarimo/_plugins/stateless/image.py:125: TypeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/stateless/test_image.py::test_image - TypeError: io_to_...\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_plugins/stateless/flex.py-hstack": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:16: in <module>\n    from marimo._plugins.ui import code_editor\nmarimo/_plugins/ui/__init__.py:40: in <module>\n    from marimo._plugins.ui._impl.array import array\nmarimo/_plugins/ui/_impl/array.py:10: in <module>\n    from marimo._plugins.stateless.flex import hstack, vstack\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/flex.py\", line 131\nE       **Args.**\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_plugins/stateless/status/_progress.py-update_progress": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:82: in <module>\n    from marimo._plugins.stateless import mpl, status\nmarimo/_plugins/stateless/status/__init__.py:6: in <module>\n    from marimo._plugins.stateless.status._progress import progress_bar, spinner\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/status/_progress.py\", line 282\nE       every 150ms.\nE               ^\nE   SyntaxError: invalid decimal literal\n"], "marimo-marimo/_plugins/core/web_component.py-build_ui_plugin": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/core/test_web_component.py ..F                            [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_label_md_compiled ____________________________\n\n    def test_label_md_compiled() -> None:\n        initial_value = \"'ello\"\n        html = build_ui_plugin(\"tag-name\", initial_value, label=\"$x$\", args={})\n    \n        match = re.search(\"data-label='(.*?)'\", html)\n        assert match is not None\n        # \"md\"'s latex extension generates spans with class name arithmatex\n>       assert \"arithmatex\" in match.groups()[0]\nE       AssertionError: assert 'arithmatex' in '&quot;&#36;x&#36;&quot;'\n\ntests/_plugins/core/test_web_component.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_label_md_compiled - As...\n========================= 1 failed, 2 passed in 0.06s ==========================\n\n"], "marimo-marimo/_output/formatting.py-as_html": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatting.py\", line 217\nE       **Args.**\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_output/md.py-md": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nmarimo/_output/formatting.py:33: in <module>\n    from marimo._plugins.stateless.json_output import json_output\nmarimo/_plugins/stateless/json_output.py:7: in <module>\n    from marimo._plugins.core.web_component import JSONType, build_stateless_plugin\nmarimo/_plugins/core/web_component.py:26: in <module>\n    from marimo._output.md import md\nE     File \"/root/repos/py_data/marimo/marimo/_output/md.py\", line 78\nE       \"\"\"\nE       ^\nE   SyntaxError: unterminated triple-quoted string literal (detected at line 91)\n"], "marimo-marimo/_output/formatters/formatters.py-register_formatters": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:23: in <module>\n    from marimo._output.formatters.formatters import register_formatters\nmarimo/_output/formatters/formatters.py:86: in <module>\n    register_formatters()\nmarimo/_output/formatters/formatters.py:65: in register_formatters\n    original_import = builtins.__import__\nE   NameError: name 'builtins' is not defined\n"], "marimo-marimo/_data/series.py-get_category_series_info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_data/test_series.py ss                                            [100%]\n\n=========================== short test summary info ============================\nSKIPPED [2] tests/_data/test_series.py:58: optional dependencies not installed\n============================== 2 skipped in 0.02s ==============================\n\n"], "marimo-marimo/_data/preview_column.py-get_column_preview": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_data/test_preview_column.py s                                     [100%]\n\n=========================== short test summary info ============================\nSKIPPED [1] tests/_data/test_preview_column.py:20: optional dependencies not installed\n============================== 1 skipped in 0.01s ==============================\n\n"], "marimo-marimo/_server/sessions.py-start_file_watcher": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/file_manager.py-save_app_config": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_stdin": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_operation": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-get_cell_console_outputs": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_runtime/dataflow.py-register_cell": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_runtime/packages/test_module_registry.py ...                      [100%]\n\n============================== 3 passed in 0.03s ===============================\n\n"], "marimo-marimo/_runtime/validate_graph.py-check_for_errors": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/_runtime/test_validate_graph.py .FFFF..                            [100%]\n\n=================================== FAILURES ===================================\n________________________ test_multiple_definition_error ________________________\n\n    def test_multiple_definition_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x = 1\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"0\", \"1\"])\n>       assert errors[\"0\"] == (MultipleDefinitionError(name=\"x\", cells=(\"1\",)),)\nE       AssertionError: assert [MultipleDefi...ltiple-defs')] == (MultipleDefi...tiple-defs'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:25: AssertionError\n__________________________ test_delete_nonlocal_error __________________________\n\n    def test_delete_nonlocal_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"del x\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"1\"])\n>       assert errors[\"1\"] == (DeleteNonlocalError(name=\"x\", cells=(\"0\",)),)\nE       AssertionError: assert [DeleteNonloc...te-nonlocal')] == (DeleteNonloc...e-nonlocal'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:77: AssertionError\n_________________ test_overlapping_multiple_definition_errors __________________\n\n    def test_overlapping_multiple_definition_errors() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x, y = 1, 2\"))\n        graph.register_cell(\"2\", parse_cell(\"y, z = 3, 4\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"0\", \"1\", \"2\"])\n>       assert errors[\"0\"] == (MultipleDefinitionError(name=\"x\", cells=(\"1\",)),)\nE       AssertionError: assert [MultipleDefi...ltiple-defs')] == (MultipleDefi...tiple-defs'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:49: AssertionError\n_____________________________ test_two_node_cycle ______________________________\n\n    def test_two_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = x\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"0\", \"1\"])\n>       assert errors[\"0\"] == (\n            CycleError(edges_with_vars=((\"0\", [\"x\"], \"1\"), (\"1\", [\"y\"], \"0\"))),\n        )\nE       AssertionError: assert [CycleError(e...type='cycle')] == (CycleError(e...ype='cycle'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:86: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/test_validate_graph.py::test_multiple_definition_error\nFAILED tests/_runtime/test_validate_graph.py::test_delete_nonlocal_error - As...\nFAILED tests/_runtime/test_validate_graph.py::test_overlapping_multiple_definition_errors\nFAILED tests/_runtime/test_validate_graph.py::test_two_node_cycle - Assertion...\n========================= 4 failed, 3 passed in 0.07s ==========================\n\n"], "marimo-marimo/_runtime/runtime.py-_maybe_register_cell": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_runtime/reload/test_module_watcher.py ..                          [100%]\n\n============================== 2 passed in 8.34s ===============================\n\n"], "marimo-marimo/_runtime/runtime.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 86 items\n\n============================ no tests ran in 0.06s =============================\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_code_with_nbsp\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_empty_iteration_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_pickle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_break_cycle_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_processpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_state_invalidated\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wont_execute_bad_ref\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_stop\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_freeze\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future_complex\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_consecutive\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_fileno\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_ref_local_var_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_with_cell_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_make_local_with_global_keywd\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_enable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_delete_nonlocal_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_var_not_local_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_run_matplotlib_figures_closed\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_basic\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_tree\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_gather\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_pickle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_altair_chart.py::test_altair_settings_when_set\n(no match in any of [<Module test_altair_chart.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_init_not_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_ok_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_interruption\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_triangle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_non_ui_elements_not_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_scope_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_running_in_notebook\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_config_before_registering_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_input_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readlines_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_threadpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_nested_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_add_mock_package\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_private\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list_mock_packages\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_value\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_output_cleared_on_rerun\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_dunder_not_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_file_path\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_instances\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_await_allowed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_marimo_mpl_backend_not_used\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cycle_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_default_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_zero_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wait_for\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_exception\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_referrers_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_set_index_urls\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_install\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readline_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_available\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_local_var_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_with_state\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_multiple_ui_elements\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_async\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_new_errors_update_old_ones\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_locals_dont_leak\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_bound_child\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_delete_nonlocal_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_new_multiple_definition_does_not_invalidate\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_simultaneous_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_unparsable_cell\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_defs_with_no_definers_are_removed_from_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_uninstall\n(no match in any of [<Module test_patches.py>])\n\n"], "marimo-marimo/_runtime/packages/utils.py-is_python_isolated": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_package_utils.py F                          [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_python_isolated ____________________________\n\n    @pytest.mark.skipif(sys.platform == \"win32\", reason=\"Failing on Windows CI\")\n    def test_is_python_isolated() -> None:\n        # tests should always be run in an isolated (non-system) environment;\n        # we only run them in a virtualenv, venv, or conda env ...\n>       assert is_python_isolated()\nE       assert False\nE        +  where False = is_python_isolated()\n\ntests/_runtime/packages/test_package_utils.py:13: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_package_utils.py::test_is_python_isolated\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_runtime/packages/module_registry.py-missing_modules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_module_registry.py .                        [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n"], "TaskWeaver-taskweaver/misc/example.py-load_examples": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_example.py F                                       [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_load_examples ______________________________\n\n    def test_load_examples():\n        example_path = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"data\",\n            \"examples\",\n            \"planner_examples\",\n        )\n        examples = load_examples(example_path, {\"Planner\", \"User\", \"CodeInterpreter\"})\n>       assert len(examples) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\ntests/unit_tests/test_example.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_example.py::test_load_examples - assert 0 == 1\n============================== 1 failed in 0.06s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-add_selected_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py .                                   [100%]\n\n============================== 1 passed in 0.16s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-filter_unused_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[1:3])\n        assert len(selected_plugin_pool) == 3\n    \n        selected_plugin_pool.add_selected_plugins(plugins[2:4])\n        assert len(selected_plugin_pool) == 4\n    \n>       selected_plugin_pool.filter_unused_plugins(\"xcxcxc anomaly_detection() ababab\")\n\ntests/unit_tests/test_plugin_pool.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <taskweaver.code_interpreter.plugin_selection.SelectedPluginPool object at 0x7f2a6cc40220>\ncode = 'xcxcxc anomaly_detection() ababab'\n\n    def filter_unused_plugins(self, code: str):\n        \"\"\"\n        Filter out plugins that are not used in the code generated by LLM\n        \"\"\"\n        used_plugins = []\n    \n>       for plugin in self.available_plugins:\nE       AttributeError: 'SelectedPluginPool' object has no attribute 'available_plugins'\n\ntaskweaver/code_interpreter/plugin_selection.py:31: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.19s ===============================\n\n"], "TaskWeaver-taskweaver/module/prompt_util.py-remove_all_delimiters": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_prompt_util.py .                                   [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n"], "reflex-reflex/app.py-_enable_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_app_state_manager ____________________________\n\n    def test_app_state_manager():\n        app = App()\n        with pytest.raises(ValueError):\n            app.state_manager\n        app._enable_state()\n>       assert app.state_manager is not None\n\ntests/test_app.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    @property\n    def state_manager(self) -> StateManager:\n        \"\"\"Get the state manager.\n    \n        Returns:\n            The initialized state manager.\n    \n        Raises:\n            ValueError: if the state has not been initialized.\n        \"\"\"\n        if self._state_manager is None:\n>           raise ValueError(\"The state manager has not been initialized.\")\nE           ValueError: The state manager has not been initialized.\n\nreflex/app.py:373: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_state_manager - ValueError: The state mana...\n======================== 1 failed, 5 warnings in 0.13s =========================\n\n"], "reflex-reflex/app.py-_add_optional_endpoints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_app_with_optional_endpoints _______________________\n\n    def test_app_with_optional_endpoints():\n        from reflex.components.core.upload import Upload\n    \n        app = App()\n        Upload.is_used = True\n>       app._add_optional_endpoints()\n\ntests/test_app.py:1431: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _add_optional_endpoints(self):\n        \"\"\"Add optional api endpoints (_upload).\"\"\"\n>       from reflex.api import upload  # Assuming there's an 'upload' module in reflex.api\nE       ModuleNotFoundError: No module named 'reflex.api'\n\nreflex/app.py:305: ModuleNotFoundError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_with_optional_endpoints - ModuleNotFoundEr...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n"], "reflex-reflex/app.py-add_page": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 24 items\n\ntests/test_app.py FFF..FFFFF..FFFFFFFFFFFF                               [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_page_default_route __________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fb61a332830>\nabout_page = <function about_page.<locals>.about at 0x7fb61a332dd0>\n\n    def test_add_page_default_route(app: App, index_page, about_page):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            about_page: The about page.\n        \"\"\"\n        assert app.pages == {}\n>       app.add_page(index_page)\n\ntests/test_app.py:237: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\",...\"contents\": \"{`Index`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nroute = None, title = '', description = '', image = '', on_load = None\nmeta = None\n\n    def add_page(\n        self,\n        component: Component | ComponentCallable,\n        route: Optional[str] = None,\n        title: Optional[str] = '',\n        description: Optional[str] = '',\n        image: Optional[str] = '',\n        on_load: Optional[Union[EventHandler, EventSpec, List[Union[EventHandler, EventSpec]]]] = None,\n        meta: Optional[List[Dict[str, str]]] = None,\n    ):\n        \"\"\"Add a page to the app.\n    \n        If the component is a callable, by default the route is the name of the\n        function. Otherwise, a route must be provided.\n    \n        Args:\n            component: The component to display at the page.\n            route: The route to display the component at. Defaults to the function name if the component is callable.\n            title: The title of the page.\n            description: The description of the page.\n            image: The image to display on the page.\n            on_load: The event handler(s) that will be called each time the page load.\n            meta: The metadata of the page.\n    \n        Raises:\n            ValueError: When the specified route name already exists.\n        \"\"\"\n        # Generate component if it's callable\n        component = self._generate_component(component)\n    \n        # Determine the route\n        if route is None:\n            if callable(component):\n                route = component.__name__\n            else:\n>               raise ValueError(\"A route must be provided if the component is not callable.\")\nE               ValueError: A route must be provided if the component is not callable.\n\nreflex/app.py:410: ValueError\n_______________________ test_add_page_invalid_api_route ________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fb61a250550>\n\n    def test_add_page_invalid_api_route(app: App, index_page):\n        \"\"\"Test adding a page with an invalid route to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n        \"\"\"\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:300: Failed\n----------------------------- Captured stdout call -----------------------------\n[14:46:58] Page 'api' added to the app.                           console.py:104\n_______________________ test_add_page_set_route_dynamic ________________________\n\nindex_page = <function index_page.<locals>.index at 0x7fb61a250b80>\nwindows_platform = False\n\n    def test_add_page_set_route_dynamic(index_page, windows_platform: bool):\n        \"\"\"Test adding a page with dynamic route variable to an app.\n    \n        Args:\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        app = App(state=EmptyState)\n        assert app.state is not None\n        route = \"/test/[dynamic]\"\n        if windows_platform:\n            route.lstrip(\"/\").replace(\"/\", \"\\\\\")\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {\"test/[dynamic]\"}\nE       AssertionError: assert dict_keys(['/test/[dynamic]']) == {'test/[dynamic]'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:271: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test/' added to the app.                        console.py:104\n_______ test_add_duplicate_page_route_error[<lambda>-second_page2-page3] _______\n\napp = <App state=None>, first_page = <function <lambda> at 0x7fb61a4bed40>\nsecond_page = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\nroute = 'page3'\n\n    @pytest.mark.parametrize(\n        \"first_page,second_page, route\",\n        [\n            (lambda: rx.fragment(), lambda: rx.fragment(rx.text(\"second\")), \"/\"),\n            (rx.fragment(rx.text(\"first\")), rx.fragment(rx.text(\"second\")), \"/page1\"),\n            (\n                lambda: rx.fragment(rx.text(\"first\")),\n                rx.fragment(rx.text(\"second\")),\n                \"page3\",\n            ),\n            (page1, page2, \"page1\"),\n            (index, index, None),\n            (page1, page1, None),\n        ],\n    )\n    def test_add_duplicate_page_route_error(app, first_page, second_page, route):\n        app.add_page(first_page, route=route)\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:344: Failed\n----------------------------- Captured stdout call -----------------------------\n           Page 'page3' added to the app.                         console.py:104\n           Page '/page3' added to the app.                        console.py:104\n____________ test_add_duplicate_page_route_error[page1-page2-page1] ____________\n\napp = <App state=None>, first_page = <function page1 at 0x7fb61a4be170>\nsecond_page = <function page2 at 0x7fb61a4be200>, route = 'page1'\n\n    @pytest.mark.parametrize(\n        \"first_page,second_page, route\",\n        [\n            (lambda: rx.fragment(), lambda: rx.fragment(rx.text(\"second\")), \"/\"),\n            (rx.fragment(rx.text(\"first\")), rx.fragment(rx.text(\"second\")), \"/page1\"),\n            (\n                lambda: rx.fragment(rx.text(\"first\")),\n                rx.fragment(rx.text(\"second\")),\n                \"page3\",\n            ),\n            (page1, page2, \"page1\"),\n            (index, index, None),\n            (page1, page1, None),\n        ],\n    )\n    def test_add_duplicate_page_route_error(app, first_page, second_page, route):\n        app.add_page(first_page, route=route)\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:344: Failed\n----------------------------- Captured stdout call -----------------------------\n           Page 'page1' added to the app.                         console.py:104\n           Page '/page1' added to the app.                        console.py:104\n____________ test_add_duplicate_page_route_error[index-index-None] _____________\n\napp = <App state=None>, first_page = <function index at 0x7fb61a4be290>\nsecond_page = <function index at 0x7fb61a4be290>, route = None\n\n    @pytest.mark.parametrize(\n        \"first_page,second_page, route\",\n        [\n            (lambda: rx.fragment(), lambda: rx.fragment(rx.text(\"second\")), \"/\"),\n            (rx.fragment(rx.text(\"first\")), rx.fragment(rx.text(\"second\")), \"/page1\"),\n            (\n                lambda: rx.fragment(rx.text(\"first\")),\n                rx.fragment(rx.text(\"second\")),\n                \"page3\",\n            ),\n            (page1, page2, \"page1\"),\n            (index, index, None),\n            (page1, page1, None),\n        ],\n    )\n    def test_add_duplicate_page_route_error(app, first_page, second_page, route):\n>       app.add_page(first_page, route=route)\n\ntests/test_app.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nroute = None, title = '', description = '', image = '', on_load = None\nmeta = None\n\n    def add_page(\n        self,\n        component: Component | ComponentCallable,\n        route: Optional[str] = None,\n        title: Optional[str] = '',\n        description: Optional[str] = '',\n        image: Optional[str] = '',\n        on_load: Optional[Union[EventHandler, EventSpec, List[Union[EventHandler, EventSpec]]]] = None,\n        meta: Optional[List[Dict[str, str]]] = None,\n    ):\n        \"\"\"Add a page to the app.\n    \n        If the component is a callable, by default the route is the name of the\n        function. Otherwise, a route must be provided.\n    \n        Args:\n            component: The component to display at the page.\n            route: The route to display the component at. Defaults to the function name if the component is callable.\n            title: The title of the page.\n            description: The description of the page.\n            image: The image to display on the page.\n            on_load: The event handler(s) that will be called each time the page load.\n            meta: The metadata of the page.\n    \n        Raises:\n            ValueError: When the specified route name already exists.\n        \"\"\"\n        # Generate component if it's callable\n        component = self._generate_component(component)\n    \n        # Determine the route\n        if route is None:\n            if callable(component):\n                route = component.__name__\n            else:\n>               raise ValueError(\"A route must be provided if the component is not callable.\")\nE               ValueError: A route must be provided if the component is not callable.\n\nreflex/app.py:410: ValueError\n____________ test_add_duplicate_page_route_error[page1-page1-None] _____________\n\napp = <App state=None>, first_page = <function page1 at 0x7fb61a4be170>\nsecond_page = <function page1 at 0x7fb61a4be170>, route = None\n\n    @pytest.mark.parametrize(\n        \"first_page,second_page, route\",\n        [\n            (lambda: rx.fragment(), lambda: rx.fragment(rx.text(\"second\")), \"/\"),\n            (rx.fragment(rx.text(\"first\")), rx.fragment(rx.text(\"second\")), \"/page1\"),\n            (\n                lambda: rx.fragment(rx.text(\"first\")),\n                rx.fragment(rx.text(\"second\")),\n                \"page3\",\n            ),\n            (page1, page2, \"page1\"),\n            (index, index, None),\n            (page1, page1, None),\n        ],\n    )\n    def test_add_duplicate_page_route_error(app, first_page, second_page, route):\n>       app.add_page(first_page, route=route)\n\ntests/test_app.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nroute = None, title = '', description = '', image = '', on_load = None\nmeta = None\n\n    def add_page(\n        self,\n        component: Component | ComponentCallable,\n        route: Optional[str] = None,\n        title: Optional[str] = '',\n        description: Optional[str] = '',\n        image: Optional[str] = '',\n        on_load: Optional[Union[EventHandler, EventSpec, List[Union[EventHandler, EventSpec]]]] = None,\n        meta: Optional[List[Dict[str, str]]] = None,\n    ):\n        \"\"\"Add a page to the app.\n    \n        If the component is a callable, by default the route is the name of the\n        function. Otherwise, a route must be provided.\n    \n        Args:\n            component: The component to display at the page.\n            route: The route to display the component at. Defaults to the function name if the component is callable.\n            title: The title of the page.\n            description: The description of the page.\n            image: The image to display on the page.\n            on_load: The event handler(s) that will be called each time the page load.\n            meta: The metadata of the page.\n    \n        Raises:\n            ValueError: When the specified route name already exists.\n        \"\"\"\n        # Generate component if it's callable\n        component = self._generate_component(component)\n    \n        # Determine the route\n        if route is None:\n            if callable(component):\n                route = component.__name__\n            else:\n>               raise ValueError(\"A route must be provided if the component is not callable.\")\nE               ValueError: A route must be provided if the component is not callable.\n\nreflex/app.py:410: ValueError\n____________ test_dynamic_route_var_route_change_completed_on_load _____________\n\nindex_page = <function index_page.<locals>.index at 0x7fb61a4bfd90>\nwindows_platform = False, token = 'ff5b48b8-8ab1-4133-be6e-e6f0b379c758'\napp_module_mock = <Mock id='140420100281328'>\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fb61a327310>\n\n    @pytest.mark.asyncio\n    async def test_dynamic_route_var_route_change_completed_on_load(\n        index_page,\n        windows_platform: bool,\n        token: str,\n        app_module_mock: unittest.mock.Mock,\n        mocker,\n    ):\n        \"\"\"Create app with dynamic route var, and simulate navigation.\n    \n        on_load should fire, allowing any additional vars to be updated before the\n        initial page hydrate.\n    \n        Args:\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n            token: a Token.\n            app_module_mock: Mocked app module.\n            mocker: pytest mocker object.\n        \"\"\"\n        arg_name = \"dynamic\"\n        route = f\"/test/[{arg_name}]\"\n        if windows_platform:\n            route.lstrip(\"/\").replace(\"/\", \"\\\\\")\n        app = app_module_mock.app = App(state=DynamicState)\n        assert app.state is not None\n        assert arg_name not in app.state.vars\n        app.add_page(index_page, route=route, on_load=DynamicState.on_load)  # type: ignore\n>       assert arg_name in app.state.vars\nE       AssertionError: assert 'dynamic' in {'comp_dynamic': ComputedVar(_cache=False, _backend=False, _initial_value=Unset, _static_deps=set(), _auto_deps=True, ...pile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[])), ...}\nE        +  where {'comp_dynamic': ComputedVar(_cache=False, _backend=False, _initial_value=Unset, _static_deps=set(), _auto_deps=True, ...pile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[])), ...} = <class 'tests.test_app.DynamicState'>.vars\nE        +    where <class 'tests.test_app.DynamicState'> = <App state=DynamicState>.state\n\ntests/test_app.py:995: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test/' added to the app.                        console.py:104\n____________________________ test_app_wrap_priority ____________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2468/test_app_wrap_priority0/app/.web'))\n\n    def test_app_wrap_priority(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the app wrap components are wrapped in the correct order.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n    \n        class Fragment1(Component):\n            tag = \"Fragment1\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(99, \"Box\"): rx.chakra.box()}\n    \n        class Fragment2(Component):\n            tag = \"Fragment2\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(50, \"Text\"): rx.chakra.text()}\n    \n        class Fragment3(Component):\n            tag = \"Fragment3\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(10, \"Fragment2\"): Fragment2.create()}\n    \n        def page():\n            return Fragment1.create(Fragment3.create())\n    \n>       app.add_page(page)\n\n/root/repos/py_data/reflex/tests/test_app.py:1338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = {\"name\": \"Fragment1\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Fragmen...ps\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nroute = None, title = '', description = '', image = '', on_load = None\nmeta = None\n\n    def add_page(\n        self,\n        component: Component | ComponentCallable,\n        route: Optional[str] = None,\n        title: Optional[str] = '',\n        description: Optional[str] = '',\n        image: Optional[str] = '',\n        on_load: Optional[Union[EventHandler, EventSpec, List[Union[EventHandler, EventSpec]]]] = None,\n        meta: Optional[List[Dict[str, str]]] = None,\n    ):\n        \"\"\"Add a page to the app.\n    \n        If the component is a callable, by default the route is the name of the\n        function. Otherwise, a route must be provided.\n    \n        Args:\n            component: The component to display at the page.\n            route: The route to display the component at. Defaults to the function name if the component is callable.\n            title: The title of the page.\n            description: The description of the page.\n            image: The image to display on the page.\n            on_load: The event handler(s) that will be called each time the page load.\n            meta: The metadata of the page.\n    \n        Raises:\n            ValueError: When the specified route name already exists.\n        \"\"\"\n        # Generate component if it's callable\n        component = self._generate_component(component)\n    \n        # Determine the route\n        if route is None:\n            if callable(component):\n                route = component.__name__\n            else:\n>               raise ValueError(\"A route must be provided if the component is not callable.\")\nE               ValueError: A route must be provided if the component is not callable.\n\n/root/repos/py_data/reflex/reflex/app.py:410: ValueError\n___________________________ test_add_page_set_route ____________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fb61a149ea0>\nwindows_platform = False\n\n    def test_add_page_set_route(app: App, index_page, windows_platform: bool):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        route = \"test\" if windows_platform else \"/test\"\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {\"test\"}\nE       AssertionError: assert dict_keys(['/test']) == {'test'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:254: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7fb6669e0700>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n____________________ test_overlay_component[None-None-None] ____________________\n\nstate = None, overlay_component = None, exp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7fb6669e0700>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n___________________ test_overlay_component[State-None-None] ____________________\n\nstate = <class 'reflex.state.State'>, overlay_component = None\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7fb61a4bf5b0>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test' added to the app.                         console.py:104\n___________________ test_add_page_component_returning_tuple ____________________\n\n    def test_add_page_component_returning_tuple():\n        \"\"\"Test that a component or render method returning a\n        tuple is unpacked in a Fragment.\n        \"\"\"\n        app = App()\n    \n        def index():\n            return rx.text(\"first\"), rx.text(\"second\")\n    \n        def page2():\n            return (rx.text(\"third\"),)\n    \n>       app.add_page(index)  # type: ignore\n\ntests/test_app.py:1475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = ({\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [...ontents\": \"{`second`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false})\nroute = None, title = '', description = '', image = '', on_load = None\nmeta = None\n\n    def add_page(\n        self,\n        component: Component | ComponentCallable,\n        route: Optional[str] = None,\n        title: Optional[str] = '',\n        description: Optional[str] = '',\n        image: Optional[str] = '',\n        on_load: Optional[Union[EventHandler, EventSpec, List[Union[EventHandler, EventSpec]]]] = None,\n        meta: Optional[List[Dict[str, str]]] = None,\n    ):\n        \"\"\"Add a page to the app.\n    \n        If the component is a callable, by default the route is the name of the\n        function. Otherwise, a route must be provided.\n    \n        Args:\n            component: The component to display at the page.\n            route: The route to display the component at. Defaults to the function name if the component is callable.\n            title: The title of the page.\n            description: The description of the page.\n            image: The image to display on the page.\n            on_load: The event handler(s) that will be called each time the page load.\n            meta: The metadata of the page.\n    \n        Raises:\n            ValueError: When the specified route name already exists.\n        \"\"\"\n        # Generate component if it's callable\n        component = self._generate_component(component)\n    \n        # Determine the route\n        if route is None:\n            if callable(component):\n                route = component.__name__\n            else:\n>               raise ValueError(\"A route must be provided if the component is not callable.\")\nE               ValueError: A route must be provided if the component is not callable.\n\nreflex/app.py:410: ValueError\n________________________ test_add_page_set_route_nested ________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fb61a251b40>\nwindows_platform = False\n\n    def test_add_page_set_route_nested(app: App, index_page, windows_platform: bool):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        route = \"test\\\\nested\" if windows_platform else \"/test/nested\"\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {route.strip(os.path.sep)}\nE       AssertionError: assert dict_keys(['/test/nested']) == {'test/nested'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:290: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Page '/test/nested' added to the app.                  console.py:104\n_________________________ test_app_state_determination _________________________\n\n    def test_app_state_determination():\n        \"\"\"Test that the stateless status of an app is determined correctly.\"\"\"\n        a1 = App()\n        assert a1.state is None\n    \n        # No state, no router, no event handlers.\n        a1.add_page(rx.box(\"Index\"), route=\"/\")\n        assert a1.state is None\n    \n        # Add a page with `on_load` enables state.\n        a1.add_page(rx.box(\"About\"), route=\"/about\", on_load=rx.console_log(\"\"))\n>       assert a1.state is not None\nE       assert None is not None\nE        +  where None = <App state=None>.state\n\ntests/test_app.py:1376: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Page '/' added to the app.                             console.py:104\n           Page '/about' added to the app.                        console.py:104\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_add_page_default_route - ValueError: A route m...\nFAILED tests/test_app.py::test_add_page_invalid_api_route - Failed: DID NOT R...\nFAILED tests/test_app.py::test_add_page_set_route_dynamic - AssertionError: a...\nFAILED tests/test_app.py::test_add_duplicate_page_route_error[<lambda>-second_page2-page3]\nFAILED tests/test_app.py::test_add_duplicate_page_route_error[page1-page2-page1]\nFAILED tests/test_app.py::test_add_duplicate_page_route_error[index-index-None]\nFAILED tests/test_app.py::test_add_duplicate_page_route_error[page1-page1-None]\nFAILED tests/test_app.py::test_dynamic_route_var_route_change_completed_on_load\nFAILED tests/test_app.py::test_app_wrap_priority - ValueError: A route must b...\nFAILED tests/test_app.py::test_add_page_set_route - AssertionError: assert di...\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-None-None] - KeyError: ...\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-None-None] - KeyError:...\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - KeyEr...\nFAILED tests/test_app.py::test_add_page_component_returning_tuple - ValueErro...\nFAILED tests/test_app.py::test_add_page_set_route_nested - AssertionError: as...\nFAILED tests/test_app.py::test_app_state_determination - assert None is not None\n=================== 20 failed, 4 passed, 5 warnings in 0.65s ===================\n\n"], "reflex-reflex/app.py-_setup_overlay_component": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_app.py F.FF.FF                                                [100%]\n\n=================================== FAILURES ===================================\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7f7e37140670>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n>           assert app.overlay_component is None\nE           assert <function default_overlay_component at 0x7f7e37140670> is None\nE            +  where <function default_overlay_component at 0x7f7e37140670> = <App state=None>.overlay_component\n\ntests/test_app.py:1229: AssertionError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7f7e37140670>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7f7deabaf520>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - asser...\n=================== 5 failed, 2 passed, 5 warnings in 0.19s ====================\n\n"], "reflex-reflex/app.py-_compile": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_app.py FFFF.F                                                 [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_app_wrap_compile_theme __________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2469/test_app_wrap_compile_theme0/app/.web'))\n\n    def test_app_wrap_compile_theme(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the radix theme component wraps the app.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n        app.theme = rx.theme(accent_color=\"plum\")\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1289: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = False\n\n    def _compile(self, export: bool = False):\n        \"\"\"Compile the app and output it to the pages folder.\n    \n        Args:\n            export: Whether to compile the app for export.\n    \n        Raises:\n            ReflexRuntimeError: When any page uses state, but no rx.State subclass is defined.\n        \"\"\"\n        # Apply decorated pages to the app, ensuring all pages are collected.\n        self._apply_decorated_pages()\n    \n        # Set up state, which could raise ReflexRuntimeError if no rx.State subclass is defined.\n        self._setup_state()\n    \n        # Ensure that variable dependencies in the state are valid.\n        self._validate_var_dependencies()\n    \n        # Iterate through all pages to collect their imports and determine if compilation is needed.\n        imports = {}\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n            component_imports = compiler.get_imports(generated_component)\n            imports.update(component_imports)\n    \n        # Determine if compilation should proceed based on environment and file checks.\n        if not self._should_compile():\n            return\n    \n        # Compile the pages and generate output files.\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n            compiler.compile_page(\n                route=route,\n                component=self._add_overlay_to_component(generated_component),\n                imports=imports,\n                export=export,\n            )\n    \n        # Evaluate if there are frontend packages to be installed and install them.\n        self._get_frontend_packages(imports)\n    \n        # Report telemetry data after successful compilation.\n>       telemetry.report()\nE       NameError: name 'telemetry' is not defined\n\n/root/repos/py_data/reflex/reflex/app.py:777: NameError\n____________________ test_app_with_transpile_packages[True] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2469/test_app_with_transpile_packag0/app/.web'))\nexport = True\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n>       app._compile(export=export)\n\n/root/repos/py_data/reflex/tests/test_app.py:1523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = True\n\n    def _compile(self, export: bool = False):\n        \"\"\"Compile the app and output it to the pages folder.\n    \n        Args:\n            export: Whether to compile the app for export.\n    \n        Raises:\n            ReflexRuntimeError: When any page uses state, but no rx.State subclass is defined.\n        \"\"\"\n        # Apply decorated pages to the app, ensuring all pages are collected.\n        self._apply_decorated_pages()\n    \n        # Set up state, which could raise ReflexRuntimeError if no rx.State subclass is defined.\n        self._setup_state()\n    \n        # Ensure that variable dependencies in the state are valid.\n        self._validate_var_dependencies()\n    \n        # Iterate through all pages to collect their imports and determine if compilation is needed.\n        imports = {}\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n>           component_imports = compiler.get_imports(generated_component)\nE           AttributeError: module 'reflex.compiler.compiler' has no attribute 'get_imports'\n\n/root/repos/py_data/reflex/reflex/app.py:756: AttributeError\n___________________ test_app_with_transpile_packages[False] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2469/test_app_with_transpile_packag1/app/.web'))\nexport = False\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n>       app._compile(export=export)\n\n/root/repos/py_data/reflex/tests/test_app.py:1523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = False\n\n    def _compile(self, export: bool = False):\n        \"\"\"Compile the app and output it to the pages folder.\n    \n        Args:\n            export: Whether to compile the app for export.\n    \n        Raises:\n            ReflexRuntimeError: When any page uses state, but no rx.State subclass is defined.\n        \"\"\"\n        # Apply decorated pages to the app, ensuring all pages are collected.\n        self._apply_decorated_pages()\n    \n        # Set up state, which could raise ReflexRuntimeError if no rx.State subclass is defined.\n        self._setup_state()\n    \n        # Ensure that variable dependencies in the state are valid.\n        self._validate_var_dependencies()\n    \n        # Iterate through all pages to collect their imports and determine if compilation is needed.\n        imports = {}\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n>           component_imports = compiler.get_imports(generated_component)\nE           AttributeError: module 'reflex.compiler.compiler' has no attribute 'get_imports'\n\n/root/repos/py_data/reflex/reflex/app.py:756: AttributeError\n____________________________ test_app_wrap_priority ____________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2469/test_app_wrap_priority0/app/.web'))\n\n    def test_app_wrap_priority(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the app wrap components are wrapped in the correct order.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n    \n        class Fragment1(Component):\n            tag = \"Fragment1\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(99, \"Box\"): rx.chakra.box()}\n    \n        class Fragment2(Component):\n            tag = \"Fragment2\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(50, \"Text\"): rx.chakra.text()}\n    \n        class Fragment3(Component):\n            tag = \"Fragment3\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(10, \"Fragment2\"): Fragment2.create()}\n    \n        def page():\n            return Fragment1.create(Fragment3.create())\n    \n        app.add_page(page)\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = False\n\n    def _compile(self, export: bool = False):\n        \"\"\"Compile the app and output it to the pages folder.\n    \n        Args:\n            export: Whether to compile the app for export.\n    \n        Raises:\n            ReflexRuntimeError: When any page uses state, but no rx.State subclass is defined.\n        \"\"\"\n        # Apply decorated pages to the app, ensuring all pages are collected.\n        self._apply_decorated_pages()\n    \n        # Set up state, which could raise ReflexRuntimeError if no rx.State subclass is defined.\n        self._setup_state()\n    \n        # Ensure that variable dependencies in the state are valid.\n        self._validate_var_dependencies()\n    \n        # Iterate through all pages to collect their imports and determine if compilation is needed.\n        imports = {}\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n>           component_imports = compiler.get_imports(generated_component)\nE           AttributeError: module 'reflex.compiler.compiler' has no attribute 'get_imports'\n\n/root/repos/py_data/reflex/reflex/app.py:756: AttributeError\n_____________________ test_app_with_valid_var_dependencies _____________________\n\ncompilable_app = (<App state=ValidDepState>, PosixPath('/tmp/pytest-of-root/pytest-2469/test_app_with_valid_var_depend0/app/.web'))\n\n    def test_app_with_valid_var_dependencies(compilable_app: tuple[App, Path]):\n        app, _ = compilable_app\n    \n        class ValidDepState(BaseState):\n            base: int = 0\n            _backend: int = 0\n    \n            @computed_var(cache=True)\n            def foo(self) -> str:\n                return \"foo\"\n    \n            @computed_var(deps=[\"_backend\", \"base\", foo], cache=True)\n            def bar(self) -> str:\n                return \"bar\"\n    \n        app.state = ValidDepState\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1560: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=ValidDepState>, export = False\n\n    def _compile(self, export: bool = False):\n        \"\"\"Compile the app and output it to the pages folder.\n    \n        Args:\n            export: Whether to compile the app for export.\n    \n        Raises:\n            ReflexRuntimeError: When any page uses state, but no rx.State subclass is defined.\n        \"\"\"\n        # Apply decorated pages to the app, ensuring all pages are collected.\n        self._apply_decorated_pages()\n    \n        # Set up state, which could raise ReflexRuntimeError if no rx.State subclass is defined.\n        self._setup_state()\n    \n        # Ensure that variable dependencies in the state are valid.\n        self._validate_var_dependencies()\n    \n        # Iterate through all pages to collect their imports and determine if compilation is needed.\n        imports = {}\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n            component_imports = compiler.get_imports(generated_component)\n            imports.update(component_imports)\n    \n        # Determine if compilation should proceed based on environment and file checks.\n        if not self._should_compile():\n            return\n    \n        # Compile the pages and generate output files.\n        for route, component in self.pages.items():\n            generated_component = self._generate_component(component)\n            compiler.compile_page(\n                route=route,\n                component=self._add_overlay_to_component(generated_component),\n                imports=imports,\n                export=export,\n            )\n    \n        # Evaluate if there are frontend packages to be installed and install them.\n        self._get_frontend_packages(imports)\n    \n        # Report telemetry data after successful compilation.\n>       telemetry.report()\nE       NameError: name 'telemetry' is not defined\n\n/root/repos/py_data/reflex/reflex/app.py:777: NameError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_wrap_compile_theme - NameError: name 'tele...\nFAILED tests/test_app.py::test_app_with_transpile_packages[True] - AttributeE...\nFAILED tests/test_app.py::test_app_with_transpile_packages[False] - Attribute...\nFAILED tests/test_app.py::test_app_wrap_priority - AttributeError: module 're...\nFAILED tests/test_app.py::test_app_with_valid_var_dependencies - NameError: n...\n=================== 5 failed, 1 passed, 5 warnings in 0.31s ====================\n\n"], "reflex-reflex/app.py-modify_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.23s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_waiter\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_blocker\n(no match in any of [<Module test_state.py>])\n\n"], "reflex-reflex/vars.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/meta.py:7: in <module>\n    from reflex.components.base.bare import Bare\nreflex/components/base/bare.py:13: in <module>\n    class Bare(Component):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/components/component.py:322: in __init_subclass__\n    field.default = Var.create(\nreflex/vars.py:403: in create\n    raise VarTypeError(f\"Provided value cannot be serialized: {value}\") from e\nE   reflex.utils.exceptions.VarTypeError: Provided value cannot be serialized: <class 'reflex.vars.Var'>\n"], "reflex-reflex/vars.py-create_safe": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:31: in <module>\n    connect_errors: Var = Var.create_safe(\nE   TypeError: Var.create_safe() got multiple values for argument 'value'\n"], "reflex-reflex/vars.py-foreach": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/core/test_foreach.py .                                  [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.06s =========================\n\n"], "reflex-reflex/vars.py-get_default_value": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:18: in <module>\n    from .states import (\ntests/states/__init__.py:7: in <module>\n    from .upload import (\ntests/states/upload.py:42: in <module>\n    class FileUploadState(State):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\nreflex/state.py:936: in _set_default_value\n    default_value = prop.get_default_value()\nreflex/vars.py:1867: in get_default_value\n    return self._var_type()\n/usr/local/lib/python3.10/typing.py:941: in __call__\n    raise TypeError(f\"Type {self._name} cannot be instantiated; \"\nE   TypeError: Type List cannot be instantiated; use list() instead\n"], "reflex-reflex/state.py-get_skip_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py E                                                    [100%]\n\n==================================== ERRORS ====================================\n____________________ ERROR at setup of test_base_class_vars ____________________\n\n    @pytest.fixture\n    def test_state() -> TestState:\n        \"\"\"A state.\n    \n        Returns:\n            A test state.\n        \"\"\"\n>       return TestState()  # type: ignore\n\ntests/test_state.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:396: in __init__\n    self.substates[substate.get_name()] = substate(\nreflex/state.py:396: in __init__\n    self.substates[substate.get_name()] = substate(\nreflex/state.py:3078: in __setitem__\n    self._mark_dirty(super().__setitem__, args=(key, value))\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2948: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:3023: in __getattr__\n    if isinstance(value, self.__mutable_types__) and __name not in (\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'reflex.base.Base'>\ninstance = <FunctionWrapper at 0x7f84b06432e0 for builtin_function_or_method at 0x7f84b0655bc0>\n\n    def __instancecheck__(self, instance: Any) -> bool:\n        \"\"\"\n        Avoid calling ABC _abc_subclasscheck unless we're pretty sure.\n    \n        See #3829 and python/cpython#92810\n        \"\"\"\n>       return hasattr(instance, '__fields__') and super().__instancecheck__(instance)\nE       RecursionError: maximum recursion depth exceeded while calling a Python object\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:304: RecursionError\n!!! Recursion error detected, but an error occurred locating the origin of recursion.\n  The following exception happened when comparing locals in the stack frame:\n    RecursionError: maximum recursion depth exceeded while calling a Python object\n  Displaying first and last 10 stack frames out of 1480.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_state.py::test_base_class_vars - RecursionError: maximum rec...\n========================= 5 warnings, 1 error in 0.68s =========================\n\n"], "reflex-reflex/state.py-add_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_state.py FF                                                   [ 66%]\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n________________________ test_add_var_default_handlers _________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\n\n    def test_add_var_default_handlers(test_state):\n>       test_state.add_var(\"rand_int\", int, 10)\n\ntests/test_state.py:889: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:881: in add_var\n    cls._init_var(cls.base_vars[name])\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tests.test_state.TestState'>\nprop = BaseVar(_var_name='rand_int', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs...=True, transpile=False)]}, hooks={'const test_state = useContext(StateContexts.test_state)': None}, interpolations=[]))\n\n    @classmethod\n    def _set_default_value(cls, prop: BaseVar):\n        \"\"\"Set the default value for the var.\n    \n        Args:\n            prop: The var to set the default value for.\n        \"\"\"\n        # Get the pydantic field for the var.\n>       field = cls.get_fields()[prop._var_name]\nE       KeyError: 'rand_int'\n\nreflex/state.py:931: KeyError\n_________________________________ test_add_var _________________________________\n\n    def test_add_var():\n        class DynamicState(BaseState):\n            pass\n    \n        ds1 = DynamicState()\n        assert \"dynamic_int\" not in ds1.__dict__\n        assert not hasattr(ds1, \"dynamic_int\")\n>       ds1.add_var(\"dynamic_int\", int, 42)\n\ntests/test_state.py:867: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:881: in add_var\n    cls._init_var(cls.base_vars[name])\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tests.test_state.test_add_var.<locals>.DynamicState'>\nprop = BaseVar(_var_name='dynamic_int', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_ne... transpile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[]))\n\n    @classmethod\n    def _set_default_value(cls, prop: BaseVar):\n        \"\"\"Set the default value for the var.\n    \n        Args:\n            prop: The var to set the default value for.\n        \"\"\"\n        # Get the pydantic field for the var.\n>       field = cls.get_fields()[prop._var_name]\nE       KeyError: 'dynamic_int'\n\nreflex/state.py:931: KeyError\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = '4ea44739-3d58-41ff-b54c-d25e5e595dea'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n>       state.add_var(\"int_val\", int, 0)\n\ntests/test_app.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:881: in add_var\n    cls._init_var(cls.base_vars[name])\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tests.test_app.ATestState'>\nprop = BaseVar(_var_name='int_val', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_...e, transpile=False)]}, hooks={'const a_test_state = useContext(StateContexts.a_test_state)': None}, interpolations=[]))\n\n    @classmethod\n    def _set_default_value(cls, prop: BaseVar):\n        \"\"\"Set the default value for the var.\n    \n        Args:\n            prop: The var to set the default value for.\n        \"\"\"\n        # Get the pydantic field for the var.\n>       field = cls.get_fields()[prop._var_name]\nE       KeyError: 'int_val'\n\nreflex/state.py:931: KeyError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_add_var_default_handlers - KeyError: 'rand_int'\nFAILED tests/test_state.py::test_add_var - KeyError: 'dynamic_int'\nFAILED tests/test_app.py::test_dynamic_var_event - KeyError: 'int_val'\n======================== 3 failed, 5 warnings in 0.72s =========================\n\n"], "reflex-reflex/state.py-reset": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_state.py FF                                                   [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_reset __________________________________\n\ntest_state = TestState({'test_state': {'array': 'List[float]', 'complex': 'Dict[int, Object]', 'dt': 'datetime.datetime', 'fig': 'F...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': 'test'}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    def test_reset(test_state, child_state):\n        \"\"\"Test resetting the state.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n        \"\"\"\n        # Set some values.\n        test_state.num1 = 1\n        test_state.num2 = 2\n        child_state.value = \"test\"\n    \n        # Reset the state.\n        test_state.reset()\n    \n        # The values should be reset.\n>       assert test_state.num1 == 0\nE       AssertionError: assert 'int' == 0\nE        +  where 'int' = TestState({'test_state': {'array': 'List[float]', 'complex': 'Dict[int, Object]', 'dt': 'datetime.datetime', 'fig': 'F...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}).num1\n\ntests/test_state.py:676: AssertionError\n___________________________ test_reset_with_mutables ___________________________\n\n    def test_reset_with_mutables():\n        \"\"\"Calling reset should always reset fields to a copy of the defaults.\"\"\"\n        default = [[0, 0], [0, 1], [1, 1]]\n        copied_default = copy.deepcopy(default)\n    \n        class MutableResetState(BaseState):\n            items: List[List[int]] = default\n    \n        instance = MutableResetState()\n        assert instance.items.__wrapped__ is not default  # type: ignore\n        assert instance.items == default == copied_default\n        instance.items.append([3, 3])\n        assert instance.items != default\n        assert instance.items != copied_default\n    \n        instance.reset()\n>       assert instance.items.__wrapped__ is not default  # type: ignore\nE       AttributeError: 'str' object has no attribute '__wrapped__'\n\ntests/test_state.py:2419: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_reset - AssertionError: assert 'int' == 0\nFAILED tests/test_state.py::test_reset_with_mutables - AttributeError: 'str' ...\n======================== 2 failed, 5 warnings in 0.53s =========================\n\n"], "reflex-reflex/state.py-get_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/test_state.py .sFs.s                                               [ 33%]\ntests/test_state_tree.py sssssssss                                       [ 83%]\ntests/test_state.py sFs                                                  [100%]\n\n=================================== FAILURES ===================================\n______________ test_get_state_from_sibling_not_cached[in_process] ______________\n\nmock_app = <App state=Parent>, token = '235e08ea-5dbc-437c-9c9f-a602585960ea'\n\n    @pytest.mark.asyncio\n    async def test_get_state_from_sibling_not_cached(mock_app: rx.App, token: str):\n        \"\"\"A test simulating update_vars_internal when setting cookies with computed vars.\n    \n        In that case, a sibling state, UpdateVarsInternalState handles the fetching\n        of states that need to have values set. Only the states that have a computed\n        var are pre-fetched (like Child3 in this test), so `get_state` needs to\n        avoid refetching those already-cached states when getting substates,\n        otherwise the set values will be overridden by the freshly deserialized\n        version and lost.\n    \n        Explicit regression test for https://github.com/reflex-dev/reflex/issues/2851.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n    \n        class Parent(BaseState):\n            \"\"\"A root state like rx.State.\"\"\"\n    \n            parent_var: int = 0\n    \n        class Child(Parent):\n            \"\"\"A state simulating UpdateVarsInternalState.\"\"\"\n    \n            pass\n    \n        class Child2(Parent):\n            \"\"\"An unconnected child state.\"\"\"\n    \n            pass\n    \n        class Child3(Parent):\n            \"\"\"A child state with a computed var causing it to be pre-fetched.\n    \n            If child3_var gets set to a value, and `get_state` erroneously\n            re-fetches it from redis, the value will be lost.\n            \"\"\"\n    \n            child3_var: int = 0\n    \n            @rx.var\n            def v(self):\n                pass\n    \n        class Grandchild3(Child3):\n            \"\"\"An extra layer of substate to catch an issue discovered in\n            _determine_missing_parent_states while writing the regression test where\n            invalid parent state names were being constructed.\n            \"\"\"\n    \n            pass\n    \n        class GreatGrandchild3(Grandchild3):\n            \"\"\"Fetching this state wants to also fetch Child3 as a missing parent.\n            However, Child3 should already be cached in the state tree because it\n            has a computed var.\n            \"\"\"\n    \n            pass\n    \n        mock_app.state_manager.state = mock_app.state = Parent\n    \n        # Get the top level state via unconnected sibling.\n        root = await mock_app.state_manager.get_state(_substate_key(token, Child))\n        # Set value in parent_var to assert it does not get refetched later.\n        root.parent_var = 1\n    \n        if isinstance(mock_app.state_manager, StateManagerRedis):\n            # When redis is used, only states with computed vars are pre-fetched.\n            assert \"child2\" not in root.substates\n            assert \"child3\" in root.substates  # (due to @rx.var)\n    \n        # Get the unconnected sibling state, which will be used to `get_state` other instances.\n        child = root.get_substate(Child.get_full_name().split(\".\"))\n    \n        # Get an uncached child state.\n>       child2 = await child.get_state(Child2)\n\ntests/test_state.py:2895: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1317: in get_state\n    substate_key = _substate_key(self.client_token, state_cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Child({'parent.child': {}}), name = 'client_token'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'Child' object has no attribute 'client_token'\n\nreflex/state.py:1040: AttributeError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = 'ee6a5a3d-918e-4518-b2e9-4495209b9527'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n>       child_state2_get_state = await test_state.get_state(ChildState2)\n\ntests/test_state.py:2734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1317: in get_state\n    substate_key = _substate_key(self.client_token, state_cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...value2': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\nname = 'client_token'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'TestState' object has no attribute 'client_token'\n\nreflex/state.py:1040: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_get_state_from_sibling_not_cached[in_process]\nFAILED tests/test_state.py::test_get_state[in_process] - AttributeError: 'Tes...\n============= 2 failed, 2 passed, 14 skipped, 5 warnings in 0.93s ==============\n\n"], "reflex-reflex/state.py-_process": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/test_app.py FFFFFFFFFFF                                            [ 52%]\ntests/test_state.py FFFFFFFFFs                                           [100%]\n\n=================================== FAILURES ===================================\n______ test_dict_mutation_detection__plain_list[update then __setitem__] _______\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...ny'}}}), ('dict_mutation_test_state.remove_last_detail', {'dict_mutation_test_state': {'details': {'name': 'Jenny'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '0711cca8-7a01-4baf-885f-d85bdcc12155'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...e': 'Tommy'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n----------------------------- Captured stdout call -----------------------------\n[14:47:32] Error processing event                                 console.py:104\n           dict_mutation_test_state.add_age: No event handler                   \n           found for event: dict_mutation_test_state.add_age                    \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           dict_mutation_test_state.add_age                                     \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-2' coro=<<async_generator_athrow without __name__>()>>\n________ test_dict_mutation_detection__plain_list[delitem then update] _________\n\nevent_tuples = [('dict_mutation_test_state.clear_details', {'dict_mutation_test_state': {'details': {}}}), ('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'd36ef3f0-0a89-42ef-aaa4-2aa7b977bb9c'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...details': {}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           dict_mutation_test_state.clear_details: No event                     \n           handler found for event:                                             \n           dict_mutation_test_state.clear_details                               \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           dict_mutation_test_state.clear_details                               \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-4' coro=<<async_generator_athrow without __name__>()>>\n__________ test_dict_mutation_detection__plain_list[add, remove, pop] __________\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...': {'details': {'age': 20}}}), ('dict_mutation_test_state.pop_out_age', {'dict_mutation_test_state': {'details': {}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'a987ff9c-e8ab-4dfe-859b-3eedb37b4c3a'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...e': 'Tommy'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           dict_mutation_test_state.add_age: No event handler                   \n           found for event: dict_mutation_test_state.add_age                    \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           dict_mutation_test_state.add_age                                     \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-6' coro=<<async_generator_athrow without __name__>()>>\n____________ test_dict_mutation_detection__plain_list[dict in list] ____________\n\nevent_tuples = [('dict_mutation_test_state.remove_home_address', {'dict_mutation_test_state': {'address': [{}, {'work': 'work address...to_home_address', {'dict_mutation_test_state': {'address': [{'street': 'street address'}, {'work': 'work address'}]}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '4a0e1d41-b180-470b-bf8a-6901deb2e53b'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...k address'}]}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'address': [{}, {'work': 'work address'}]}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           dict_mutation_test_state.remove_home_address: No event               \n           handler found for event:                                             \n           dict_mutation_test_state.remove_home_address                         \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           dict_mutation_test_state.remove_home_address                         \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-8' coro=<<async_generator_athrow without __name__>()>>\n____________ test_dict_mutation_detection__plain_list[nested dict] _____________\n\nevent_tuples = [('dict_mutation_test_state.change_friend_name', {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'n...'dict_mutation_test_state.remove_friend', {'dict_mutation_test_state': {'friend_in_nested_dict': {'name': 'Nikhil'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'e6cb11d5-c368-4056-9bf5-0904d242494d'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...': 'Nikhil'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'name': 'Tommy'},\nE                                                                     'name': 'Nikhil'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           dict_mutation_test_state.change_friend_name: No event                \n           handler found for event:                                             \n           dict_mutation_test_state.change_friend_name                          \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           dict_mutation_test_state.change_friend_name                          \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-10' coro=<<async_generator_athrow without __name__>()>>\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = 'eb6b24df-3094-4cba-9f9a-64d0606143de'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n        result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n        ).__anext__()\n>       assert result.delta == {test_state.get_name(): {\"int_val\": 50}}\nE       AssertionError: assert {} == {'a_test_stat...int_val': 50}}\nE         \nE         Right contains 1 more item:\nE         {'a_test_state': {'int_val': 50}}\nE         Use -v to get more diff\n\ntests/test_app.py:476: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event a_test_state.set_int_val: No    console.py:104\n           event handler found for event:                                       \n           a_test_state.set_int_val                                             \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           a_test_state.set_int_val                                             \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-12' coro=<<async_generator_athrow without __name__>()>>\n______ test_list_mutation_detection__plain_list[append then __setitem__] _______\n\nevent_tuples = [('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}), ('list_mutation_test_state.change_first_friend', {'list_mutation_test_state': {'plain_friends': ['Jenny', 'another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'e085f696-eab3-4d38-9b1d-5c4c0088baa8'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...another-fd']}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           list_mutation_test_state.make_friend: No event handler               \n           found for event: list_mutation_test_state.make_friend                \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           list_mutation_test_state.make_friend                                 \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-14' coro=<<async_generator_athrow without __name__>()>>\n________ test_list_mutation_detection__plain_list[delitem then append] _________\n\nevent_tuples = [('list_mutation_test_state.unfriend_first_friend', {'list_mutation_test_state': {'plain_friends': []}}), ('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'ce403399-ba1f-4f44-baed-f7d930484769'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...friends': []}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': []}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           list_mutation_test_state.unfriend_first_friend: No                   \n           event handler found for event:                                       \n           list_mutation_test_state.unfriend_first_friend                       \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           list_mutation_test_state.unfriend_first_friend                       \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-16' coro=<<async_generator_athrow without __name__>()>>\n_____ test_list_mutation_detection__plain_list[extend, remove, pop, clear] _____\n\nevent_tuples = [('list_mutation_test_state.make_friends_with_colleagues', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'P...: ['Peter']}}), ('list_mutation_test_state.unfriend_all_friends', {'list_mutation_test_state': {'plain_friends': []}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '7ea7dd9a-18b4-40d0-8468-34a45e371454'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...r', 'Jimmy']}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': ['Tommy', 'Peter', 'Jimmy']}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           list_mutation_test_state.make_friends_with_colleagues:               \n           No event handler found for event:                                    \n           list_mutation_test_state.make_friends_with_colleagues                \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           list_mutation_test_state.make_friends_with_colleagues                \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-18' coro=<<async_generator_athrow without __name__>()>>\n____________ test_list_mutation_detection__plain_list[nested list] _____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_second_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Tom...tation_test_state.remove_first_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Jenny', 'Jimmy']]}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '06b412fa-a84b-40a8-a5b1-c111270189fa'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...', 'Jimmy']]}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'friends_in_nested_list': [['Tommy'],\nE                                                                      ['Jenny', 'Jimmy']]}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           list_mutation_test_state.add_jimmy_to_second_group: No               \n           event handler found for event:                                       \n           list_mutation_test_state.add_jimmy_to_second_group                   \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           list_mutation_test_state.add_jimmy_to_second_group                   \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-20' coro=<<async_generator_athrow without __name__>()>>\n____________ test_list_mutation_detection__plain_list[list in dict] ____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_tommy_friends', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['...]}}}), ('list_mutation_test_state.tommy_has_no_fds', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': []}}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '12ed7672-a94a-43c1-b6a6-5d2a5d6c2ac4'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...', 'Jimmy']}}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny', 'Jimmy']}}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           list_mutation_test_state.add_jimmy_to_tommy_friends:                 \n           No event handler found for event:                                    \n           list_mutation_test_state.add_jimmy_to_tommy_friends                  \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           list_mutation_test_state.add_jimmy_to_tommy_friends                  \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-22' coro=<<async_generator_athrow without __name__>()>>\n_________________________ test_process_event_generator _________________________\n\n    @pytest.mark.asyncio\n    async def test_process_event_generator():\n        \"\"\"Test event handlers that generate multiple updates.\"\"\"\n        gen_state = GenState()  # type: ignore\n        event = Event(\n            token=\"t\",\n            name=\"go\",\n            payload={\"c\": 5},\n        )\n        gen = gen_state._process(event)\n    \n        count = 0\n        async for update in gen:\n            count += 1\n            if count == 6:\n                assert update.delta == {}\n                assert update.final\n            else:\n>               assert gen_state.value == count\nE               AssertionError: assert 0 == 1\nE                +  where 0 = GenState({'gen_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'headers': {'ho...}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'value': 0}}).value\n\ntests/test_state.py:786: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event go: 'async for' requires an     console.py:104\n           object with __aiter__ method, got EventSpec                          \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1374, in _process                                               \n               async for state_update in handler(event):                        \n           TypeError: 'async for' requires an object with                       \n           __aiter__ method, got EventSpec                                      \n                                                                                \n_________________________ test_process_event_substate __________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ngrandchild_state = GrandchildState({'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_substate(test_state, child_state, grandchild_state):\n        \"\"\"Test processing an event on a substate.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n            grandchild_state: A grandchild state.\n        \"\"\"\n        # Events should bubble down to the substate.\n        assert child_state.value == \"\"\n        assert child_state.count == 23\n        event = Event(\n            token=\"t\", name=\"child_state.change_both\", payload={\"value\": \"hi\", \"count\": 12}\n        )\n        update = await test_state._process(event).__anext__()\n>       assert child_state.value == \"HI\"\nE       AssertionError: assert '' == 'HI'\nE         \nE         - HI\n\ntests/test_state.py:743: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event child_state.change_both: No     console.py:104\n           event handler found for event: child_state.change_both               \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           child_state.change_both                                              \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-25' coro=<<async_generator_athrow without __name__>()>>\n__________________________ test_process_event_simple ___________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_simple(test_state):\n        \"\"\"Test processing an event.\n    \n        Args:\n            test_state: A state.\n        \"\"\"\n        assert test_state.num1 == 0\n    \n        event = Event(token=\"t\", name=\"set_num1\", payload={\"value\": 69})\n        update = await test_state._process(event).__anext__()\n    \n        # The event should update the value.\n>       assert test_state.num1 == 69\nE       AssertionError: assert 0 == 69\nE        +  where 0 = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}).num1\n\ntests/test_state.py:716: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event set_num1: 'async for' requires  console.py:104\n           an object with __aiter__ method, got EventSpec                       \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1374, in _process                                               \n               async for state_update in handler(event):                        \n           TypeError: 'async for' requires an object with                       \n           __aiter__ method, got EventSpec                                      \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-27' coro=<<async_generator_athrow without __name__>()>>\n____________________ test_preprocess[OnLoadState-expected0] ____________________\n\napp_module_mock = <Mock id='140492480993200'>\ntoken = 'bb61e089-450c-4239-8644-46c1afe5da89'\ntest_state = <class 'tests.test_state.OnLoadState'>\nexpected = {'on_load_state': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fc6f46c4130>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           state.on_load_internal_state.on_load_internal: No                    \n           event handler found for event:                                       \n           state.on_load_internal_state.on_load_internal                        \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           state.on_load_internal_state.on_load_internal                        \n                                                                                \n___________________ test_preprocess[OnLoadState2-expected1] ____________________\n\napp_module_mock = <Mock id='140492478959280'>\ntoken = 'e70d8fd8-4ab3-4e08-b77e-9a614311f77d'\ntest_state = <class 'tests.test_state.OnLoadState2'>\nexpected = {'on_load_state2': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fc6f44d6fe0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           state.on_load_internal_state.on_load_internal: No                    \n           event handler found for event:                                       \n           state.on_load_internal_state.on_load_internal                        \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           state.on_load_internal_state.on_load_internal                        \n                                                                                \n___________________ test_preprocess[OnLoadState3-expected2] ____________________\n\napp_module_mock = <Mock id='140492481887488'>\ntoken = '52647b71-13f5-493c-af97-1e5b28dfa751'\ntest_state = <class 'tests.test_state.OnLoadState3'>\nexpected = {'on_load_state3': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fc6f479f8b0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n----------------------------- Captured stdout call -----------------------------\n[14:47:33] Error processing event                                 console.py:104\n           state.on_load_internal_state.on_load_internal: No                    \n           event handler found for event:                                       \n           state.on_load_internal_state.on_load_internal                        \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           state.on_load_internal_state.on_load_internal                        \n                                                                                \n_____________________ test_preprocess_multiple_load_events _____________________\n\napp_module_mock = <Mock id='140492492524464'>\ntoken = '7c5d024b-1a36-4a15-9e9f-88fd21f9d0d3'\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fc6f51c48b0>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_multiple_load_events(app_module_mock, token, mocker):\n        \"\"\"Test that a state hydrate event for multiple on-load events is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {OnLoadState, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State,\n            load_events={\"index\": [OnLoadState.test_handler, OnLoadState.test_handler]},\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_full_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2686: KeyError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event                                 console.py:104\n           state.on_load_internal_state.on_load_internal: No                    \n           event handler found for event:                                       \n           state.on_load_internal_state.on_load_internal                        \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           state.on_load_internal_state.on_load_internal                        \n                                                                                \n________________________ test_state_with_invalid_yield _________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7fc6f4752080>\n\n    @pytest.mark.asyncio\n    async def test_state_with_invalid_yield(capsys):\n        \"\"\"Test that an error is thrown when a state yields an invalid value.\n    \n        Args:\n            capsys: Pytest fixture for capture standard streams.\n        \"\"\"\n    \n        class StateWithInvalidYield(BaseState):\n            \"\"\"A state that yields an invalid value.\"\"\"\n    \n            def invalid_handler(self):\n                \"\"\"Invalid handler.\n    \n                Yields:\n                    an invalid value.\n                \"\"\"\n                yield 1\n    \n        invalid_state = StateWithInvalidYield()\n        async for update in invalid_state._process(\n            rx.event.Event(token=\"fake_token\", name=\"invalid_handler\")\n        ):\n            assert not update.delta\n>           assert update.events == rx.event.fix_events(\n                [rx.window_alert(\"An error occurred. See logs for details.\")],\n                token=\"\",\n            )\nE           AssertionError: assert [] == [Event(token=...r details.'})]\nE             \nE             Right contains one more item: Event(token='', name='_alert', router_data={}, payload={'message': 'An error occurred. See logs for details.'})\nE             Use -v to get more diff\n\ntests/test_state.py:1490: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event invalid_handler: 'async for'    console.py:104\n           requires an object with __aiter__ method, got                        \n           EventSpec                                                            \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1374, in _process                                               \n               async for state_update in handler(event):                        \n           TypeError: 'async for' requires an object with                       \n           __aiter__ method, got EventSpec                                      \n                                                                                \n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-33' coro=<<async_generator_athrow without __name__>()>>\n___________________________ test_setvar[in_process] ____________________________\n\nmock_app = <App state=TestState>, token = 'eb64f61d-15c2-41b4-9d99-8e238029981d'\n\n    @pytest.mark.asyncio\n    async def test_setvar(mock_app: rx.App, token: str):\n        \"\"\"Test that setvar works correctly.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        state = await mock_app.state_manager.get_state(_substate_key(token, TestState))\n    \n        # Set Var in same state (with Var type casting)\n        for event in rx.event.fix_events(\n            [TestState.setvar(\"num1\", 42), TestState.setvar(\"num2\", \"4.2\")], token\n        ):\n            async for update in state._process(event):\n                print(update)\n>       assert state.num1 == 42\nE       AssertionError: assert 0 == 42\nE        +  where 0 = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}).num1\n\ntests/test_state.py:2951: AssertionError\n----------------------------- Captured stdout call -----------------------------\n           Error processing event test_state.setvar: No event     console.py:104\n           handler found for event: test_state.setvar                           \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           test_state.setvar                                                    \n                                                                                \ndelta={} events=[] final=True message='An error occurred while processing event: No event handler found for event: test_state.setvar' success=False\n           Error processing event test_state.setvar: No event     console.py:104\n           handler found for event: test_state.setvar                           \n           Traceback (most recent call last):                                   \n             File \"/root/repos/py_data/reflex/reflex/state.py\",                 \n           line 1371, in _process                                               \n               raise ValueError(f\"No event handler found for                    \n           event: {event.name}\")                                                \n           ValueError: No event handler found for event:                        \n           test_state.setvar                                                    \n                                                                                \ndelta={} events=[] final=True message='An error occurred while processing event: No event handler found for event: test_state.setvar' success=False\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[update then __setitem__]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[delitem then update]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[add, remove, pop]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[dict in list]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[nested dict]\nFAILED tests/test_app.py::test_dynamic_var_event - AssertionError: assert {} ...\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[append then __setitem__]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[delitem then append]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[extend, remove, pop, clear]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[nested list]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[list in dict]\nFAILED tests/test_state.py::test_process_event_generator - AssertionError: as...\nFAILED tests/test_state.py::test_process_event_substate - AssertionError: ass...\nFAILED tests/test_state.py::test_process_event_simple - AssertionError: asser...\nFAILED tests/test_state.py::test_preprocess[OnLoadState-expected0] - KeyError...\nFAILED tests/test_state.py::test_preprocess[OnLoadState2-expected1] - KeyErro...\nFAILED tests/test_state.py::test_preprocess[OnLoadState3-expected2] - KeyErro...\nFAILED tests/test_state.py::test_preprocess_multiple_load_events - KeyError: ...\nFAILED tests/test_state.py::test_state_with_invalid_yield - AssertionError: a...\nFAILED tests/test_state.py::test_setvar[in_process] - AssertionError: assert ...\n================== 20 failed, 1 skipped, 5 warnings in 1.11s ===================\n\n"], "reflex-reflex/state.py-_dirty_computed_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py .                                                    [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.25s =========================\n\n"], "reflex-reflex/state.py-_potentially_dirty_substates": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_potentially_dirty_substates _______________________\n\n    def test_potentially_dirty_substates():\n        \"\"\"Test that potentially_dirty_substates returns the correct substates.\n    \n        Even if the name \"State\" is shadowed, it should still work correctly.\n        \"\"\"\n    \n        class State(RxState):\n            @ComputedVar\n            def foo(self) -> str:\n                return \"\"\n    \n        class C1(State):\n            @ComputedVar\n            def bar(self) -> str:\n                return \"\"\n    \n>       assert RxState._potentially_dirty_substates() == {State}\n\ntests/test_state.py:2930: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'reflex.state.State'>\n\n    @classmethod\n    def _potentially_dirty_substates(cls) -> set[Type[BaseState]]:\n        \"\"\"Determine substates which could be affected by dirty vars in this state.\n    \n        Returns:\n            Set of State classes that may need to be fetched to recalc computed vars.\n        \"\"\"\n        potentially_dirty_substates = set()\n    \n        # Check which substates have vars dependent on dirty vars of this state\n>       for dirty_var in cls.dirty_vars:\nE       AttributeError: type object 'State' has no attribute 'dirty_vars'\n\nreflex/state.py:1556: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_potentially_dirty_substates - AttributeError...\n======================== 1 failed, 5 warnings in 0.45s =========================\n\n"], "reflex-reflex/state.py-get_delta": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 15 items\n\ntests/test_state.py FFF                                                  [ 20%]\ntests/test_state_tree.py sssssssss                                       [ 80%]\ntests/test_state.py FFs                                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_dirty_computed_var_from_var _______________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\n\n    def test_dirty_computed_var_from_var(interdependent_state: InterdependentState) -> None:\n        \"\"\"Set Var that ComputedVar depends on, expect recalculation.\n    \n        The other ComputedVar depends on the changed ComputedVar and should also be\n        recalculated. No other ComputedVars should be recalculated.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.v1 = 1\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v1\": 1, \"v1x2\": 2, \"v1x2x2\": 4},\n        }\nE       AssertionError: assert {'v1': 1} == {'interdepend... 'v1x2x2': 4}}\nE         \nE         Left contains 1 more item:\nE         {'v1': 1}\nE         Right contains 1 more item:\nE         {'interdependent_state': {'v1': 1, 'v1x2': 2, 'v1x2x2': 4}}\nE         Use -v to get more diff\n\ntests/test_state.py:1001: AssertionError\n___________________ test_dirty_computed_var_from_backend_var ___________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\n\n    def test_dirty_computed_var_from_backend_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set backend var that ComputedVar depends on, expect recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        assert InterdependentState._v3._backend is True\n        interdependent_state._v2 = 2\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v2x2\": 4, \"v3x2\": 4},\n        }\nE       AssertionError: assert {} == {'interdepend...4, 'v3x2': 4}}\nE         \nE         Right contains 1 more item:\nE         {'interdependent_state': {'v2x2': 4, 'v3x2': 4}}\nE         Use -v to get more diff\n\ntests/test_state.py:1016: AssertionError\n_____________________ test_not_dirty_computed_var_from_var _____________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\n\n    def test_not_dirty_computed_var_from_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set Var that no ComputedVar depends on, expect no recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.x = 5\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"x\": 5},\n        }\nE       AssertionError: assert {'x': 5} == {'interdepend...te': {'x': 5}}\nE         \nE         Left contains 1 more item:\nE         {'x': 5}\nE         Right contains 1 more item:\nE         {'interdependent_state': {'x': 5}}\nE         Use -v to get more diff\n\ntests/test_state.py:986: AssertionError\n________________ test_computed_var_cached_depends_on_non_cached ________________\n\n    def test_computed_var_cached_depends_on_non_cached():\n        \"\"\"Test that a cached var is recalculated if it depends on non-cached ComputedVar.\"\"\"\n    \n        class ComputedState(BaseState):\n            v: int = 0\n    \n            @rx.var\n            def no_cache_v(self) -> int:\n                return self.v\n    \n            @rx.var(cache=True)\n            def dep_v(self) -> int:\n                return self.no_cache_v  # type: ignore\n    \n            @rx.var(cache=True)\n            def comp_v(self) -> int:\n                return self.v\n    \n        cs = ComputedState()\n        assert cs.dirty_vars == set()\n>       assert cs.get_delta() == {cs.get_name(): {\"no_cache_v\": 0, \"dep_v\": 0}}\nE       AssertionError: assert {} == {'computed_st..._cache_v': 0}}\nE         \nE         Right contains 1 more item:\nE         {'computed_state': {'dep_v': 0, 'no_cache_v': 0}}\nE         Use -v to get more diff\n\ntests/test_state.py:1183: AssertionError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = '02a484c0-b276-400c-ad36-ac338008044a'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n        assert child_state2_direct is child_state2_get_state\n    \n        # Get arbitrary GrandchildState.\n        grandchild_state = await child_state2_get_state.get_state(GrandchildState)\n        assert isinstance(grandchild_state, GrandchildState)\n    \n        # Now the original root should have all substates populated.\n        assert tuple(sorted(test_state.substates)) == (\n            \"child_state\",\n            \"child_state2\",\n            \"child_state3\",\n        )\n    \n        # ChildState should be retrievable\n        child_state_direct = test_state.get_substate([\"child_state\"])\n        child_state_get_state = await test_state.get_state(ChildState)\n        # These should be the same object.\n        assert child_state_direct is child_state_get_state\n    \n        # GrandchildState instance should be the same as the one retrieved from the child_state2.\n        assert grandchild_state is child_state_direct.get_substate([\"grandchild_state\"])\n        grandchild_state.value2 = \"set_value\"\n    \n>       assert test_state.get_delta() == {\n            TestState.get_full_name(): {\n                \"sum\": 3.14,\n                \"upper\": \"\",\n            },\n            GrandchildState.get_full_name(): {\n                \"value2\": \"set_value\",\n            },\n            GrandchildState3.get_full_name(): {\n                \"computed\": \"\",\n            },\n        }\nE       AssertionError: assert {'child_state...'set_value'}}} == {'test_state'...omputed': ''}}\nE         \nE         Left contains 1 more item:\nE         {'child_state': {'grandchild_state': {'value2': 'set_value'}}}\nE         Right contains 3 more items:\nE         {'test_state': {'sum': 3.14, 'upper': ''},\nE          'test_state.child_state.grandchild_state': {'value2': 'set_value'},\nE          'test_state.child_state3.grandchild_state3': {'computed': ''}}\nE         Use -v to get more diff\n\ntests/test_state.py:2759: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_dirty_computed_var_from_var - AssertionError...\nFAILED tests/test_state.py::test_dirty_computed_var_from_backend_var - Assert...\nFAILED tests/test_state.py::test_not_dirty_computed_var_from_var - AssertionE...\nFAILED tests/test_state.py::test_computed_var_cached_depends_on_non_cached - ...\nFAILED tests/test_state.py::test_get_state[in_process] - AssertionError: asse...\n================== 5 failed, 10 skipped, 5 warnings in 0.66s ===================\n\n"], "reflex-reflex/model.py-get_db_engine": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py .                                                    [ 50%]\ntests/test_sqlalchemy.py .                                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.27s =========================\n\n"], "reflex-reflex/model.py-alembic_autogenerate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f7487544e80>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n        with Model.get_db_engine().connect() as connection:\n>           assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\nE           TypeError: Model.alembic_autogenerate() got multiple values for argument 'connection'\n\n/root/repos/py_data/reflex/tests/test_model.py:93: TypeError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2471/test_automigration0/working_dir/alembic.ini' before proceeding.\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f7487473940>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n        with Model.get_db_engine().connect() as connection:\n>           assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\nE           TypeError: Model.alembic_autogenerate() got multiple values for argument 'connection'\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:66: TypeError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2471/test_automigration1/working_dir/alembic.ini' before proceeding.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - TypeError: Model.alembic_aut...\nFAILED tests/test_sqlalchemy.py::test_automigration - TypeError: Model.alembi...\n======================== 2 failed, 5 warnings in 0.12s =========================\n\n"], "reflex-reflex/model.py-migrate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7faff3814f40>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n        with Model.get_db_engine().connect() as connection:\n            assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\n        assert Model.migrate()\n        version_scripts = list(versions.glob(\"*.py\"))\n        assert len(version_scripts) == 1\n        assert version_scripts[0].name.endswith(\"initial_revision.py\")\n    \n        with reflex.model.session() as session:\n            session.add(AlembicThing(id=None, t1=\"foo\"))\n            session.commit()\n    \n        model_registry.get_metadata().clear()\n    \n        # Create column t2, mark t1 as optional with default\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: Optional[str] = \"default\"\n            t2: str = \"bar\"\n    \n>       assert Model.migrate(autogenerate=True)\n\n/root/repos/py_data/reflex/tests/test_model.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/model.py:396: in migrate\n    alembic.command.revision(\n/usr/local/lib/python3.10/site-packages/alembic/command.py:236: in revision\n    script_directory.run_env()\n/usr/local/lib/python3.10/site-packages/alembic/script/base.py:582: in run_env\n    util.load_python_file(self.dir, \"env.py\")\n/usr/local/lib/python3.10/site-packages/alembic/util/pyfiles.py:95: in load_python_file\n    module = load_module_py(module_id, path)\n/usr/local/lib/python3.10/site-packages/alembic/util/pyfiles.py:113: in load_module_py\n    spec.loader.exec_module(module)  # type: ignore\n<frozen importlib._bootstrap_external>:883: in exec_module\n    ???\n<frozen importlib._bootstrap>:241: in _call_with_frames_removed\n    ???\n/tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/env.py:78: in <module>\n    run_migrations_online()\n/tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/env.py:60: in run_migrations_online\n    connectable = engine_from_config(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:820: in engine_from_config\n    return create_engine(url, **options)\n<string>:2: in create_engine\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:550: in create_engine\n    entrypoint = u._get_entrypoint()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/url.py:758: in _get_entrypoint\n    cls = registry.load(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7fb040ce5150>\nname = 'driver'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:driver\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:375: NoSuchModuleError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic.ini' before proceeding.\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration0/working_dir/alembic/versions/7bb10c9279f2_initial_revision.py ...  done\n______________________________ test_automigration ______________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7faff3414c40>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faff3414280>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faff36b0b80>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7faff3417310>\nparameters = [('foo',)]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1967: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faff3414280>\ncursor = <sqlite3.Cursor object at 0x7faff3349ac0>\nstatement = 'INSERT INTO alembicthing (t1) VALUES (?)', parameters = ('foo',)\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faff36b0b80>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: alembicthing.t2\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/default.py:924: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7faff3415930>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n        with Model.get_db_engine().connect() as connection:\n            assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\n        assert Model.migrate()\n        version_scripts = list(versions.glob(\"*.py\"))\n        assert len(version_scripts) == 1\n        assert version_scripts[0].name.endswith(\"initial_revision.py\")\n    \n        with sqla_session() as session:\n            session.add(AlembicThing(t1=\"foo\"))\n>           session.commit()\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2017: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1302: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1277: in _prepare_impl\n    self.session.flush()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/session.py:4341: in flush\n    self._flush(objects)\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/session.py:4476: in _flush\n    with util.safe_reraise():\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/session.py:4437: in _flush\n    flush_context.execute()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context\n    return self._exec_single_context(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context\n    self._handle_dbapi_exception(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2353: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faff3414280>\ncursor = <sqlite3.Cursor object at 0x7faff3349ac0>\nstatement = 'INSERT INTO alembicthing (t1) VALUES (?)', parameters = ('foo',)\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faff36b0b80>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: alembicthing.t2\nE       [SQL: INSERT INTO alembicthing (t1) VALUES (?)]\nE       [parameters: ('foo',)]\nE       (Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/default.py:924: IntegrityError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic.ini' before proceeding.\nGenerating /tmp/pytest-of-root/pytest-2472/test_automigration1/working_dir/alembic/versions/dcfa7dc64cb3_initial_revision.py ...  done\n----------------------------- Captured stderr call -----------------------------\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'alembicthing'\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade  -> dcfa7dc64cb3, Initial Revision\n------------------------------ Captured log call -------------------------------\nINFO     alembic.runtime.migration:migration.py:215 Context impl SQLiteImpl.\nINFO     alembic.runtime.migration:migration.py:218 Will assume non-transactional DDL.\nINFO     alembic.autogenerate.compare:compare.py:189 Detected added table 'alembicthing'\nINFO     alembic.runtime.migration:migration.py:215 Context impl SQLiteImpl.\nINFO     alembic.runtime.migration:migration.py:218 Will assume non-transactional DDL.\nINFO     alembic.runtime.migration:migration.py:623 Running upgrade  -> dcfa7dc64cb3, Initial Revision\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\ntests/test_sqlalchemy.py::test_automigration\n  /root/repos/py_data/reflex/reflex/model.py:128: SAWarning:\n  \n  Table 'alembicthing' already exists within the given MetaData - not copying.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - sqlalchemy.exc.NoSuchModuleE...\nFAILED tests/test_sqlalchemy.py::test_automigration - sqlalchemy.exc.Integrit...\n======================== 2 failed, 6 warnings in 0.60s =========================\n\n"], "reflex-reflex/model.py-select": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 386\nE       from sqlalchemy import select as sqlalchemy_select\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/compiler/compiler.py-compile_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncomponents = {{\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}}\n\n    def compile_components(\n        components: set[CustomComponent],\n    ) -> tuple[str, str]:\n        \"\"\"Compile the custom components.\n    \n        Args:\n            components: The custom components to compile.\n    \n        Returns:\n            The path and code of the compiled components.\n        \"\"\"\n        # Compile the components using the existing internal method.\n        compiled_components_str, imports = _compile_components(components)\n    \n        # Determine the path for the output file.\n>       output_path = utils.get_component_path()\nE       AttributeError: module 'reflex.compiler.utils' has no attribute 'get_component_path'. Did you mean: 'get_components_path'?\n\nreflex/compiler/compiler.py:439: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 1 failed, 5 warnings in 0.82s =========================\n\n"], "reflex-reflex/utils/prerequisites.py-get_or_set_last_reflex_version_check_datetime": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.78s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/reflex/utils/prerequisites.py::check_latest_package_version\n(no match in any of [<Module prerequisites.py>])\n\n"], "reflex-reflex/middleware/hydrate_middleware.py-preprocess": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/middleware/test_hydrate_middleware.py F                            [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_preprocess_no_events ___________________________\n\nhydrate_middleware = HydrateMiddleware()\nevent1 = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f35e03a20e0>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_no_events(hydrate_middleware, event1, mocker):\n        \"\"\"Test that app without on_load is processed correctly.\n    \n        Args:\n            hydrate_middleware: Instance of HydrateMiddleware\n            event1: An Event.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\"reflex.state.State.class_subclasses\", {TestState})\n        state = State()\n>       update = await hydrate_middleware.preprocess(\n            app=App(state=State),\n            event=event1,\n            state=state,\n        )\nE       TypeError: HydrateMiddleware.preprocess() got multiple values for argument 'app'\n\ntests/middleware/test_hydrate_middleware.py:43: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/middleware/test_hydrate_middleware.py::test_preprocess_no_events\n======================== 1 failed, 5 warnings in 0.10s =========================\n\n"], "reflex-reflex/components/component.py-get_event_triggers": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/components/test_component.py ______________\ntests/components/test_component.py:1225: in <module>\n    rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\nreflex/components/component.py:784: in create\n    return cls(children=children, **props)\nreflex/components/component.py:382: in __init__\n    raise ValueError(\nE   ValueError: The Fragment does not take in an `on_click` event trigger. If Fragment is a third party component make sure to add `on_click` to the component's event triggers. visit https://reflex.dev/docs/wrapping-react/guide/#event-triggers for more info.\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (hello) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (1) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (foo<reflex.Var>{\"state\": \"Test\", \n\"interpolations\": [], \"imports\": {\"test\": [{\"tag\": \"test\", \"is_default\": false, \n\"alias\": null, \"install\": true, \"render\": true, \"transpile\": false}]}, \"hooks\": \n{\"useTest\": null}, \"string_length\": 4}</reflex.Var>testbar) from a string \nwithout specifying _var_is_string has been deprecated in version 0.5.4 Specify \n_var_is_string=False to create a Var that is not a string literal. In the \nfuture, creating a Var from a string will be treated as a string literal by \ndefault. It will be completely removed in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/test_component.py - ValueError: The Fragment does not ...\n========================= 5 warnings, 1 error in 0.75s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_declare_event_handlers_in_fields\n\n"], "reflex-reflex/components/component.py-get_props": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:816: in create\n    return cls(children=children, **props)\nreflex/components/component.py:361: in __init__\n    super().__init__(**initial_kwargs)\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: in __init__\n    raise validation_error\nE   pydantic.v1.error_wrappers.ValidationError: 7 validation errors for Theme\nE   has_background\nE     field required (type=value_error.missing)\nE   appearance\nE     field required (type=value_error.missing)\nE   accent_color\nE     field required (type=value_error.missing)\nE   gray_color\nE     field required (type=value_error.missing)\nE   panel_background\nE     field required (type=value_error.missing)\nE   radius\nE     field required (type=value_error.missing)\nE   scaling\nE     field required (type=value_error.missing)\n"], "reflex-reflex/components/component.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 16 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/components/test_component.py ______________\ntests/components/test_component.py:627: in <module>\n    (rx.text(\"first_text\"),),\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:760: in create\n    return cls(children=list(children), **props)\nreflex/components/component.py:361: in __init__\n    super().__init__(**initial_kwargs)\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: in __init__\n    raise validation_error\nE   pydantic.v1.error_wrappers.ValidationError: 1 validation error for Text\nE   children -> 0\nE     value is not a valid dict (type=type_error.dict)\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (hello) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (1) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/test_component.py - pydantic.v1.error_wrappers.Validat...\n========================= 5 warnings, 1 error in 0.67s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_unsupported_parent_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_instantiate_all_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_component\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_component_prop_validation\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_valid_parents\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_invalid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_add_style_foreach\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_with_only_valid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_hooks_nested2\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_create_unallowed_types\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_event_trigger_arbitrary_args\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_invalid_event_handler_args\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::wrapper\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::outer\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_create_unpack_tuple_child\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_custom_code\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_filters_none_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_valid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_hooks_nested\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_invalid_prop_type\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_var_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_declare_event_handlers_in_fields\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_rename_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_valid_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_unsupported_child_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_wrapper\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_hooks\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_get_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_hooks_var\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_deprecated_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_add_style_embedded_vars\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_custom_code\n\n"], "reflex-reflex/components/component.py-_add_style_recursive": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/core/test_foreach.py .                                  [ 33%]\ntests/components/test_component.py ..                                    [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 5 warnings in 0.77s =========================\n\n"], "reflex-reflex/components/component.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/components/test_component.py FFFF..                                [ 28%]\ntests/components/core/test_foreach.py ...........                        [ 80%]\ntests/components/test_component.py ..FF                                  [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_rename_props _______________________________\n\n    def test_rename_props():\n        \"\"\"Test that _rename_props works and is inherited.\"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            prop1: Var[str]\n            prop2: Var[str]\n    \n            _rename_props = {\"prop1\": \"renamed_prop1\", \"prop2\": \"renamed_prop2\"}\n    \n        class C2(C1):\n            tag = \"C2\"\n    \n            prop3: Var[str]\n    \n            _rename_props = {\"prop2\": \"subclass_prop2\", \"prop3\": \"renamed_prop3\"}\n    \n        c1 = C1.create(prop1=\"prop1_1\", prop2=\"prop2_1\")\n        rendered_c1 = c1.render()\n>       assert \"renamed_prop1={`prop1_1`}\" in rendered_c1[\"props\"]\nE       AssertionError: assert 'renamed_prop1={`prop1_1`}' in {'class_name': None, 'css': None, 'id': None, 'key': None, ...}\n\ntests/components/test_component.py:1597: AssertionError\n_________ test_component_create_unpack_tuple_child[element0-expected0] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"tag\": \"Text\", \"props\": {\"as_\": \"{`p`}\", \"css\": null, \"key\": null, \"id\": null, \"class_name\": null}},)\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'props': {'c...': 'Fragment'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'class_name': None, 'css': None, 'id': None, 'key': None}} != {'props': []}\nE         Left contains 1 more item:\nE         {'tag': 'Fragment'}\nE         Right contains 6 more items:\nE         {'args': None,...\nE         \nE         ...Full output truncated (18 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element1-expected1] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"tag\": \"Text\", \"props\": {\"as_\": \"{`p`}\", \"css\": null, \"key\": null, \"id\": null, \"class_name\": null}}, {\"tag\": \"Text\", \"props\": {\"as_\": \"{`p`}\", \"css\": null, \"key\": null, \"id\": null, \"class_name\": null}})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo..., 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'props': {'c...': 'Fragment'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'class_name': None, 'css': None, 'id': None, 'key': None}} != {'props': []}\nE         Left contains 1 more item:\nE         {'tag': 'Fragment'}\nE         Right contains 6 more items:\nE         {'args': None,...\nE         \nE         ...Full output truncated (31 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element2-expected2] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"tag\": \"Text\", \"props\": {\"as_\": \"{`p`}\", \"css\": null, \"key\": null, \"id\": null, \"class_name\": null}}, {\"tag\": \"Box\", \"props\": {\"css\": null, \"key\": null, \"id\": null, \"class_name\": null}})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo...rgs': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'props': {'c...': 'Fragment'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'class_name': None, 'css': None, 'id': None, 'key': None}} != {'props': []}\nE         Left contains 1 more item:\nE         {'tag': 'Fragment'}\nE         Right contains 6 more items:\nE         {'args': None,...\nE         \nE         ...Full output truncated (43 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________________ test_component_event_trigger_arbitrary_args __________________\n\n    def test_component_event_trigger_arbitrary_args():\n        \"\"\"Test that we can define arbitrary types for the args of an event trigger.\"\"\"\n    \n        class Obj(Base):\n            custom: int = 0\n    \n        def on_foo_spec(_e, alpha: str, bravo: Dict[str, Any], charlie: Obj):\n            return [_e.target.value, bravo[\"nested\"], charlie.custom + 42]\n    \n        class C1(Component):\n            library = \"/local\"\n            tag = \"C1\"\n    \n            def get_event_triggers(self) -> Dict[str, Any]:\n                return {\n                    **super().get_event_triggers(),\n                    \"on_foo\": on_foo_spec,\n                }\n    \n        comp = C1.create(on_foo=C1State.mock_handler)\n    \n>       assert comp.render()[\"props\"][0] == (\n            \"onFoo={(__e,_alpha,_bravo,_charlie) => addEvents(\"\n            '[Event(\"c1_state.mock_handler\", {_e:__e.target.value,_bravo:_bravo[\"nested\"],_charlie:((_charlie.custom) + (42))})], '\n            \"(__e,_alpha,_bravo,_charlie), {})}\"\n        )\nE       KeyError: 0\n\ntests/components/test_component.py:826: KeyError\n____________________________ test_deprecated_props _____________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f9e3cc41b40>\n\n    def test_deprecated_props(capsys):\n        \"\"\"Assert that deprecated underscore suffix props are translated.\n    \n        Args:\n            capsys: Pytest fixture for capturing stdout and stderr.\n        \"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            type: Var[str]\n            min: Var[str]\n            max: Var[str]\n    \n        # No warnings are emitted when using the new prop names.\n        c1_1 = C1.create(type=\"type1\", min=\"min1\", max=\"max1\")\n        out_err = capsys.readouterr()\n        assert not out_err.err\n        assert not out_err.out\n    \n        c1_1_render = c1_1.render()\n>       assert \"type={`type1`}\" in c1_1_render[\"props\"]\nE       AssertionError: assert 'type={`type1`}' in {'class_name': None, 'css': None, 'id': None, 'key': None, ...}\n\ntests/components/test_component.py:1628: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_rename_props - AssertionError...\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element0-expected0]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element1-expected1]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element2-expected2]\nFAILED tests/components/test_component.py::test_component_event_trigger_arbitrary_args\nFAILED tests/components/test_component.py::test_deprecated_props - AssertionE...\n=================== 6 failed, 15 passed, 5 warnings in 0.91s ===================\n\n"], "reflex-reflex/components/component.py-_get_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/components/test_component.py ....FFFFFFFFFFFFFF..FFF........       [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_get_vars[direct-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n__________________________ test_get_vars[fstring-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))])\n\ntests/components/test_component.py:1293: AssertionError\n__________________________ test_get_vars[direct-key] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n__________________________ test_get_vars[fstring-key] __________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))])\n\ntests/components/test_component.py:1293: AssertionError\n_______________________ test_get_vars[direct-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n______________________ test_get_vars[fstring-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))])\n\ntests/components/test_component.py:1293: AssertionError\n_____________________ test_get_vars[direct-special_props] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n_____________________ test_get_vars[fstring-special_props] _____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))])\n\ntests/components/test_component.py:1293: AssertionError\n__________________ test_get_vars[fstring-custom_attrs-nofmt] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n_____________________ test_get_vars[fstring-custom_attrs] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))])\n\ntests/components/test_component.py:1293: AssertionError\n____________________ test_get_vars[direct-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n___________________ test_get_vars[fstring-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n_________________ test_get_vars[direct-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n________________ test_get_vars[fstring-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +  and   1 = len([BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n___________________ test_get_vars[direct-event-handler-arg] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 2\nE        +  where 0 = len([])\nE        +  and   2 = len([BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n___________________ test_get_vars[direct-event-handler-arg2] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...False)]}, hooks={'const state__event_state = useContext(StateContexts.state__event_state)': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 2\nE        +  where 0 = len([])\nE        +  and   2 = len([BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...False)]}, hooks={'const state__event_state = useContext(StateContexts.state__event_state)': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n__________________ test_get_vars[direct-event-handler-lambda] __________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n        comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n>       assert len(comp_vars) == len(exp_vars)\nE       AssertionError: assert 0 == 2\nE        +  where 0 = len([])\nE        +  and   2 = len([BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))])\n\ntests/components/test_component.py:1293: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_vars[direct-id] - Asserti...\nFAILED tests/components/test_component.py::test_get_vars[fstring-id] - Assert...\nFAILED tests/components/test_component.py::test_get_vars[direct-key] - Assert...\nFAILED tests/components/test_component.py::test_get_vars[fstring-key] - Asser...\nFAILED tests/components/test_component.py::test_get_vars[direct-class_name]\nFAILED tests/components/test_component.py::test_get_vars[fstring-class_name]\nFAILED tests/components/test_component.py::test_get_vars[direct-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs-nofmt]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs]\nFAILED tests/components/test_component.py::test_get_vars[direct-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg2]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-lambda]\n================== 17 failed, 14 passed, 5 warnings in 1.18s ===================\n\n"], "reflex-reflex/components/component.py-_has_stateful_event_triggers": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/components/test_component.py ..FFF.FF                              [100%]\n\n=================================== FAILURES ===================================\n________________ test_has_state_event_triggers[component2-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1152: in _has_stateful_event_triggers\n    stateful_children = any(\nreflex/components/component.py:1153: in <genexpr>\n    isinstance(child, Component) and child._has_stateful_event_triggers()\nreflex/components/component.py:1146: in _has_stateful_event_triggers\n    stateful_event_triggers = any(\nreflex/components/component.py:1147: in <genexpr>\n    isinstance(handler, Var) and handler._refers_to_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = BaseVar(_var_name='toggleColorMode', _var_type=<class 'reflex.event.EventChain'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nname = '_refers_to_state'\n\n    def __getattr__(self, name: str) -> Var:\n        \"\"\"Get a var attribute.\n    \n        Args:\n            name: The name of the attribute.\n    \n        Returns:\n            The var attribute.\n    \n        Raises:\n            VarAttributeError: If the var is wrongly annotated or can't find attribute.\n            VarTypeError: If an annotation to the var isn't provided.\n        \"\"\"\n        # Check if the attribute is one of the class fields.\n        if not name.startswith(\"_\"):\n            if self._var_type == Any:\n                raise VarTypeError(\n                    f\"You must provide an annotation for the state var `{self._var_full_name}`. Annotation cannot be `{self._var_type}`\"\n                ) from None\n            is_optional = types.is_optional(self._var_type)\n            type_ = types.get_attribute_access_type(self._var_type, name)\n    \n            if type_ is not None:\n                return self._replace(\n                    _var_name=f\"{self._var_name}{'?' if is_optional else ''}.{name}\",\n                    _var_type=type_,\n                    _var_is_string=False,\n                )\n    \n            if name in REPLACED_NAMES:\n                raise VarAttributeError(\n                    f\"Field {name!r} was renamed to {REPLACED_NAMES[name]!r}\"\n                )\n    \n            raise VarAttributeError(\n                f\"The State var `{self._var_full_name}` has no attribute '{name}' or may have been annotated \"\n                f\"wrongly.\"\n            )\n    \n>       raise VarAttributeError(\n            f\"The State var has no attribute '{name}' or may have been annotated wrongly.\",\n        )\nE       reflex.utils.exceptions.VarAttributeError: The State var has no attribute '_refers_to_state' or may have been annotated wrongly.\n\nreflex/vars.py:824: VarAttributeError\n_______________ test_has_state_event_triggers[component3-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1152: in _has_stateful_event_triggers\n    stateful_children = any(\nreflex/components/component.py:1153: in <genexpr>\n    isinstance(child, Component) and child._has_stateful_event_triggers()\nreflex/components/component.py:1146: in _has_stateful_event_triggers\n    stateful_event_triggers = any(\nreflex/components/component.py:1147: in <genexpr>\n    isinstance(handler, Var) and handler._refers_to_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = BaseVar(_var_name='toggleColorMode', _var_type=<class 'reflex.event.EventChain'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nname = '_refers_to_state'\n\n    def __getattr__(self, name: str) -> Var:\n        \"\"\"Get a var attribute.\n    \n        Args:\n            name: The name of the attribute.\n    \n        Returns:\n            The var attribute.\n    \n        Raises:\n            VarAttributeError: If the var is wrongly annotated or can't find attribute.\n            VarTypeError: If an annotation to the var isn't provided.\n        \"\"\"\n        # Check if the attribute is one of the class fields.\n        if not name.startswith(\"_\"):\n            if self._var_type == Any:\n                raise VarTypeError(\n                    f\"You must provide an annotation for the state var `{self._var_full_name}`. Annotation cannot be `{self._var_type}`\"\n                ) from None\n            is_optional = types.is_optional(self._var_type)\n            type_ = types.get_attribute_access_type(self._var_type, name)\n    \n            if type_ is not None:\n                return self._replace(\n                    _var_name=f\"{self._var_name}{'?' if is_optional else ''}.{name}\",\n                    _var_type=type_,\n                    _var_is_string=False,\n                )\n    \n            if name in REPLACED_NAMES:\n                raise VarAttributeError(\n                    f\"Field {name!r} was renamed to {REPLACED_NAMES[name]!r}\"\n                )\n    \n            raise VarAttributeError(\n                f\"The State var `{self._var_full_name}` has no attribute '{name}' or may have been annotated \"\n                f\"wrongly.\"\n            )\n    \n>       raise VarAttributeError(\n            f\"The State var has no attribute '{name}' or may have been annotated wrongly.\",\n        )\nE       reflex.utils.exceptions.VarAttributeError: The State var has no attribute '_refers_to_state' or may have been annotated wrongly.\n\nreflex/vars.py:824: VarAttributeError\n________________ test_has_state_event_triggers[component4-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n________________ test_has_state_event_triggers[component6-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n________________ test_has_state_event_triggers[component7-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component2-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component3-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component4-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component6-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component7-True]\n=================== 5 failed, 3 passed, 5 warnings in 1.01s ====================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_get_custom_code _____________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\n\n    def test_get_custom_code(component1, component2):\n        \"\"\"Test getting the custom code of a component.\n    \n        Args:\n            component1: A test component.\n            component2: A test component.\n        \"\"\"\n        # Check that the code gets compiled correctly.\n        c1 = component1.create()\n        c2 = component2.create()\n>       assert c1._get_all_custom_code() == {\"console.log('component1')\"}\nE       assert set() == {\"console.log('component1')\"}\nE         \nE         Extra items in the right set:\nE         \"console.log('component1')\"\nE         Use -v to get more diff\n\ntests/components/test_component.py:468: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_custom_code - assert set(...\n======================== 1 failed, 5 warnings in 0.80s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_imports": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/components/test_component.py FFFFFFF                               [100%]\n\n=================================== FAILURES ===================================\n______________________ test_component_add_imports[tags0] _______________________\n\ntags = ['Component']\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\n\ntests/components/test_component.py:1803: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n______________________ test_component_add_imports[tags1] _______________________\n\ntags = ['Component', 'useState']\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\n\ntests/components/test_component.py:1803: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n______________________ test_component_add_imports[tags2] _______________________\n\ntags = [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False)]\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\n\ntests/components/test_component.py:1803: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n______________________ test_component_add_imports[tags3] _______________________\n\ntags = [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False), ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\n\ntests/components/test_component.py:1803: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n______________________ test_component_add_imports[tags4] _______________________\n\ntags = ['Component', ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\n\ntests/components/test_component.py:1803: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n>       assert \"inner\" not in custom_comp._get_all_imports()\n\ntests/components/test_component.py:1683: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n_______________________________ test_get_imports _______________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\n\n    def test_get_imports(component1, component2):\n        \"\"\"Test getting the imports of a component.\n    \n        Args:\n            component1: A test component.\n            component2: A test component.\n        \"\"\"\n        c1 = component1.create()\n        c2 = component2.create(c1)\n>       assert c1._get_all_imports() == {\"react\": [ImportVar(tag=\"Component\")]}\n\ntests/components/test_component.py:451: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1387: in _get_all_imports\n    all_imports = ParsedImportDict()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.List[reflex.utils.imports.ImportVar]], args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_component_add_imports[tags0]\nFAILED tests/components/test_component.py::test_component_add_imports[tags1]\nFAILED tests/components/test_component.py::test_component_add_imports[tags2]\nFAILED tests/components/test_component.py::test_component_add_imports[tags3]\nFAILED tests/components/test_component.py::test_component_add_imports[tags4]\nFAILED tests/components/test_component.py::test_custom_component_get_imports\nFAILED tests/components/test_component.py::test_get_imports - TypeError: Type...\n======================== 7 failed, 5 warnings in 1.24s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks_internal": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n        page._add_style_recursive(Style())\n    \n>       assert (\n            \"const test_state = useContext(StateContexts.test_state)\"\n            in page._get_all_hooks_internal()\n        )\nE       assert 'const test_state = useContext(StateContexts.test_state)' in {}\nE        +  where {} = <bound method Component._get_all_hooks_internal of {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className...%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._get_all_hooks_internal of {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className...%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...}%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}._get_all_hooks_internal\n\ntests/components/test_component.py:2039: AssertionError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - ass...\n======================== 1 failed, 5 warnings in 0.83s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.73s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_create_custom_component _________________________\n\nmy_component = <function my_component.<locals>.my_component at 0x7f71adcbdc60>\n\n    def test_create_custom_component(my_component):\n        \"\"\"Test that we can create a custom component.\n    \n        Args:\n            my_component: A test custom component.\n        \"\"\"\n        component = CustomComponent(component_fn=my_component, prop1=\"test\", prop2=1)\n        assert component.tag == \"MyComponent\"\n        assert component.get_props() == set()\n>       assert component._get_all_custom_components() == {component}\n\ntests/components/test_component.py:842: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"MyComponent\", \"props\": [\"prop1={`test`}\", \"prop2={1}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(\n        self, seen: set[str] | None = None\n    ) -> Set[CustomComponent]:\n        \"\"\"Get all the custom components used by the component.\n    \n        Args:\n            seen: The tags of the components that have already been seen.\n    \n        Returns:\n            The set of custom components.\n        \"\"\"\n        assert self.tag is not None, \"The tag must be set.\"\n    \n        # Store the seen components in a set to avoid infinite recursion.\n        if seen is None:\n            seen = set()\n>       custom_components = {self} | super()._get_all_custom_components(seen=seen)\nE       TypeError: Component._get_all_custom_components() got multiple values for argument 'seen'\n\nreflex/components/component.py:1767: TypeError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(\n        self, seen: set[str] | None = None\n    ) -> Set[CustomComponent]:\n        \"\"\"Get all the custom components used by the component.\n    \n        Args:\n            seen: The tags of the components that have already been seen.\n    \n        Returns:\n            The set of custom components.\n        \"\"\"\n        assert self.tag is not None, \"The tag must be set.\"\n    \n        # Store the seen components in a set to avoid infinite recursion.\n        if seen is None:\n            seen = set()\n>       custom_components = {self} | super()._get_all_custom_components(seen=seen)\nE       TypeError: Component._get_all_custom_components() got multiple values for argument 'seen'\n\nreflex/components/component.py:1767: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_create_custom_component - Typ...\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 2 failed, 5 warnings in 0.83s =========================\n\n"], "reflex-reflex/components/core/upload.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.03s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_app.py::page\n(no match in any of [<Module test_app.py>])\n\n"], "reflex-reflex/components/next/image.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/components/media/test_image.py _____________\ntests/components/media/test_image.py:8: in <module>\n    from reflex.components.next.image import Image  # type: ignore\nreflex/components/next/__init__.py:4: in <module>\n    from .image import Image\nreflex/components/next/image.py:12: in <module>\n    class Image(NextComponent):\nreflex/components/next/image.py:65: in Image\n    def create(*children, width: Any, height: Any, **props) -> Image:\nE   NameError: name 'Image' is not defined\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/media/test_image.py - NameError: name 'Image' is not d...\n========================= 5 warnings, 1 error in 0.08s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_set_src_img\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_render\n\n"], "reflex-reflex/components/lucide/icon.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/radix/test_icon_button.py ...                           [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 5 warnings in 0.05s =========================\n\n"], "reflex-reflex/components/tags/tag.py-format_props": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/utils/test_format.py .                                             [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.38s =========================\n\n"], "textual-src/textual/screen.py-focus_next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py ........                                             [100%]\n\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 8 passed, 8 warnings in 0.15s =========================\n\n"], "textual-src/textual/screen.py-focus_previous": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py ........                                             [100%]\n\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 8 passed, 8 warnings in 0.14s =========================\n\n"], "textual-src/textual/screen.py-set_focus": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n>       screen.set_focus(screen.query_one(\"#w3\"))\n\ntests/test_focus.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Input(id='w3'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Input' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#child\"))\n\ntests/test_focus.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='child'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n        assert screen.focus_next(\"#bananas\") is None\n        assert screen.focus_previous(\"#bananas\") is None\n    \n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#Paul\"))\n\ntests/test_focus.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='Paul'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget into view.\n        \"\"\"\n        if self.focused != widget:\n            # Unfocus previous widget if any\n            blurred = self.focused\n            if blurred:\n                blurred.has_focus_within = False\n                self._update_focus_styles(blurred=blurred)\n    \n            # Focus new widget if any\n            if widget:\n                self.focused = widget\n                widget.has_focus_within = True\n                if scroll_visible:\n>                   widget.scroll_into_view()\nE                   AttributeError: 'Focusable' object has no attribute 'scroll_into_view'\n\nsrc/textual/screen.py:709: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Focu...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Fo...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'F...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.46s =========================\n\n"], "textual-src/textual/strip.py-index_to_cell_position": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/test_strip.py ............FF                                       [100%]\n\n=================================== FAILURES ===================================\n___________________ test_index_cell_position_index_too_large ___________________\n\n    def test_index_cell_position_index_too_large():\n        strip = Strip([Segment(\"abcdef\"), Segment(\"ghi\")])\n>       with pytest.raises(NoCellPositionForIndex):\nE       Failed: DID NOT RAISE <class 'textual._segment_tools.NoCellPositionForIndex'>\n\ntests/test_strip.py:191: Failed\n_____________________ test_index_cell_position_no_segments _____________________\n\n    def test_index_cell_position_no_segments():\n        strip = Strip([])\n>       with pytest.raises(NoCellPositionForIndex):\nE       Failed: DID NOT RAISE <class 'textual._segment_tools.NoCellPositionForIndex'>\n\ntests/test_strip.py:185: Failed\n=========================== short test summary info ============================\nFAILED tests/test_strip.py::test_index_cell_position_index_too_large - Failed...\nFAILED tests/test_strip.py::test_index_cell_position_no_segments - Failed: DI...\n========================= 2 failed, 12 passed in 0.12s =========================\n\n"], "textual-src/textual/strip.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py .......                                       [100%]\n\n============================== 7 passed in 0.09s ===============================\n\n"], "textual-src/textual/app.py-batch_update": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py .                                                      [100%]\n\n============================== 1 passed in 0.12s ===============================\n\n"], "textual-src/textual/app.py-call_from_thread": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\n============================ no tests ran in 0.10s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_concurrency.py::on_ready\n(no match in any of [<Module test_concurrency.py>])\n\n"], "textual-src/textual/app.py-run_test": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 79 errors\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/test_reactive.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_reactive.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_dynamic_bindings.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_dynamic_bindings.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/text_area/test_edit_via_api.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_api.py:11: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_header.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/text_area/test_selection_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection_bindings.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______ ERROR collecting tests/animations/test_tabs_underline_animation.py ______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_tabs_underline_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_progress_bar.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_progress_bar.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_tabbed_content.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_tabbed_content.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_overflow_change.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_overflow_change.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_data_table.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_table.py:9: in <module>\n    from textual.app import App, ComposeResult, RenderableType\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/input/test_input_value_visibility.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_value_visibility.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/workers/test_worker.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_call_x_schedulers.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_call_x_schedulers.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_widget.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/text_area/test_edit_via_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_bindings.py:12: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____ ERROR collecting tests/animations/test_loading_indicator_animation.py _____\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_loading_indicator_animation.py:6: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_messages.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_messages.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_languages.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_languages.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/css/test_css_reloading.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_css_reloading.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_pilot.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/suggester/test_input_suggestions.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/suggester/test_input_suggestions.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_query.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_query.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_blank_and_clear.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_blank_and_clear.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_value.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_value.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_keys.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_keys.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_prompt.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_prompt.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/input/test_input_validation.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_validation.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_setting_themes.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_setting_themes.py:3: in <module>\n    from textual._text_area_theme import TextAreaTheme\nsrc/textual/_text_area_theme.py:8: in <module>\n    from textual.app import DEFAULT_COLORS\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/tree/test_directory_tree.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_directory_tree.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_lazy.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_lazy.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_selection.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_containers.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_containers.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_message_pump.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_pump.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_screen_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/listview/test_listview_initial_index.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_initial_index.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_animation.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_animation.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_border_subtitle.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_border_subtitle.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/select/test_empty_select.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_empty_select.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/tree/test_tree_availability.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_tree_availability.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_driver.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_driver.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/animations/test_switch_animation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_switch_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_focus.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_widget_removing.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_removing.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_changed_message.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_changed_message.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_unmount.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/toggles/test_radioset.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/toggles/test_radioset.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_mount.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/command_palette/test_events.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/command_palette/test_events.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_worker_manager.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker_manager.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_screens.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_message_handling.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_handling.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/input/test_input_terminal_cursor.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_terminal_cursor.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_loading.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_loading.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_on.py _______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_on.py:9: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_data_bind.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_bind.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/animations/test_progress_bar_animation.py _______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_progress_bar_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_scrolling_animation.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_scrolling_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_paste.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_paste.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_issue_4248.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_issue_4248.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_work_decorator.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_work_decorator.py:9: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/css/test_programmatic_style_changes.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_programmatic_style_changes.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_escape_binding.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_escape_binding.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/listview/test_listview_navigation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_navigation.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_style_inheritance.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_inheritance.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_freeze.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_freeze.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_disabled.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_disabled.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_signal.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_signal.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_test_runner.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_test_runner.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________ ERROR collecting tests/input/test_input_restrict.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_restrict.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_shutdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_shutdown.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_markdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_markdown.py:13: in <module>\n    import textual.widgets._markdown as MD\nsrc/textual/widgets/_markdown.py:19: in <module>\n    from ..app import ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/tree/test_node_refresh.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_node_refresh.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/option_list/test_option_list_movement.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/option_list/test_option_list_movement.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_visible.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_visible.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n=========================== short test summary info ============================\nERROR tests/test_reactive.py\nERROR tests/test_dynamic_bindings.py\nERROR tests/text_area/test_edit_via_api.py\nERROR tests/test_header.py\nERROR tests/test_app.py\nERROR tests/text_area/test_selection_bindings.py\nERROR tests/animations/test_tabs_underline_animation.py\nERROR tests/test_progress_bar.py\nERROR tests/test_tabbed_content.py\nERROR tests/test_overflow_change.py\nERROR tests/test_data_table.py\nERROR tests/input/test_input_value_visibility.py\nERROR tests/workers/test_worker.py\nERROR tests/test_call_x_schedulers.py\nERROR tests/test_widget.py\nERROR tests/text_area/test_edit_via_bindings.py\nERROR tests/animations/test_loading_indicator_animation.py\nERROR tests/text_area/test_messages.py\nERROR tests/text_area/test_languages.py\nERROR tests/css/test_css_reloading.py\nERROR tests/test_pilot.py\nERROR tests/suggester/test_input_suggestions.py\nERROR tests/test_query.py\nERROR tests/select/test_blank_and_clear.py\nERROR tests/select/test_value.py\nERROR tests/test_keys.py\nERROR tests/select/test_prompt.py\nERROR tests/input/test_input_validation.py\nERROR tests/text_area/test_setting_themes.py\nERROR tests/css/test_inheritance.py\nERROR tests/tree/test_directory_tree.py\nERROR tests/test_lazy.py\nERROR tests/text_area/test_selection.py\nERROR tests/test_containers.py\nERROR tests/test_message_pump.py\nERROR tests/css/test_screen_css.py\nERROR tests/listview/test_listview_initial_index.py\nERROR tests/test_animation.py\nERROR tests/test_border_subtitle.py\nERROR tests/select/test_empty_select.py\nERROR tests/tree/test_tree_availability.py\nERROR tests/test_driver.py\nERROR tests/animations/test_switch_animation.py\nERROR tests/test_focus.py\nERROR tests/test_widget_removing.py\nERROR tests/select/test_changed_message.py\nERROR tests/css/test_initial.py\nERROR tests/test_unmount.py\nERROR tests/toggles/test_radioset.py\nERROR tests/test_mount.py\nERROR tests/command_palette/test_events.py\nERROR tests/workers/test_worker_manager.py\nERROR tests/test_screens.py\nERROR tests/test_message_handling.py\nERROR tests/input/test_input_terminal_cursor.py\nERROR tests/test_loading.py\nERROR tests/test_on.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/test_data_bind.py\nERROR tests/css/test_nested_css.py\nERROR tests/animations/test_progress_bar_animation.py\nERROR tests/animations/test_scrolling_animation.py\nERROR tests/test_paste.py\nERROR tests/test_issue_4248.py\nERROR tests/workers/test_work_decorator.py\nERROR tests/css/test_programmatic_style_changes.py\nERROR tests/text_area/test_escape_binding.py\nERROR tests/listview/test_listview_navigation.py\nERROR tests/test_style_inheritance.py\nERROR tests/test_freeze.py\nERROR tests/test_disabled.py\nERROR tests/test_signal.py\nERROR tests/test_test_runner.py\nERROR tests/input/test_input_restrict.py\nERROR tests/test_shutdown.py\nERROR tests/test_markdown.py\nERROR tests/tree/test_node_refresh.py\nERROR tests/option_list/test_option_list_movement.py\nERROR tests/test_visible.py\n============================== 79 errors in 3.31s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_method_call_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_dynamic_bindings.py::test_dynamic_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_return_code_is_one_after_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_set_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_progress_bar.py::test_show_sub_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_overflow_change.py::test_overflow_change_updates_virtual_size_appropriately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_row_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_on_instantiation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_after_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_constructor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_applies_to_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_widget_under_another_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_invalid_css_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_show_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_fails_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_priority\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_assign_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_keys.py::test_character_bindings\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_file_not_found\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_builtin_themes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_returns_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_directory_tree.py::test_directory_tree_reloading_preserves_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_lazy.py::test_lazy\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_reverse_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_backward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_column_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste_read_only_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_get_child_by_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_column_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_horizontal_vs_horizontalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_with_call_next\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_initial_index.py::test_listview_initial_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_outside_screen_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_valid_empty\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_and_scheduled_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_border_subtitle.py::test_border_subtitle\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_visible_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set_while_selecting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_compute_first_time_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_enabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_pseudo_class\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_type_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_function_sum\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_message_control\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_on_blur_triggers_validation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children_match_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_tabs_moves_active_to_next_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_unsetting_tabbed_content_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_windows_newlines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/toggles/test_radioset.py::test_keyboard_navigation_with_disabled_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_inside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_always_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_row_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_all\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel_immediately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_non_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_text_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_get\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_updates_virtual_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_disabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_progress_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_enabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_unset_hover_highlight_when_no_table_cell_under_mouse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_handling.py::test_message_inheritance_namespace\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_value_to_blank_with_allow_blank_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_terminal_cursor_position_update_on_cursor_move\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_no_return_code_while_running\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_click_cell_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_outside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_schedule_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_setting_and_checking_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_loading.py::test_loading_disables_and_remove_scrollbars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_screen_always_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_arbitrary_attributes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabled_tab_cannot_be_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_does_not_move_to_invisible_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_all_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_selector_does_not_leak\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test__allow_scroll\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_no_duplicate_external_watchers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_up_does_not_give_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_enabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_forward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_value_is_blank_by_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change_when_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_initial_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_default_custom_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_bad_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_registering_and_setting_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_unknown_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_walk_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_label_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selection_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_after_value_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_inside_compose_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_focused\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_resize_terminal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_same_selection_does_not_post_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_focus_blur\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_language_to_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_header_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_empty_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_tab_within_tabbed_content_stays_isolated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_language_binary_missing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_enter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_issue_4248.py::test_issue_4248\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_star_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_at_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_movement_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate_to_externals\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_double_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_navigation.py::test_keyboard_navigation_with_disabled_items\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_default_return_code_is_zero\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_inheritance.py::test_text_style_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_with_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_none_validate_on_means_all_validations_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_empty_table_interactions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_message_queue_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor_respects_animate_parameter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clicking_border_link_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_picked_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value_after_deleting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_with_callable_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_offset_getter_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css_and_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_creating_disabled_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_center_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_set_return_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_animate_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_freeze.py::test_freeze\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_column_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_get_focusable_widget_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_multiple_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_paste_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_premature_reactive_call\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_printable_character\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_show_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_static_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_accept_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_initialize\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_middle_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_cannot_be_negative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_initial_terminal_cursor_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_does_not_deactivate_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_relative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text_maintain_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_edits_on_read_only_mode\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_wait_without_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_ui\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_indent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_in_tabbed_content_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_moves_to_visible_widgets_inside_invisible_containers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_assigned_after\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_opened_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_expands_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_vertical_vs_verticalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_default_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_line_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_down_gives_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key_invalid_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_option_highlighted_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_invalid_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_multiple_lines_selection_above\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_test_runner.py::test_run_test\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_restrict.py::test_bad_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_selecting_posts_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_unknown_theme_raises_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true_set_before_dom_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_button_pressed\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_default_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_tabs_does_not_change_active_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_attribute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_up_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal_parameters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_unknown_option_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_installed_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_first_tab_activates_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_ansi_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove_unmounted\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_with_allow_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_string_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_shutdown.py::test_shutdown\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_self_referential_deadlock\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language_existing_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_markdown.py::test_link_in_markdown_table_posts_message_when_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_auto_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_node_refresh.py::test_initial_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_not_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain_handles_inherited_visibility\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_disabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_false_always_update_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_scrollbar_zero_thickness\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_scrolling_cursor_into_view\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_get_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_hover_update_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_scheduling_animation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_all_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_labels\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_message_emission\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_mouse_leave\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/option_list/test_option_list_movement.py::test_keyboard_navigation_with_disabled_options\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_at_line_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_visible.py::test_visible_is_inherited\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding_missing_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_universal_selector_doesnt_select_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_last_tab_means_no_tab_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_multibyte\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_down_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_navigation_around_disabled_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_old_mac_newlines\n\n"], "textual-src/textual/app.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_auto_refresh.py F                                             [ 33%]\ntests/test_concurrency.py F                                              [ 66%]\ntests/test_win_sleep.py s                                                [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_auto_refresh _______________________________\n\nself = RefreshApp(title='RefreshApp', classes={'-dark-mode'}), headless = True\ninline = False, inline_no_clear = False, mouse = True, size = None\nauto_pilot = <function test_auto_refresh.<locals>.quit_after at 0x7f90c7865900>\n\n    def run(\n        self,\n        headless: bool = False,\n        inline: bool = False,\n        inline_no_clear: bool = False,\n        mouse: bool = True,\n        size: tuple[int, int] | None = None,\n        auto_pilot: Callable[[Pilot[object]], Coroutine[Any, Any, None]] | None = None,\n    ) -> ReturnType:\n        \"\"\"Run the app.\n    \n        Args:\n            headless: Run in headless mode (no output).\n            inline: Run the app inline (under the prompt).\n            inline_no_clear: Don't clear the app output when exiting an inline app.\n            mouse: Enable mouse support.\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            auto_pilot: An auto pilot coroutine.\n    \n        Returns:\n            App return value.\n        \"\"\"\n        try:\n            # Setup and initialize app for running\n>           self.prepare_app(headless=headless, inline=inline, size=size, mouse=mouse)\nE           AttributeError: 'RefreshApp' object has no attribute 'prepare_app'\n\nsrc/textual/app.py:1603: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_auto_refresh():\n        app = RefreshApp()\n    \n        async def quit_after(pilot: Pilot) -> None:\n            await asyncio.sleep(1)\n    \n>       elapsed = app.run(auto_pilot=quit_after, headless=True)\n\ntests/test_auto_refresh.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = RefreshApp(title='RefreshApp', classes={'-dark-mode'}), headless = True\ninline = False, inline_no_clear = False, mouse = True, size = None\nauto_pilot = <function test_auto_refresh.<locals>.quit_after at 0x7f90c7865900>\n\n    def run(\n        self,\n        headless: bool = False,\n        inline: bool = False,\n        inline_no_clear: bool = False,\n        mouse: bool = True,\n        size: tuple[int, int] | None = None,\n        auto_pilot: Callable[[Pilot[object]], Coroutine[Any, Any, None]] | None = None,\n    ) -> ReturnType:\n        \"\"\"Run the app.\n    \n        Args:\n            headless: Run in headless mode (no output).\n            inline: Run the app inline (under the prompt).\n            inline_no_clear: Don't clear the app output when exiting an inline app.\n            mouse: Enable mouse support.\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            auto_pilot: An auto pilot coroutine.\n    \n        Returns:\n            App return value.\n        \"\"\"\n        try:\n            # Setup and initialize app for running\n            self.prepare_app(headless=headless, inline=inline, size=size, mouse=mouse)\n    \n            # If an auto pilot is provided, schedule it to run\n            if auto_pilot is not None:\n                asyncio.run(auto_pilot(Pilot(self)))\n    \n            # Run the main event loop\n            self.run_event_loop()\n    \n        finally:\n            # Perform any required cleanup, such as closing files or network connections\n>           self.cleanup_app(inline_no_clear=inline_no_clear)\nE           AttributeError: 'RefreshApp' object has no attribute 'cleanup_app'\n\nsrc/textual/app.py:1614: AttributeError\n____________________________ test_call_from_thread _____________________________\n\nself = ThreadTestApp(title='ThreadTestApp', classes={'-dark-mode'})\nheadless = True, inline = False, inline_no_clear = False, mouse = True\nsize = (80, 24), auto_pilot = None\n\n    def run(\n        self,\n        headless: bool = False,\n        inline: bool = False,\n        inline_no_clear: bool = False,\n        mouse: bool = True,\n        size: tuple[int, int] | None = None,\n        auto_pilot: Callable[[Pilot[object]], Coroutine[Any, Any, None]] | None = None,\n    ) -> ReturnType:\n        \"\"\"Run the app.\n    \n        Args:\n            headless: Run in headless mode (no output).\n            inline: Run the app inline (under the prompt).\n            inline_no_clear: Don't clear the app output when exiting an inline app.\n            mouse: Enable mouse support.\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            auto_pilot: An auto pilot coroutine.\n    \n        Returns:\n            App return value.\n        \"\"\"\n        try:\n            # Setup and initialize app for running\n>           self.prepare_app(headless=headless, inline=inline, size=size, mouse=mouse)\nE           AttributeError: 'ThreadTestApp' object has no attribute 'prepare_app'\n\nsrc/textual/app.py:1603: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_call_from_thread():\n        \"\"\"Test the call_from_thread method.\"\"\"\n    \n        class BackgroundThread(Thread):\n            \"\"\"A background thread which will modify app in some way.\"\"\"\n    \n            def __init__(self, app: App[object]) -> None:\n                self.app = app\n                super().__init__()\n    \n            def run(self) -> None:\n                def write_stuff(text: str) -> None:\n                    \"\"\"Write stuff to a widget.\"\"\"\n                    self.app.query_one(RichLog).write(text)\n    \n                self.app.call_from_thread(write_stuff, \"Hello\")\n                # Exit the app with a code we can assert\n                self.app.call_from_thread(self.app.exit, 123)\n    \n        class ThreadTestApp(App[object]):\n            \"\"\"Trivial app with a single widget.\"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield RichLog()\n    \n            def on_ready(self) -> None:\n                \"\"\"Launch a thread which will modify the app.\"\"\"\n                try:\n                    self.call_from_thread(print)\n                except RuntimeError as error:\n                    # Calling this from the same thread as the app is an error\n                    self._runtime_error = error\n                BackgroundThread(self).start()\n    \n        app = ThreadTestApp()\n>       result = app.run(headless=True, size=(80, 24))\n\ntests/test_concurrency.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ThreadTestApp(title='ThreadTestApp', classes={'-dark-mode'})\nheadless = True, inline = False, inline_no_clear = False, mouse = True\nsize = (80, 24), auto_pilot = None\n\n    def run(\n        self,\n        headless: bool = False,\n        inline: bool = False,\n        inline_no_clear: bool = False,\n        mouse: bool = True,\n        size: tuple[int, int] | None = None,\n        auto_pilot: Callable[[Pilot[object]], Coroutine[Any, Any, None]] | None = None,\n    ) -> ReturnType:\n        \"\"\"Run the app.\n    \n        Args:\n            headless: Run in headless mode (no output).\n            inline: Run the app inline (under the prompt).\n            inline_no_clear: Don't clear the app output when exiting an inline app.\n            mouse: Enable mouse support.\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            auto_pilot: An auto pilot coroutine.\n    \n        Returns:\n            App return value.\n        \"\"\"\n        try:\n            # Setup and initialize app for running\n            self.prepare_app(headless=headless, inline=inline, size=size, mouse=mouse)\n    \n            # If an auto pilot is provided, schedule it to run\n            if auto_pilot is not None:\n                asyncio.run(auto_pilot(Pilot(self)))\n    \n            # Run the main event loop\n            self.run_event_loop()\n    \n        finally:\n            # Perform any required cleanup, such as closing files or network connections\n>           self.cleanup_app(inline_no_clear=inline_no_clear)\nE           AttributeError: 'ThreadTestApp' object has no attribute 'cleanup_app'\n\nsrc/textual/app.py:1614: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_auto_refresh.py::test_auto_refresh - AttributeError: 'Refre...\nFAILED tests/test_concurrency.py::test_call_from_thread - AttributeError: 'Th...\n========================= 2 failed, 1 skipped in 0.30s =========================\n\n"], "textual-src/textual/app.py-switch_mode": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/css/test_screen_css.py FFF                                         [100%]\n\n=================================== FAILURES ===================================\n_________________ test_screen_css_switch_mode_screen_instance __________________\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3110: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3281: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:241: in key_o\n    self.switch_mode(\"base\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), mode = 'base'\n\n    def switch_mode(self, mode: str) -> AwaitMount:\n        \"\"\"Switch to a given mode.\n    \n        Args:\n            mode: The mode to switch to.\n    \n        Returns:\n            An optionally awaitable object which waits for the screen associated\n                with the mode to be mounted.\n    \n        Raises:\n            UnknownModeError: If trying to switch to an unknown mode.\n        \"\"\"\n        if mode not in self._screen_stacks:\n>           raise UnknownModeError(f\"Mode '{mode}' is not known.\")\nE           textual.app.UnknownModeError: Mode 'base' is not known.\n\nsrc/textual/app.py:1877: UnknownModeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:241 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   238 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   239 \u2502   \u2502                                                                  \u2502\n\u2502   240 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 241 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   242 \u2502                                                                      \u2502\n\u2502   243 \u2502   app = MyApp()                                                      \u2502\n\u2502   244 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1877 in switch_mode           \u2502\n\u2502                                                                              \u2502\n\u2502   1874 \u2502   \u2502   \u2502   UnknownModeError: If trying to switch to an unknown mode. \u2502\n\u2502   1875 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   1876 \u2502   \u2502   if mode not in self._screen_stacks:                           \u2502\n\u2502 \u2771 1877 \u2502   \u2502   \u2502   raise UnknownModeError(f\"Mode '{mode}' is not known.\")    \u2502\n\u2502   1878 \u2502   \u2502                                                                 \u2502\n\u2502   1879 \u2502   \u2502   # Set the current mode                                        \u2502\n\u2502   1880 \u2502   \u2502   self._current_mode = mode                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 mode = 'base'                                       \u2502                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nUnknownModeError: Mode 'base' is not known.\n_______________ test_screen_css_switch_mode_screen_type_by_name ________________\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3110: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3281: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:299: in key_o\n    self.switch_mode(\"base\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), mode = 'base'\n\n    def switch_mode(self, mode: str) -> AwaitMount:\n        \"\"\"Switch to a given mode.\n    \n        Args:\n            mode: The mode to switch to.\n    \n        Returns:\n            An optionally awaitable object which waits for the screen associated\n                with the mode to be mounted.\n    \n        Raises:\n            UnknownModeError: If trying to switch to an unknown mode.\n        \"\"\"\n        if mode not in self._screen_stacks:\n>           raise UnknownModeError(f\"Mode '{mode}' is not known.\")\nE           textual.app.UnknownModeError: Mode 'base' is not known.\n\nsrc/textual/app.py:1877: UnknownModeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:299 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   297 \u2502   \u2502                                                                  \u2502\n\u2502   298 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 299 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502   302 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1877 in switch_mode           \u2502\n\u2502                                                                              \u2502\n\u2502   1874 \u2502   \u2502   \u2502   UnknownModeError: If trying to switch to an unknown mode. \u2502\n\u2502   1875 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   1876 \u2502   \u2502   if mode not in self._screen_stacks:                           \u2502\n\u2502 \u2771 1877 \u2502   \u2502   \u2502   raise UnknownModeError(f\"Mode '{mode}' is not known.\")    \u2502\n\u2502   1878 \u2502   \u2502                                                                 \u2502\n\u2502   1879 \u2502   \u2502   # Set the current mode                                        \u2502\n\u2502   1880 \u2502   \u2502   self._current_mode = mode                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 mode = 'base'                                       \u2502                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nUnknownModeError: Mode 'base' is not known.\n_____________ test_screen_css_switch_mode_screen_instance_by_name ______________\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3110: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3281: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:270: in key_o\n    self.switch_mode(\"base\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), mode = 'base'\n\n    def switch_mode(self, mode: str) -> AwaitMount:\n        \"\"\"Switch to a given mode.\n    \n        Args:\n            mode: The mode to switch to.\n    \n        Returns:\n            An optionally awaitable object which waits for the screen associated\n                with the mode to be mounted.\n    \n        Raises:\n            UnknownModeError: If trying to switch to an unknown mode.\n        \"\"\"\n        if mode not in self._screen_stacks:\n>           raise UnknownModeError(f\"Mode '{mode}' is not known.\")\nE           textual.app.UnknownModeError: Mode 'base' is not known.\n\nsrc/textual/app.py:1877: UnknownModeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:270 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   267 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   268 \u2502   \u2502                                                                  \u2502\n\u2502   269 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 270 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   271 \u2502                                                                      \u2502\n\u2502   272 \u2502   app = MyApp()                                                      \u2502\n\u2502   273 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1877 in switch_mode           \u2502\n\u2502                                                                              \u2502\n\u2502   1874 \u2502   \u2502   \u2502   UnknownModeError: If trying to switch to an unknown mode. \u2502\n\u2502   1875 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   1876 \u2502   \u2502   if mode not in self._screen_stacks:                           \u2502\n\u2502 \u2771 1877 \u2502   \u2502   \u2502   raise UnknownModeError(f\"Mode '{mode}' is not known.\")    \u2502\n\u2502   1878 \u2502   \u2502                                                                 \u2502\n\u2502   1879 \u2502   \u2502   # Set the current mode                                        \u2502\n\u2502   1880 \u2502   \u2502   self._current_mode = mode                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 mode = 'base'                                       \u2502                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nUnknownModeError: Mode 'base' is not known.\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n======================== 3 failed, 4 warnings in 1.02s =========================\n\n"], "textual-src/textual/app.py-push_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/test_header.py F                                                   [  3%]\ntests/test_focus.py F                                                    [  6%]\ntests/css/test_screen_css.py F                                           [  9%]\ntests/test_focus.py F                                                    [ 12%]\ntests/test_header.py F                                                   [ 16%]\ntests/test_screens.py F.                                                 [ 22%]\ntests/test_header.py F                                                   [ 25%]\ntests/css/test_screen_css.py F                                           [ 29%]\ntests/test_screens.py F                                                  [ 32%]\ntests/test_widget.py F                                                   [ 35%]\ntests/test_header.py F                                                   [ 38%]\ntests/css/test_screen_css.py F                                           [ 41%]\ntests/test_screens.py FF                                                 [ 48%]\ntests/test_header.py F                                                   [ 51%]\ntests/test_screens.py FF                                                 [ 58%]\ntests/test_focus.py F                                                    [ 61%]\ntests/test_screens.py FF                                                 [ 67%]\ntests/test_unmount.py F                                                  [ 70%]\ntests/test_header.py F                                                   [ 74%]\ntests/test_screens.py F                                                  [ 77%]\ntests/test_header.py F                                                   [ 80%]\ntests/test_screens.py FF                                                 [ 87%]\ntests/css/test_screen_css.py F                                           [ 90%]\ntests/test_pilot.py F                                                    [ 93%]\ntests/test_screens.py F                                                  [ 96%]\ntests/test_header.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n______________________ test_screen_title_none_is_ignored _______________________\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"app title\"\n\ntests/test_header.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:15: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:15 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    12 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    13 \u2502   \u2502                                                                  \u2502\n\u2502    14 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  15 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    16 \u2502                                                                      \u2502\n\u2502    17 \u2502   app = MyApp()                                                      \u2502\n\u2502    18 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_none_is_ignored.<locals\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_______________________________ test_allow_focus _______________________________\n\n    def test_allow_focus():\n        \"\"\"Test allow_focus and allow_focus_children are called and the result used.\"\"\"\n        focusable_allow_focus_called = False\n        non_focusable_allow_focus_called = False\n    \n        class Focusable(Widget, can_focus=False):\n            def allow_focus(self) -> bool:\n                nonlocal focusable_allow_focus_called\n                focusable_allow_focus_called = True\n                return True\n    \n        class NonFocusable(Container, can_focus=True):\n            def allow_focus(self) -> bool:\n                nonlocal non_focusable_allow_focus_called\n                non_focusable_allow_focus_called = True\n                return False\n    \n        class FocusableContainer(Container, can_focus_children=False):\n            def allow_focus_children(self) -> bool:\n                return True\n    \n        class NonFocusableContainer(Container, can_focus_children=True):\n            def allow_focus_children(self) -> bool:\n                return False\n    \n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n____________________ test_screen_sub_title_none_is_ignored _____________________\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"app sub-title\"\n\ntests/test_header.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:89: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:89 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    86 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502    87 \u2502   \u2502                                                                  \u2502\n\u2502    88 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  89 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    90 \u2502                                                                      \u2502\n\u2502    91 \u2502   app = MyApp()                                                      \u2502\n\u2502    92 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_none_is_ignored.<lo\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_____________________________ test_dismiss_action ______________________________\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"y\")\n>           assert app.bingo\nE           AssertionError: assert False\nE            +  where False = MyApp(title='MyApp', classes={'-dark-mode'}).bingo\n\ntests/test_screens.py:324: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:316: in on_mount\n    self.push_screen(ConfirmScreen(), callback=self.callback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ConfirmScreen()\ncallback = <bound method test_dismiss_action.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>\nwait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:316 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   313 \u2502   \u2502   bingo = False                                                  \u2502\n\u2502   314 \u2502   \u2502                                                                  \u2502\n\u2502   315 \u2502   \u2502   def on_mount(self) -> None:                                    \u2502\n\u2502 \u2771 316 \u2502   \u2502   \u2502   self.push_screen(ConfirmScreen(), callback=self.callback)  \u2502\n\u2502   317 \u2502   \u2502                                                                  \u2502\n\u2502   318 \u2502   \u2502   def callback(self, result: bool) -> None:                      \u2502\n\u2502   319 \u2502   \u2502   \u2502   self.bingo = result                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 ConfirmScreen = <class                                                   \u2502 \u2502\n\u2502 \u2502                 'tests.test_screens.test_dismiss_action.<locals>.Confir\u2026 \u2502 \u2502\n\u2502 \u2502          self = MyApp(title='MyApp', classes={'-dark-mode'})             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = <bound method                                         \u2502 \u2502\n\u2502 \u2502                    test_dismiss_action.<locals>.MyApp.callback of        \u2502 \u2502\n\u2502 \u2502                    MyApp(title='MyApp', classes={'-dark-mode'})>         \u2502 \u2502\n\u2502 \u2502           screen = ConfirmScreen()                                       \u2502 \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'})          \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_______________ test_screen_sub_title_reactive_updates_sub_title _______________\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.sub_title = \"new screen sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"new screen sub-title\"\n\ntests/test_header.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:125: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:125 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   122 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   123 \u2502   \u2502                                                                  \u2502\n\u2502   124 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 125 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   126 \u2502                                                                      \u2502\n\u2502   127 \u2502   app = MyApp()                                                      \u2502\n\u2502   128 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_reactive_updates_su\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n        async with app.run_test() as pilot:\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n>           assert counter == 1\nE           assert 0 == 1\n\ntests/css/test_screen_css.py:103: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n______________________________ test_compose_order ______________________________\n\n    async def test_compose_order() -> None:\n        from textual.containers import Horizontal\n        from textual.screen import Screen\n        from textual.widgets import Select\n    \n        class MyScreen(Screen):\n            def on_mount(self) -> None:\n                self.query_one(Select).value = 1\n    \n            def compose(self) -> ComposeResult:\n                yield Horizontal(\n                    Select(((str(n), n) for n in range(10)), id=\"select\"),\n                    id=\"screen-horizontal\",\n                )\n    \n        class SelectBugApp(App[None]):\n            async def on_mount(self):\n                await self.push_screen(MyScreen(id=\"my-screen\"))\n                self.query_one(Select)\n    \n        app = SelectBugApp()\n        messages: list[Message] = []\n    \n>       async with app.run_test(message_hook=messages.append) as pilot:\n\ntests/test_widget.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:287: in on_mount\n    await self.push_screen(MyScreen(id=\"my-screen\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})\nscreen = MyScreen(id='my-screen'), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:287 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   284 \u2502                                                                      \u2502\n\u2502   285 \u2502   class SelectBugApp(App[None]):                                     \u2502\n\u2502   286 \u2502   \u2502   async def on_mount(self):                                      \u2502\n\u2502 \u2771 287 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"my-screen\"))           \u2502\n\u2502   288 \u2502   \u2502   \u2502   self.query_one(Select)                                     \u2502\n\u2502   289 \u2502                                                                      \u2502\n\u2502   290 \u2502   app = SelectBugApp()                                               \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_widget.test_compose_order.<locals>.MyScreen'>     \u2502 \u2502\n\u2502 \u2502   Select = <class 'textual.widgets._select.Select'>                      \u2502 \u2502\n\u2502 \u2502     self = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                            \u2502\n\u2502 \u2502         callback = None                       \u2502                            \u2502\n\u2502 \u2502           screen = MyScreen(id='my-screen')   \u2502                            \u2502\n\u2502 \u2502             self = SelectBugApp(              \u2502                            \u2502\n\u2502 \u2502                    \u2502   title='SelectBugApp',  \u2502                            \u2502\n\u2502 \u2502                    \u2502   classes={              \u2502                            \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'       \u2502                            \u2502\n\u2502 \u2502                    \u2502   }                      \u2502                            \u2502\n\u2502 \u2502                    )                          \u2502                            \u2502\n\u2502 \u2502 wait_for_dismiss = False                      \u2502                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n________________ test_screen_sub_title_overrides_app_sub_title _________________\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:107: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:107 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   104 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   105 \u2502   \u2502                                                                  \u2502\n\u2502   106 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 107 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   108 \u2502                                                                      \u2502\n\u2502   109 \u2502   app = MyApp()                                                      \u2502\n\u2502   110 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_overrides_app_sub_t\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert len(app.screen._result_callbacks) == 1\nE           AssertionError: assert 0 == 1\nE            +  where 0 = len([])\nE            +    where [] = Screen(id='_default')._result_callbacks\nE            +      where Screen(id='_default') = MyApp(title='MyApp', classes={'-dark-mode'}).screen\n\ntests/test_screens.py:371: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:367: in on_mount\n    self.push_screen(\"a\", self.callback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'a'\ncallback = <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>\nwait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n>           screen = self._installed_screens.get(screen)()\nE           TypeError: 'ScreenA' object is not callable\n\nsrc/textual/app.py:2101: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:367 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   364 \u2502   \u2502   \u2502   return 42                                                  \u2502\n\u2502   365 \u2502   \u2502                                                                  \u2502\n\u2502   366 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 367 \u2502   \u2502   \u2502   self.push_screen(\"a\", self.callback)                       \u2502\n\u2502   368 \u2502                                                                      \u2502\n\u2502   369 \u2502   app = MyApp()                                                      \u2502\n\u2502   370 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2101 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   # Verify or get the screen instance                           \u2502\n\u2502   2100 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2101 \u2502   \u2502   \u2502   screen = self._installed_screens.get(screen)()            \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if screen is None:                                        \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise ValueError(f\"Screen {screen} is not installed o \u2502\n\u2502   2104 \u2502   \u2502   \u2502   assert isinstance(screen, Screen), \"Installed screen call \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = <bound method                                         \u2502 \u2502\n\u2502 \u2502                    test_switch_screen_updates_results_callback_stack.<l\u2026 \u2502 \u2502\n\u2502 \u2502                    of MyApp(title='MyApp', classes={'-dark-mode'})>      \u2502 \u2502\n\u2502 \u2502           screen = 'a'                                                   \u2502 \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'})          \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: 'ScreenA' object is not callable\n______________________ test_push_screen_wait_for_dismiss _______________________\n\n    async def test_push_screen_wait_for_dismiss() -> None:\n        \"\"\"Test push_screen returns result.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            @work\n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # Press X to exit, then Y to dismiss, expect True result\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ScreensApp(title='ScreensApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n            await pilot._wait_for_screen()\n            yield pilot\n        finally:\n            # Shutdown the app cleanly\n            await app._shutdown()\n            await app_task\n            # Re-raise the exception which caused panic so test frameworks are aware\n            if self._exception:\n>               raise self._exception\nE               textual.worker.WorkerFailed: Worker raised exception: NoActiveWorker('wait_for_dismiss requires a worker context')\n\nsrc/textual/app.py:1492: WorkerFailed\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:365 in _run                \u2502\n\u2502                                                                              \u2502\n\u2502   362 \u2502   \u2502   self.state = WorkerState.RUNNING                               \u2502\n\u2502   363 \u2502   \u2502   app.log.worker(self)                                           \u2502\n\u2502   364 \u2502   \u2502   try:                                                           \u2502\n\u2502 \u2771 365 \u2502   \u2502   \u2502   self._result = await self.run()                            \u2502\n\u2502   366 \u2502   \u2502   except asyncio.CancelledError as error:                        \u2502\n\u2502   367 \u2502   \u2502   \u2502   self.state = WorkerState.CANCELLED                         \u2502\n\u2502   368 \u2502   \u2502   \u2502   self._error = error                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502           app = ScreensApp(title='ScreensApp', classes={'-dark-mode'})   \u2502 \u2502\n\u2502 \u2502         error = NoActiveWorker('wait_for_dismiss requires a worker       \u2502 \u2502\n\u2502 \u2502                 context')                                                \u2502 \u2502\n\u2502 \u2502          self = <Worker                                                  \u2502 \u2502\n\u2502 \u2502                 \u2502   ERROR                                                \u2502 \u2502\n\u2502 \u2502                 \u2502   name='action_exit'                                   \u2502 \u2502\n\u2502 \u2502                 \u2502   description='action_exit()'                          \u2502 \u2502\n\u2502 \u2502                 >                                                        \u2502 \u2502\n\u2502 \u2502     Traceback = <class 'rich.traceback.Traceback'>                       \u2502 \u2502\n\u2502 \u2502 worker_failed = WorkerFailed(\"Worker raised exception:                   \u2502 \u2502\n\u2502 \u2502                 NoActiveWorker('wait_for_dismiss requires a worker       \u2502 \u2502\n\u2502 \u2502                 context')\")                                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:349 in run                 \u2502\n\u2502                                                                              \u2502\n\u2502   346 \u2502   \u2502   Returns:                                                       \u2502\n\u2502   347 \u2502   \u2502   \u2502   Return value of the work.                                  \u2502\n\u2502   348 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502 \u2771 349 \u2502   \u2502   return await (                                                 \u2502\n\u2502   350 \u2502   \u2502   \u2502   self._run_threaded() if self._thread_worker else self._run \u2502\n\u2502   351 \u2502   \u2502   )                                                              \u2502\n\u2502   352                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:334 in _run_async          \u2502\n\u2502                                                                              \u2502\n\u2502   331 \u2502   \u2502   \u2502   or hasattr(self._work, \"func\")                             \u2502\n\u2502   332 \u2502   \u2502   \u2502   and inspect.iscoroutinefunction(self._work.func)           \u2502\n\u2502   333 \u2502   \u2502   ):                                                             \u2502\n\u2502 \u2771 334 \u2502   \u2502   \u2502   return await self._work()                                  \u2502\n\u2502   335 \u2502   \u2502   elif inspect.isawaitable(self._work):                          \u2502\n\u2502   336 \u2502   \u2502   \u2502   return await self._work                                    \u2502\n\u2502   337 \u2502   \u2502   elif callable(self._work):                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:457 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   454 \u2502   \u2502                                                                  \u2502\n\u2502   455 \u2502   \u2502   @work                                                          \u2502\n\u2502   456 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 457 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   458 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   459 \u2502                                                                      \u2502\n\u2502   460 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss.<loc\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2113 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2110 \u2502   \u2502   # Awaitable logic handling                                    \u2502\n\u2502   2111 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2112 \u2502   \u2502   \u2502   if not getattr(self, \"_current_worker\", None):            \u2502\n\u2502 \u2771 2113 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"wait_for_dismiss requires a wor \u2502\n\u2502   2114 \u2502   \u2502   \u2502   future: asyncio.Future = Future()                         \u2502\n\u2502   2115 \u2502   \u2502   \u2502   screen.dispatched.connect(lambda event: future.set_result \u2502\n\u2502   2116 \u2502   \u2502   \u2502   if callback:                                              \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNoActiveWorker: wait_for_dismiss requires a worker context\n___________________ test_screen_title_reactive_updates_title ___________________\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.title = \"new screen title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"new screen title\"\n\ntests/test_header.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:51: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:51 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    48 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    49 \u2502   \u2502                                                                  \u2502\n\u2502    50 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  51 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    52 \u2502                                                                      \u2502\n\u2502    53 \u2502   app = MyApp()                                                      \u2502\n\u2502    54 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_reactive_updates_title.\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n        async with app.run_test():\n            MyApp.AUTO_FOCUS = \"Input\"\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n____________________ test_screen_receives_mouse_move_events ____________________\n\n    async def test_screen_receives_mouse_move_events():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        mouse_offset = Offset(1, 1)\n    \n>       async with SimpleApp().run_test() as pilot:\n\ntests/test_screens.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:390: in on_mount\n    self.push_screen(\"a\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SimpleApp(title='SimpleApp', classes={'-dark-mode'}), screen = 'a'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n>           screen = self._installed_screens.get(screen)()\nE           TypeError: 'MouseMoveRecordingScreen' object is not callable\n\nsrc/textual/app.py:2101: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:390 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   387 \u2502   \u2502   SCREENS = {\"a\": MouseMoveRecordingScreen()}                    \u2502\n\u2502   388 \u2502   \u2502                                                                  \u2502\n\u2502   389 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 390 \u2502   \u2502   \u2502   self.push_screen(\"a\")                                      \u2502\n\u2502   391 \u2502                                                                      \u2502\n\u2502   392 \u2502   mouse_offset = Offset(1, 1)                                        \u2502\n\u2502   393                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2101 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   # Verify or get the screen instance                           \u2502\n\u2502   2100 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2101 \u2502   \u2502   \u2502   screen = self._installed_screens.get(screen)()            \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if screen is None:                                        \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise ValueError(f\"Screen {screen} is not installed o \u2502\n\u2502   2104 \u2502   \u2502   \u2502   assert isinstance(screen, Screen), \"Installed screen call \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \u2502\n\u2502 \u2502         callback = None                                                 \u2502  \u2502\n\u2502 \u2502           screen = 'a'                                                  \u2502  \u2502\n\u2502 \u2502             self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502  \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                \u2502  \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: 'MouseMoveRecordingScreen' object is not callable\n_______________________________ test_focus_chain _______________________________\n\n    def test_focus_chain():\n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n>       await app.push_screen(\"screen1\")\n\ntests/test_screens.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = 'screen1'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n>           screen = self._installed_screens.get(screen)()\nE           TypeError: 'Screen' object is not callable\n\nsrc/textual/app.py:2101: TypeError\n_________________________ test_dismiss_non_top_screen __________________________\n\n    async def test_dismiss_non_top_screen():\n        class MyApp(App[None]):\n            async def key_p(self) -> None:\n                self.bottom = Screen()\n                top = Screen()\n                await self.push_screen(self.bottom)\n                await self.push_screen(top)\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"p\")\n            with pytest.raises(ScreenError):\n>               await app.bottom.dismiss()\n\ntests/test_screens.py:305: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:1258: in dismiss\n    await_pop = self.app.pop_screen()\nsrc/textual/app.py:2259: in pop_screen\n    previous_screen._pop_result_callback()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen()\n\n    def _pop_result_callback(self) -> None:\n        \"\"\"Remove the latest result callback from the stack.\"\"\"\n>       self._result_callbacks.pop()\nE       IndexError: pop from empty list\n\nsrc/textual/screen.py:899: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_dismiss_non_top_screen():\n        class MyApp(App[None]):\n            async def key_p(self) -> None:\n                self.bottom = Screen()\n                top = Screen()\n                await self.push_screen(self.bottom)\n                await self.push_screen(top)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3267: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:298: in key_p\n    await self.push_screen(self.bottom)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:298 in key_p               \u2502\n\u2502                                                                              \u2502\n\u2502   295 \u2502   \u2502   async def key_p(self) -> None:                                 \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.bottom = Screen()                                     \u2502\n\u2502   297 \u2502   \u2502   \u2502   top = Screen()                                             \u2502\n\u2502 \u2771 298 \u2502   \u2502   \u2502   await self.push_screen(self.bottom)                        \u2502\n\u2502   299 \u2502   \u2502   \u2502   await self.push_screen(top)                                \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2502  top = Screen()                                     \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = Screen()                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_________________________________ test_unmount _________________________________\n\n    async def test_unmount():\n        \"\"\"Test unmount events are received in reverse DOM order.\"\"\"\n        unmount_ids: list[str] = []\n    \n        class UnmountWidget(Container):\n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(\n                    f\"{self.__class__.__name__}#{self.id}-{self.parent is not None}-{len(self._nodes)}\"\n                )\n    \n        class MyScreen(Screen):\n            def compose(self) -> ComposeResult:\n                yield UnmountWidget(\n                    UnmountWidget(\n                        UnmountWidget(id=\"bar1\"), UnmountWidget(id=\"bar2\"), id=\"bar\"\n                    ),\n                    UnmountWidget(\n                        UnmountWidget(id=\"baz1\"), UnmountWidget(id=\"baz2\"), id=\"baz\"\n                    ),\n                    id=\"top\",\n                )\n    \n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(f\"{self.__class__.__name__}#{self.id}\")\n    \n        class UnmountApp(App):\n            async def on_mount(self) -> None:\n                await self.push_screen(MyScreen(id=\"main\"))\n    \n        app = UnmountApp()\n>       async with app.run_test() as pilot:\n\ntests/test_unmount.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_unmount.py:36: in on_mount\n    await self.push_screen(MyScreen(id=\"main\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = UnmountApp(title='UnmountApp', classes={'-dark-mode'})\nscreen = MyScreen(id='main'), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_unmount.py:36 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   33 \u2502                                                                       \u2502\n\u2502   34 \u2502   class UnmountApp(App):                                              \u2502\n\u2502   35 \u2502   \u2502   async def on_mount(self) -> None:                               \u2502\n\u2502 \u2771 36 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"main\"))                 \u2502\n\u2502   37 \u2502                                                                       \u2502\n\u2502   38 \u2502   app = UnmountApp()                                                  \u2502\n\u2502   39 \u2502   async with app.run_test() as pilot:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502 \u2502 MyScreen = <class 'tests.test_unmount.test_unmount.<locals>.MyScreen'> \u2502   \u2502\n\u2502 \u2502     self = UnmountApp(title='UnmountApp', classes={'-dark-mode'})      \u2502   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = MyScreen(id='main')                                   \u2502 \u2502\n\u2502 \u2502             self = UnmountApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='UnmountApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_ test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set _\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.sub_title = \"new app sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:145: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:145 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   142 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   143 \u2502   \u2502                                                                  \u2502\n\u2502   144 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 145 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   146 \u2502                                                                      \u2502\n\u2502   147 \u2502   app = MyApp()                                                      \u2502\n\u2502   148 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_app_sub_title_reactive_does_not_upda\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_____________ test_mouse_move_event_bubbles_to_screen_from_widget ______________\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n        async with SimpleApp().run_test() as pilot:\n>           await pilot.hover(Label, mouse_offset)\n\ntests/test_screens.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/pilot.py:271: in hover\n    return await self._post_mouse_events(\nsrc/textual/pilot.py:317: in _post_mouse_events\n    target_widget = app.query_one(selector)\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='Label'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='Label'> on SimpleApp(title='SimpleApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n>       async with SimpleApp().run_test() as pilot:\n\ntests/test_screens.py:427: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:422: in on_mount\n    self.push_screen(\"a\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SimpleApp(title='SimpleApp', classes={'-dark-mode'}), screen = 'a'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n>           screen = self._installed_screens.get(screen)()\nE           TypeError: 'MouseMoveRecordingScreen' object is not callable\n\nsrc/textual/app.py:2101: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:422 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   419 \u2502   \u2502   SCREENS = {\"a\": MouseMoveRecordingScreen()}                    \u2502\n\u2502   420 \u2502   \u2502                                                                  \u2502\n\u2502   421 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 422 \u2502   \u2502   \u2502   self.push_screen(\"a\")                                      \u2502\n\u2502   423 \u2502                                                                      \u2502\n\u2502   424 \u2502   label_offset = Offset(10, 10)                                      \u2502\n\u2502   425 \u2502   mouse_offset = Offset(1, 1)                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2101 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   # Verify or get the screen instance                           \u2502\n\u2502   2100 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2101 \u2502   \u2502   \u2502   screen = self._installed_screens.get(screen)()            \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if screen is None:                                        \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise ValueError(f\"Screen {screen} is not installed o \u2502\n\u2502   2104 \u2502   \u2502   \u2502   assert isinstance(screen, Screen), \"Installed screen call \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \u2502\n\u2502 \u2502         callback = None                                                 \u2502  \u2502\n\u2502 \u2502           screen = 'a'                                                  \u2502  \u2502\n\u2502 \u2502             self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502  \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                \u2502  \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: 'MouseMoveRecordingScreen' object is not callable\n____ test_app_title_reactive_does_not_update_title_when_screen_title_is_set ____\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.title = \"new app title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='new app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:71: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='new app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:71 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    68 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    69 \u2502   \u2502                                                                  \u2502\n\u2502    70 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  71 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    72 \u2502                                                                      \u2502\n\u2502    73 \u2502   app = MyApp()                                                      \u2502\n\u2502    74 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_app_title_reactive_does_not_update_t\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n        async with app.run_test():\n            screen_id = id(app.screen)\n>           app.switch_screen(\"screen\")\n\ntests/test_screens.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2170: in switch_screen\n    top_screen._pop_result_callback()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default')\n\n    def _pop_result_callback(self) -> None:\n        \"\"\"Remove the latest result callback from the stack.\"\"\"\n>       self._result_callbacks.pop()\nE       IndexError: pop from empty list\n\nsrc/textual/screen.py:899: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:337: in on_mount\n    self.push_screen(\"screen\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'screen'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n>           screen = self._installed_screens.get(screen)()\nE           TypeError: 'MyScreen' object is not callable\n\nsrc/textual/app.py:2101: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:337 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   334 \u2502   \u2502   SCREENS = {\"screen\": MyScreen()}                               \u2502\n\u2502   335 \u2502   \u2502                                                                  \u2502\n\u2502   336 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 337 \u2502   \u2502   \u2502   self.push_screen(\"screen\")                                 \u2502\n\u2502   338 \u2502                                                                      \u2502\n\u2502   339 \u2502   app = MyApp()                                                      \u2502\n\u2502   340 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2101 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   # Verify or get the screen instance                           \u2502\n\u2502   2100 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2101 \u2502   \u2502   \u2502   screen = self._installed_screens.get(screen)()            \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if screen is None:                                        \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise ValueError(f\"Screen {screen} is not installed o \u2502\n\u2502   2104 \u2502   \u2502   \u2502   assert isinstance(screen, Screen), \"Installed screen call \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = 'screen'                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: 'MyScreen' object is not callable\n_________________ test_auto_focus_skips_non_focusable_widgets __________________\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.focused is not None\nE           AssertionError: assert None is not None\nE            +  where None = MyApp(title='MyApp', classes={'-dark-mode'}).focused\n\ntests/test_screens.py:289: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:285: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:285 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   282 \u2502                                                                      \u2502\n\u2502   283 \u2502   class MyApp(App[None]):                                            \u2502\n\u2502   284 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 285 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   286 \u2502                                                                      \u2502\n\u2502   287 \u2502   app = MyApp()                                                      \u2502\n\u2502   288 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_screens.test_auto_focus_skips_non_focusable_widg\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n_________________ test_pilot_exception_catching_widget_compose _________________\n\n    async def test_pilot_exception_catching_widget_compose():\n        class SomeScreen(Screen[None]):\n            def compose(self) -> ComposeResult:\n                1 / 0\n                yield Label(\"Beep\")\n    \n        class FailingApp(App[None]):\n            def on_mount(self) -> None:\n                self.push_screen(SomeScreen())\n    \n        with pytest.raises(ZeroDivisionError):\n>           async with FailingApp().run_test():\n\ntests/test_pilot.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_pilot.py:83: in on_mount\n    self.push_screen(SomeScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FailingApp(title='FailingApp', classes={'-dark-mode'})\nscreen = SomeScreen(), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_pilot.py:83 in on_mount               \u2502\n\u2502                                                                              \u2502\n\u2502    80 \u2502                                                                      \u2502\n\u2502    81 \u2502   class FailingApp(App[None]):                                       \u2502\n\u2502    82 \u2502   \u2502   def on_mount(self) -> None:                                    \u2502\n\u2502 \u2771  83 \u2502   \u2502   \u2502   self.push_screen(SomeScreen())                             \u2502\n\u2502    84 \u2502                                                                      \u2502\n\u2502    85 \u2502   with pytest.raises(ZeroDivisionError):                             \u2502\n\u2502    86 \u2502   \u2502   async with FailingApp().run_test():                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502       self = FailingApp(title='FailingApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2502 SomeScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_pilot.test_pilot_exception_catching_widget_com\u2026 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = SomeScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = FailingApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='FailingApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n____________________ test_screen_title_overrides_app_title _____________________\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2576: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2523: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3096: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:33: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen | str,\n        callback: Callable[[ScreenResultType], None] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> Awaitable[ScreenResultType] | AwaitMount[None]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        # Verify or get the screen instance\n        if isinstance(screen, str):\n            screen = self._installed_screens.get(screen)()\n            if screen is None:\n                raise ValueError(f\"Screen {screen} is not installed or invalid.\")\n            assert isinstance(screen, Screen), \"Installed screen callable did not return a Screen.\"\n    \n        # Push screen onto the screen stack\n        self._screen_stacks[self._current_mode].append(screen)\n        self.log(f\"Pushed screen: {screen}\")\n    \n        # Awaitable logic handling\n        if wait_for_dismiss:\n            if not getattr(self, \"_current_worker\", None):\n                raise NoActiveWorker(\"wait_for_dismiss requires a worker context\")\n            future: asyncio.Future = Future()\n            screen.dispatched.connect(lambda event: future.set_result(event.result))\n            if callback:\n                future.add_done_callback(lambda future: callback(future.result()))\n            return future\n    \n>       await_mount = AwaitMount(screen, callback=callback)\nE       TypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n\nsrc/textual/app.py:2120: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:33 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    30 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    31 \u2502   \u2502                                                                  \u2502\n\u2502    32 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  33 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    34 \u2502                                                                      \u2502\n\u2502    35 \u2502   app = MyApp()                                                      \u2502\n\u2502    36 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_overrides_app_title.<lo\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2120 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2117 \u2502   \u2502   \u2502   \u2502   future.add_done_callback(lambda future: callback(futu \u2502\n\u2502   2118 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2119 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2120 \u2502   \u2502   await_mount = AwaitMount(screen, callback=callback)           \u2502\n\u2502   2121 \u2502   \u2502   self._pending_mounts.append(await_mount)                      \u2502\n\u2502   2122 \u2502   \u2502   self.refresh()                                                \u2502\n\u2502   2123 \u2502   \u2502   return await_mount                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: AwaitMount.__init__() got an unexpected keyword argument 'callback'\n=============================== warnings summary ===============================\ntests/test_header.py: 8 warnings\ntests/css/test_screen_css.py: 4 warnings\ntests/test_screens.py: 13 warnings\ntests/test_widget.py: 1 warning\ntests/test_unmount.py: 1 warning\ntests/test_pilot.py: 1 warning\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_header.py::test_screen_title_none_is_ignored\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_header.py::test_screen_title_none_is_ignored - TypeError: A...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - T...\nFAILED tests/test_focus.py::test_allow_focus - TypeError: AwaitMount.__init__...\nFAILED tests/test_header.py::test_screen_sub_title_none_is_ignored - TypeErro...\nFAILED tests/test_screens.py::test_dismiss_action - TypeError: AwaitMount.__i...\nFAILED tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_widget.py::test_compose_order - TypeError: AwaitMount.__ini...\nFAILED tests/test_header.py::test_screen_sub_title_overrides_app_sub_title - ...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss - textual.wor...\nFAILED tests/test_header.py::test_screen_title_reactive_updates_title - TypeE...\nFAILED tests/test_screens.py::test_auto_focus_inheritance - TypeError: AwaitM...\nFAILED tests/test_screens.py::test_screen_receives_mouse_move_events - TypeEr...\nFAILED tests/test_focus.py::test_focus_chain - TypeError: AwaitMount.__init__...\nFAILED tests/test_screens.py::test_screens - TypeError: 'Screen' object is no...\nFAILED tests/test_screens.py::test_dismiss_non_top_screen - TypeError: AwaitM...\nFAILED tests/test_unmount.py::test_unmount - TypeError: AwaitMount.__init__()...\nFAILED tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\nFAILED tests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\nFAILED tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\nFAILED tests/test_screens.py::test_switch_screen_no_op - TypeError: 'MyScreen...\nFAILED tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets - T...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/test_pilot.py::test_pilot_exception_catching_widget_compose - Ty...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/test_header.py::test_screen_title_overrides_app_title - TypeErro...\n================== 30 failed, 1 passed, 29 warnings in 5.75s ===================\n\n"], "textual-src/textual/app.py-switch_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_screens.py FF                                                 [ 33%]\ntests/css/test_screen_css.py FF                                          [ 66%]\ntests/test_screens.py F                                                  [ 83%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n        async with app.run_test():\n            screen_id = id(app.screen)\n>           app.switch_screen(\"screen\")\n\ntests/test_screens.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another screen by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If the screen is a string, treat it as a screen name and fetch the screen object\n            screen = self._installed_screens.get(screen)\n            if screen is None:\n                raise ScreenError(f\"Screen named '{screen}' not found.\")\n            if isinstance(screen, Callable):\n                screen = screen()  # Call the callable to get a Screen instance\n    \n        if not isinstance(screen, Screen):\n            raise TypeError(\"Expected a Screen object or screen name.\")\n    \n        current_mode_stack = self._screen_stacks[self._current_mode]\n    \n        if current_mode_stack:\n>           current_mode_stack[-1].on_stack_hide()\nE           AttributeError: 'MyScreen' object has no attribute 'on_stack_hide'\n\nsrc/textual/app.py:2184: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n>       await app.switch_screen(\"screen2\")\n\ntests/test_screens.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen(name='screen2')\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another screen by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If the screen is a string, treat it as a screen name and fetch the screen object\n            screen = self._installed_screens.get(screen)\n            if screen is None:\n                raise ScreenError(f\"Screen named '{screen}' not found.\")\n            if isinstance(screen, Callable):\n                screen = screen()  # Call the callable to get a Screen instance\n    \n        if not isinstance(screen, Screen):\n            raise TypeError(\"Expected a Screen object or screen name.\")\n    \n        current_mode_stack = self._screen_stacks[self._current_mode]\n    \n        if current_mode_stack:\n>           current_mode_stack[-1].on_stack_hide()\nE           AttributeError: 'Screen' object has no attribute 'on_stack_hide'\n\nsrc/textual/app.py:2184: AttributeError\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3106: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3277: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:172: in key_p\n    self.switch_screen(ScreenWithCSS())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ScreenWithCSS()\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another screen by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If the screen is a string, treat it as a screen name and fetch the screen object\n            screen = self._installed_screens.get(screen)\n            if screen is None:\n                raise ScreenError(f\"Screen named '{screen}' not found.\")\n            if isinstance(screen, Callable):\n                screen = screen()  # Call the callable to get a Screen instance\n    \n        if not isinstance(screen, Screen):\n            raise TypeError(\"Expected a Screen object or screen name.\")\n    \n        current_mode_stack = self._screen_stacks[self._current_mode]\n    \n        if current_mode_stack:\n>           current_mode_stack[-1].on_stack_hide()\nE           AttributeError: 'BaseScreen' object has no attribute 'on_stack_hide'\n\nsrc/textual/app.py:2184: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:172 in key_p        \u2502\n\u2502                                                                              \u2502\n\u2502   169 \u2502                                                                      \u2502\n\u2502   170 \u2502   class MyApp(SwitchBaseApp):                                        \u2502\n\u2502   171 \u2502   \u2502   def key_p(self):                                               \u2502\n\u2502 \u2771 172 \u2502   \u2502   \u2502   self.switch_screen(ScreenWithCSS())                        \u2502\n\u2502   173 \u2502   \u2502                                                                  \u2502\n\u2502   174 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502   175 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2184 in switch_screen         \u2502\n\u2502                                                                              \u2502\n\u2502   2181 \u2502   \u2502   current_mode_stack = self._screen_stacks[self._current_mode]  \u2502\n\u2502   2182 \u2502   \u2502                                                                 \u2502\n\u2502   2183 \u2502   \u2502   if current_mode_stack:                                        \u2502\n\u2502 \u2771 2184 \u2502   \u2502   \u2502   current_mode_stack[-1].on_stack_hide()                    \u2502\n\u2502   2185 \u2502   \u2502                                                                 \u2502\n\u2502   2186 \u2502   \u2502   screen.on_stack_show()                                        \u2502\n\u2502   2187 \u2502   \u2502   if current_mode_stack:                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 current_mode_stack = [Screen(id='_default'), BaseScreen(), BaseScreen()] \u2502 \u2502\n\u2502 \u2502             screen = ScreenWithCSS()                                     \u2502 \u2502\n\u2502 \u2502               self = MyApp(title='MyApp', classes={'-dark-mode'})        \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'BaseScreen' object has no attribute 'on_stack_hide'\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:202: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3106: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3277: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:193: in key_p\n    self.switch_screen(\"screenwithcss\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ScreenWithCSS()\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another screen by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If the screen is a string, treat it as a screen name and fetch the screen object\n            screen = self._installed_screens.get(screen)\n            if screen is None:\n                raise ScreenError(f\"Screen named '{screen}' not found.\")\n            if isinstance(screen, Callable):\n                screen = screen()  # Call the callable to get a Screen instance\n    \n        if not isinstance(screen, Screen):\n            raise TypeError(\"Expected a Screen object or screen name.\")\n    \n        current_mode_stack = self._screen_stacks[self._current_mode]\n    \n        if current_mode_stack:\n>           current_mode_stack[-1].on_stack_hide()\nE           AttributeError: 'BaseScreen' object has no attribute 'on_stack_hide'\n\nsrc/textual/app.py:2184: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:193 in key_p        \u2502\n\u2502                                                                              \u2502\n\u2502   190 \u2502   \u2502   SCREENS = {\"screenwithcss\": ScreenWithCSS()}                   \u2502\n\u2502   191 \u2502   \u2502                                                                  \u2502\n\u2502   192 \u2502   \u2502   def key_p(self):                                               \u2502\n\u2502 \u2771 193 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   194 \u2502   \u2502                                                                  \u2502\n\u2502   195 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502   196 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2184 in switch_screen         \u2502\n\u2502                                                                              \u2502\n\u2502   2181 \u2502   \u2502   current_mode_stack = self._screen_stacks[self._current_mode]  \u2502\n\u2502   2182 \u2502   \u2502                                                                 \u2502\n\u2502   2183 \u2502   \u2502   if current_mode_stack:                                        \u2502\n\u2502 \u2771 2184 \u2502   \u2502   \u2502   current_mode_stack[-1].on_stack_hide()                    \u2502\n\u2502   2185 \u2502   \u2502                                                                 \u2502\n\u2502   2186 \u2502   \u2502   screen.on_stack_show()                                        \u2502\n\u2502   2187 \u2502   \u2502   if current_mode_stack:                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 current_mode_stack = [Screen(id='_default'), BaseScreen(), BaseScreen()] \u2502 \u2502\n\u2502 \u2502             screen = ScreenWithCSS()                                     \u2502 \u2502\n\u2502 \u2502               self = MyApp(title='MyApp', classes={'-dark-mode'})        \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'BaseScreen' object has no attribute 'on_stack_hide'\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n            assert len(app.screen._result_callbacks) == 1\n            assert app.screen._result_callbacks[-1].callback(None) == 42\n    \n>           app.switch_screen(\"b\")\n\ntests/test_screens.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ScreenB()\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another screen by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If the screen is a string, treat it as a screen name and fetch the screen object\n            screen = self._installed_screens.get(screen)\n            if screen is None:\n                raise ScreenError(f\"Screen named '{screen}' not found.\")\n            if isinstance(screen, Callable):\n                screen = screen()  # Call the callable to get a Screen instance\n    \n        if not isinstance(screen, Screen):\n            raise TypeError(\"Expected a Screen object or screen name.\")\n    \n        current_mode_stack = self._screen_stacks[self._current_mode]\n    \n        if current_mode_stack:\n>           current_mode_stack[-1].on_stack_hide()\nE           AttributeError: 'ScreenA' object has no attribute 'on_stack_hide'\n\nsrc/textual/app.py:2184: AttributeError\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3106: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3277: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/css/test_screen_css.py:214: in key_p\n    self.switch_screen(\"screenwithcss\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ScreenWithCSS()\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another screen by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If the screen is a string, treat it as a screen name and fetch the screen object\n            screen = self._installed_screens.get(screen)\n            if screen is None:\n                raise ScreenError(f\"Screen named '{screen}' not found.\")\n            if isinstance(screen, Callable):\n                screen = screen()  # Call the callable to get a Screen instance\n    \n        if not isinstance(screen, Screen):\n            raise TypeError(\"Expected a Screen object or screen name.\")\n    \n        current_mode_stack = self._screen_stacks[self._current_mode]\n    \n        if current_mode_stack:\n>           current_mode_stack[-1].on_stack_hide()\nE           AttributeError: 'BaseScreen' object has no attribute 'on_stack_hide'\n\nsrc/textual/app.py:2184: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:214 in key_p        \u2502\n\u2502                                                                              \u2502\n\u2502   211 \u2502   \u2502   SCREENS = {\"screenwithcss\": ScreenWithCSS}                     \u2502\n\u2502   212 \u2502   \u2502                                                                  \u2502\n\u2502   213 \u2502   \u2502   async def key_p(self):                                         \u2502\n\u2502 \u2771 214 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   215 \u2502   \u2502                                                                  \u2502\n\u2502   216 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502   217 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2184 in switch_screen         \u2502\n\u2502                                                                              \u2502\n\u2502   2181 \u2502   \u2502   current_mode_stack = self._screen_stacks[self._current_mode]  \u2502\n\u2502   2182 \u2502   \u2502                                                                 \u2502\n\u2502   2183 \u2502   \u2502   if current_mode_stack:                                        \u2502\n\u2502 \u2771 2184 \u2502   \u2502   \u2502   current_mode_stack[-1].on_stack_hide()                    \u2502\n\u2502   2185 \u2502   \u2502                                                                 \u2502\n\u2502   2186 \u2502   \u2502   screen.on_stack_show()                                        \u2502\n\u2502   2187 \u2502   \u2502   if current_mode_stack:                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 current_mode_stack = [Screen(id='_default'), BaseScreen(), BaseScreen()] \u2502 \u2502\n\u2502 \u2502             screen = ScreenWithCSS()                                     \u2502 \u2502\n\u2502 \u2502               self = MyApp(title='MyApp', classes={'-dark-mode'})        \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'BaseScreen' object has no attribute 'on_stack_hide'\n=============================== warnings summary ===============================\ntests/test_screens.py::test_switch_screen_no_op\ntests/test_screens.py::test_screens\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_screens.py::test_switch_screen_no_op\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_switch_screen_no_op - AttributeError: 'MyS...\nFAILED tests/test_screens.py::test_screens - AttributeError: 'Screen' object ...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n======================== 6 failed, 7 warnings in 1.18s =========================\n\n"], "textual-src/textual/app.py-pop_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 2 errors\n\n==================================== ERRORS ====================================\n________________ ERROR collecting tests/css/test_screen_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 2276\nE       await previous_screen.switch_to()\nE       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   SyntaxError: 'await' outside async function\n____________________ ERROR collecting tests/test_screens.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 2276\nE       await previous_screen.switch_to()\nE       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   SyntaxError: 'await' outside async function\n=========================== short test summary info ============================\nERROR tests/css/test_screen_css.py\nERROR tests/test_screens.py\n============================== 2 errors in 0.17s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\n"], "textual-src/textual/app.py-run_action": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_widget.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_remove __________________________________\n\n    async def test_remove():\n        class RemoveMeLabel(Label):\n            async def on_mount(self) -> None:\n                await self.run_action(\"app.remove_all\")\n    \n        class Container(Widget):\n            async def clear(self) -> None:\n                await self.query(\"*\").remove()\n    \n        class RemoveApp(App):\n            def compose(self) -> ComposeResult:\n                yield Container(RemoveMeLabel())\n    \n            async def action_remove_all(self) -> None:\n                await self.query_one(Container).clear()\n                self.exit(123)\n    \n        app = RemoveApp()\n>       async with app.run_test() as pilot:\n\ntests/test_widget.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:545: in _pre_process\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:223: in on_mount\n    await self.run_action(\"app.remove_all\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = RemoveMeLabel(), action = 'app.remove_all'\n\n    async def run_action(self, action: str) -> None:\n        \"\"\"Perform a given action, with this widget as the default namespace.\n    \n        Args:\n            action: Action encoded as a string.\n        \"\"\"\n>       await self.app.run_action(action, self)\nE       TypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/widget.py:3545: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:223 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   220 async def test_remove():                                               \u2502\n\u2502   221 \u2502   class RemoveMeLabel(Label):                                        \u2502\n\u2502   222 \u2502   \u2502   async def on_mount(self) -> None:                              \u2502\n\u2502 \u2771 223 \u2502   \u2502   \u2502   await self.run_action(\"app.remove_all\")                    \u2502\n\u2502   224 \u2502                                                                      \u2502\n\u2502   225 \u2502   class Container(Widget):                                           \u2502\n\u2502   226 \u2502   \u2502   async def clear(self) -> None:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = RemoveMeLabel() \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:3545 in run_action         \u2502\n\u2502                                                                              \u2502\n\u2502   3542 \u2502   \u2502   Args:                                                         \u2502\n\u2502   3543 \u2502   \u2502   \u2502   action: Action encoded as a string.                       \u2502\n\u2502   3544 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 3545 \u2502   \u2502   await self.app.run_action(action, self)                       \u2502\n\u2502   3546 \u2502                                                                     \u2502\n\u2502   3547 \u2502   def post_message(self, message: Message) -> bool:                 \u2502\n\u2502   3548 \u2502   \u2502   \"\"\"Post a message to this widget.                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                \u2502\n\u2502 \u2502 action = 'app.remove_all' \u2502                                                \u2502\n\u2502 \u2502   self = RemoveMeLabel()  \u2502                                                \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were \ngiven\n=============================== warnings summary ===============================\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget.py::test_remove - TypeError: App.run_action() takes ...\n======================== 1 failed, 2 warnings in 0.48s =========================\n\n"], "textual-src/textual/file_monitor.py-check": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_file_monitor.py .                                             [100%]\n\n============================== 1 passed in 0.08s ===============================\n\n"], "textual-src/textual/expand_tabs.py-expand_tabs_inline": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 13 items\n\ntests/test_expand_tabs.py .............                                  [100%]\n\n============================== 13 passed in 0.09s ==============================\n\n"], "textual-src/textual/_resolve.py-resolve": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_resolve.py ....FFF                                            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_resolve[scalars3-100-1-result3] _____________________\n\nscalars = ['10', '1fr'], total = 100, gutter = 1, result = [(0, 10), (11, 89)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/_resolve.py:51: in resolve\n    fr_unit_value = Fraction(available_space, total_fr_value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'fractions.Fraction'>, numerator = 99, denominator = 1.0\n\n    def __new__(cls, numerator=0, denominator=None, *, _normalize=True):\n        \"\"\"Constructs a Rational.\n    \n        Takes a string like '3/2' or '1.5', another Rational instance, a\n        numerator/denominator pair, or a float.\n    \n        Examples\n        --------\n    \n        >>> Fraction(10, -8)\n        Fraction(-5, 4)\n        >>> Fraction(Fraction(1, 7), 5)\n        Fraction(1, 35)\n        >>> Fraction(Fraction(1, 7), Fraction(2, 3))\n        Fraction(3, 14)\n        >>> Fraction('314')\n        Fraction(314, 1)\n        >>> Fraction('-35/4')\n        Fraction(-35, 4)\n        >>> Fraction('3.1415') # conversion from numeric string\n        Fraction(6283, 2000)\n        >>> Fraction('-47e-2') # string may include a decimal exponent\n        Fraction(-47, 100)\n        >>> Fraction(1.47)  # direct construction from float (exact conversion)\n        Fraction(6620291452234629, 4503599627370496)\n        >>> Fraction(2.25)\n        Fraction(9, 4)\n        >>> Fraction(Decimal('1.47'))\n        Fraction(147, 100)\n    \n        \"\"\"\n        self = super(Fraction, cls).__new__(cls)\n    \n        if denominator is None:\n            if type(numerator) is int:\n                self._numerator = numerator\n                self._denominator = 1\n                return self\n    \n            elif isinstance(numerator, numbers.Rational):\n                self._numerator = numerator.numerator\n                self._denominator = numerator.denominator\n                return self\n    \n            elif isinstance(numerator, (float, Decimal)):\n                # Exact conversion\n                self._numerator, self._denominator = numerator.as_integer_ratio()\n                return self\n    \n            elif isinstance(numerator, str):\n                # Handle construction from strings.\n                m = _RATIONAL_FORMAT.match(numerator)\n                if m is None:\n                    raise ValueError('Invalid literal for Fraction: %r' %\n                                     numerator)\n                numerator = int(m.group('num') or '0')\n                denom = m.group('denom')\n                if denom:\n                    denominator = int(denom)\n                else:\n                    denominator = 1\n                    decimal = m.group('decimal')\n                    if decimal:\n                        scale = 10**len(decimal)\n                        numerator = numerator * scale + int(decimal)\n                        denominator *= scale\n                    exp = m.group('exp')\n                    if exp:\n                        exp = int(exp)\n                        if exp >= 0:\n                            numerator *= 10**exp\n                        else:\n                            denominator *= 10**-exp\n                if m.group('sign') == '-':\n                    numerator = -numerator\n    \n            else:\n                raise TypeError(\"argument should be a string \"\n                                \"or a Rational instance\")\n    \n        elif type(numerator) is int is type(denominator):\n            pass # *very* normal case\n    \n        elif (isinstance(numerator, numbers.Rational) and\n            isinstance(denominator, numbers.Rational)):\n            numerator, denominator = (\n                numerator.numerator * denominator.denominator,\n                denominator.numerator * numerator.denominator\n                )\n        else:\n>           raise TypeError(\"both arguments should be \"\n                            \"Rational instances\")\nE           TypeError: both arguments should be Rational instances\n\n/usr/local/lib/python3.10/fractions.py:152: TypeError\n_____________________ test_resolve[scalars4-100-0-result4] _____________________\n\nscalars = ['1fr', '1fr'], total = 100, gutter = 0, result = [(0, 50), (50, 50)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/_resolve.py:51: in resolve\n    fr_unit_value = Fraction(available_space, total_fr_value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'fractions.Fraction'>, numerator = 100, denominator = 2.0\n\n    def __new__(cls, numerator=0, denominator=None, *, _normalize=True):\n        \"\"\"Constructs a Rational.\n    \n        Takes a string like '3/2' or '1.5', another Rational instance, a\n        numerator/denominator pair, or a float.\n    \n        Examples\n        --------\n    \n        >>> Fraction(10, -8)\n        Fraction(-5, 4)\n        >>> Fraction(Fraction(1, 7), 5)\n        Fraction(1, 35)\n        >>> Fraction(Fraction(1, 7), Fraction(2, 3))\n        Fraction(3, 14)\n        >>> Fraction('314')\n        Fraction(314, 1)\n        >>> Fraction('-35/4')\n        Fraction(-35, 4)\n        >>> Fraction('3.1415') # conversion from numeric string\n        Fraction(6283, 2000)\n        >>> Fraction('-47e-2') # string may include a decimal exponent\n        Fraction(-47, 100)\n        >>> Fraction(1.47)  # direct construction from float (exact conversion)\n        Fraction(6620291452234629, 4503599627370496)\n        >>> Fraction(2.25)\n        Fraction(9, 4)\n        >>> Fraction(Decimal('1.47'))\n        Fraction(147, 100)\n    \n        \"\"\"\n        self = super(Fraction, cls).__new__(cls)\n    \n        if denominator is None:\n            if type(numerator) is int:\n                self._numerator = numerator\n                self._denominator = 1\n                return self\n    \n            elif isinstance(numerator, numbers.Rational):\n                self._numerator = numerator.numerator\n                self._denominator = numerator.denominator\n                return self\n    \n            elif isinstance(numerator, (float, Decimal)):\n                # Exact conversion\n                self._numerator, self._denominator = numerator.as_integer_ratio()\n                return self\n    \n            elif isinstance(numerator, str):\n                # Handle construction from strings.\n                m = _RATIONAL_FORMAT.match(numerator)\n                if m is None:\n                    raise ValueError('Invalid literal for Fraction: %r' %\n                                     numerator)\n                numerator = int(m.group('num') or '0')\n                denom = m.group('denom')\n                if denom:\n                    denominator = int(denom)\n                else:\n                    denominator = 1\n                    decimal = m.group('decimal')\n                    if decimal:\n                        scale = 10**len(decimal)\n                        numerator = numerator * scale + int(decimal)\n                        denominator *= scale\n                    exp = m.group('exp')\n                    if exp:\n                        exp = int(exp)\n                        if exp >= 0:\n                            numerator *= 10**exp\n                        else:\n                            denominator *= 10**-exp\n                if m.group('sign') == '-':\n                    numerator = -numerator\n    \n            else:\n                raise TypeError(\"argument should be a string \"\n                                \"or a Rational instance\")\n    \n        elif type(numerator) is int is type(denominator):\n            pass # *very* normal case\n    \n        elif (isinstance(numerator, numbers.Rational) and\n            isinstance(denominator, numbers.Rational)):\n            numerator, denominator = (\n                numerator.numerator * denominator.denominator,\n                denominator.numerator * numerator.denominator\n                )\n        else:\n>           raise TypeError(\"both arguments should be \"\n                            \"Rational instances\")\nE           TypeError: both arguments should be Rational instances\n\n/usr/local/lib/python3.10/fractions.py:152: TypeError\n_____________________ test_resolve[scalars5-100-1-result5] _____________________\n\nscalars = ['3', '1fr', '1fr', '1'], total = 100, gutter = 1\nresult = [(0, 3), (4, 46), (51, 47), (99, 1)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/_resolve.py:51: in resolve\n    fr_unit_value = Fraction(available_space, total_fr_value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'fractions.Fraction'>, numerator = 97, denominator = 2.0\n\n    def __new__(cls, numerator=0, denominator=None, *, _normalize=True):\n        \"\"\"Constructs a Rational.\n    \n        Takes a string like '3/2' or '1.5', another Rational instance, a\n        numerator/denominator pair, or a float.\n    \n        Examples\n        --------\n    \n        >>> Fraction(10, -8)\n        Fraction(-5, 4)\n        >>> Fraction(Fraction(1, 7), 5)\n        Fraction(1, 35)\n        >>> Fraction(Fraction(1, 7), Fraction(2, 3))\n        Fraction(3, 14)\n        >>> Fraction('314')\n        Fraction(314, 1)\n        >>> Fraction('-35/4')\n        Fraction(-35, 4)\n        >>> Fraction('3.1415') # conversion from numeric string\n        Fraction(6283, 2000)\n        >>> Fraction('-47e-2') # string may include a decimal exponent\n        Fraction(-47, 100)\n        >>> Fraction(1.47)  # direct construction from float (exact conversion)\n        Fraction(6620291452234629, 4503599627370496)\n        >>> Fraction(2.25)\n        Fraction(9, 4)\n        >>> Fraction(Decimal('1.47'))\n        Fraction(147, 100)\n    \n        \"\"\"\n        self = super(Fraction, cls).__new__(cls)\n    \n        if denominator is None:\n            if type(numerator) is int:\n                self._numerator = numerator\n                self._denominator = 1\n                return self\n    \n            elif isinstance(numerator, numbers.Rational):\n                self._numerator = numerator.numerator\n                self._denominator = numerator.denominator\n                return self\n    \n            elif isinstance(numerator, (float, Decimal)):\n                # Exact conversion\n                self._numerator, self._denominator = numerator.as_integer_ratio()\n                return self\n    \n            elif isinstance(numerator, str):\n                # Handle construction from strings.\n                m = _RATIONAL_FORMAT.match(numerator)\n                if m is None:\n                    raise ValueError('Invalid literal for Fraction: %r' %\n                                     numerator)\n                numerator = int(m.group('num') or '0')\n                denom = m.group('denom')\n                if denom:\n                    denominator = int(denom)\n                else:\n                    denominator = 1\n                    decimal = m.group('decimal')\n                    if decimal:\n                        scale = 10**len(decimal)\n                        numerator = numerator * scale + int(decimal)\n                        denominator *= scale\n                    exp = m.group('exp')\n                    if exp:\n                        exp = int(exp)\n                        if exp >= 0:\n                            numerator *= 10**exp\n                        else:\n                            denominator *= 10**-exp\n                if m.group('sign') == '-':\n                    numerator = -numerator\n    \n            else:\n                raise TypeError(\"argument should be a string \"\n                                \"or a Rational instance\")\n    \n        elif type(numerator) is int is type(denominator):\n            pass # *very* normal case\n    \n        elif (isinstance(numerator, numbers.Rational) and\n            isinstance(denominator, numbers.Rational)):\n            numerator, denominator = (\n                numerator.numerator * denominator.denominator,\n                denominator.numerator * numerator.denominator\n                )\n        else:\n>           raise TypeError(\"both arguments should be \"\n                            \"Rational instances\")\nE           TypeError: both arguments should be Rational instances\n\n/usr/local/lib/python3.10/fractions.py:152: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_resolve.py::test_resolve[scalars3-100-1-result3] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars4-100-0-result4] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars5-100-1-result5] - TypeErro...\n========================= 3 failed, 4 passed in 0.14s ==========================\n\n"], "textual-src/textual/widget.py-mount": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_mount.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_render_only_after_mount _________________________\n\n    async def test_render_only_after_mount():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2914\"\"\"\n        app = App()\n        async with app.run_test() as pilot:\n>           app.mount(W())\n\ntests/test_mount.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:1807: in mount\n    return self.screen.mount(*widgets, before=before, after=after)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), before = None, after = None, widgets = (W(),)\ninsert_index = None\n\n    def mount(self, *widgets: Widget, before: int | str | None = None, after: int | str | None = None) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise MountError(\"You can specify either 'before' or 'after', but not both\")\n    \n        insert_index = None\n        if before is not None:\n            if isinstance(before, int):\n                insert_index = before\n            elif isinstance(before, str):\n                before_widget = self.query_one(before)\n                if before_widget in self._nodes:\n                    insert_index = self._nodes.index(before_widget)\n                else:\n                    raise MountError(f\"Widget for 'before' query '{before}' not found\")\n        elif after is not None:\n            if isinstance(after, int):\n                insert_index = after + 1\n            elif isinstance(after, str):\n                after_widget = self.query_one(after)\n                if after_widget in self._nodes:\n                    insert_index = self._nodes.index(after_widget) + 1\n                else:\n                    raise MountError(f\"Widget for 'after' query '{after}' not found\")\n    \n        if insert_index is not None:\n            for widget in widgets:\n                self._nodes.insert(insert_index, widget)\n                insert_index += 1\n        else:\n>           self._nodes.extend(widgets)\nE           AttributeError: 'NodeList' object has no attribute 'extend'\n\nsrc/textual/widget.py:967: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_render_only_after_mount():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2914\"\"\"\n        app = App()\n>       async with app.run_test() as pilot:\n\ntests/test_mount.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3056: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:2640: in _on_compose\n    await self.mount_all(widgets)\nsrc/textual/app.py:1837: in mount_all\n    return self.mount(*widgets, before=before, after=after)\nsrc/textual/app.py:1807: in mount\n    return self.screen.mount(*widgets, before=before, after=after)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), before = None, after = None, widgets = ()\ninsert_index = None\n\n    def mount(self, *widgets: Widget, before: int | str | None = None, after: int | str | None = None) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise MountError(\"You can specify either 'before' or 'after', but not both\")\n    \n        insert_index = None\n        if before is not None:\n            if isinstance(before, int):\n                insert_index = before\n            elif isinstance(before, str):\n                before_widget = self.query_one(before)\n                if before_widget in self._nodes:\n                    insert_index = self._nodes.index(before_widget)\n                else:\n                    raise MountError(f\"Widget for 'before' query '{before}' not found\")\n        elif after is not None:\n            if isinstance(after, int):\n                insert_index = after + 1\n            elif isinstance(after, str):\n                after_widget = self.query_one(after)\n                if after_widget in self._nodes:\n                    insert_index = self._nodes.index(after_widget) + 1\n                else:\n                    raise MountError(f\"Widget for 'after' query '{after}' not found\")\n    \n        if insert_index is not None:\n            for widget in widgets:\n                self._nodes.insert(insert_index, widget)\n                insert_index += 1\n        else:\n>           self._nodes.extend(widgets)\nE           AttributeError: 'NodeList' object has no attribute 'extend'\n\nsrc/textual/widget.py:967: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1837 in mount_all             \u2502\n\u2502                                                                              \u2502\n\u2502   1834 \u2502   \u2502   \u2502   Only one of ``before`` or ``after`` can be provided. If b \u2502\n\u2502   1835 \u2502   \u2502   \u2502   provided a ``MountError`` will be raised.                 \u2502\n\u2502   1836 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 1837 \u2502   \u2502   return self.mount(*widgets, before=before, after=after)       \u2502\n\u2502   1838 \u2502                                                                     \u2502\n\u2502   1839 \u2502   def _init_mode(self, mode: str) -> AwaitMount:                    \u2502\n\u2502   1840 \u2502   \u2502   \"\"\"Do internal initialization of a new screen stack mode.     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                       \u2502\n\u2502 \u2502   after = None                                     \u2502                       \u2502\n\u2502 \u2502  before = None                                     \u2502                       \u2502\n\u2502 \u2502    self = App(title='App', classes={'-dark-mode'}) \u2502                       \u2502\n\u2502 \u2502 widgets = []                                       \u2502                       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                       \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1807 in mount                 \u2502\n\u2502                                                                              \u2502\n\u2502   1804 \u2502   \u2502   \u2502   Only one of ``before`` or ``after`` can be provided. If b \u2502\n\u2502   1805 \u2502   \u2502   \u2502   provided a ``MountError`` will be raised.                 \u2502\n\u2502   1806 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 1807 \u2502   \u2502   return self.screen.mount(*widgets, before=before, after=after \u2502\n\u2502   1808 \u2502                                                                     \u2502\n\u2502   1809 \u2502   def mount_all(                                                    \u2502\n\u2502   1810 \u2502   \u2502   self,                                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                       \u2502\n\u2502 \u2502   after = None                                     \u2502                       \u2502\n\u2502 \u2502  before = None                                     \u2502                       \u2502\n\u2502 \u2502    self = App(title='App', classes={'-dark-mode'}) \u2502                       \u2502\n\u2502 \u2502 widgets = ()                                       \u2502                       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                       \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:967 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    964 \u2502   \u2502   \u2502   \u2502   self._nodes.insert(insert_index, widget)              \u2502\n\u2502    965 \u2502   \u2502   \u2502   \u2502   insert_index += 1                                     \u2502\n\u2502    966 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771  967 \u2502   \u2502   \u2502   self._nodes.extend(widgets)                               \u2502\n\u2502    968 \u2502   \u2502                                                                 \u2502\n\u2502    969 \u2502   \u2502   for widget in widgets:                                        \u2502\n\u2502    970 \u2502   \u2502   \u2502   widget._parent = self                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                     \u2502\n\u2502 \u2502        after = None                  \u2502                                     \u2502\n\u2502 \u2502       before = None                  \u2502                                     \u2502\n\u2502 \u2502 insert_index = None                  \u2502                                     \u2502\n\u2502 \u2502         self = Screen(id='_default') \u2502                                     \u2502\n\u2502 \u2502      widgets = ()                    \u2502                                     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'NodeList' object has no attribute 'extend'\n=============================== warnings summary ===============================\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_mount.py::test_render_only_after_mount - AttributeError: 'N...\n======================== 1 failed, 2 warnings in 0.50s =========================\n\n"], "textual-src/textual/widget.py-move_child": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_widget_child_moving.py FFFFFF                                 [100%]\n\n=================================== FAILURES ===================================\n________________________ test_move_before_permutations _________________________\n\n    async def test_move_before_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget before another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((1, 0), (widgets[1], 0), (1, widgets[0]), (widgets[1], widgets[0]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, before=target)\n\ntests/test_widget_child_moving.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparent = Widget(), child = 1, before = 0, after = None\n\n    def move_child(\n        parent: Widget,\n        child: Widget,\n        before: Widget | int | None = None,\n        after: Widget | int | None = None\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            parent: The parent widget containing the child to be moved.\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if (before is not None and after is not None) or (before is None and after is None):\n            raise WidgetError(\"You must provide exactly one of 'before' or 'after'\")\n    \n        # Remove the child from its current position\n        if child not in parent._nodes:\n>           raise WidgetError(f\"The child widget is not a child of {parent}\")\nE           textual.widget.WidgetError: The child widget is not a child of Widget()\n\nsrc/textual/widget.py:1065: WidgetError\n_______________________ test_move_child_after_last_child _______________________\n\n    async def test_move_child_after_last_child() -> None:\n        \"\"\"Test moving after a child after the last child.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[-1])\n\ntests/test_widget_child_moving.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparent = Widget(), child = Widget(id='widget-0'), before = None\nafter = Widget(id='widget-9')\n\n    def move_child(\n        parent: Widget,\n        child: Widget,\n        before: Widget | int | None = None,\n        after: Widget | int | None = None\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            parent: The parent widget containing the child to be moved.\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if (before is not None and after is not None) or (before is None and after is None):\n            raise WidgetError(\"You must provide exactly one of 'before' or 'after'\")\n    \n        # Remove the child from its current position\n        if child not in parent._nodes:\n            raise WidgetError(f\"The child widget is not a child of {parent}\")\n    \n>       parent._nodes.remove(child)\nE       AttributeError: 'NodeList' object has no attribute 'remove'. Did you mean: '_remove'?\n\nsrc/textual/widget.py:1067: AttributeError\n_______________________ test_move_past_end_of_child_list _______________________\n\n    async def test_move_past_end_of_child_list() -> None:\n        \"\"\"Test attempting to move past the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=len(widgets) + 10)\n\ntests/test_widget_child_moving.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparent = Widget(), child = Widget(id='widget-0'), before = 20, after = None\n\n    def move_child(\n        parent: Widget,\n        child: Widget,\n        before: Widget | int | None = None,\n        after: Widget | int | None = None\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            parent: The parent widget containing the child to be moved.\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if (before is not None and after is not None) or (before is None and after is None):\n            raise WidgetError(\"You must provide exactly one of 'before' or 'after'\")\n    \n        # Remove the child from its current position\n        if child not in parent._nodes:\n            raise WidgetError(f\"The child widget is not a child of {parent}\")\n    \n>       parent._nodes.remove(child)\nE       AttributeError: 'NodeList' object has no attribute 'remove'. Did you mean: '_remove'?\n\nsrc/textual/widget.py:1067: AttributeError\n_________________ test_move_child_after_last_numeric_location __________________\n\n    async def test_move_child_after_last_numeric_location() -> None:\n        \"\"\"Test moving after a child after the last child's numeric position.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[9])\n\ntests/test_widget_child_moving.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparent = Widget(), child = Widget(id='widget-0'), before = None\nafter = Widget(id='widget-9')\n\n    def move_child(\n        parent: Widget,\n        child: Widget,\n        before: Widget | int | None = None,\n        after: Widget | int | None = None\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            parent: The parent widget containing the child to be moved.\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if (before is not None and after is not None) or (before is None and after is None):\n            raise WidgetError(\"You must provide exactly one of 'before' or 'after'\")\n    \n        # Remove the child from its current position\n        if child not in parent._nodes:\n            raise WidgetError(f\"The child widget is not a child of {parent}\")\n    \n>       parent._nodes.remove(child)\nE       AttributeError: 'NodeList' object has no attribute 'remove'. Did you mean: '_remove'?\n\nsrc/textual/widget.py:1067: AttributeError\n_________________________ test_move_after_permutations _________________________\n\n    async def test_move_after_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget after another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((0, 1), (widgets[0], 1), (0, widgets[1]), (widgets[0], widgets[1]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, after=target)\n\ntests/test_widget_child_moving.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparent = Widget(), child = 0, before = None, after = 1\n\n    def move_child(\n        parent: Widget,\n        child: Widget,\n        before: Widget | int | None = None,\n        after: Widget | int | None = None\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            parent: The parent widget containing the child to be moved.\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if (before is not None and after is not None) or (before is None and after is None):\n            raise WidgetError(\"You must provide exactly one of 'before' or 'after'\")\n    \n        # Remove the child from its current position\n        if child not in parent._nodes:\n>           raise WidgetError(f\"The child widget is not a child of {parent}\")\nE           textual.widget.WidgetError: The child widget is not a child of Widget()\n\nsrc/textual/widget.py:1065: WidgetError\n______________________ test_move_before_end_of_child_list ______________________\n\n    async def test_move_before_end_of_child_list() -> None:\n        \"\"\"Test attempting to move before the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=-(len(widgets) + 10))\n\ntests/test_widget_child_moving.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparent = Widget(), child = Widget(id='widget-0'), before = -20, after = None\n\n    def move_child(\n        parent: Widget,\n        child: Widget,\n        before: Widget | int | None = None,\n        after: Widget | int | None = None\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            parent: The parent widget containing the child to be moved.\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if (before is not None and after is not None) or (before is None and after is None):\n            raise WidgetError(\"You must provide exactly one of 'before' or 'after'\")\n    \n        # Remove the child from its current position\n        if child not in parent._nodes:\n            raise WidgetError(f\"The child widget is not a child of {parent}\")\n    \n>       parent._nodes.remove(child)\nE       AttributeError: 'NodeList' object has no attribute 'remove'. Did you mean: '_remove'?\n\nsrc/textual/widget.py:1067: AttributeError\n=============================== warnings summary ===============================\ntests/test_widget_child_moving.py::test_move_before_permutations\ntests/test_widget_child_moving.py::test_move_child_after_last_child\ntests/test_widget_child_moving.py::test_move_past_end_of_child_list\ntests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\ntests/test_widget_child_moving.py::test_move_after_permutations\ntests/test_widget_child_moving.py::test_move_before_end_of_child_list\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget_child_moving.py::test_move_before_permutations\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget_child_moving.py::test_move_before_permutations - tex...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_child - ...\nFAILED tests/test_widget_child_moving.py::test_move_past_end_of_child_list - ...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\nFAILED tests/test_widget_child_moving.py::test_move_after_permutations - text...\nFAILED tests/test_widget_child_moving.py::test_move_before_end_of_child_list\n======================== 6 failed, 7 warnings in 0.34s =========================\n\n"], "textual-src/textual/widget.py-_get_box_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/test_box_model.py FFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_max ___________________________________\n\n    def test_max():\n        \"\"\"Check that max_width and max_height are respected.\"\"\"\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n        styles.width = 100\n        styles.height = 80\n        styles.max_width = 40\n        styles.max_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\n\ntests/test_box_model.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=40, height=30)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout).\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n    \n        # Here, \"self.styles.width\" and \"self.styles.height\" represent the width and height\n        # styles from the widget's style configuration. Any additional logic to compute the\n        # actual pixel or fraction-based size will depend on these style attributes.\n    \n        width = self.styles.width.resolve(container.width, width_fraction)\n        height = self.styles.height.resolve(container.height, height_fraction)\n    \n        size = Size(width, height)\n    \n        # Compute the margin based on the style properties or logic\n>       margin_left = self.styles.margin.left.resolve(viewport.width, width_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1197: AttributeError\n__________________________________ test_width __________________________________\n\n    def test_width():\n        \"\"\"Test width settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\n\ntests/test_box_model.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout).\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n    \n        # Here, \"self.styles.width\" and \"self.styles.height\" represent the width and height\n        # styles from the widget's style configuration. Any additional logic to compute the\n        # actual pixel or fraction-based size will depend on these style attributes.\n    \n>       width = self.styles.width.resolve(container.width, width_fraction)\nE       AttributeError: 'NoneType' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1191: AttributeError\n_________________________________ test_height __________________________________\n\n    def test_height():\n        \"\"\"Test height settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\n\ntests/test_box_model.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout).\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n    \n        # Here, \"self.styles.width\" and \"self.styles.height\" represent the width and height\n        # styles from the widget's style configuration. Any additional logic to compute the\n        # actual pixel or fraction-based size will depend on these style attributes.\n    \n>       width = self.styles.width.resolve(container.width, width_fraction)\nE       AttributeError: 'NoneType' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1191: AttributeError\n___________________________________ test_min ___________________________________\n\n    def test_min():\n        \"\"\"Check that min_width and min_height are respected.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n        styles.width = 10\n        styles.height = 5\n        styles.min_width = 40\n        styles.min_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\n\ntests/test_box_model.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=40, height=30)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout).\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n    \n        # Here, \"self.styles.width\" and \"self.styles.height\" represent the width and height\n        # styles from the widget's style configuration. Any additional logic to compute the\n        # actual pixel or fraction-based size will depend on these style attributes.\n    \n        width = self.styles.width.resolve(container.width, width_fraction)\n        height = self.styles.height.resolve(container.height, height_fraction)\n    \n        size = Size(width, height)\n    \n        # Compute the margin based on the style properties or logic\n>       margin_left = self.styles.margin.left.resolve(viewport.width, width_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1197: AttributeError\n_______________________________ test_content_box _______________________________\n\n    def test_content_box():\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n    \n        # border-box is default\n        assert widget.styles.box_sizing == \"border-box\"\n    \n        widget.styles.width = 10\n        widget.styles.height = 8\n        widget.styles.padding = 1\n        widget.styles.border = (\"solid\", \"red\")\n    \n>       box_model = widget._get_box_model(\n            Size(60, 20),\n            Size(80, 24),\n            one,\n            one,\n        )\n\ntests/test_box_model.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout).\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n    \n        # Here, \"self.styles.width\" and \"self.styles.height\" represent the width and height\n        # styles from the widget's style configuration. Any additional logic to compute the\n        # actual pixel or fraction-based size will depend on these style attributes.\n    \n        width = self.styles.width.resolve(container.width, width_fraction)\n        height = self.styles.height.resolve(container.height, height_fraction)\n    \n        size = Size(width, height)\n    \n        # Compute the margin based on the style properties or logic\n>       margin_left = self.styles.margin.left.resolve(viewport.width, width_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1197: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_box_model.py::test_max - AttributeError: 'int' object has n...\nFAILED tests/test_box_model.py::test_width - AttributeError: 'NoneType' objec...\nFAILED tests/test_box_model.py::test_height - AttributeError: 'NoneType' obje...\nFAILED tests/test_box_model.py::test_min - AttributeError: 'int' object has n...\nFAILED tests/test_box_model.py::test_content_box - AttributeError: 'int' obje...\n============================== 5 failed in 0.25s ===============================\n\n"], "textual-src/textual/widget.py-get_content_width": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n"], "textual-src/textual/widget.py-get_content_height": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.11s ===============================\n\n"], "textual-src/textual/suggester.py-_get_suggestion": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/suggester/test_suggester.py FFFFFFFFFFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_case_insensitive_cache_hits _______________________\n\n    async def test_case_insensitive_cache_hits():\n        count = 0\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                nonlocal count\n                count += 1\n                return value + \"abc\"\n    \n        suggester = MySuggester(use_cache=True, case_sensitive=False)\n        hellos = [\"hello\", \"HELLO\", \"HeLlO\", \"Hello\", \"hELLO\"]\n        for hello in hellos:\n>           await suggester._get_suggestion(DOMNode(), hello)\n\ntests/suggester/test_suggester.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_cache_hits.<locals>.MySuggester object at 0x7fe9092e9120>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n_______________________ test_no_message_if_no_suggestion _______________________\n\n    async def test_no_message_if_no_suggestion():\n        log = []\n        suggester = FillSuggester()\n>       await suggester._get_suggestion(LogListNode(log), \"this is a longer string\")\n\ntests/suggester/test_suggester.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.FillSuggester object at 0x7fe9092e8190>\nrequester = LogListNode(), value = 'this is a longer string'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'LogListNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n___________________ test_case_insensitive_suggestions[hello] ___________________\n\nvalue = 'hello'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7fe9092c2440>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n___________________ test_case_insensitive_suggestions[HELLO] ___________________\n\nvalue = 'HELLO'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7fe909237be0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n___________________ test_case_insensitive_suggestions[HeLlO] ___________________\n\nvalue = 'HeLlO'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7fe9092c1cc0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n___________________ test_case_insensitive_suggestions[Hello] ___________________\n\nvalue = 'Hello'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7fe9092366b0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n___________________ test_case_insensitive_suggestions[hELLO] ___________________\n\nvalue = 'hELLO'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7fe9092c3a60>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n________________________________ test_cache_on _________________________________\n\n    async def test_cache_on():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=True)\n>       await suggester._get_suggestion(DOMNode(), \"hello\")\n\ntests/suggester/test_suggester.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_cache_on.<locals>.MySuggester object at 0x7fe9091f39a0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n__________________ test_suggestion_ready_message_on_cache_hit __________________\n\n    async def test_suggestion_ready_message_on_cache_hit():\n        log = []\n        suggester = FillSuggester(use_cache=True)\n>       await suggester._get_suggestion(LogListNode(log), \"hello\")\n\ntests/suggester/test_suggester.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.FillSuggester object at 0x7fe9092c2e60>\nrequester = LogListNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'LogListNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n________________________________ test_cache_off ________________________________\n\n    async def test_cache_off():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=False)\n>       await suggester._get_suggestion(DOMNode(), \"hello\")\n\ntests/suggester/test_suggester.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_cache_off.<locals>.MySuggester object at 0x7fe9091f02b0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'DOMNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n________________________ test_suggestion_ready_message _________________________\n\n    async def test_suggestion_ready_message():\n        log = []\n        suggester = FillSuggester()\n>       await suggester._get_suggestion(LogListNode(log), \"hello\")\n\ntests/suggester/test_suggester.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.FillSuggester object at 0x7fe9091f34f0>\nrequester = LogListNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        # If caching is used and the suggestion is cached, use it\n        if self.cache is not None:\n            cached_suggestion = self.cache.get(value)\n            if cached_suggestion is not None:\n                requester.send(SuggestionReady(value=value, suggestion=cached_suggestion))\n                return\n    \n        # Casefold the value if suggestions are not case sensitive\n        if not self.case_sensitive:\n            value = value.casefold()\n    \n        # Get the suggestion using the implemented 'get_suggestion' method\n        suggestion = await self.get_suggestion(value)\n    \n        # Cache the suggestion if caching is enabled\n        if self.cache is not None:\n            self.cache.set(value, suggestion)\n    \n        # Notify the requester with the suggestion\n>       requester.send(SuggestionReady(value=value, suggestion=suggestion if suggestion else \"\"))\nE       AttributeError: 'LogListNode' object has no attribute 'send'\n\nsrc/textual/suggester.py:80: AttributeError\n=============================== warnings summary ===============================\ntests/suggester/test_suggester.py: 11 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/suggester/test_suggester.py::test_case_insensitive_cache_hits\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_cache_hits - ...\nFAILED tests/suggester/test_suggester.py::test_no_message_if_no_suggestion - ...\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[hello]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[HELLO]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[HeLlO]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[Hello]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[hELLO]\nFAILED tests/suggester/test_suggester.py::test_cache_on - AttributeError: 'DO...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message_on_cache_hit\nFAILED tests/suggester/test_suggester.py::test_cache_off - AttributeError: 'D...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message - Att...\n======================= 11 failed, 12 warnings in 0.14s ========================\n\n"], "textual-src/textual/dom.py-add_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/css/test_stylesheet.py .                                           [100%]\n\n============================== 1 passed in 0.12s ===============================\n\n"], "textual-src/textual/reactive.py-_initialize_object": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_reactive.py .                                                 [100%]\n\n=============================== warnings summary ===============================\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 2 warnings in 0.12s =========================\n\n"], "textual-src/textual/message_pump.py-call_after_refresh": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py .                                        [100%]\n\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 2 warnings in 0.12s =========================\n\n"], "textual-src/textual/message_pump.py-call_later": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py .                                        [100%]\n\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 2 warnings in 0.12s =========================\n\n"], "textual-src/textual/message_pump.py-post_message": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\n============================ no tests ran in 0.09s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_reactive.py::watch_test_var\n(no match in any of [<Module test_reactive.py>])\n\n"], "textual-src/textual/_spatial_map.py-get_values_in_region": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_spatial_map.py .                                              [100%]\n\n============================== 1 passed in 0.08s ===============================\n\n"], "textual-src/textual/validation.py-validate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 45 items\n\ntests/test_validation.py .......................................FF....   [100%]\n\n=================================== FAILURES ===================================\n____________________ test_URL_validate[https:///path-False] ____________________\n\nvalue = 'https:///path', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n        result = validator.validate(value)\n>       assert result.is_valid == expected_result\nE       assert True == False\nE        +  where True = ValidationResult(failures=[]).is_valid\n\ntests/test_validation.py:201: AssertionError\n_____ test_URL_validate[redis://username:pass[word@localhost:6379/0-False] _____\n\nvalue = 'redis://username:pass[word@localhost:6379/0', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/validation.py:489: in validate\n    parsed_url = urlparse(value)\n/usr/local/lib/python3.10/urllib/parse.py:393: in urlparse\n    splitresult = urlsplit(url, scheme, allow_fragments)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = '/0', scheme = 'redis', allow_fragments = True\n\n    def urlsplit(url, scheme='', allow_fragments=True):\n        \"\"\"Parse a URL into 5 components:\n        <scheme>://<netloc>/<path>?<query>#<fragment>\n    \n        The result is a named 5-tuple with fields corresponding to the\n        above. It is either a SplitResult or SplitResultBytes object,\n        depending on the type of the url parameter.\n    \n        The username, password, hostname, and port sub-components of netloc\n        can also be accessed as attributes of the returned object.\n    \n        The scheme argument provides the default value of the scheme\n        component when no scheme is found in url.\n    \n        If allow_fragments is False, no attempt is made to separate the\n        fragment component from the previous component, which can be either\n        path or query.\n    \n        Note that % escapes are not expanded.\n        \"\"\"\n    \n        url, scheme, _coerce_result = _coerce_args(url, scheme)\n    \n        for b in _UNSAFE_URL_BYTES_TO_REMOVE:\n            url = url.replace(b, \"\")\n            scheme = scheme.replace(b, \"\")\n    \n        allow_fragments = bool(allow_fragments)\n        key = url, scheme, allow_fragments, type(url), type(scheme)\n        cached = _parse_cache.get(key, None)\n        if cached:\n            return _coerce_result(cached)\n        if len(_parse_cache) >= MAX_CACHE_SIZE: # avoid runaway growth\n            clear_cache()\n        netloc = query = fragment = ''\n        i = url.find(':')\n        if i > 0:\n            for c in url[:i]:\n                if c not in scheme_chars:\n                    break\n            else:\n                scheme, url = url[:i].lower(), url[i+1:]\n    \n        if url[:2] == '//':\n            netloc, url = _splitnetloc(url, 2)\n            if (('[' in netloc and ']' not in netloc) or\n                    (']' in netloc and '[' not in netloc)):\n>               raise ValueError(\"Invalid IPv6 URL\")\nE               ValueError: Invalid IPv6 URL\n\n/usr/local/lib/python3.10/urllib/parse.py:484: ValueError\n=========================== short test summary info ============================\nFAILED tests/test_validation.py::test_URL_validate[https:///path-False] - ass...\nFAILED tests/test_validation.py::test_URL_validate[redis://username:pass[word@localhost:6379/0-False]\n========================= 2 failed, 43 passed in 0.15s =========================\n\n"], "textual-src/textual/geometry.py-clamp": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_geometry.py .                                                 [100%]\n\n============================== 1 passed in 0.09s ===============================\n\n"], "textual-src/textual/constants.py-_get_textual_animations": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/animations/test_environment_variable.py FFFFF                      [100%]\n\n=================================== FAILURES ===================================\n_____________________ test__get_textual_animations[-full] ______________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9fa7002050>\nenv_variable = '', value = 'full'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\nE       AssertionError: assert 'all' == 'full'\nE         \nE         - full\nE         + all\n\ntests/animations/test_environment_variable.py:21: AssertionError\n___________________ test__get_textual_animations[FULL-full] ____________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9fa6f0ec50>\nenv_variable = 'FULL', value = 'full'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\nE       AssertionError: assert 'all' == 'full'\nE         \nE         - full\nE         + all\n\ntests/animations/test_environment_variable.py:21: AssertionError\n__________________ test__get_textual_animations[BASIC-basic] ___________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9fa7003dc0>\nenv_variable = 'BASIC', value = 'basic'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\nE       AssertionError: assert 'all' == 'basic'\nE         \nE         - basic\nE         + all\n\ntests/animations/test_environment_variable.py:21: AssertionError\n___________________ test__get_textual_animations[NONE-none] ____________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9fa6f0f520>\nenv_variable = 'NONE', value = 'none'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\nE       AssertionError: assert 'all' == 'none'\nE         \nE         - none\nE         + all\n\ntests/animations/test_environment_variable.py:21: AssertionError\n______________ test__get_textual_animations[garbanzo beans-full] _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9fac07afb0>\nenv_variable = 'garbanzo beans', value = 'full'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\nE       AssertionError: assert 'all' == 'full'\nE         \nE         - full\nE         + all\n\ntests/animations/test_environment_variable.py:21: AssertionError\n=========================== short test summary info ============================\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[-full]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[FULL-full]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[BASIC-basic]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[NONE-none]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[garbanzo beans-full]\n============================== 5 failed in 0.14s ===============================\n\n"], "textual-src/textual/color.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 116 items\n\n============================ no tests ran in 0.14s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/_slug.py-slug": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 34 items\n\ntests/test_slug.py ..................................                    [100%]\n\n============================== 34 passed in 0.10s ==============================\n\n"], "textual-src/textual/_styles_cache.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py FFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_no_styles ________________________________\n\n    def test_no_styles():\n        \"\"\"Test that empty style returns the content un-altered\"\"\"\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            \"\",\n            \"\",\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:38: TypeError\n_________________________________ test_padding _________________________________\n\n    def test_padding():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:102: TypeError\n_________________________________ test_border __________________________________\n\n    def test_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:68: TypeError\n_____________________________ test_padding_border ______________________________\n\n    def test_padding_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:137: TypeError\n__________________________________ test_crop ___________________________________\n\n    def test_crop():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n            crop=Region(2, 2, 3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:204: TypeError\n_________________________________ test_outline _________________________________\n\n    def test_outline():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.outline = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:173: TypeError\n_______________________________ test_dirty_cache _______________________________\n\n    def test_dirty_cache() -> None:\n        \"\"\"Check that we only render content once or if it has been marked as dirty.\"\"\"\n    \n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        rendered_lines: list[int] = []\n    \n        def get_content_line(y: int) -> Strip:\n            rendered_lines.append(y)\n            return content[y]\n    \n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            get_content_line,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:243: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_styles_cache.py::test_no_styles - TypeError: StylesCache.re...\nFAILED tests/test_styles_cache.py::test_padding - TypeError: StylesCache.rend...\nFAILED tests/test_styles_cache.py::test_border - TypeError: StylesCache.rende...\nFAILED tests/test_styles_cache.py::test_padding_border - TypeError: StylesCac...\nFAILED tests/test_styles_cache.py::test_crop - TypeError: StylesCache.render(...\nFAILED tests/test_styles_cache.py::test_outline - TypeError: StylesCache.rend...\nFAILED tests/test_styles_cache.py::test_dirty_cache - TypeError: StylesCache....\n============================== 7 failed in 0.12s ===============================\n\n"], "textual-src/textual/document/_document.py-replace_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n    \n        # Inform the wrapped document about the range impacted by the edit\n        wrapped_document.wrap_range(\n            start_location, old_end_location, edit_result.end_location\n        )\n    \n        # Now confirm the resulting wrapped version is as we would expect\n        assert wrapped_document.lines == [\n            [\"123 \", \"4567\"],\n            [\"12 \", \"3456\", \"7 \", \"8901\"],\n>       ]\n\ntests/document/test_wrapped_document.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7fcfc67b6e60>\n\n    @property\n    def lines(self) -> list[list[str]]:\n        \"\"\"The lines of the wrapped version of the Document.\n    \n        Each index in the returned list represents a line index in the raw\n        document. The list[str] at each index is the content of the raw document line\n        split into multiple lines via wrapping.\n    \n        Note that this is expensive to compute and is not cached.\n    \n        Returns:\n            A list of lines from the wrapped version of the document.\n        \"\"\"\n        wrapped_lines: list[list[str]] = []\n        append = wrapped_lines.append\n        for line_index, line in enumerate(self.document.lines):\n>           divided = Text(line).divide(self._wrap_offsets[line_index])\nE           IndexError: list index out of range\n\nsrc/textual/document/_wrapped_document.py:146: IndexError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7fcfc60fb910>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        \"\"\"Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Extract the existing text within the specified range.\n        replaced_text = self.get_text_range(start, end)\n    \n        # Calculate start and end rows, columns from locations.\n        start_row, start_col = start\n        end_row, end_col = end\n    \n        # Remove the text in the specified range and insert the new text.\n        # Update the line containing the start of the range\n        lines = self._lines\n    \n        # If start and end are on the same line\n        if start_row == end_row:\n            lines[start_row] = (\n                lines[start_row][:start_col] + text + lines[start_row][end_col:]\n            )\n        else:\n            # Update the start line by keeping everything before start_col and adding text\n            lines[start_row] = lines[start_row][:start_col] + text\n    \n            # Update the end line to keep everything after end_col\n            lines[end_row] = lines[end_row][end_col:]\n    \n            # Remove all lines between start and end that will be overwritten\n            del lines[start_row + 1:end_row]\n    \n        # Calculate new end location\n        new_end_row = start_row + text.count(self._newline)\n        if new_end_row == start_row:\n            new_end_col = start_col + len(text)\n        else:\n>           new_end_col = len(lines[new_end_row])\nE           IndexError: list index out of range\n\nsrc/textual/document/_document.py:299: IndexError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7fcfc604bc10>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        \"\"\"Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Extract the existing text within the specified range.\n        replaced_text = self.get_text_range(start, end)\n    \n        # Calculate start and end rows, columns from locations.\n        start_row, start_col = start\n        end_row, end_col = end\n    \n        # Remove the text in the specified range and insert the new text.\n        # Update the line containing the start of the range\n        lines = self._lines\n    \n        # If start and end are on the same line\n        if start_row == end_row:\n            lines[start_row] = (\n                lines[start_row][:start_col] + text + lines[start_row][end_col:]\n            )\n        else:\n            # Update the start line by keeping everything before start_col and adding text\n            lines[start_row] = lines[start_row][:start_col] + text\n    \n            # Update the end line to keep everything after end_col\n            lines[end_row] = lines[end_row][end_col:]\n    \n            # Remove all lines between start and end that will be overwritten\n            del lines[start_row + 1:end_row]\n    \n        # Calculate new end location\n        new_end_row = start_row + text.count(self._newline)\n        if new_end_row == start_row:\n            new_end_col = start_col + len(text)\n        else:\n>           new_end_col = len(lines[new_end_row])\nE           IndexError: list index out of range\n\nsrc/textual/document/_document.py:299: IndexError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(start_location, old_end_location, \"123\")\n    \n        # Inform the wrapped document about the range impacted by the edit\n        wrapped_document.wrap_range(\n            start_location,\n            old_end_location,\n            edit_result.end_location,\n        )\n    \n        # Now confirm the resulting wrapped version is as we would expect\n>       assert wrapped_document.lines == [[\"123 \", \"4567\"], [\"123\"]]\n\ntests/document/test_wrapped_document.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7fcfc60e1300>\n\n    @property\n    def lines(self) -> list[list[str]]:\n        \"\"\"The lines of the wrapped version of the Document.\n    \n        Each index in the returned list represents a line index in the raw\n        document. The list[str] at each index is the content of the raw document line\n        split into multiple lines via wrapping.\n    \n        Note that this is expensive to compute and is not cached.\n    \n        Returns:\n            A list of lines from the wrapped version of the document.\n        \"\"\"\n        wrapped_lines: list[list[str]] = []\n        append = wrapped_lines.append\n        for line_index, line in enumerate(self.document.lines):\n>           divided = Text(line).divide(self._wrap_offsets[line_index])\nE           IndexError: list index out of range\n\nsrc/textual/document/_wrapped_document.py:146: IndexError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - IndexErr...\n============================== 4 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-wrap_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py F..F                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location, old_end_location, edit_result.end_location\n        )\n\ntests/document/test_wrapped_document.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f0b6a597190>\nstart = (1, 0), old_end = (3, 0), new_end = (1, 13)\n\n    def wrap_range(self, start: Location, old_end: Location, new_end: Location) -> None:\n        \"\"\"Incrementally recompute wrapping based on a performed edit.\n    \n        This must be called *after* the source document has been edited.\n    \n        Args:\n            start: The start location of the edit that was performed in document-space.\n            old_end: The old end location of the edit in document-space.\n            new_end: The new end location of the edit in document-space.\n        \"\"\"\n        start_line, _ = start\n        old_end_line, _ = old_end\n        new_end_line, _ = new_end\n    \n        # Adjust the wrap offsets, tab widths, and mappings only for the affected lines\n        affected_lines = range(start_line, max(old_end_line, new_end_line) + 1)\n    \n        new_wrap_offsets = self._wrap_offsets[:start_line]\n        new_tab_widths = self._tab_width_cache[:start_line]\n        new_offset_to_line_info = self._offset_to_line_info[:self._line_index_to_offsets[start_line][0]]\n        new_line_index_to_offsets = self._line_index_to_offsets[:start_line]\n    \n        current_offset = (new_offset_to_line_info[-1][1] + 1\n                          if new_offset_to_line_info\n                          else 0)\n    \n        tab_width = self._tab_width\n        for line_index in affected_lines:\n>           line_text = self.document.lines[line_index]\nE           IndexError: list index out of range\n\nsrc/textual/document/_wrapped_document.py:184: IndexError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(start_location, old_end_location, \"123\")\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location,\n            old_end_location,\n            edit_result.end_location,\n        )\n\ntests/document/test_wrapped_document.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f0b69edba90>\nstart = (1, 0), old_end = (3, 0), new_end = (1, 3)\n\n    def wrap_range(self, start: Location, old_end: Location, new_end: Location) -> None:\n        \"\"\"Incrementally recompute wrapping based on a performed edit.\n    \n        This must be called *after* the source document has been edited.\n    \n        Args:\n            start: The start location of the edit that was performed in document-space.\n            old_end: The old end location of the edit in document-space.\n            new_end: The new end location of the edit in document-space.\n        \"\"\"\n        start_line, _ = start\n        old_end_line, _ = old_end\n        new_end_line, _ = new_end\n    \n        # Adjust the wrap offsets, tab widths, and mappings only for the affected lines\n        affected_lines = range(start_line, max(old_end_line, new_end_line) + 1)\n    \n        new_wrap_offsets = self._wrap_offsets[:start_line]\n        new_tab_widths = self._tab_width_cache[:start_line]\n        new_offset_to_line_info = self._offset_to_line_info[:self._line_index_to_offsets[start_line][0]]\n        new_line_index_to_offsets = self._line_index_to_offsets[:start_line]\n    \n        current_offset = (new_offset_to_line_info[-1][1] + 1\n                          if new_offset_to_line_info\n                          else 0)\n    \n        tab_width = self._tab_width\n        for line_index in affected_lines:\n>           line_text = self.document.lines[line_index]\nE           IndexError: list index out of range\n\nsrc/textual/document/_wrapped_document.py:184: IndexError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - IndexErr...\n========================= 2 failed, 2 passed in 0.12s ==========================\n\n"], "textual-src/textual/document/_wrapped_document.py-offset_to_location": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/document/test_wrapped_document.py FFFFFFFFFFFFFFFFFF               [100%]\n\n=================================== FAILURES ===================================\n_________ test_offset_to_location_wrapping_enabled[offset0-location0] __________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f1600dcfbb0>\noffset = Offset(x=0, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset1-location1] __________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16006f9d20>\noffset = Offset(x=1, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset2-location2] __________\n\noffset = Offset(x=2, y=1), location = (0, 6)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f160080e9b0>\noffset = Offset(x=2, y=1)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset3-location3] __________\n\noffset = Offset(x=0, y=3), location = (1, 4)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16009b6fb0>\noffset = Offset(x=0, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset4-location4] __________\n\noffset = Offset(x=1, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16006fbfd0>\noffset = Offset(x=1, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset5-location5] __________\n\noffset = Offset(x=200, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16009b4fa0>\noffset = Offset(x=200, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset6-location6] __________\n\noffset = Offset(x=0, y=6), location = (2, 8)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16006f8340>\noffset = Offset(x=0, y=6)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset7-location7] __________\n\noffset = Offset(x=0, y=7), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16009b4bb0>\noffset = Offset(x=0, y=7)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset8-location8] __________\n\noffset = Offset(x=0, y=1000), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16006fbe80>\noffset = Offset(x=0, y=1000)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0] _\n\noffset = Offset(x=-3, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f160080e830>\noffset = Offset(x=-3, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1] _\n\noffset = Offset(x=0, y=-10), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f1600812f20>\noffset = Offset(x=0, y=-10)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset0-location0] _________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f16009b72b0>\noffset = Offset(x=0, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset1-location1] _________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f160080fc70>\noffset = Offset(x=1, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset2-location2] _________\n\noffset = Offset(x=2, y=1), location = (1, 2)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f1600760190>\noffset = Offset(x=2, y=1)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset3-location3] _________\n\noffset = Offset(x=0, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f1600dbdcc0>\noffset = Offset(x=0, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset4-location4] _________\n\noffset = Offset(x=1, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f1600ebba30>\noffset = Offset(x=1, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset5-location5] _________\n\noffset = Offset(x=200, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f160080fa90>\noffset = Offset(x=200, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset6-location6] _________\n\noffset = Offset(x=200, y=200), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f1600ebbeb0>\noffset = Offset(x=200, y=200)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n>       if offset < 0 or offset >= len(self._offset_to_line_info):\nE       TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:291: TypeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset6-location6]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset7-location7]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset8-location8]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset6-location6]\n============================== 18 failed in 0.21s ==============================\n\n"], "textual-src/textual/css/parse.py-substitute_references": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_multi_value_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_reference_whitespace_trimming\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_transitive_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference_no_whitespace\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_definition_eof\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_empty_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_used_inside_property_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_undefined_variable\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/parse.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/css/test_nested_css.py FFFFFFFFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502  event = Compose()                                            \u2502            \u2502\n\u2502 \u2502 screen = Screen(id='_default')                                \u2502            \u2502\n\u2502 \u2502   self = NestedApp(title='NestedApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'NestedApp.CSS'),                                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502             self = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'NestedApp.CSS'                            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'NestedApp.CSS'                                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'NestedApp.CSS'                                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe9f6c66600>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = PseudoClassesInNestedApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='PseudoClassesInNestedApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'PseudoClassesInNestedApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe9f6547240>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                          \u2502\n\u2502 \u2502  event = Compose()                              \u2502                          \u2502\n\u2502 \u2502 screen = Screen(id='_default')                  \u2502                          \u2502\n\u2502 \u2502   self = DeclarationAfterNestedApp(             \u2502                          \u2502\n\u2502 \u2502          \u2502   title='DeclarationAfterNestedApp', \u2502                          \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}             \u2502                          \u2502\n\u2502 \u2502          )                                      \u2502                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'DeclarationAfterNestedApp.CSS'),                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe9f691a380>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = ListOfNestedSelectorsApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='ListOfNestedSelectorsApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'ListOfNestedSelectorsApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe9f685f640>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_parse_errors[Selector {-EOFError] ____________________\n\ncss = 'Selector {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {-EOFError] __________________\n\ncss = 'Selector{ Foo {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {}-EOFError] _________________\n\ncss = 'Selector{ Foo {}', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n______________________ test_parse_errors[> {}-TokenError] ______________________\n\ncss = '> {}', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&-TokenError] ________________________\n\ncss = '&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&&-TokenError] _______________________\n\ncss = '&&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[&.foo-TokenError] ______________________\n\ncss = '&.foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[& .foo-TokenError] _____________________\n\ncss = '& .foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[{-TokenError] ________________________\n\ncss = '{', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n________________________ test_parse_errors[*{-EOFError] ________________________\n\ncss = '*{', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 1 required positional argument: 'variables'\n\ntests/css/test_nested_css.py:112: TypeError\n=============================== warnings summary ===============================\ntests/css/test_nested_css.py::test_nest_app\ntests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\ntests/css/test_nested_css.py::test_rule_declaration_after_nested\ntests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_nested_css.py::test_nest_app\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_nested_css.py::test_nest_app - textual.css.errors.Style...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - tex...\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {}-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[> {}-TokenError] - Typ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&&-TokenError] - TypeE...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&.foo-TokenError] - Ty...\nFAILED tests/css/test_nested_css.py::test_parse_errors[& .foo-TokenError] - T...\nFAILED tests/css/test_nested_css.py::test_parse_errors[{-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[*{-EOFError] - TypeErr...\n======================== 14 failed, 5 warnings in 1.81s ========================\n\n"], "textual-src/textual/css/stylesheet.py-_parse_rules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/stylesheet.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n(no match in any of [<Module test_parse.py>])\n\n"], "gpt-engineer-gpt_engineer/core/chat_to_files.py-parse_diffs": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/core/test_chat_to_files.py FFFF.F.F                                [100%]\n\n=================================== FAILURES ===================================\n_______________ test_correct_skipped_lines_and_number_correction _______________\n\n    def test_correct_skipped_lines_and_number_correction():\n        distorted_example = insert_string_in_lined_string(\n            file_example, \"#\\n#comment\\n#\\n#\", 14\n        )\n        diffs = parse_diffs(example_line_dist_diff)\n        # list(diffs.values())[0].validate_and_correct(file_to_lines_dict(distorted_example))\n        for diff in diffs.values():\n            problems = diff.validate_and_correct(file_to_lines_dict(distorted_example))\n            print(problems)\n        with open(\n            os.path.join(\n                THIS_FILE_DIR,\n                \"improve_function_test_cases\",\n                \"corrected_diff_from_missing_lines\",\n            ),\n            \"r\",\n        ) as f:\n            corrected_diff_from_missing_lines = f.read()\n>       assert (\n            diffs[\"example.txt\"].diff_to_string().strip()\n            == corrected_diff_from_missing_lines.strip()\n        )\nE       AssertionError: assert '--- example....ion of step Y' == '--- example....ion of step Y'\nE         \nE           --- example.txt\nE           +++ example.txt\nE         - @@ -12,7 +12,8 @@\nE         -      sample text 1\nE         -      sample text 2\nE         - +    added extra line here...\nE         \nE         ...Full output truncated (17 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:257: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\nInvalid Hunk NO.0---\nIn Hunk:@@ -2,4 +13,5 @@\n \n @Analysis\n Overview: outcomes\n %\n Background: *context*\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n, there was at least one mismatch.\n---\n['In Hunk:@@ -2,4 +13,5 @@\\n \\n @Analysis\\n Overview: outcomes\\n %\\n Background: *context*\\n \\n nother irrelevant line to be ignored\\n ``diff\\n     sample text 1\\n     sample text 2\\n+    added extra line here\\n-    original text A\\n+    updated original text A with changes\\n, there was at least one mismatch.']\n------------------------------ Captured log call -------------------------------\nWARNING  root:diff.py:189 multiple candidates for starting index\n__________________________ test_diff_adding_one_file ___________________________\n\n    def test_diff_adding_one_file():\n        add_diff = parse_diffs(add_example)\n        for filename, diff in add_diff.items():\n            string_add_diff = diff.diff_to_string()\n        correct_add_diff = \"\\n\".join(add_example.strip().split(\"\\n\")[2:-1])\n>       assert string_add_diff == correct_add_diff\nE       AssertionError: assert '--- /dev/nul... example line' == '--- /dev/nul... example line'\nE         \nE         Skipping 37 identical leading characters in diff, use -v to show\nE           0 +1,3 @@\nE         +  ``diff\nE           +First example line\nE           +\nE           +Last example line\n\ntests/core/test_chat_to_files.py:191: AssertionError\n_________________________ test_diff_changing_two_files _________________________\n\n    def test_diff_changing_two_files():\n        merged_diff = parse_diffs(example_diff + add_example)\n        correct_diff = \"\\n\".join(example_diff.strip().split(\"\\n\")[4:-1])\n        correct_add_diff = \"\\n\".join(add_example.strip().split(\"\\n\")[2:-1])\n>       assert merged_diff[\"example.txt\"].diff_to_string() == correct_diff\nE       AssertionError: assert '--- example....tuff\\n ``diff' == '--- example....ion of step Y'\nE         \nE         Skipping 41 identical leading characters in diff, use -v to show\nE           +12,4 @@\nE         +  \nE         +  nother irrelevant line to be ignored\nE         +  ``diff\nE                sample text 1...\nE         \nE         ...Full output truncated (18 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:198: AssertionError\n________________________ test_correct_distorted_numbers ________________________\n\n    def test_correct_distorted_numbers():\n        lines_dict = file_to_lines_dict(file_example)\n        diffs = parse_diffs(example_line_dist_diff)\n        # This is a test in its own right since it full of exceptions, would something go wrong\n        list(diffs.values())[0].validate_and_correct(lines_dict)\n        correct_diff = \"\\n\".join(example_diff.strip().split(\"\\n\")[4:-1])\n>       assert diffs[\"example.txt\"].diff_to_string() == correct_diff\nE       AssertionError: assert '--- example....ion of step Y' == '--- example....ion of step Y'\nE         \nE           --- example.txt\nE           +++ example.txt\nE         - @@ -12,3 +12,4 @@\nE         -      sample text 1\nE         -      sample text 2\nE         - +    added extra line here...\nE         \nE         ...Full output truncated (13 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:215: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\nInvalid Hunk NO.0---\nIn Hunk:@@ -2,4 +13,5 @@\n \n @Analysis\n Overview: outcomes\n %\n Background: *context*\n \n Method: []\n !\n Theories: ?\n > Leading up...\n     sample text 1\n     sample text 2\n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n, there was at least one mismatch.\n---\n------------------------------ Captured log call -------------------------------\nWARNING  root:diff.py:189 multiple candidates for starting index\n__________________________ test_correct_skipped_lines __________________________\n\n    def test_correct_skipped_lines():\n        distorted_example = insert_string_in_lined_string(\n            file_example, \"#\\n#comment\\n#\\n#\", 14\n        )\n        diffs = parse_diffs(example_diff)\n        list(diffs.values())[0].validate_and_correct(file_to_lines_dict(distorted_example))\n        with open(\n            os.path.join(\n                THIS_FILE_DIR,\n                \"improve_function_test_cases\",\n                \"corrected_diff_from_missing_lines\",\n            ),\n            \"r\",\n        ) as f:\n            corrected_diff_from_missing_lines = f.read()\n>       assert (\n            diffs[\"example.txt\"].diff_to_string().strip()\n            == corrected_diff_from_missing_lines.strip()\n        )\nE       AssertionError: assert '--- example....ion of step Y' == '--- example....ion of step Y'\nE         \nE           --- example.txt\nE           +++ example.txt\nE         - @@ -12,7 +12,8 @@\nE         -      sample text 1\nE         -      sample text 2\nE         - +    added extra line here...\nE         \nE         ...Full output truncated (17 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:233: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\nInvalid Hunk NO.0---\nIn Hunk:@@ -2,3 +12,4 @@\n \n @Analysis\n Overview: outcomes\n %\n Background: *context*\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n, there was at least one mismatch.\n---\n------------------------------ Captured log call -------------------------------\nWARNING  root:diff.py:189 multiple candidates for starting index\n_________________________ test_diff_changing_one_file __________________________\n\n    def test_diff_changing_one_file():\n        diffs = parse_diffs(example_diff)\n        for filename, diff in diffs.items():\n            string_diff = diff.diff_to_string()\n        correct_diff = \"\\n\".join(example_diff.strip().split(\"\\n\")[4:-1])\n>       assert string_diff == correct_diff\nE       AssertionError: assert '--- example....ion of step Y' == '--- example....ion of step Y'\nE         \nE         Skipping 41 identical leading characters in diff, use -v to show\nE           +12,4 @@\nE         +  \nE         +  nother irrelevant line to be ignored\nE         +  ``diff\nE                sample text 1...\nE         \nE         ...Full output truncated (12 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:183: AssertionError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_correct_skipped_lines_and_number_correction\nFAILED tests/core/test_chat_to_files.py::test_diff_adding_one_file - Assertio...\nFAILED tests/core/test_chat_to_files.py::test_diff_changing_two_files - Asser...\nFAILED tests/core/test_chat_to_files.py::test_correct_distorted_numbers - Ass...\nFAILED tests/core/test_chat_to_files.py::test_correct_skipped_lines - Asserti...\nFAILED tests/core/test_chat_to_files.py::test_diff_changing_one_file - Assert...\n========================= 6 failed, 2 passed in 0.08s ==========================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-start": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/core/test_ai.py FFF                                                [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_start __________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe4c5eb5090>\n\n    def test_start(monkeypatch):\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7fe509b6b490>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: str, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n        logger.debug(f\"Starting a new conversation with step_name: {step_name}\")\n    \n        # Create the system message\n        system_message = SystemMessage(content=system)\n        # Create the user message\n        user_message = HumanMessage(content=user)\n    \n        # Initialize a new list of messages\n        messages = [system_message, user_message]\n    \n        logger.debug(f\"Initialized conversation messages: {messages}\")\n    \n        # Log token usage for the start of the conversation\n>       self.token_usage_log.update_usage(messages, step_name)\nE       AttributeError: 'TokenUsageLog' object has no attribute 'update_usage'. Did you mean: 'update_log'?\n\ngpt_engineer/core/ai.py:151: AttributeError\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe4c57673d0>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7fe4c5766200>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: str, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n        logger.debug(f\"Starting a new conversation with step_name: {step_name}\")\n    \n        # Create the system message\n        system_message = SystemMessage(content=system)\n        # Create the user message\n        user_message = HumanMessage(content=user)\n    \n        # Initialize a new list of messages\n        messages = [system_message, user_message]\n    \n        logger.debug(f\"Initialized conversation messages: {messages}\")\n    \n        # Log token usage for the start of the conversation\n>       self.token_usage_log.update_usage(messages, step_name)\nE       AttributeError: 'TokenUsageLog' object has no attribute 'update_usage'. Did you mean: 'update_log'?\n\ngpt_engineer/core/ai.py:151: AttributeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe4c5eb7490>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7fe4c5eb73a0>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: str, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n        logger.debug(f\"Starting a new conversation with step_name: {step_name}\")\n    \n        # Create the system message\n        system_message = SystemMessage(content=system)\n        # Create the user message\n        user_message = HumanMessage(content=user)\n    \n        # Initialize a new list of messages\n        messages = [system_message, user_message]\n    \n        logger.debug(f\"Initialized conversation messages: {messages}\")\n    \n        # Log token usage for the start of the conversation\n>       self.token_usage_log.update_usage(messages, step_name)\nE       AttributeError: 'TokenUsageLog' object has no attribute 'update_usage'. Did you mean: 'update_log'?\n\ngpt_engineer/core/ai.py:151: AttributeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_start - AttributeError: 'TokenUsageLog' ob...\nFAILED tests/core/test_ai.py::test_token_logging - AttributeError: 'TokenUsag...\nFAILED tests/core/test_ai.py::test_next - AttributeError: 'TokenUsageLog' obj...\n============================== 3 failed in 0.88s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting tests/core/test_ai.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/core/test_ai.py:4: in <module>\n    from gpt_engineer.core.ai import AI\nE     File \"/root/repos/py_data/gpt-engineer/gpt_engineer/core/ai.py\", line 210\nE       step_name: str,\nE       ^^^^^^^^^^^^^^\nE   SyntaxError: non-default argument follows default argument\n=========================== short test summary info ============================\nERROR tests/core/test_ai.py\n=============================== 1 error in 0.25s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_ai.py::test_token_logging\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_ai.py::test_next\n\n"], "gpt-engineer-gpt_engineer/core/project_config.py-to_toml": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/test_project_config.py ....                                        [100%]\n\n============================== 4 passed in 0.04s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/diff.py-is_similar": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/core/test_chat_to_files.py ....                                    [100%]\n\n============================== 4 passed in 0.04s ===============================\n\n"]}