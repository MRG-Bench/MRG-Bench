{"litestar-litestar/file_system.py-info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 8 items\n\ntests/unit/test_file_system.py FF                                        [ 25%]\ntests/unit/test_response/test_file_response.py F                         [ 37%]\ntests/unit/test_file_system.py F.                                        [ 62%]\ntests/unit/test_response/test_file_response.py .                         [ 75%]\ntests/unit/test_file_system.py F.                                        [100%]\n\n=================================== FAILURES ===================================\n______ test_file_adapter_info_handles_permission_exception[file_system0] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2494/test_file_adapter_info_handles0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc27730>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        with pytest.raises(NotAuthorizedException):\n>           await adapter.info(path=file)\n\ntests/unit/test_file_system.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc27730>\npath = '/tmp/pytest-of-root/pytest-2494/test_file_adapter_info_handles0/test.txt'\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n>       full_path = self._get_full_path(path)\nE       AttributeError: 'BaseLocalFileSystem' object has no attribute '_get_full_path'\n\nlitestar/file_system.py:38: AttributeError\n______ test_file_adapter_info_handles_permission_exception[file_system1] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2494/test_file_adapter_info_handles1')\nfile_system = <fsspec.implementations.local.LocalFileSystem object at 0x7f3dbbc25180>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n_________________________ test_file_with_symbolic_link _________________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2494/test_file_with_symbolic_link0')\n\n    async def test_file_with_symbolic_link(tmpdir: \"Path\") -> None:\n        path = tmpdir / \"text.txt\"\n        path.write_text(\"content\", \"utf-8\")\n    \n        linked = tmpdir / \"alt.txt\"\n        os.symlink(path, linked, target_is_directory=False)\n    \n        fs = BaseLocalFileSystem()\n>       file_info = await fs.info(linked)\n\ntests/unit/test_response/test_file_response.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc529b0>\npath = local('/tmp/pytest-of-root/pytest-2494/test_file_with_symbolic_link0/alt.txt')\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n>       full_path = self._get_full_path(path)\nE       AttributeError: 'BaseLocalFileSystem' object has no attribute '_get_full_path'\n\nlitestar/file_system.py:38: AttributeError\n____ test_file_adapter_info_handles_file_not_found_exception[file_system0] _____\n\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc24760>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    async def test_file_adapter_info_handles_file_not_found_exception(file_system: \"FileSystemProtocol\") -> None:\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        with pytest.raises(FileNotFoundError):\n>           await adapter.info(path=\"non_existing_file.txt\")\n\ntests/unit/test_file_system.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc24760>\npath = 'non_existing_file.txt', kwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n>       full_path = self._get_full_path(path)\nE       AttributeError: 'BaseLocalFileSystem' object has no attribute '_get_full_path'\n\nlitestar/file_system.py:38: AttributeError\n_____________________ test_file_adapter_info[file_system0] _____________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2494/test_file_adapter_info_file_sy0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc26830>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"Suspected fsspec issue\", strict=False)\n    async def test_file_adapter_info(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        result = file.stat()\n    \n>       assert await adapter.info(file) == {\n            \"gid\": result.st_gid,\n            \"ino\": result.st_ino,\n            \"islink\": False,\n            \"mode\": result.st_mode,\n            \"mtime\": result.st_mtime,\n            \"name\": str(file),\n            \"nlink\": 1,\n            \"created\": result.st_ctime,\n            \"size\": result.st_size,\n            \"type\": \"file\",\n            \"uid\": result.st_uid,\n        }\n\ntests/unit/test_file_system.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f3dbbc26830>\npath = '/tmp/pytest-of-root/pytest-2494/test_file_adapter_info_file_sy0/test.txt'\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n>       full_path = self._get_full_path(path)\nE       AttributeError: 'BaseLocalFileSystem' object has no attribute '_get_full_path'\n\nlitestar/file_system.py:38: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system1]\nFAILED tests/unit/test_response/test_file_response.py::test_file_with_symbolic_link\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_file_not_found_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info[file_system0]\n========================= 5 failed, 3 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-has_inner_subclass_of": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n____________ test_backend_iterable_annotation[experimental_backend] ____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_iterable_annotation(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n        backend = DTOBackend(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        field_definition = FieldDefinition.from_annotation(backend.annotation)\n        assert field_definition.origin is list\n>       assert field_definition.has_inner_subclass_of(Struct)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FieldDefinition(raw=typing.List[litestar.dto._backend.TestDCRequestBody], annotation=typing.List[litestar.dto._backend..., extra={}, kwarg_definition=None, name=''),), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\ncl = <class 'msgspec.Struct'>\n\n    def has_inner_subclass_of(self, cl: type[Any] | tuple[type[Any], ...]) -> bool:\n>       return any(isinstance(arg, type) and issubclass(arg, cl) for arg in self.__args__)\nE       AttributeError: 'FieldDefinition' object has no attribute '__args__'\n\nlitestar/typing.py:462: AttributeError\n______________ test_backend_iterable_annotation[default_backend] _______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_iterable_annotation(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n        backend = DTOBackend(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        field_definition = FieldDefinition.from_annotation(backend.annotation)\n        assert field_definition.origin is list\n>       assert field_definition.has_inner_subclass_of(Struct)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FieldDefinition(raw=typing.List[litestar.dto._backend.TestDCRequestBody], annotation=typing.List[litestar.dto._backend..., extra={}, kwarg_definition=None, name=''),), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\ncl = <class 'msgspec.Struct'>\n\n    def has_inner_subclass_of(self, cl: type[Any] | tuple[type[Any], ...]) -> bool:\n>       return any(isinstance(arg, type) and issubclass(arg, cl) for arg in self.__args__)\nE       AttributeError: 'FieldDefinition' object has no attribute '__args__'\n\nlitestar/typing.py:462: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_iterable_annotation[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_iterable_annotation[default_backend]\n============================== 2 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-get_type_hints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_typing.py .                                              [100%]\n\n============================== 1 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-from_kwarg": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 29 items\n\ntests/unit/test_dto/test_factory/test_dataclass_dto.py s                 [  3%]\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [ 10%]\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py F               [ 13%]\ntests/unit/test_openapi/test_schema.py FF                                [ 20%]\ntests/unit/test_dto/test_factory/test_base_dto.py E                      [ 24%]\ntests/unit/test_dto/test_factory/test_backends/test_utils.py F           [ 27%]\ntests/unit/test_openapi/test_schema.py F                                 [ 31%]\ntests/unit/test_dto/test_factory/test_dataclass_dto.py F                 [ 34%]\ntests/unit/test_contrib/test_pydantic/test_openapi.py F                  [ 37%]\ntests/unit/test_openapi/test_schema.py FFF                               [ 48%]\ntests/unit/test_contrib/test_pydantic/test_openapi.py F                  [ 51%]\ntests/unit/test_openapi/test_schema.py FFFFF                             [ 68%]\ntests/unit/test_dto/test_factory/test_base_dto.py F                      [ 72%]\ntests/unit/test_dto/test_factory/test_backends/test_utils.py F           [ 75%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py FF           [ 82%]\ntests/unit/test_typing.py F                                              [ 86%]\ntests/unit/test_contrib/test_pydantic/test_openapi.py F                  [ 89%]\ntests/unit/test_openapi/test_schema.py FF                                [ 96%]\ntests/unit/test_dto/test_factory/test_base_dto.py E                      [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at setup of test_from_bytes _______________________\n\n    @pytest.fixture()\n    def asgi_connection() -> Request[Any, Any, Any]:\n        @get(\"/\", name=\"handler_id\", media_type=MediaType.JSON)\n        def _handler() -> None: ...\n    \n>       return RequestFactory().get(path=\"/\", route_handler=_handler)\n\ntests/unit/test_dto/conftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/testing/request_factory.py:122: in __init__\n    self.app = app if app is not None else _create_default_app()\nlitestar/testing/request_factory.py:50: in _create_default_app\n    return Litestar(route_handlers=[])\nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:668: in register\n    route_handler.on_registration(self)\nlitestar/handlers/http_handlers/base.py:560: in on_registration\n    super().on_registration(app)\nlitestar/handlers/base.py:538: in on_registration\n    self._validate_handler_function()\nlitestar/handlers/http_handlers/base.py:571: in _validate_handler_function\n    super()._validate_handler_function()\nlitestar/handlers/base.py:549: in _validate_handler_function\n    self.parsed_data_field is not None\nlitestar/handlers/base.py:242: in parsed_data_field\n    self._parsed_data_field = self.parsed_fn_signature.parameters.get(\"data\")\nlitestar/handlers/base.py:227: in parsed_fn_signature\n    self._parsed_fn_signature = ParsedSignature.from_fn(\nlitestar/utils/signature.py:217: in from_fn\n    return cls.from_signature(signature, expanded_type_hints)\nlitestar/utils/signature.py:231: in from_signature\n    parameters = tuple(\nlitestar/utils/signature.py:232: in <genexpr>\n    FieldDefinition.from_parameter(parameter=parameter, fn_type_hints=fn_type_hints)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"request: 'Request'\">\nfn_type_hints = {'request': <class 'litestar.connection.request.Request'>, 'return': <class 'bytes'>}\n\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        \"\"\"Initialize ParsedSignatureParameter.\n    \n        Args:\n            parameter: inspect.Parameter\n            fn_type_hints: mapping of names to types. Should be result of ``get_type_hints()``, preferably via the\n                :attr:``get_fn_type_hints() <.utils.signature_parsing.get_fn_type_hints>`` helper.\n    \n        Returns:\n            ParsedSignatureParameter.\n    \n        \"\"\"\n        from litestar.datastructures import ImmutableState\n    \n        try:\n            annotation = fn_type_hints[parameter.name]\n        except KeyError as e:\n            raise ImproperlyConfiguredException(\n                f\"'{parameter.name}' does not have a type annotation. If it should receive any value, use 'Any'.\"\n            ) from e\n    \n        if parameter.name == \"state\" and not issubclass(annotation, ImmutableState):\n            raise ImproperlyConfiguredException(\n                f\"The type annotation `{annotation}` is an invalid type for the 'state' reserved kwarg. \"\n                \"It must be typed to a subclass of `litestar.datastructures.ImmutableState` or \"\n                \"`litestar.datastructures.State`.\"\n            )\n    \n>       return FieldDefinition.from_kwarg(\n            annotation=annotation,\n            name=parameter.name,\n            default=Empty if parameter.default is Signature.empty else parameter.default,\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/typing.py:622: TypeError\n__________________ ERROR at setup of test_config_field_rename __________________\n\n    @pytest.fixture()\n    def asgi_connection() -> Request[Any, Any, Any]:\n        @get(\"/\", name=\"handler_id\", media_type=MediaType.JSON)\n        def _handler() -> None: ...\n    \n>       return RequestFactory().get(path=\"/\", route_handler=_handler)\n\ntests/unit/test_dto/conftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/testing/request_factory.py:122: in __init__\n    self.app = app if app is not None else _create_default_app()\nlitestar/testing/request_factory.py:50: in _create_default_app\n    return Litestar(route_handlers=[])\nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:668: in register\n    route_handler.on_registration(self)\nlitestar/handlers/http_handlers/base.py:560: in on_registration\n    super().on_registration(app)\nlitestar/handlers/base.py:538: in on_registration\n    self._validate_handler_function()\nlitestar/handlers/http_handlers/base.py:571: in _validate_handler_function\n    super()._validate_handler_function()\nlitestar/handlers/base.py:549: in _validate_handler_function\n    self.parsed_data_field is not None\nlitestar/handlers/base.py:242: in parsed_data_field\n    self._parsed_data_field = self.parsed_fn_signature.parameters.get(\"data\")\nlitestar/handlers/base.py:227: in parsed_fn_signature\n    self._parsed_fn_signature = ParsedSignature.from_fn(\nlitestar/utils/signature.py:217: in from_fn\n    return cls.from_signature(signature, expanded_type_hints)\nlitestar/utils/signature.py:231: in from_signature\n    parameters = tuple(\nlitestar/utils/signature.py:232: in <genexpr>\n    FieldDefinition.from_parameter(parameter=parameter, fn_type_hints=fn_type_hints)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"request: 'Request'\">\nfn_type_hints = {'request': <class 'litestar.connection.request.Request'>, 'return': <class 'bytes'>}\n\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        \"\"\"Initialize ParsedSignatureParameter.\n    \n        Args:\n            parameter: inspect.Parameter\n            fn_type_hints: mapping of names to types. Should be result of ``get_type_hints()``, preferably via the\n                :attr:``get_fn_type_hints() <.utils.signature_parsing.get_fn_type_hints>`` helper.\n    \n        Returns:\n            ParsedSignatureParameter.\n    \n        \"\"\"\n        from litestar.datastructures import ImmutableState\n    \n        try:\n            annotation = fn_type_hints[parameter.name]\n        except KeyError as e:\n            raise ImproperlyConfiguredException(\n                f\"'{parameter.name}' does not have a type annotation. If it should receive any value, use 'Any'.\"\n            ) from e\n    \n        if parameter.name == \"state\" and not issubclass(annotation, ImmutableState):\n            raise ImproperlyConfiguredException(\n                f\"The type annotation `{annotation}` is an invalid type for the 'state' reserved kwarg. \"\n                \"It must be typed to a subclass of `litestar.datastructures.ImmutableState` or \"\n                \"`litestar.datastructures.State`.\"\n            )\n    \n>       return FieldDefinition.from_kwarg(\n            annotation=annotation,\n            name=parameter.name,\n            default=Empty if parameter.default is Signature.empty else parameter.default,\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/typing.py:622: TypeError\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:140: in parse_model\n    for field_definition in self.dto_factory.generate_field_definitions(model_type):\nlitestar/dto/dataclass_dto.py:33: in generate_field_definitions\n    for key, field_definition in cls.get_model_type_hints(model_type).items():\nlitestar/dto/base_dto.py:289: in get_model_type_hints\n    return {\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_itemiterator object at 0x7fefa9abba60>\n\n    return {\n>       k: FieldDefinition.from_kwarg(annotation=v, name=k)\n        for k, v in get_type_hints(model_type, localns=namespace, include_extras=True).items()  # pyright: ignore\n    }\nE   TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/dto/base_dto.py:290: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:140: in parse_model\n    for field_definition in self.dto_factory.generate_field_definitions(model_type):\nlitestar/dto/dataclass_dto.py:33: in generate_field_definitions\n    for key, field_definition in cls.get_model_type_hints(model_type).items():\nlitestar/dto/base_dto.py:289: in get_model_type_hints\n    return {\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_itemiterator object at 0x7fefa92503b0>\n\n    return {\n>       k: FieldDefinition.from_kwarg(annotation=v, name=k)\n        for k, v in get_type_hints(model_type, localns=namespace, include_extras=True).items()  # pyright: ignore\n    }\nE   TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/dto/base_dto.py:290: TypeError\n_________________ test_schema_generation_with_generic_classes __________________\n\n    def test_schema_generation_with_generic_classes() -> None:\n        cls = AttrsGeneric[int]\n        expected_foo_schema = Schema(type=OpenAPIType.INTEGER)\n        expected_optional_foo_schema = Schema(one_of=[Schema(type=OpenAPIType.NULL), Schema(type=OpenAPIType.INTEGER)])\n    \n>       field_definition = FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py:28: TypeError\n________ test_schema_generation_with_generic_classes[DataclassGeneric] _________\n\ncls = tests.unit.test_openapi.test_schema.DataclassGeneric[int]\n\n    @pytest.mark.parametrize(\"cls\", annotations)\n    def test_schema_generation_with_generic_classes(cls: Any) -> None:\n        expected_foo_schema = Schema(type=OpenAPIType.INTEGER)\n        expected_optional_foo_schema = Schema(one_of=[Schema(type=OpenAPIType.NULL), Schema(type=OpenAPIType.INTEGER)])\n    \n        properties = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\n        ).properties\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:376: TypeError\n_________ test_schema_generation_with_generic_classes[MsgspecGeneric] __________\n\ncls = tests.unit.test_openapi.test_schema.MsgspecGeneric[int]\n\n    @pytest.mark.parametrize(\"cls\", annotations)\n    def test_schema_generation_with_generic_classes(cls: Any) -> None:\n        expected_foo_schema = Schema(type=OpenAPIType.INTEGER)\n        expected_optional_foo_schema = Schema(one_of=[Schema(type=OpenAPIType.NULL), Schema(type=OpenAPIType.INTEGER)])\n    \n        properties = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\n        ).properties\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:376: TypeError\n___________ test_should_mark_private_underscore_fields_private_false ___________\n\n    def test_should_mark_private_underscore_fields_private_false() -> None:\n>       assert (\n            _should_mark_private(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(annotation=int, name=\"a\", default=1),\n                    model_name=\"A\",\n                    default_factory=None,\n                    dto_field=DTOField(),\n                ),\n                False,\n            )\n            is False\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:172: TypeError\n__________________________ test_handling_of_literals ___________________________\n\n    def test_handling_of_literals() -> None:\n        @dataclass\n        class DataclassWithLiteral:\n            value: ValueType\n            const: ConstType\n            composite: Literal[ValueType, ConstType]\n    \n>       schema = get_schema_for_field_definition(FieldDefinition.from_kwarg(name=\"\", annotation=DataclassWithLiteral))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:204: TypeError\n_______________________ test_dataclass_field_definitions _______________________\n\ndto_type = <class 'litestar.dto.base_dto.DataclassDTO[<class 'tests.unit.test_dto.test_factory.test_dataclass_dto.Model'>]'>\n\n    def test_dataclass_field_definitions(dto_type: type[DataclassDTO[Model]]) -> None:\n        expected = [\n            replace(\n                DTOFieldDefinition.from_field_definition(\n>                   field_definition=FieldDefinition.from_kwarg(\n                        name=\"a\",\n                        annotation=int,\n                    ),\n                    default_factory=None,\n                    model_name=Model.__name__,\n                    dto_field=DTOField(),\n                ),\n                metadata=ANY,\n                type_wrappers=ANY,\n                raw=ANY,\n            ),\n            replace(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(name=\"b\", annotation=str, default=\"b\"),\n                    default_factory=None,\n                    model_name=Model.__name__,\n                    dto_field=DTOField(),\n                ),\n                metadata=ANY,\n                type_wrappers=ANY,\n                raw=ANY,\n            ),\n            replace(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(\n                        name=\"c\",\n                        annotation=List[int],\n                    ),\n                    default_factory=list,\n                    model_name=Model.__name__,\n                    dto_field=DTOField(),\n                ),\n                metadata=ANY,\n                type_wrappers=ANY,\n                raw=ANY,\n            ),\n        ]\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_dto/test_factory/test_dataclass_dto.py:80: TypeError\n_______________________ test_create_schema_for_field_v1 ________________________\n\n    def test_create_schema_for_field_v1() -> None:\n        class Model(pydantic_v1.BaseModel):\n            value: str = pydantic_v1.Field(\n                title=\"title\",\n                description=\"description\",\n                example=\"example\",\n                max_length=16,  # pyright: ignore\n            )\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Model\", annotation=Model), plugins=[PydanticSchemaPlugin()]\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:551: TypeError\n___________________________ test_type_union[Struct] ____________________________\n\nbase_type = <class 'msgspec.Struct'>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union(base_type: type) -> None:\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:524: TypeError\n__________________________ test_type_union[TypedDict] __________________________\n\nbase_type = <function TypedDict at 0x7fefb1f84310>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union(base_type: type) -> None:\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:524: TypeError\n__________________________ test_type_union[dataclass] __________________________\n\nbase_type = <function dataclass at 0x7fefb1f3f910>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union(base_type: type) -> None:\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:524: TypeError\n__________________ test_create_schema_for_field_v2__examples ___________________\n\n    def test_create_schema_for_field_v2__examples() -> None:\n        class Model(pydantic_v2.BaseModel):\n            value: str = pydantic_v2.Field(\n                title=\"title\", description=\"description\", max_length=16, json_schema_extra={\"examples\": [\"example\"]}\n            )\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Model\", annotation=Model), plugins=[PydanticSchemaPlugin()]\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:591: TypeError\n________________ test_create_schema_from_msgspec_annotated_type ________________\n\n    def test_create_schema_from_msgspec_annotated_type() -> None:\n        class Lookup(msgspec.Struct):\n            id: Annotated[str, msgspec.Meta(max_length=16, examples=[\"example\"], description=\"description\", title=\"title\")]\n    \n>       schema = get_schema_for_field_definition(FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Lookup))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:290: TypeError\n______________________ test_type_union_with_none[Struct] _______________________\n\nbase_type = <class 'msgspec.Struct'>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union_with_none(base_type: type) -> None:\n        # https://github.com/litestar-org/litestar/issues/2971\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB, None])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:554: TypeError\n_____________________ test_type_union_with_none[TypedDict] _____________________\n\nbase_type = <function TypedDict at 0x7fefb1f84310>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union_with_none(base_type: type) -> None:\n        # https://github.com/litestar-org/litestar/issues/2971\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB, None])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:554: TypeError\n_____________________ test_type_union_with_none[dataclass] _____________________\n\nbase_type = <function dataclass at 0x7fefb1f3f910>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union_with_none(base_type: type) -> None:\n        # https://github.com/litestar-org/litestar/issues/2971\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB, None])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:554: TypeError\n_____________________________ test_annotated_types _____________________________\n\n    def test_annotated_types() -> None:\n        historical_date = date(year=1980, day=1, month=1)\n        today = date.today()\n    \n        @dataclass\n        class MyDataclass:\n            constrained_int: Annotated[int, annotated_types.Gt(1), annotated_types.Lt(10)]\n            constrained_float: Annotated[float, annotated_types.Ge(1), annotated_types.Le(10)]\n            constrained_date: Annotated[date, annotated_types.Interval(gt=historical_date, lt=today)]\n            constrained_lower_case: Annotated[str, annotated_types.LowerCase]\n            constrained_upper_case: Annotated[str, annotated_types.UpperCase]\n            constrained_is_ascii: Annotated[str, annotated_types.IsAscii]\n            constrained_is_digit: Annotated[str, annotated_types.IsDigits]\n    \n>       schema = get_schema_for_field_definition(FieldDefinition.from_kwarg(name=\"MyDataclass\", annotation=MyDataclass))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:314: TypeError\n___________________________ test_sub_types_supported ___________________________\n\n    def test_sub_types_supported() -> None:\n        DataclassDTO._dto_backends = {}\n        dto_type = DataclassDTO[Model]\n    \n        @dataclass\n        class SubType(Model):\n            c: int\n    \n        dto_type.create_for_field_definition(\n>           handler_id=\"handler_id\", field_definition=FieldDefinition.from_kwarg(SubType, name=\"data\")\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'name'\n\ntests/unit/test_dto/test_factory/test_base_dto.py:158: TypeError\n___________ test_should_mark_private_underscore_fields_private_true ____________\n\n    def test_should_mark_private_underscore_fields_private_true() -> None:\n>       assert (\n            _should_mark_private(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(annotation=int, name=\"a\", default=1),\n                    model_name=\"A\",\n                    default_factory=None,\n                    dto_field=DTOField(),\n                ),\n                True,\n            )\n            is False\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:133: TypeError\n________ test_schema_generation_with_generic_classes[PydanticV1Generic] ________\n\nmodel = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.PydanticV1Generic'>\n\n    @pytest.mark.parametrize(\"model\", [PydanticV1Generic, PydanticV2Generic])\n    def test_schema_generation_with_generic_classes(model: Type[Union[PydanticV1Generic, PydanticV2Generic]]) -> None:\n        cls = model[int]  # type: ignore[index]\n>       field_definition = FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:37: TypeError\n________ test_schema_generation_with_generic_classes[PydanticV2Generic] ________\n\nmodel = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.PydanticV2Generic'>\n\n    @pytest.mark.parametrize(\"model\", [PydanticV1Generic, PydanticV2Generic])\n    def test_schema_generation_with_generic_classes(model: Type[Union[PydanticV1Generic, PydanticV2Generic]]) -> None:\n        cls = model[int]  # type: ignore[index]\n>       field_definition = FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:37: TypeError\n_______________________________ test_is_required _______________________________\n\n    def test_is_required() -> None:\n        class Foo(TypedDict):\n            required: Required[str]\n            not_required: NotRequired[str]\n    \n        class Bar(msgspec.Struct):\n            unset: Union[str, msgspec.UnsetType] = msgspec.UNSET  # noqa: UP007\n            with_default: str = \"\"\n            with_none_default: Union[str, None] = None  # noqa: UP007\n    \n        assert FieldDefinition.from_annotation(get_type_hints(Foo, include_extras=True)[\"required\"]).is_required is True\n        assert (\n            FieldDefinition.from_annotation(get_type_hints(Foo, include_extras=True)[\"not_required\"]).is_required is False\n        )\n        assert FieldDefinition.from_annotation(get_type_hints(Bar, include_extras=True)[\"unset\"]).is_required is False\n    \n>       assert (\n            FieldDefinition.from_kwarg(\n                name=\"foo\", kwarg_definition=ParameterKwarg(required=False), annotation=str\n            ).is_required\n            is False\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_typing.py:317: TypeError\n_______________________ test_create_schema_for_field_v2 ________________________\n\n    def test_create_schema_for_field_v2() -> None:\n        class Model(pydantic_v2.BaseModel):\n            value: str = pydantic_v2.Field(\n                title=\"title\", description=\"description\", max_length=16, json_schema_extra={\"example\": \"example\"}\n            )\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Model\", annotation=Model), plugins=[PydanticSchemaPlugin()]\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:571: TypeError\n____________________________ test_title_validation _____________________________\n\n    def test_title_validation() -> None:\n        # TODO: what is this actually testing?\n        creator = SchemaCreator(plugins=openapi_schema_plugins)\n>       person_ref = creator.for_field_definition(FieldDefinition.from_kwarg(name=\"Person\", annotation=DataclassPerson))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:237: TypeError\n___________ test_schema_generation_with_generic_classes_constrained ____________\n\n    def test_schema_generation_with_generic_classes_constrained() -> None:\n        cls = ConstrainedGenericDataclass\n        properties = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=cls.__name__, annotation=cls)\n        ).properties\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:400: TypeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\nFAILED tests/unit/test_contrib/test_attrs/test_schema_plugin.py::test_schema_generation_with_generic_classes\nFAILED tests/unit/test_openapi/test_schema.py::test_schema_generation_with_generic_classes[DataclassGeneric]\nFAILED tests/unit/test_openapi/test_schema.py::test_schema_generation_with_generic_classes[MsgspecGeneric]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_should_mark_private_underscore_fields_private_false\nFAILED tests/unit/test_openapi/test_schema.py::test_handling_of_literals - Ty...\nFAILED tests/unit/test_dto/test_factory/test_dataclass_dto.py::test_dataclass_field_definitions\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_field_v1\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union[Struct] - Type...\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union[TypedDict] - T...\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union[dataclass] - T...\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_field_v2__examples\nFAILED tests/unit/test_openapi/test_schema.py::test_create_schema_from_msgspec_annotated_type\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union_with_none[Struct]\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union_with_none[TypedDict]\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union_with_none[dataclass]\nFAILED tests/unit/test_openapi/test_schema.py::test_annotated_types - TypeErr...\nFAILED tests/unit/test_dto/test_factory/test_base_dto.py::test_sub_types_supported\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_should_mark_private_underscore_fields_private_true\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_schema_generation_with_generic_classes[PydanticV1Generic]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_schema_generation_with_generic_classes[PydanticV2Generic]\nFAILED tests/unit/test_typing.py::test_is_required - TypeError: FieldDefiniti...\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_field_v2\nFAILED tests/unit/test_openapi/test_schema.py::test_title_validation - TypeEr...\nFAILED tests/unit/test_openapi/test_schema.py::test_schema_generation_with_generic_classes_constrained\nERROR tests/unit/test_dto/test_factory/test_base_dto.py::test_from_bytes - Ty...\nERROR tests/unit/test_dto/test_factory/test_base_dto.py::test_config_field_rename\n============= 26 failed, 1 skipped, 2 warnings, 2 errors in 0.50s ==============\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-from_parameter": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_utils/test_signature.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_ test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation _\n\n    def test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation() -> None:\n        \"\"\"Test FieldDefinition raises ImproperlyConfigured if no annotation.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD)\n        with pytest.raises(ImproperlyConfiguredException):\n>           FieldDefinition.from_parameter(param, {})\n\ntests/unit/test_utils/test_signature.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>, parameter = <Parameter \"foo\">\nfn_type_hints = {}\n\n    @classmethod\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        name = parameter.name\n        default = parameter.default if parameter.default is not Parameter.empty else None\n        required = default is None\n        annotation = parameter.annotation if parameter.annotation is not Parameter.empty else None\n        type_hint = fn_type_hints.get(name, annotation)\n    \n>       field = FieldDefinition(\n            name=name,\n            type_hint=type_hint,\n            default=default,\n            required=required,\n        )\nE       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'type_hint'\n\nlitestar/typing.py:616: TypeError\n___________ test_field_definition_from_parameter_annotation_property ___________\n\n    def test_field_definition_from_parameter_annotation_property() -> None:\n        \"\"\"Test FieldDefinition.annotation.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD, annotation=int)\n>       parsed_param = FieldDefinition.from_parameter(param, {\"foo\": int})\n\ntests/unit/test_utils/test_signature.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"foo: int\">, fn_type_hints = {'foo': <class 'int'>}\n\n    @classmethod\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        name = parameter.name\n        default = parameter.default if parameter.default is not Parameter.empty else None\n        required = default is None\n        annotation = parameter.annotation if parameter.annotation is not Parameter.empty else None\n        type_hint = fn_type_hints.get(name, annotation)\n    \n>       field = FieldDefinition(\n            name=name,\n            type_hint=type_hint,\n            default=default,\n            required=required,\n        )\nE       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'type_hint'\n\nlitestar/typing.py:616: TypeError\n__________ test_field_definition_from_parameter_has_default_predicate __________\n\n    def test_field_definition_from_parameter_has_default_predicate() -> None:\n        \"\"\"Test FieldDefinition.has_default.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD, annotation=int)\n>       parsed_param = FieldDefinition.from_parameter(param, {\"foo\": int})\n\ntests/unit/test_utils/test_signature.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"foo: int\">, fn_type_hints = {'foo': <class 'int'>}\n\n    @classmethod\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        name = parameter.name\n        default = parameter.default if parameter.default is not Parameter.empty else None\n        required = default is None\n        annotation = parameter.annotation if parameter.annotation is not Parameter.empty else None\n        type_hint = fn_type_hints.get(name, annotation)\n    \n>       field = FieldDefinition(\n            name=name,\n            type_hint=type_hint,\n            default=default,\n            required=required,\n        )\nE       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'type_hint'\n\nlitestar/typing.py:616: TypeError\n_____________________ test_field_definition_from_parameter _____________________\n\n    def test_field_definition_from_parameter() -> None:\n        \"\"\"Test FieldDefinition.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD, annotation=int)\n>       parsed_param = FieldDefinition.from_parameter(param, {\"foo\": int})\n\ntests/unit/test_utils/test_signature.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"foo: int\">, fn_type_hints = {'foo': <class 'int'>}\n\n    @classmethod\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        name = parameter.name\n        default = parameter.default if parameter.default is not Parameter.empty else None\n        required = default is None\n        annotation = parameter.annotation if parameter.annotation is not Parameter.empty else None\n        type_hint = fn_type_hints.get(name, annotation)\n    \n>       field = FieldDefinition(\n            name=name,\n            type_hint=type_hint,\n            default=default,\n            required=required,\n        )\nE       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'type_hint'\n\nlitestar/typing.py:616: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter_annotation_property\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter_has_default_predicate\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter\n============================== 4 failed in 0.14s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_success_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n__________________ test_create_response_for_response_subclass __________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7fdc16bedc60>\n\n    def test_create_response_for_response_subclass(create_factory: CreateFactoryFixture) -> None:\n        class CustomResponse(Response[T]):\n            pass\n    \n        @get(path=\"/test\", name=\"test\", signature_types=[CustomResponse])\n        def handler() -> CustomResponse[DataclassPerson]:\n            return CustomResponse(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n>       response = factory.create_success_response()\n\ntests/unit/test_openapi/test_responses.py:475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7fdc16c0fee0>\n\n    def create_success_response(self) -> OpenAPIResponse:\n        return OpenAPIResponse(\n            description=\"Successful Response\",\n            content={\n                \"application/json\": OpenAPIMediaType(\n>                   schema=OpenAPISchema(\n                        type=OpenAPIType.OBJECT,\n                        properties={\n                            \"status\": OpenAPISchema(type=OpenAPIType.STRING, example=\"success\"),\n                            \"data\": OpenAPISchema(type=OpenAPIType.OBJECT),\n                        },\n                        required=[\"status\", \"data\"],\n                    )\n                )\n            },\n        )\nE       NameError: name 'OpenAPISchema' is not defined\n\nlitestar/_openapi/responses.py:124: NameError\n______________________ test_response_generation_with_dto _______________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7fdc16bee950>\n\n    def test_response_generation_with_dto(create_factory: CreateFactoryFixture) -> None:\n        mock_dto = MagicMock(spec=AbstractDTO)\n        mock_dto.create_openapi_schema.return_value = Schema()\n    \n        @post(path=\"/form-upload\", return_dto=mock_dto)  # pyright: ignore\n        async def handler(data: Dict[str, Any]) -> Dict[str, Any]:\n            return data\n    \n        Litestar(route_handlers=[handler])\n    \n        factory = create_factory(handler)\n        field_definition = FieldDefinition.from_annotation(Dict[str, Any])\n>       factory.create_success_response()\n\ntests/unit/test_openapi/test_responses.py:515: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7fdc16211a20>\n\n    def create_success_response(self) -> OpenAPIResponse:\n        return OpenAPIResponse(\n            description=\"Successful Response\",\n            content={\n                \"application/json\": OpenAPIMediaType(\n>                   schema=OpenAPISchema(\n                        type=OpenAPIType.OBJECT,\n                        properties={\n                            \"status\": OpenAPISchema(type=OpenAPIType.STRING, example=\"success\"),\n                            \"data\": OpenAPISchema(type=OpenAPIType.OBJECT),\n                        },\n                        required=[\"status\", \"data\"],\n                    )\n                )\n            },\n        )\nE       NameError: name 'OpenAPISchema' is not defined\n\nlitestar/_openapi/responses.py:124: NameError\n_______________ test_create_success_response_with_response_class _______________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7fdc162775b0>\n\n    def test_create_success_response_with_response_class(create_factory: CreateFactoryFixture) -> None:\n        @get(path=\"/test\", name=\"test\")\n        def handler() -> Response[DataclassPerson]:\n            return Response(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n>       response = factory.create_success_response()\n\ntests/unit/test_openapi/test_responses.py:235: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7fdc161fe830>\n\n    def create_success_response(self) -> OpenAPIResponse:\n        return OpenAPIResponse(\n            description=\"Successful Response\",\n            content={\n                \"application/json\": OpenAPIMediaType(\n>                   schema=OpenAPISchema(\n                        type=OpenAPIType.OBJECT,\n                        properties={\n                            \"status\": OpenAPISchema(type=OpenAPIType.STRING, example=\"success\"),\n                            \"data\": OpenAPISchema(type=OpenAPIType.OBJECT),\n                        },\n                        required=[\"status\", \"data\"],\n                    )\n                )\n            },\n        )\nE       NameError: name 'OpenAPISchema' is not defined\n\nlitestar/_openapi/responses.py:124: NameError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_response_for_response_subclass\nFAILED tests/unit/test_openapi/test_responses.py::test_response_generation_with_dto\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_with_response_class\n======================== 3 failed, 2 warnings in 0.13s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_additional_responses": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_create_additional_responses _______________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f61d8d29cf0>\n\n    def test_create_additional_responses(create_factory: CreateFactoryFixture) -> None:\n        @dataclass\n        class ServerError:\n            message: str\n    \n        class AuthenticationError(TypedDict):\n            message: str\n    \n        class UnknownError(TypedDict):\n            message: str\n    \n        @get(\n            responses={\n                401: ResponseSpec(data_container=AuthenticationError, description=\"Authentication error\"),\n                500: ResponseSpec(data_container=ServerError, generate_examples=False, media_type=MediaType.TEXT),\n                505: ResponseSpec(data_container=UnknownError),\n            }\n        )\n        def handler() -> DataclassPerson:\n            return DataclassPersonFactory.build()\n    \n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n    \n>       first_response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f61d8de0160>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       for status_code, response in self.additional_responses.items():\nE       AttributeError: 'ResponseFactory' object has no attribute 'additional_responses'. Did you mean: 'create_additional_responses'?\n\nlitestar/_openapi/responses.py:235: AttributeError\n________________ test_additional_responses_with_custom_examples ________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f61d8c13c70>\n\n    def test_additional_responses_with_custom_examples(create_factory: CreateFactoryFixture) -> None:\n        @get(responses={200: ResponseSpec(DataclassPerson, examples=[Example(value={\"string\": \"example\", \"number\": 1})])})\n        def handler() -> DataclassPerson:\n            return DataclassPersonFactory.build()\n    \n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n>       status_code, response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f61d8d43af0>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       for status_code, response in self.additional_responses.items():\nE       AttributeError: 'ResponseFactory' object has no attribute 'additional_responses'. Did you mean: 'create_additional_responses'?\n\nlitestar/_openapi/responses.py:235: AttributeError\n________ test_create_success_response_no_content_explicit_responsespec _________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f61d8c130a0>\n\n    def test_create_success_response_no_content_explicit_responsespec(\n        create_factory: CreateFactoryFixture,\n    ) -> None:\n        @delete(\n            path=\"/test\",\n            responses={HTTP_204_NO_CONTENT: ResponseSpec(None, description=\"Custom description\")},\n            name=\"test\",\n        )\n        def handler() -> None:\n            return None\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n>       status, response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f61d8c4afe0>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       for status_code, response in self.additional_responses.items():\nE       AttributeError: 'ResponseFactory' object has no attribute 'additional_responses'. Did you mean: 'create_additional_responses'?\n\nlitestar/_openapi/responses.py:235: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_additional_responses\nFAILED tests/unit/test_openapi/test_responses.py::test_additional_responses_with_custom_examples\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_no_content_explicit_responsespec\n======================== 3 failed, 2 warnings in 0.11s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/path_item.py-create_path_item": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_path_item.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________ test_handler_excluded_from_schema _______________________\n\ncreate_factory = <function create_factory.<locals>.factory at 0x7eff38131e10>\n\n    def test_handler_excluded_from_schema(create_factory: CreateFactoryFixture) -> None:\n        @get(\"/\", sync_to_thread=False)\n        def handler_1() -> None: ...\n    \n        @delete(\"/\", include_in_schema=False, sync_to_thread=False)\n        def handler_2() -> None: ...\n    \n        app = Litestar(route_handlers=[handler_1, handler_2])\n        index = find_index(app.routes, lambda x: x.path_format == \"/\")\n        route_with_multiple_methods = cast(\"HTTPRoute\", app.routes[index])\n        factory = create_factory(route_with_multiple_methods)\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7eff38178400>\n\n    def create_path_item(self) -> PathItem:\n        path_item = PathItem()\n>       for http_method in self.http_methods:\nE       AttributeError: 'PathItemFactory' object has no attribute 'http_methods'\n\nlitestar/_openapi/path_item.py:34: AttributeError\n_______________ test_create_path_item_use_handler_docstring_true _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7eff380e5310>\ncreate_factory = <function create_factory.<locals>.factory at 0x7eff37762c20>\n\n    def test_create_path_item_use_handler_docstring_true(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        factory.context.openapi_config.use_handler_docstrings = True\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7eff380e93c0>\n\n    def create_path_item(self) -> PathItem:\n        path_item = PathItem()\n>       for http_method in self.http_methods:\nE       AttributeError: 'PathItemFactory' object has no attribute 'http_methods'\n\nlitestar/_openapi/path_item.py:34: AttributeError\n______________ test_create_path_item_use_handler_docstring_false _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7eff380e6f80>\ncreate_factory = <function create_factory.<locals>.factory at 0x7eff377c63b0>\n\n    def test_create_path_item_use_handler_docstring_false(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        assert not factory.context.openapi_config.use_handler_docstrings\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7eff3778bee0>\n\n    def create_path_item(self) -> PathItem:\n        path_item = PathItem()\n>       for http_method in self.http_methods:\nE       AttributeError: 'PathItemFactory' object has no attribute 'http_methods'\n\nlitestar/_openapi/path_item.py:34: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_path_item.py::test_handler_excluded_from_schema\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_true\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_false\n======================== 3 failed, 2 warnings in 0.14s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/schema_generation/schema.py-for_field_definition": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py FFFFFFF            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_create_for_computed_field[True] _____________________\n\nprefer_alias = True\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f1529e21540>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n____________________ test_create_for_computed_field[False] _____________________\n\nprefer_alias = False\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f1529c93540>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f1529e1c820>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f1529f999c0>\nfield_definition = FieldDefinition(raw=<class 'iencdaesbp.Foo'>, annotation=<class 'iencdaesbp.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f1529e1dc60>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f1529e20f00>\nfield_definition = FieldDefinition(raw=<class 'sgbqxquudg.Foo'>, annotation=<class 'sgbqxquudg.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f1529e1c430>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f152a042a40>\nfield_definition = FieldDefinition(raw=<class 'uoldbtkory.Foo'>, annotation=<class 'uoldbtkory.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f1529e1e0e0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f1529c90c40>\nfield_definition = FieldDefinition(raw=<class 'mjepihgrse.Foo'>, annotation=<class 'mjepihgrse.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n____ test_create_schema_for_pydantic_model_with_unhashable_literal_default _____\n\ncreate_module = <function create_module.<locals>.wrapped at 0x7f1529e1e950>\n\n    def test_create_schema_for_pydantic_model_with_unhashable_literal_default(\n        create_module: \"Callable[[str], ModuleType]\",\n    ) -> None:\n        \"\"\"Test that a model with unhashable literal defaults is correctly handled.\"\"\"\n        module = create_module(\n            \"\"\"\n    from pydantic import BaseModel, Field\n    \n    class Model(BaseModel):\n        id: int\n        dict_default: dict = {}\n        dict_default_in_field: dict = Field(default={})\n        dict_default_in_factory: dict = Field(default_factory=dict)\n        list_default: list = []\n        list_default_in_field: list = Field(default=[])\n        list_default_in_factory: list = Field(default_factory=list)\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Model))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:645: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f1529c93040>\nfield_definition = FieldDefinition(raw=<class 'matptmtngf.Model'>, annotation=<class 'matptmtngf.Model'>, type_wrappers=set(), origin=Non...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n>       if field_definition.origin in PRIMITIVE_TYPES:\nE       NameError: name 'PRIMITIVE_TYPES' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:318: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_unhashable_literal_default\n============================== 7 failed in 0.25s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/typescript_converter/converter.py-convert_openapi_to_typescript": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_openapi/test_typescript_converter/test_converter.py F    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_openapi_to_typescript_converter _____________________\n\nperson_controller = <class 'tests.unit.test_openapi.conftest.create_person_controller.<locals>.PersonController'>\npet_controller = <class 'tests.unit.test_openapi.conftest.create_pet_controller.<locals>.PetController'>\n\n    def test_openapi_to_typescript_converter(person_controller: Type[Controller], pet_controller: Type[Controller]) -> None:\n        BaseFactory.seed_random(1)\n        app = Litestar(route_handlers=[person_controller, pet_controller])\n        assert app.openapi_schema\n    \n>       result = convert_openapi_to_typescript(openapi_schema=app.openapi_schema)\n\ntests/unit/test_openapi/test_typescript_converter/test_converter.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nopenapi_schema = OpenAPI(info=Info(title='Litestar API', version='1.0.0', summary=None, description=None, terms_of_service=None, contac...one, security_schemes=None, links=None, callbacks=None, path_items=None), security=None, tags=None, external_docs=None)\nnamespace = 'API'\n\n    def convert_openapi_to_typescript(openapi_schema: OpenAPI, namespace: str = \"API\") -> TypeScriptNamespace:\n        # Create a new TypeScriptNamespace instance\n>       ts_namespace = TypeScriptNamespace(namespace)\nE       TypeError: TypeScriptNamespace.__init__() missing 1 required positional argument: 'values'\n\nlitestar/_openapi/typescript_converter/converter.py:256: TypeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_converter.py::test_openapi_to_typescript_converter\n======================== 1 failed, 2 warnings in 0.12s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/typescript_converter/types.py-write": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py . [ 11%]\n.FF.F...                                                                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_typescript_named_interface ________________________\n\n    def test_typescript_named_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n>       assert interface.write() == \"export interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\"\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/typescript_converter/types.py:223: in write\n    return f\"export interface {self.name} {interface.write()};\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptAnonymousInterface(properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript intersection value.\n    \n        Example:\n            { prop: string } & { another: number }\n    \n        Returns:\n            A typescript string\n        \"\"\"\n        return \" & \".join(\n            f\"{{ {', '.join(f'{key}: {value}' for key, value in type_dict.items())} }}\"\n>           for type_dict in self.type_dicts\n        )\nE       AttributeError: 'TypeScriptAnonymousInterface' object has no attribute 'type_dicts'\n\nlitestar/_openapi/typescript_converter/types.py:198: AttributeError\n__________________________ test_typescript_namespace ___________________________\n\n    def test_typescript_namespace() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n    \n        enum = TypeScriptEnum(name=\"MyEnum\", values=((\"FIRST\", \"a\"), (\"SECOND\", \"b\")))\n        namespace = TypeScriptNamespace(\"MyNamespace\", values=(interface, enum))\n    \n>       assert (\n            namespace.write()\n            == 'export namespace MyNamespace {\\n\\texport enum MyEnum {\\n\\tFIRST = \"a\",\\n\\tSECOND = \"b\",\\n};\\n\\n\\texport interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\\n};'\n        )\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/typescript_converter/types.py:307: in write\n    members = \"\\t\" + \"\\n\\n\\t\".join([value.write() for value in sorted(self.values, key=lambda el: el.name)])\nlitestar/_openapi/typescript_converter/types.py:307: in <listcomp>\n    members = \"\\t\" + \"\\n\\n\\t\".join([value.write() for value in sorted(self.values, key=lambda el: el.name)])\nlitestar/_openapi/typescript_converter/types.py:223: in write\n    return f\"export interface {self.name} {interface.write()};\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptAnonymousInterface(properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript intersection value.\n    \n        Example:\n            { prop: string } & { another: number }\n    \n        Returns:\n            A typescript string\n        \"\"\"\n        return \" & \".join(\n            f\"{{ {', '.join(f'{key}: {value}' for key, value in type_dict.items())} }}\"\n>           for type_dict in self.type_dicts\n        )\nE       AttributeError: 'TypeScriptAnonymousInterface' object has no attribute 'type_dicts'\n\nlitestar/_openapi/typescript_converter/types.py:198: AttributeError\n_____________________ test_typescript_anonymous_interface ______________________\n\n    def test_typescript_anonymous_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptAnonymousInterface(properties=(first_prop, second_prop))\n>       assert interface.write() == \"{\\n\\taProp: string;\\n\\tbProp: number;\\n}\"\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptAnonymousInterface(properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript intersection value.\n    \n        Example:\n            { prop: string } & { another: number }\n    \n        Returns:\n            A typescript string\n        \"\"\"\n        return \" & \".join(\n            f\"{{ {', '.join(f'{key}: {value}' for key, value in type_dict.items())} }}\"\n>           for type_dict in self.type_dicts\n        )\nE       AttributeError: 'TypeScriptAnonymousInterface' object has no attribute 'type_dicts'\n\nlitestar/_openapi/typescript_converter/types.py:198: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_named_interface\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_namespace\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_anonymous_interface\n=================== 3 failed, 6 passed, 2 warnings in 0.10s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/testing/helpers.py-create_test_client": ["FAILED: No code block"], "litestar-litestar/testing/client/sync_client.py-websocket_connect": ["\nImportError while loading conftest '/root/repos/py_data/litestar/tests/conftest.py'.\ntests/conftest.py:32: in <module>\n    from litestar.testing import RequestFactory\nlitestar/testing/__init__.py:1: in <module>\n    from litestar.testing.client.async_client import AsyncTestClient\nlitestar/testing/client/__init__.py:34: in <module>\n    from .sync_client import TestClient\nlitestar/testing/client/sync_client.py:31: in <module>\n    class TestClient(Client, BaseTestClient, Generic[T]):  # type: ignore[misc]\nlitestar/testing/client/sync_client.py:116: in TestClient\n    timeout: Union[TimeoutTypes, UnsetType] = UNSET,\nE   NameError: name 'UNSET' is not defined\n"], "litestar-litestar/contrib/pydantic/pydantic_schema_plugin.py-for_pydantic_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py FFFFF        [100%]\n\n=================================== FAILURES ===================================\n____________ test_exclude_private_fields[V1ModelWithPrivateFields] _____________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1ModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1ModelWithPrivateFields'>, annot...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f8b3e3e4e80>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n>       schema = schema_creator.create_schema(field_definition.outer_type_)\nE       AttributeError: 'SchemaCreator' object has no attribute 'create_schema'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:246: AttributeError\n_________ test_exclude_private_fields[V1GenericModelWithPrivateFields] _________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1GenericModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1GenericModelWithPrivateFields'>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f8b3e408640>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n>       schema = schema_creator.create_schema(field_definition.outer_type_)\nE       AttributeError: 'SchemaCreator' object has no attribute 'create_schema'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:246: AttributeError\n____________ test_exclude_private_fields[V2ModelWithPrivateFields] _____________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2ModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2ModelWithPrivateFields'>, annot...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f8b3e2eb300>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n>       schema = schema_creator.create_schema(field_definition.outer_type_)\nE       AttributeError: 'SchemaCreator' object has no attribute 'create_schema'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:246: AttributeError\n_________ test_exclude_private_fields[V2GenericModelWithPrivateFields] _________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2GenericModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2GenericModelWithPrivateFields'>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f8b3e2e1740>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n>       schema = schema_creator.create_schema(field_definition.outer_type_)\nE       AttributeError: 'SchemaCreator' object has no attribute 'create_schema'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:246: AttributeError\n_________________________ test_v2_constrained_secrets __________________________\n\n    def test_v2_constrained_secrets() -> None:\n        # https://github.com/litestar-org/litestar/issues/3148\n        class Model(pydantic_v2.BaseModel):\n            string: pydantic_v2.SecretStr = pydantic_v2.Field(min_length=1)\n            bytes_: pydantic_v2.SecretBytes = pydantic_v2.Field(min_length=1)\n    \n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(Model), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.contrib.pydantic.pydantic_schema_plugin.PydanticSchemaPlugin'>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.test_v2_constrained_secrets.<loca...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\nschema_creator = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f8b3e2ed8c0>\n\n    @classmethod\n    def for_pydantic_model(cls, field_definition: FieldDefinition, schema_creator: SchemaCreator) -> Schema:  # pyright: ignore\n>       schema = schema_creator.create_schema(field_definition.outer_type_)\nE       AttributeError: 'SchemaCreator' object has no attribute 'create_schema'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:246: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V1ModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V1GenericModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V2ModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V2GenericModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_v2_constrained_secrets\n============================== 5 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_kwargs/cleanup.py-cleanup": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_kwargs/test_cleanup_group.py FFFF                        [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_add_on_closed_raises ___________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fc7773746d0>\nasync_generator = <async_generator object async_generator.<locals>.func at 0x7fc7773522c0>\n\n    async def test_add_on_closed_raises(\n        generator: Generator[str, None, None], async_generator: AsyncGenerator[str, None]\n    ) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n>       await group.cleanup()\n\ntests/unit/test_kwargs/test_cleanup_group.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7fc7771da860>\n\n    async def cleanup(self) -> None:\n        \"\"\"Execute cleanup by calling :func:`next` / :func:`anext` on all generators.\n    \n        If there are multiple generators to be called, they will be executed in a :class:`anyio.TaskGroup`.\n    \n        Returns:\n            None\n        \"\"\"\n        if len(self._generators) > 1:\n            async with anyio.create_task_group() as tg:\n                for generator in self._generators:\n                    tg.start_soon(anext, generator)\n        elif len(self._generators) == 1:\n>           await anext(self._generators[0])\nE           TypeError: 'generator' object is not an async iterator\n\nlitestar/_kwargs/cleanup.py:78: TypeError\n____________________________ test_cleanup_multiple _____________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fc777213060>\nasync_generator = <async_generator object async_generator.<locals>.func at 0x7fc7773521c0>\ncleanup_mock = <MagicMock id='140494673655024'>\nasync_cleanup_mock = <MagicMock id='140494673895984'>\n\n    async def test_cleanup_multiple(\n        generator: Generator[str, None, None],\n        async_generator: AsyncGenerator[str, None],\n        cleanup_mock: MagicMock,\n        async_cleanup_mock: MagicMock,\n    ) -> None:\n        next(generator)\n        await async_next(async_generator)\n        group = DependencyCleanupGroup([generator, async_generator])\n    \n>       await group.cleanup()\n\ntests/unit/test_kwargs/test_cleanup_group.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7fc7772161a0>\n\n    async def cleanup(self) -> None:\n        \"\"\"Execute cleanup by calling :func:`next` / :func:`anext` on all generators.\n    \n        If there are multiple generators to be called, they will be executed in a :class:`anyio.TaskGroup`.\n    \n        Returns:\n            None\n        \"\"\"\n        if len(self._generators) > 1:\n>           async with anyio.create_task_group() as tg:\nE           NameError: name 'anyio' is not defined\n\nlitestar/_kwargs/cleanup.py:74: NameError\n________________________ test_cleanup_on_closed_raises _________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fc7772137d0>\n\n    async def test_cleanup_on_closed_raises(generator: Generator[str, None, None]) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n>       await group.cleanup()\n\ntests/unit/test_kwargs/test_cleanup_group.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7fc77724d8d0>\n\n    async def cleanup(self) -> None:\n        \"\"\"Execute cleanup by calling :func:`next` / :func:`anext` on all generators.\n    \n        If there are multiple generators to be called, they will be executed in a :class:`anyio.TaskGroup`.\n    \n        Returns:\n            None\n        \"\"\"\n        if len(self._generators) > 1:\n            async with anyio.create_task_group() as tg:\n                for generator in self._generators:\n                    tg.start_soon(anext, generator)\n        elif len(self._generators) == 1:\n>           await anext(self._generators[0])\nE           TypeError: 'generator' object is not an async iterator\n\nlitestar/_kwargs/cleanup.py:78: TypeError\n_________________________________ test_cleanup _________________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fc777374580>\ncleanup_mock = <MagicMock id='140494673890128'>\n\n    async def test_cleanup(generator: Generator[str, None, None], cleanup_mock: MagicMock) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n>       await group.cleanup()\n\ntests/unit/test_kwargs/test_cleanup_group.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7fc7772141f0>\n\n    async def cleanup(self) -> None:\n        \"\"\"Execute cleanup by calling :func:`next` / :func:`anext` on all generators.\n    \n        If there are multiple generators to be called, they will be executed in a :class:`anyio.TaskGroup`.\n    \n        Returns:\n            None\n        \"\"\"\n        if len(self._generators) > 1:\n            async with anyio.create_task_group() as tg:\n                for generator in self._generators:\n                    tg.start_soon(anext, generator)\n        elif len(self._generators) == 1:\n>           await anext(self._generators[0])\nE           TypeError: 'generator' object is not an async iterator\n\nlitestar/_kwargs/cleanup.py:78: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_add_on_closed_raises\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_multiple - ...\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_on_closed_raises\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup - TypeError...\n============================== 4 failed in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_asgi/routing_trie/mapping.py-build_route_middleware_stack": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py FFF               [100%]\n\n=================================== FAILURES ===================================\n_______________ test_build_route_middleware_stack_no_middleware ________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f65c5c1e4a0>\n\n    def test_build_route_middleware_stack_no_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # if there is no middleware for the route, then we don't need to wrap route.handle in\n        # exception handling middleware. Exceptions can safely be caught by the outermost exception\n        # handling middleware.\n    \n        @get(\"/\")\n        async def handler() -> None:\n            pass\n    \n>       app = Litestar(route_handlers=[handler], openapi_config=None)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f65c5c2acd0>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f65c5a3c4a0>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x564ba8cc52e0>\n\n    def build_route_middleware_stack(\n        app: \"Litestar\",\n        route: \"Route\",\n        route_handler: \"RouteHandler\",\n    ) -> \"ASGIApp\":\n>       handler = convert_route_handler_to_asgi(app, route_handler)\nE       NameError: name 'convert_route_handler_to_asgi' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:176: NameError\n______________ test_build_route_middleware_stack_with_middleware _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f65c5a50460>\n\n    def test_build_route_middleware_stack_with_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # proves that if there is middleware, the route handler is wrapped in the exception handling\n        # middleware, before being wrapped in the middleware stack.\n        mock_middleware = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[mock_middleware])\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f65c5b75780>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f65c5aced50>\nroute_handler = <litestar.handlers.http_handlers.base.HTTPRouteHandler object at 0x564ba8cd5630>\n\n    def build_route_middleware_stack(\n        app: \"Litestar\",\n        route: \"Route\",\n        route_handler: \"RouteHandler\",\n    ) -> \"ASGIApp\":\n>       handler = convert_route_handler_to_asgi(app, route_handler)\nE       NameError: name 'convert_route_handler_to_asgi' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:176: NameError\n_________ test_build_route_middleware_stack_with_starlette_middleware __________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f65c592bb80>\n\n    def test_build_route_middleware_stack_with_starlette_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # test our support for starlette's Middleware class\n        class Middleware:\n            \"\"\"A Starlette ``Middleware`` class.\n    \n            See https://github.com/encode/starlette/blob/23c81da94b57701eabd43f582093442e6811f81d/starlette/middleware/__init__.py#L4-L17\n            \"\"\"\n    \n            def __init__(self, cls: Any, **options: Any) -> None:\n                self.cls = cls\n                self.options = options\n    \n            def __iter__(self) -> Iterator[Any]:\n                as_tuple = (self.cls, self.options)\n                return iter(as_tuple)\n    \n        mock_middleware = MagicMock()\n        mock_middleware_arg = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[Middleware(mock_middleware, arg=mock_middleware_arg)])  # type: ignore[list-item]\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f65c5b76320>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f65c5adace0>\nroute_handler = <litestar.handlers.http_handlers.base.HTTPRouteHandler object at 0x564ba8cb73b0>\n\n    def build_route_middleware_stack(\n        app: \"Litestar\",\n        route: \"Route\",\n        route_handler: \"RouteHandler\",\n    ) -> \"ASGIApp\":\n>       handler = convert_route_handler_to_asgi(app, route_handler)\nE       NameError: name 'convert_route_handler_to_asgi' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:176: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_no_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_starlette_middleware\n============================== 3 failed in 0.18s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/signature.py-from_fn": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 12 items\n\ntests/unit/test_signature/test_validation.py F                           [  8%]\ntests/unit/test_response/test_response_to_asgi_response.py FF            [ 25%]\ntests/unit/test_signature/test_parsing.py FF                             [ 41%]\ntests/unit/test_utils/test_signature.py F                                [ 50%]\ntests/unit/test_signature/test_parsing.py FF                             [ 66%]\ntests/unit/test_signature/test_validation.py FFF                         [ 91%]\ntests/unit/test_signature/test_parsing.py F                              [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_create_signature_validation _______________________\n\n    def test_create_signature_validation() -> None:\n        @get()\n        def my_fn(typed: int, untyped) -> None:  # type: ignore[no-untyped-def]\n            pass\n    \n        with pytest.raises(ImproperlyConfiguredException):\n            SignatureModel.create(\n                dependency_name_set=set(),\n                fn=my_fn.fn,\n                data_dto=None,\n>               parsed_signature=ParsedSignature.from_fn(my_fn.fn, {}),\n                type_decoders=[],\n            )\n\ntests/unit/test_signature/test_validation.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_create_signature_validation.<locals>.my_fn at 0x7efff2cb8b80>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n____________________ test_to_response_async_await[asyncio] _____________________\n\nanyio_backend = 'asyncio'\n\n    async def test_to_response_async_await(anyio_backend: str) -> None:\n        @route(http_method=HttpMethod.POST, path=\"/person\")\n        async def handler(data: DataclassPerson) -> DataclassPerson:\n            assert isinstance(data, DataclassPerson)\n            return data\n    \n        person_instance = DataclassPersonFactory.build()\n        handler._signature_model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=handler.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(handler.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_response/test_response_to_asgi_response.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_to_response_async_await.<locals>.handler at 0x7efff2658a60>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n______________________ test_to_response_async_await[trio] ______________________\n\nanyio_backend = 'trio'\n\n    async def test_to_response_async_await(anyio_backend: str) -> None:\n        @route(http_method=HttpMethod.POST, path=\"/person\")\n        async def handler(data: DataclassPerson) -> DataclassPerson:\n            assert isinstance(data, DataclassPerson)\n            return data\n    \n        person_instance = DataclassPersonFactory.build()\n        handler._signature_model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=handler.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(handler.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_response/test_response_to_asgi_response.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_to_response_async_await.<locals>.handler at 0x7efff2658820>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n_________________ test_field_definition_is_non_string_iterable _________________\n\n    def test_field_definition_is_non_string_iterable() -> None:\n        def fn(a: Iterable[int], b: Optional[Iterable[int]]) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_field_definition_is_non_string_iterable.<locals>.fn at 0x7efff2659cf0>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n____________ test_create_function_signature_model_parameter_parsing ____________\n\n    def test_create_function_signature_model_parameter_parsing() -> None:\n        @get()\n        def my_fn(a: int, b: str, c: Optional[bytes], d: bytes = b\"123\", e: Optional[dict] = None) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=my_fn.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(my_fn.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_create_function_signature_model_parameter_parsing.<locals>.my_fn at 0x7efff2658700>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n____________________________ test_parsed_signature _____________________________\n\n    def test_parsed_signature() -> None:\n        \"\"\"Test ParsedSignature.\"\"\"\n    \n        def fn(foo: int, bar: Optional[List[int]] = None) -> None: ...\n    \n>       parsed_sig = ParsedSignature.from_fn(fn, get_fn_type_hints(fn))\n\ntests/unit/test_utils/test_signature.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_parsed_signature.<locals>.fn at 0x7efff265a560>\nsignature_namespace = {'bar': typing.Optional[typing.List[int]], 'foo': <class 'int'>, 'return': <class 'NoneType'>}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n_________________ test_field_definition_is_non_string_sequence _________________\n\n    def test_field_definition_is_non_string_sequence() -> None:\n        def fn(a: Sequence[int], b: Optional[Sequence[int]]) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, signature_namespace={}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_field_definition_is_non_string_sequence.<locals>.fn at 0x7efff265add0>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n__________________________ test_dto_data_typed_as_any __________________________\n\n    def test_dto_data_typed_as_any() -> None:\n        \"\"\"DTOs already validate the payload, we don't need the signature model to do it too.\n    \n        https://github.com/litestar-org/litestar/issues/2149\n        \"\"\"\n    \n        @dataclass\n        class Test:\n            a: str\n    \n        dto = DataclassDTO[Test]\n    \n        def fn(data: Test) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=dto,\n>           parsed_signature=ParsedSignature.from_fn(fn, signature_namespace={\"Test\": Test}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_dto_data_typed_as_any.<locals>.fn at 0x7efff2659d80>\nsignature_namespace = {'Test': <class 'tests.unit.test_signature.test_parsing.test_dto_data_typed_as_any.<locals>.Test'>}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n_____________________ test_validation_error_exception_key ______________________\n\n    def test_validation_error_exception_key() -> None:\n        from dataclasses import dataclass\n    \n        @dataclass\n        class OtherChild:\n            val: List[int]\n    \n        @dataclass\n        class Child:\n            val: int\n            other_val: int\n    \n        @dataclass\n        class Parent:\n            child: Child\n            other_child: OtherChild\n    \n        @get(\"/\")\n        def handler(data: Parent) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=handler,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(handler.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_validation.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_validation_error_exception_key.<locals>.handler at 0x7efff265a050>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n________ test_parse_values_from_connection_kwargs_with_multiple_errors _________\n\n    def test_parse_values_from_connection_kwargs_with_multiple_errors() -> None:\n        def fn(a: Annotated[int, Parameter(gt=5)], b: Annotated[int, Parameter(lt=5)]) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_validation.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_parse_values_from_connection_kwargs_with_multiple_errors.<locals>.fn at 0x7efff265ba30>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n_______________ test_parses_values_from_connection_kwargs_raises _______________\n\n    def test_parses_values_from_connection_kwargs_raises() -> None:\n        def fn(a: int) -> None:\n            pass\n    \n        model = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_validation.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_parses_values_from_connection_kwargs_raises.<locals>.fn at 0x7efff26588b0>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n________ test_create_function_signature_model_ignore_return_annotation _________\n\n    def test_create_function_signature_model_ignore_return_annotation() -> None:\n        @get(path=\"/health\", status_code=HTTP_204_NO_CONTENT)\n        async def health_check() -> None:\n            return None\n    \n        signature_model_type = SignatureModel.create(\n            dependency_name_set=set(),\n            fn=health_check.fn,\n            data_dto=None,\n>           parsed_signature=ParsedSignature.from_fn(health_check.fn, {}),\n            type_decoders=[],\n        )\n\ntests/unit/test_signature/test_parsing.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.utils.signature.ParsedSignature'>\nfn = <function test_create_function_signature_model_ignore_return_annotation.<locals>.health_check at 0x7efff265be20>\nsignature_namespace = {}\n\n    @classmethod\n    @classmethod\n    def from_fn(cls, fn: AnyCallable, signature_namespace: dict[str, Any]) -> Self:\n>       signature = inspect.signature(fn)\nE       NameError: name 'inspect' is not defined\n\nlitestar/utils/signature.py:205: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_signature/test_validation.py::test_create_signature_validation\nFAILED tests/unit/test_response/test_response_to_asgi_response.py::test_to_response_async_await[asyncio]\nFAILED tests/unit/test_response/test_response_to_asgi_response.py::test_to_response_async_await[trio]\nFAILED tests/unit/test_signature/test_parsing.py::test_field_definition_is_non_string_iterable\nFAILED tests/unit/test_signature/test_parsing.py::test_create_function_signature_model_parameter_parsing\nFAILED tests/unit/test_utils/test_signature.py::test_parsed_signature - NameE...\nFAILED tests/unit/test_signature/test_parsing.py::test_field_definition_is_non_string_sequence\nFAILED tests/unit/test_signature/test_parsing.py::test_dto_data_typed_as_any\nFAILED tests/unit/test_signature/test_validation.py::test_validation_error_exception_key\nFAILED tests/unit/test_signature/test_validation.py::test_parse_values_from_connection_kwargs_with_multiple_errors\nFAILED tests/unit/test_signature/test_validation.py::test_parses_values_from_connection_kwargs_raises\nFAILED tests/unit/test_signature/test_parsing.py::test_create_function_signature_model_ignore_return_annotation\n============================== 12 failed in 0.24s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/deprecation.py-deprecated": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 3, in <module>\n    from .http_handlers import HTTPRouteHandler, delete, get, head, patch, post, put, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/__init__.py\", line 3, in <module>\n    from .base import HTTPRouteHandler, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/base.py\", line 16, in <module>\n    from litestar.handlers.http_handlers._utils import (\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/_utils.py\", line 9, in <module>\n    from litestar.response import Response\n  File \"/root/repos/py_data/litestar/litestar/response/__init__.py\", line 1, in <module>\n    from .base import Response\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 42, in <module>\n    class ASGIResponse:\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 136, in ASGIResponse\n    def encoded_headers(self) -> list[tuple[bytes, bytes]]:\n  File \"/root/repos/py_data/litestar/litestar/utils/deprecation.py\", line 105, in decorator\n    @functools.wraps(func)\nNameError: name 'functools' is not defined\n\n\n"], "litestar-litestar/utils/sync.py-ensure_async_callable": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 6 items\n\ntests/unit/test_utils/test_sync.py FFFFFF                                [100%]\n\n=================================== FAILURES ===================================\n_____________ test_function_wrapper_wraps_async_function_correctly _____________\n\n    async def test_function_wrapper_wraps_async_function_correctly() -> None:\n        obj = {\"value\": 0}\n    \n        async def my_function(new_value: int) -> None:\n            obj[\"value\"] = new_value\n    \n>       wrapped_function = ensure_async_callable(my_function)\n\ntests/unit/test_utils/test_sync.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <function test_function_wrapper_wraps_async_function_correctly.<locals>.my_function at 0x7f02a692ca60>\n\n    def ensure_async_callable(fn: Callable[P, T]) -> Callable[P, Awaitable[T]]:\n        \"\"\"Ensure that ``fn`` is an asynchronous callable.\n        If it is an asynchronous, return the original object, else wrap it in an\n        ``AsyncCallable``\n        \"\"\"\n>       if asyncio.iscoroutinefunction(fn):\nE       NameError: name 'asyncio' is not defined\n\nlitestar/utils/sync.py:35: NameError\n_________________ test_function_wrapper_wraps_class_correctly __________________\n\n    async def test_function_wrapper_wraps_class_correctly() -> None:\n        class MyCallable:\n            value = 0\n    \n            def __call__(self, new_value: int) -> None:\n                self.value = new_value\n    \n        instance = MyCallable()\n    \n>       wrapped_class = ensure_async_callable(instance)\n\ntests/unit/test_utils/test_sync.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <tests.unit.test_utils.test_sync.test_function_wrapper_wraps_class_correctly.<locals>.MyCallable object at 0x7f02a6500130>\n\n    def ensure_async_callable(fn: Callable[P, T]) -> Callable[P, Awaitable[T]]:\n        \"\"\"Ensure that ``fn`` is an asynchronous callable.\n        If it is an asynchronous, return the original object, else wrap it in an\n        ``AsyncCallable``\n        \"\"\"\n>       if asyncio.iscoroutinefunction(fn):\nE       NameError: name 'asyncio' is not defined\n\nlitestar/utils/sync.py:35: NameError\n________________ test_function_wrapper_wraps_function_correctly ________________\n\n    async def test_function_wrapper_wraps_function_correctly() -> None:\n        obj = {\"value\": 0}\n    \n        def my_function(new_value: int) -> None:\n            obj[\"value\"] = new_value\n    \n>       wrapped_function = ensure_async_callable(my_function)\n\ntests/unit/test_utils/test_sync.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <function test_function_wrapper_wraps_function_correctly.<locals>.my_function at 0x7f02a6539120>\n\n    def ensure_async_callable(fn: Callable[P, T]) -> Callable[P, Awaitable[T]]:\n        \"\"\"Ensure that ``fn`` is an asynchronous callable.\n        If it is an asynchronous, return the original object, else wrap it in an\n        ``AsyncCallable``\n        \"\"\"\n>       if asyncio.iscoroutinefunction(fn):\nE       NameError: name 'asyncio' is not defined\n\nlitestar/utils/sync.py:35: NameError\n______________ test_function_wrapper_wraps_async_method_correctly ______________\n\n    async def test_function_wrapper_wraps_async_method_correctly() -> None:\n        class MyClass:\n            def __init__(self) -> None:\n                self.value = 0\n    \n            async def my_method(self, value: int) -> None:\n                self.value = value\n    \n        instance = MyClass()\n    \n>       wrapped_method = ensure_async_callable(instance.my_method)\n\ntests/unit/test_utils/test_sync.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <bound method test_function_wrapper_wraps_async_method_correctly.<locals>.MyClass.my_method of <tests.unit.test_utils.test_sync.test_function_wrapper_wraps_async_method_correctly.<locals>.MyClass object at 0x7f02a65029e0>>\n\n    def ensure_async_callable(fn: Callable[P, T]) -> Callable[P, Awaitable[T]]:\n        \"\"\"Ensure that ``fn`` is an asynchronous callable.\n        If it is an asynchronous, return the original object, else wrap it in an\n        ``AsyncCallable``\n        \"\"\"\n>       if asyncio.iscoroutinefunction(fn):\nE       NameError: name 'asyncio' is not defined\n\nlitestar/utils/sync.py:35: NameError\n______________ test_function_wrapper_wraps_async_class_correctly _______________\n\n    async def test_function_wrapper_wraps_async_class_correctly() -> None:\n        class MyCallable:\n            value = 0\n    \n            async def __call__(self, new_value: int) -> None:\n                self.value = new_value\n    \n        instance = MyCallable()\n    \n>       wrapped_class = ensure_async_callable(instance)\n\ntests/unit/test_utils/test_sync.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <tests.unit.test_utils.test_sync.test_function_wrapper_wraps_async_class_correctly.<locals>.MyCallable object at 0x7f02a660d4b0>\n\n    def ensure_async_callable(fn: Callable[P, T]) -> Callable[P, Awaitable[T]]:\n        \"\"\"Ensure that ``fn`` is an asynchronous callable.\n        If it is an asynchronous, return the original object, else wrap it in an\n        ``AsyncCallable``\n        \"\"\"\n>       if asyncio.iscoroutinefunction(fn):\nE       NameError: name 'asyncio' is not defined\n\nlitestar/utils/sync.py:35: NameError\n_________________ test_function_wrapper_wraps_method_correctly _________________\n\n    async def test_function_wrapper_wraps_method_correctly() -> None:\n        class MyClass:\n            def __init__(self) -> None:\n                self.value = 0\n    \n            def my_method(self, value: int) -> None:\n                self.value = value\n    \n        instance = MyClass()\n    \n>       wrapped_method = ensure_async_callable(instance.my_method)\n\ntests/unit/test_utils/test_sync.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <bound method test_function_wrapper_wraps_method_correctly.<locals>.MyClass.my_method of <tests.unit.test_utils.test_sync.test_function_wrapper_wraps_method_correctly.<locals>.MyClass object at 0x7f02a6501f30>>\n\n    def ensure_async_callable(fn: Callable[P, T]) -> Callable[P, Awaitable[T]]:\n        \"\"\"Ensure that ``fn`` is an asynchronous callable.\n        If it is an asynchronous, return the original object, else wrap it in an\n        ``AsyncCallable``\n        \"\"\"\n>       if asyncio.iscoroutinefunction(fn):\nE       NameError: name 'asyncio' is not defined\n\nlitestar/utils/sync.py:35: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_sync.py::test_function_wrapper_wraps_async_function_correctly\nFAILED tests/unit/test_utils/test_sync.py::test_function_wrapper_wraps_class_correctly\nFAILED tests/unit/test_utils/test_sync.py::test_function_wrapper_wraps_function_correctly\nFAILED tests/unit/test_utils/test_sync.py::test_function_wrapper_wraps_async_method_correctly\nFAILED tests/unit/test_utils/test_sync.py::test_function_wrapper_wraps_async_class_correctly\nFAILED tests/unit/test_utils/test_sync.py::test_function_wrapper_wraps_method_correctly\n============================== 6 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/typing.py-expand_type_var_in_type_hint": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_typing.py ...FF...FF                          [100%]\n\n=================================== FAILURES ===================================\n_____ test_expand_type_var_in_type_hints[type_hint3-namespace3-expected3] ______\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}\nnamespace = {~T: <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nexpected = {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, ...<class 'int'>} == {'arg1': <cla...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': ~T} != {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint4-namespace4-expected4] ______\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}\nnamespace = {~T: <class 'int'>}\nexpected = {'arg1': <class 'int'>, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, ...<class 'int'>} == {'arg1': <cla...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': ~T} != {'arg1': <class 'int'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint8-namespace8-expected8] ______\n\ntype_hint = {'arg1': ~T, 'return': ~T}\nnamespace = {~T: <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nexpected = {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>, 'return': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, 'return': ~T} == {'arg1': <cla...g.ConcreteT'>}\nE         \nE         Differing items:\nE         {'return': ~T} != {'return': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nE         {'arg1': ~T} != {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint9-namespace9-expected9] ______\n\ntype_hint = {'arg1': ~T, 'return': ~T}, namespace = {~T: <class 'int'>}\nexpected = {'arg1': <class 'int'>, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, 'return': ~T} == {'arg1': <cla...<class 'int'>}\nE         \nE         Differing items:\nE         {'return': ~T} != {'return': <class 'int'>}\nE         {'arg1': ~T} != {'arg1': <class 'int'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint3-namespace3-expected3]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint4-namespace4-expected4]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint8-namespace8-expected8]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint9-namespace9-expected9]\n========================= 4 failed, 6 passed in 0.15s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/dataclass.py-simple_asdict": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_datastructures/test_headers.py ...                       [100%]\n\n============================== 3 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/path.py-join_paths": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_path.py F.FFF.FF.F                            [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_join_single _______________________________\n\n    def test_join_single() -> None:\n>       assert join_paths([\"\"]) == \"/\"\nE       AssertionError: assert '.' == '/'\nE         \nE         - /\nE         + .\n\ntests/unit/test_utils/test_path.py:28: AssertionError\n_______________ test_join_url_fragments[/path/-/sub/-/path/sub] ________________\n\nbase = '/path/', fragment = '/sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path/-sub-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub-/path/sub] __________________\n\nbase = 'path', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n________________ test_join_url_fragments[path/-sub/-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub/-/path/sub] _________________\n\nbase = 'path', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_____________________________ test_join_empty_list _____________________________\n\n    def test_join_empty_list() -> None:\n>       assert join_paths([]) == \"/\"\n\ntests/unit/test_utils/test_path.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npaths = []\n\n    def join_paths(paths: Iterable[str]) -> str:\n        \"\"\"Normalize and joins path fragments.\n    \n        Args:\n            paths: An iterable of path fragments.\n    \n        Returns:\n            A normalized joined path string.\n        \"\"\"\n        normalized_paths = [os.path.normpath(path) for path in paths]\n>       joined_path = os.path.join(*normalized_paths)\nE       TypeError: join() missing 1 required positional argument: 'a'\n\nlitestar/utils/path.py:38: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_path.py::test_join_single - AssertionError:...\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[/path/-/sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_empty_list - TypeError: ...\n========================= 7 failed, 3 passed in 0.12s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/helpers.py-get_name": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 11 items\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py .               [  9%]\ntests/unit/test_utils/test_helpers.py F.FFF.                             [ 63%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py ..           [ 81%]\ntests/unit/test_openapi/test_schema.py ..                                [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_get_name[Foo-Foo] ____________________________\n\nvalue = <class 'tests.unit.test_utils.test_helpers.Foo'>, expected = 'Foo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\nE       AssertionError: assert 'type' == 'Foo'\nE         \nE         - Foo\nE         + type\n\ntests/unit/test_utils/test_helpers.py:29: AssertionError\n____________________ test_get_name[GenericFoo-GenericFoo0] _____________________\n\nvalue = <class 'tests.unit.test_utils.test_helpers.GenericFoo'>\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\nE       AssertionError: assert 'type' == 'GenericFoo'\nE         \nE         - GenericFoo\nE         + type\n\ntests/unit/test_utils/test_helpers.py:29: AssertionError\n____________________ test_get_name[GenericFoo-GenericFoo1] _____________________\n\nvalue = tests.unit.test_utils.test_helpers.GenericFoo[int]\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\nE       AssertionError: assert '_GenericAlias' == 'GenericFoo'\nE         \nE         - GenericFoo\nE         + _GenericAlias\n\ntests/unit/test_utils/test_helpers.py:29: AssertionError\n____________________ test_get_name[GenericFoo-GenericFoo2] _____________________\n\nvalue = tests.unit.test_utils.test_helpers.GenericFoo[~T]\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\nE       AssertionError: assert '_GenericAlias' == 'GenericFoo'\nE         \nE         - GenericFoo\nE         + _GenericAlias\n\ntests/unit/test_utils/test_helpers.py:29: AssertionError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[Foo-Foo] - Assert...\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[GenericFoo-GenericFoo0]\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[GenericFoo-GenericFoo1]\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[GenericFoo-GenericFoo2]\n=================== 4 failed, 7 passed, 2 warnings in 0.13s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/predicates.py-is_dataclass_class": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 7, in <module>\n    from .predicates import (\n  File \"/root/repos/py_data/litestar/litestar/utils/predicates.py\", line 100, in <module>\n    from beartype._decor.main import DataclassProtocol\nModuleNotFoundError: No module named 'beartype'\n\n\n"], "litestar-litestar/utils/predicates.py-is_class_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_utils/test_predicates.py ___________\ntests/unit/test_utils/test_predicates.py:204: in <module>\n    (Annotated[ClassVar[int], \"abc\"], True),\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1677: in __class_getitem__\n    origin = _type_check(params[0], msg)\n/usr/local/lib/python3.10/typing.py:167: in _type_check\n    raise TypeError(f\"{arg} is not valid as type argument\")\nE   TypeError: typing.ClassVar[int] is not valid as type argument\n=========================== short test summary info ============================\nERROR tests/unit/test_utils/test_predicates.py - TypeError: typing.ClassVar[i...\n=============================== 1 error in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_utils/test_predicates.py::test_is_class_var\n\n"], "litestar-litestar/utils/module_loader.py-import_string": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_utils/test_module_loader.py ..F                          [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_import_string ______________________________\n\n    def test_import_string() -> None:\n        cls = import_string(\"litestar.config.compression.CompressionConfig\")\n        assert type(cls) == type(CompressionConfig)\n    \n        with pytest.raises(ImportError):\n>           _ = import_string(\"CompressionConfigNew\")\n\ntests/unit/test_utils/test_module_loader.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndotted_path = 'CompressionConfigNew'\n\n    def import_string(dotted_path: str) -> Any:\n        \"\"\"Dotted Path Import.\n    \n        Import a dotted module path and return the attribute/class designated by the\n        last name in the path. Raise ImportError if the import failed.\n    \n        Args:\n            dotted_path: The path of the module to import.\n    \n        Raises:\n            ImportError: Could not import the module.\n    \n        Returns:\n            object: The imported object.\n        \"\"\"\n        try:\n>           module_path, class_name = dotted_path.rsplit('.', 1)\nE           ValueError: not enough values to unpack (expected 2, got 1)\n\nlitestar/utils/module_loader.py:61: ValueError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_module_loader.py::test_import_string - Valu...\n========================= 1 failed, 2 passed in 0.10s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/channels/backends/redis.py-unsubscribe": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_unsubscribe_without_subscription\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\n"], "litestar-litestar/channels/backends/redis.py-publish": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_stream_backend_expires\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_streams_backend_flushall\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_shutdown_leftover_messages\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_publish_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_publish_not_initialized_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-stream_events": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-get_history": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_psycopg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\n"], "litestar-litestar/dto/_backend.py-create_transfer_model_type": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._codegen_backend.DTOCodegenBackend object at 0x7ff20609cea0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:406: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7ff205f7b3c0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:406: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\n============================== 2 failed in 0.15s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_builtins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py .F       [100%]\n\n=================================== FAILURES ===================================\n__________ test_backend_populate_data_from_builtins[default_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7f3ec2a02610>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_populate_data_from_builtins(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        data = backend.populate_data_from_builtins(builtins=DESTRUCTURED, asgi_connection=asgi_connection)\n>       assert data == STRUCTURED\nE       AssertionError: assert DC(a=1, neste...optional=None) == DC(a=1, neste...optional=None)\nE         \nE         Omitting 4 identical items, use -vv to show\nE         Differing attributes:\nE         ['nested', 'nested_list', 'nested_mapping']\nE         \nE         Drill down into differing attribute nested:\nE           nested: {'a': 1, 'b': 'two'} != NestedDC(a=1, b='two')...\nE         \nE         ...Full output truncated (11 lines hidden), use '-vv' to show\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:191: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_populate_data_from_builtins[default_backend]\n========================= 1 failed, 1 passed in 0.16s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_raw": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py .F.F     [100%]\n\n=================================== FAILURES ===================================\n_______ test_backend_populate_collection_data_from_raw[default_backend] ________\n\nself = <litestar.dto._backend.DTOBackend object at 0x7fedce4c8fc0>\nraw = b'[{\"a\":1,\"nested\":{\"a\":1,\"b\":\"two\"},\"nested_list\":[{\"a\":1,\"b\":\"two\"}],\"nested_mapping\":{\"a\":{\"a\":1,\"b\":\"two\"}},\"b\":\"b\",\"c\":[],\"optional\":null}]'\nasgi_connection = <litestar.connection.request.Request object at 0x7fedcdec2c40>\n\n    def populate_data_from_raw(self, raw: bytes, asgi_connection: ASGIConnection) -> Any:\n        try:\n>           data = json.loads(raw.decode())\nE           NameError: name 'json' is not defined\n\nlitestar/dto/_backend.py:301: NameError\n\nDuring handling of the above exception, another exception occurred:\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7fedcdec2c40>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_populate_collection_data_from_raw(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.populate_data_from_raw(COLLECTION_RAW, asgi_connection)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fedce4c8fc0>\nraw = b'[{\"a\":1,\"nested\":{\"a\":1,\"b\":\"two\"},\"nested_list\":[{\"a\":1,\"b\":\"two\"}],\"nested_mapping\":{\"a\":{\"a\":1,\"b\":\"two\"}},\"b\":\"b\",\"c\":[],\"optional\":null}]'\nasgi_connection = <litestar.connection.request.Request object at 0x7fedcdec2c40>\n\n    def populate_data_from_raw(self, raw: bytes, asgi_connection: ASGIConnection) -> Any:\n        try:\n            data = json.loads(raw.decode())\n            if isinstance(data, list):\n                return [self.model_type(**item) for item in data]\n            else:\n                return self.model_type(**data)\n>       except (json.JSONDecodeError, ValidationError) as e:\nE       NameError: name 'json' is not defined\n\nlitestar/dto/_backend.py:306: NameError\n_____________ test_backend_populate_data_from_raw[default_backend] _____________\n\nself = <litestar.dto._backend.DTOBackend object at 0x7fedcdf26b40>\nraw = b'{\"a\":1,\"nested\":{\"a\":1,\"b\":\"two\"},\"nested_list\":[{\"a\":1,\"b\":\"two\"}],\"nested_mapping\":{\"a\":{\"a\":1,\"b\":\"two\"}},\"b\":\"b\",\"c\":[],\"optional\":null}'\nasgi_connection = <litestar.connection.request.Request object at 0x7fedcce3dd20>\n\n    def populate_data_from_raw(self, raw: bytes, asgi_connection: ASGIConnection) -> Any:\n        try:\n>           data = json.loads(raw.decode())\nE           NameError: name 'json' is not defined\n\nlitestar/dto/_backend.py:301: NameError\n\nDuring handling of the above exception, another exception occurred:\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7fedcce3dd20>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_populate_data_from_raw(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.populate_data_from_raw(RAW, asgi_connection)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fedcdf26b40>\nraw = b'{\"a\":1,\"nested\":{\"a\":1,\"b\":\"two\"},\"nested_list\":[{\"a\":1,\"b\":\"two\"}],\"nested_mapping\":{\"a\":{\"a\":1,\"b\":\"two\"}},\"b\":\"b\",\"c\":[],\"optional\":null}'\nasgi_connection = <litestar.connection.request.Request object at 0x7fedcce3dd20>\n\n    def populate_data_from_raw(self, raw: bytes, asgi_connection: ASGIConnection) -> Any:\n        try:\n            data = json.loads(raw.decode())\n            if isinstance(data, list):\n                return [self.model_type(**item) for item in data]\n            else:\n                return self.model_type(**data)\n>       except (json.JSONDecodeError, ValidationError) as e:\nE       NameError: name 'json' is not defined\n\nlitestar/dto/_backend.py:306: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_populate_collection_data_from_raw[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_populate_data_from_raw[default_backend]\n========================= 2 failed, 2 passed in 0.22s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-encode_data": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 6 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py .F.F.F   [100%]\n\n=================================== FAILURES ===================================\n__________________ test_backend_encode_data[default_backend] ___________________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7fcd9457b1c0>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_encode_data(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.encode_data(STRUCTURED)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fcd94b79040>\ndata = DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n>       if isinstance(data, LitestarEncodableType):\nE       NameError: name 'LitestarEncodableType' is not defined\n\nlitestar/dto/_backend.py:329: NameError\n_______ test_transfer_only_touches_included_attributes[default_backend] ________\n\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_transfer_only_touches_included_attributes(backend_cls: type[DTOBackend]) -> None:\n        \"\"\"Ensure attribute that are not included are never touched in any way during\n        transfer.\n    \n        https://github.com/litestar-org/litestar/issues/2125\n        \"\"\"\n        mock = MagicMock()\n    \n        @dataclass()\n        class Foo:\n            id: str\n            bar: str = \"\"\n    \n        class Factory(DataclassDTO):\n            config = DTOConfig(include={\"excluded\"})\n    \n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=Factory,\n            field_definition=TransferDTOFieldDefinition.from_annotation(Foo),\n            model_type=Foo,\n            wrapper_attribute_name=None,\n            is_data_field=False,\n        )\n    \n        Foo.bar = property(fget=lambda s: mock(return_value=\"\"), fset=lambda s, v: None)  # type: ignore[assignment]\n    \n>       backend.encode_data(Foo(id=\"1\"))\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fcd93474a40>\ndata = test_transfer_only_touches_included_attributes.<locals>.Foo(id='1', bar=<MagicMock name='mock()' id='140520934298800'>)\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n>       if isinstance(data, LitestarEncodableType):\nE       NameError: name 'LitestarEncodableType' is not defined\n\nlitestar/dto/_backend.py:329: NameError\n_____________ test_backend_encode_collection_data[default_backend] _____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7fcd934a71c0>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_encode_collection_data(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.encode_data([STRUCTURED])\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fcd948edd40>\ndata = [DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)]\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n>       if isinstance(data, LitestarEncodableType):\nE       NameError: name 'LitestarEncodableType' is not defined\n\nlitestar/dto/_backend.py:329: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_encode_data[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_transfer_only_touches_included_attributes[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_encode_collection_data[default_backend]\n========================= 3 failed, 3 passed in 0.20s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-_create_transfer_model_type_annotation": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py FFFFFFFFF   [100%]\n\n=================================== FAILURES ===================================\n_______ test_create_transfer_model_type_annotation_tuple_type_not_nested _______\n\n    def test_create_transfer_model_type_annotation_tuple_type_not_nested() -> None:\n        transfer_type = TupleType(\n            field_definition=FieldDefinition.from_annotation(Tuple[str, int]),\n            inner_types=(\n                SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n                SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            ),\n            has_nested=False,\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = TupleType(field_definition=FieldDefinition(raw=typing.Tuple[str, int], annotation=typing.Tuple[str, int], type_wrapper...ne, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'TupleType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n_ test_create_transfer_model_type_annotation_simple_type_without_nested_field_info _\n\n    def test_create_transfer_model_type_annotation_simple_type_without_nested_field_info() -> None:\n        transfer_type = SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None)\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = SimpleType(field_definition=FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=N...None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'SimpleType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n______ test_create_transfer_model_type_annotation_mapping_type_not_nested ______\n\n    def test_create_transfer_model_type_annotation_mapping_type_not_nested() -> None:\n        transfer_type = MappingType(\n            field_definition=FieldDefinition.from_annotation(Dict[str, int]),\n            key_type=SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n            value_type=SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            has_nested=False,\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = MappingType(field_definition=FieldDefinition(raw=typing.Dict[str, int], annotation=typing.Dict[str, int], type_wrapper...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'MappingType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n_________ test_create_transfer_model_type_annotation_tuple_type_nested _________\n\n    def test_create_transfer_model_type_annotation_tuple_type_nested() -> None:\n        transfer_type = TupleType(\n            field_definition=FieldDefinition.from_annotation(Tuple[str, DataModel]),\n            inner_types=(\n                SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n                SimpleType(\n                    field_definition=FieldDefinition.from_annotation(DataModel),\n                    nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n                ),\n            ),\n            has_nested=True,\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = TupleType(field_definition=FieldDefinition(raw=typing.Tuple[str, tests.unit.test_dto.test_factory.test_backends.test_u...dInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'TupleType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n_____ test_create_transfer_model_type_annotation_unexpected_transfer_type ______\n\n    def test_create_transfer_model_type_annotation_unexpected_transfer_type() -> None:\n        transfer_type = CompositeType(field_definition=FieldDefinition.from_annotation(Union[str, int]), has_nested=False)\n        with pytest.raises(RuntimeError):\n>           _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = CompositeType(field_definition=FieldDefinition(raw=typing.Union[str, int], annotation=typing.Union[str, int], type_wra...definition=None, name='')), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), has_nested=False)\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'CompositeType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n_ test_create_transfer_model_type_annotation_simple_type_with_nested_field_info _\n\n    def test_create_transfer_model_type_annotation_simple_type_with_nested_field_info() -> None:\n        transfer_type = SimpleType(\n            field_definition=FieldDefinition.from_annotation(DataModel),\n            nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = SimpleType(field_definition=FieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.Data...eldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'SimpleType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n______ test_create_transfer_model_type_annotation_collection_type_nested _______\n\n    def test_create_transfer_model_type_annotation_collection_type_nested() -> None:\n        transfer_type = CollectionType(\n            field_definition=FieldDefinition.from_annotation(List[DataModel]),\n            inner_type=SimpleType(\n                field_definition=FieldDefinition.from_annotation(DataModel),\n                nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n            ),\n            has_nested=True,\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = CollectionType(field_definition=FieldDefinition(raw=typing.List[tests.unit.test_dto.test_factory.test_backends.test_ut...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=())))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'CollectionType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n____ test_create_transfer_model_type_annotation_collection_type_not_nested _____\n\n    def test_create_transfer_model_type_annotation_collection_type_not_nested() -> None:\n        transfer_type = CollectionType(\n            field_definition=FieldDefinition.from_annotation(List[int]),\n            inner_type=SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            has_nested=False,\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = CollectionType(field_definition=FieldDefinition(raw=typing.List[int], annotation=typing.List[int], type_wrappers=set()...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'CollectionType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n________ test_create_transfer_model_type_annotation_mapping_type_nested ________\n\n    def test_create_transfer_model_type_annotation_mapping_type_nested() -> None:\n        transfer_type = MappingType(\n            field_definition=FieldDefinition.from_annotation(Dict[str, DataModel]),\n            key_type=SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n            value_type=SimpleType(\n                field_definition=FieldDefinition.from_annotation(DataModel),\n                nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n            ),\n            has_nested=True,\n        )\n>       annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = MappingType(field_definition=FieldDefinition(raw=typing.Dict[str, tests.unit.test_dto.test_factory.test_backends.test_...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=())))\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n>       if transfer_type.type == TransferTypeEnum.PRIMITIVE:\nE       AttributeError: 'MappingType' object has no attribute 'type'\n\nlitestar/dto/_backend.py:885: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_tuple_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_simple_type_without_nested_field_info\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_mapping_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_tuple_type_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_unexpected_transfer_type\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_simple_type_with_nested_field_info\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_collection_type_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_collection_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_mapping_type_nested\n============================== 9 failed in 0.18s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/response/file.py-start_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_response/test_file_response.py FF                        [100%]\n\n=================================== FAILURES ===================================\n______________ test_file_response_with_missing_file_raises_error _______________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2497/test_file_response_with_missin0')\n\n    async def test_file_response_with_missing_file_raises_error(tmpdir: Path) -> None:\n        path = tmpdir / \"404.txt\"\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=path, filename=\"404.txt\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.response.file.ASGIFileResponse object at 0x7fe7ec86adc0>\nsend = <function empty_send at 0x7fe7ef841480>\n\n    async def start_response(self, send: Send) -> None:\n        \"\"\"Emit the start event of the response. This event includes the headers and status codes.\n    \n        Args:\n            send: The ASGI send function.\n    \n        Returns:\n            None\n        \"\"\"\n        await send({\n            'type': 'http.response.start',\n            'status': self.status_code,\n>           'headers': self.raw_headers\n        })\nE       AttributeError: 'ASGIFileResponse' object has no attribute 'raw_headers'\n\nlitestar/response/file.py:210: AttributeError\n________________ test_file_response_with_directory_raises_error ________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2497/test_file_response_with_direct0')\n\n    async def test_file_response_with_directory_raises_error(tmpdir: Path) -> None:\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=tmpdir, filename=\"example.png\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.response.file.ASGIFileResponse object at 0x7fe7ec7905c0>\nsend = <function empty_send at 0x7fe7ef841480>\n\n    async def start_response(self, send: Send) -> None:\n        \"\"\"Emit the start event of the response. This event includes the headers and status codes.\n    \n        Args:\n            send: The ASGI send function.\n    \n        Returns:\n            None\n        \"\"\"\n        await send({\n            'type': 'http.response.start',\n            'status': self.status_code,\n>           'headers': self.raw_headers\n        })\nE       AttributeError: 'ASGIFileResponse' object has no attribute 'raw_headers'\n\nlitestar/response/file.py:210: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_missing_file_raises_error\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_directory_raises_error\n============================== 2 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nsys:1: RuntimeWarning: coroutine 'FileSystemAdapter.info' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"], "litestar-litestar/connection/request.py-json": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 71 items\n\ntests/unit/test_dto/test_factory/test_integration.py ................... [ 26%]\n....................................................                     [100%]\n\n============================== 71 passed in 0.96s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/multi_dicts.py-close": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_datastructures/test_multi_dicts.py .                     [100%]\n\n============================== 1 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/url.py-from_scope": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_datastructures/test_url.py ..                            [100%]\n\n============================== 2 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/headers.py-to_header": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_datastructures/test_headers.py F                         [ 20%]\ntests/unit/test_response/test_response_headers.py .FF.                   [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cache_control_to_header _________________________\n\n    def test_cache_control_to_header() -> None:\n        header = CacheControlHeader(max_age=10, private=True)\n        expected_header_values = [\"max-age=10, private\", \"private, max-age=10\"]\n>       assert header.to_header() in expected_header_values\n\ntests/unit/test_datastructures/test_headers.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=None, no_store=None, private=True, pu...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ninclude_header_name = False\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        if include_header_name:\n            return f\"{self.name}: {self.value}\"\n        else:\n>           return self.value\nE           AttributeError: 'CacheControlHeader' object has no attribute 'value'\n\nlitestar/datastructures/headers.py:262: AttributeError\n_ test_explicit_response_headers[cache_control-app_header1-controller_header1-handler_header1] _\n\nconfig_kwarg = 'cache_control'\napp_header = CacheControlHeader(documentation_only=False, max_age=1, s_maxage=None, no_cache=None, no_store=None, private=None, pub...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ncontroller_header = CacheControlHeader(documentation_only=False, max_age=2, s_maxage=None, no_cache=None, no_store=None, private=None, pub...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\nhandler_header = CacheControlHeader(documentation_only=False, max_age=3, s_maxage=None, no_cache=None, no_store=None, private=None, pub...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\n\n    @pytest.mark.parametrize(\n        \"config_kwarg,app_header,controller_header,handler_header\",\n        [\n            (\n                \"etag\",\n                ETag(value=\"1\"),\n                ETag(value=\"2\"),\n                ETag(value=\"3\"),\n            ),\n            (\n                \"cache_control\",\n                CacheControlHeader(max_age=1),\n                CacheControlHeader(max_age=2),\n                CacheControlHeader(max_age=3),\n            ),\n        ],\n    )\n    def test_explicit_response_headers(\n        config_kwarg: str, app_header: Header, controller_header: Header, handler_header: Header\n    ) -> None:\n        class MyController(Controller):\n            @get(\n                path=\"/handler-override\",\n                **{config_kwarg: handler_header},  # type: ignore[arg-type]\n            )\n            def controller_override(self) -> None:\n                pass\n    \n            @get(path=\"/controller\")\n            def controller_handler(self) -> None:\n                pass\n    \n        setattr(MyController, config_kwarg, controller_header)\n    \n        @get(path=\"/app\")\n        def app_handler() -> None:\n            pass\n    \n        app = Litestar(\n            route_handlers=[MyController, app_handler],\n            **{config_kwarg: app_header},  # type: ignore[arg-type]\n        )\n    \n        with TestClient(app=app) as client:\n            for path, expected_value in {\n                \"handler-override\": handler_header,\n                \"controller\": controller_header,\n                \"app\": app_header,\n            }.items():\n                response = client.get(path)\n>               assert response.headers[expected_value.HEADER_NAME] == expected_value.to_header()\n\ntests/unit/test_response/test_response_headers.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Headers({'content-type': 'application/json', 'content-length': '52'})\nkey = 'cache-control'\n\n    def __getitem__(self, key: str) -> str:\n        \"\"\"\n        Return a single header value.\n    \n        If there are multiple headers with the same key, then we concatenate\n        them with commas. See: https://tools.ietf.org/html/rfc7230#section-3.2.2\n        \"\"\"\n        normalized_key = key.lower().encode(self.encoding)\n    \n        items = [\n            header_value.decode(self.encoding)\n            for _, header_key, header_value in self._list\n            if header_key == normalized_key\n        ]\n    \n        if items:\n            return \", \".join(items)\n    \n>       raise KeyError(key)\nE       KeyError: 'cache-control'\n\n/usr/local/lib/python3.10/site-packages/httpx/_models.py:228: KeyError\n_ test_explicit_headers_override_response_headers[cache_control-response_header0-header0] _\n\nconfig_kwarg = 'cache_control'\nresponse_header = ResponseHeader(name='cache-control', documentation_only=False, value='no-store', description=None, required=False, deprecated=False, allow_empty_value=False, style=None, explode=None, allow_reserved=False, example=None, examples=None)\nheader = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=True, no_store=None, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\n\n    @pytest.mark.parametrize(\n        \"config_kwarg,response_header,header\",\n        [\n            (\n                \"cache_control\",\n                ResponseHeader(name=CacheControlHeader.HEADER_NAME, value=\"no-store\"),\n                CacheControlHeader(no_cache=True),\n            ),\n            (\"etag\", ResponseHeader(name=ETag.HEADER_NAME, value=\"1\"), ETag(value=\"2\")),\n        ],\n    )\n    def test_explicit_headers_override_response_headers(\n        config_kwarg: str, response_header: ResponseHeader, header: Header\n    ) -> None:\n        @get(\n            path=\"/test\",\n            response_headers=[response_header],\n            **{config_kwarg: header},  # type: ignore[arg-type]\n        )\n        def my_handler() -> None:\n            pass\n    \n        app = Litestar(route_handlers=[my_handler])\n    \n        route_handler, _ = app.routes[0].route_handler_map[HttpMethod.GET]  # type: ignore[union-attr]\n>       resolved_headers = {header.name: header for header in route_handler.resolve_response_headers()}\n\ntests/unit/test_response/test_response_headers.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/handlers/http_handlers/base.py:366: in resolve_response_headers\n    value=header_model.to_header(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=True, no_store=None, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ninclude_header_name = False\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        if include_header_name:\n            return f\"{self.name}: {self.value}\"\n        else:\n>           return self.value\nE           AttributeError: 'CacheControlHeader' object has no attribute 'value'\n\nlitestar/datastructures/headers.py:262: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_to_header\nFAILED tests/unit/test_response/test_response_headers.py::test_explicit_response_headers[cache_control-app_header1-controller_header1-handler_header1]\nFAILED tests/unit/test_response/test_response_headers.py::test_explicit_headers_override_response_headers[cache_control-response_header0-header0]\n========================= 3 failed, 2 passed in 0.20s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/middleware/session/server_side.py-delete": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_security/test_session_auth.py .                          [ 33%]\ntests/unit/test_middleware/test_session/test_server_side_backend.py ..   [100%]\n\n============================== 3 passed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "marimo-marimo/_islands/island_generator.py-add_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/_islands/test_island_generator.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n>       block1 = generator.add_code(\"import marimo as mo\")\n\ntests/_islands/test_island_generator.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncode = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f171815bc70>\ndisplay_code = 'import marimo as mo', display_output = True, is_raw = False\nis_reactive = True\n\n    def add_code(code: str, display_code: bool = True, display_output: bool = True, is_raw: bool = False, is_reactive: bool = True):\n        if is_raw:\n            code_html = f'<pre><code>{code}</code></pre>'\n        else:\n            code_html = f'<pre><code class=\"language-python\">{code}</code></pre>'\n    \n        if is_reactive:\n>           output_html = f'<div id=\"output-{len(self.code_blocks)}\"></div>'\nE           NameError: name 'self' is not defined\n\nmarimo/_islands/island_generator.py:224: NameError\n________________________________ test_add_code _________________________________\n\n    def test_add_code():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\n\ntests/_islands/test_island_generator.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncode = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f1717ec7b50>\ndisplay_code = \"print('Hello, World!')\", display_output = True, is_raw = False\nis_reactive = True\n\n    def add_code(code: str, display_code: bool = True, display_output: bool = True, is_raw: bool = False, is_reactive: bool = True):\n        if is_raw:\n            code_html = f'<pre><code>{code}</code></pre>'\n        else:\n            code_html = f'<pre><code class=\"language-python\">{code}</code></pre>'\n    \n        if is_reactive:\n>           output_html = f'<div id=\"output-{len(self.code_blocks)}\"></div>'\nE           NameError: name 'self' is not defined\n\nmarimo/_islands/island_generator.py:224: NameError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\n\ntests/_islands/test_island_generator.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncode = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f1717ee7af0>\ndisplay_code = \"print('Hello, World!')\", display_output = True, is_raw = False\nis_reactive = True\n\n    def add_code(code: str, display_code: bool = True, display_output: bool = True, is_raw: bool = False, is_reactive: bool = True):\n        if is_raw:\n            code_html = f'<pre><code>{code}</code></pre>'\n        else:\n            code_html = f'<pre><code class=\"language-python\">{code}</code></pre>'\n    \n        if is_reactive:\n>           output_html = f'<div id=\"output-{len(self.code_blocks)}\"></div>'\nE           NameError: name 'self' is not defined\n\nmarimo/_islands/island_generator.py:224: NameError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, islands!')\")\n\ntests/_islands/test_island_generator.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncode = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f1718184640>\ndisplay_code = \"print('Hello, islands!')\", display_output = True, is_raw = False\nis_reactive = True\n\n    def add_code(code: str, display_code: bool = True, display_output: bool = True, is_raw: bool = False, is_reactive: bool = True):\n        if is_raw:\n            code_html = f'<pre><code>{code}</code></pre>'\n        else:\n            code_html = f'<pre><code class=\"language-python\">{code}</code></pre>'\n    \n        if is_reactive:\n>           output_html = f'<div id=\"output-{len(self.code_blocks)}\"></div>'\nE           NameError: name 'self' is not defined\n\nmarimo/_islands/island_generator.py:224: NameError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - NameError: name...\nFAILED tests/_islands/test_island_generator.py::test_add_code - NameError: na...\nFAILED tests/_islands/test_island_generator.py::test_build - NameError: name ...\nFAILED tests/_islands/test_island_generator.py::test_render_head - NameError:...\n============================== 4 failed in 0.08s ===============================\n\n"], "marimo-marimo/_islands/island_generator.py-build": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_islands/test_island_generator.py FFF                              [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n        block1 = generator.add_code(\"import marimo as mo\")\n        block2 = generator.add_code(\"mo.md('Hello, islands!')\")\n    \n>       await generator.build()\n\ntests/_islands/test_island_generator.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fda0c5579d0>\n\n    async def build(self) -> App:\n        \"\"\"\n        Build the app. This should be called after adding all the code cells.\n    \n        Returns:\n            App: The built app.\n        \"\"\"\n        app = App()\n>       for cell in self.cells:\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'cells'\n\nmarimo/_islands/island_generator.py:268: AttributeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, World!')\")\n    \n        # Check if the app is built successfully\n>       app = await generator.build()\n\ntests/_islands/test_island_generator.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fda0c57da20>\n\n    async def build(self) -> App:\n        \"\"\"\n        Build the app. This should be called after adding all the code cells.\n    \n        Returns:\n            App: The built app.\n        \"\"\"\n        app = App()\n>       for cell in self.cells:\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'cells'\n\nmarimo/_islands/island_generator.py:268: AttributeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, islands!')\")\n>       await generator.build()\n\ntests/_islands/test_island_generator.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7fda0c2d2560>\n\n    async def build(self) -> App:\n        \"\"\"\n        Build the app. This should be called after adding all the code cells.\n    \n        Returns:\n            App: The built app.\n        \"\"\"\n        app = App()\n>       for cell in self.cells:\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'cells'\n\nmarimo/_islands/island_generator.py:268: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - AttributeError:...\nFAILED tests/_islands/test_island_generator.py::test_build - AttributeError: ...\nFAILED tests/_islands/test_island_generator.py::test_render_head - AttributeE...\n============================== 3 failed in 0.07s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-build_dataclass": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_utils/test_parse_dataclass.py ..                                  [100%]\n\n============================== 2 passed in 0.04s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-parse_raw": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:73: in <module>\n    from marimo._ast.app import App\nmarimo/_ast/app.py:32: in <module>\n    from marimo._runtime.app.kernel_runner import AppKernelRunner\nmarimo/_runtime/app/kernel_runner.py:10: in <module>\n    from marimo._runtime.context.types import get_context\nmarimo/_runtime/context/__init__.py:11: in <module>\n    from marimo._runtime.context.types import (\nmarimo/_runtime/context/types.py:18: in <module>\n    from marimo._runtime.functions import FunctionRegistry\nmarimo/_runtime/functions.py:10: in <module>\n    from marimo._utils.parse_dataclass import build_dataclass\nmarimo/_utils/parse_dataclass.py:121: in <module>\n    from langchain.utils import camel_to_snake\nE   ImportError: cannot import name 'camel_to_snake' from 'langchain.utils' (/usr/local/lib/python3.10/site-packages/langchain/utils/__init__.py)\n"], "marimo-marimo/_plugins/stateless/icon.py-icon": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_plugins/stateless/test_icon.py F                                  [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_mo_icon _________________________________\n\n    def test_mo_icon() -> None:\n>       assert (\n            icon(\"lucide:leaf\").text\n            == \"<iconify-icon icon='lucide:leaf' inline></iconify-icon>\"\n        )\nE       assert '<span class=...le=\"\"></span>' == '<iconify-ico...iconify-icon>'\nE         \nE         - <iconify-icon icon='lucide:leaf' inline></iconify-icon>\nE         + <span class=\"iconify inline-block\" data-icon=\"lucide:leaf\" style=\"\"></span>\n\ntests/_plugins/stateless/test_icon.py:7: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_plugins/stateless/test_icon.py::test_mo_icon - assert '<span cl...\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_plugins/stateless/image.py-image": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_plugins/stateless/test_image.py F                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_image __________________________________\n\n    async def test_image() -> None:\n>       result = image(\n            \"https://marimo.io/logo.png\",\n        )\n\ntests/_plugins/stateless/test_image.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'https://marimo.io/logo.png', alt = None, width = None, height = None\nrounded = False, style = None\n\n    @mddoc\n    def image(\n        src: Union[str, BinaryIO, np.ndarray],\n        alt: Optional[str] = None,\n        width: Optional[int] = None,\n        height: Optional[int] = None,\n        rounded: bool = False,\n        style: Optional[Dict[str, str]] = None,\n    ) -> Html:\n>       if isinstance(src, (str, Path)):\nE       NameError: name 'Path' is not defined\n\nmarimo/_plugins/stateless/image.py:97: NameError\n=========================== short test summary info ============================\nFAILED tests/_plugins/stateless/test_image.py::test_image - NameError: name '...\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_plugins/stateless/flex.py-hstack": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_plugins/stateless/test_flex.py F                                  [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_hstack __________________________________\n\n    def test_hstack() -> None:\n>       result = hstack([\"item1\", \"item2\"], justify=\"center\", gap=1, wrap=True)\n\ntests/_plugins/stateless/test_flex.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitems = ['item1', 'item2'], justify = 'center', align = 'start', wrap = True\ngap = 1, widths = None\n\n    @mddoc\n    def hstack(\n        items: list,\n        justify: str = \"start\",\n        align: str = \"start\",\n        wrap: bool = False,\n        gap: float = 0.25,\n        widths: Optional[Union[str, list]] = None,\n    ) -> Html:\n        style = {\"display\": \"flex\", \"flex-direction\": \"row\"}\n        if justify == \"start\":\n            style[\"justify-content\"] = \"flex-start\"\n        elif justify == \"center\":\n            style[\"justify-content\"] = \"center\"\n        elif justify == \"end\":\n            style[\"justify-content\"] = \"flex-end\"\n        elif justify == \"space-between\":\n            style[\"justify-content\"] = \"space-between\"\n        elif justify == \"space-around\":\n            style[\"justify-content\"] = \"space-around\"\n        else:\n            raise ValueError(f\"Invalid justify value: {justify}\")\n    \n        if align == \"start\":\n            style[\"align-items\"] = \"flex-start\"\n        elif align == \"center\":\n            style[\"align-items\"] = \"center\"\n        elif align == \"end\":\n            style[\"align-items\"] = \"flex-end\"\n        elif align == \"stretch\":\n            style[\"align-items\"] = \"stretch\"\n        else:\n            raise ValueError(f\"Invalid align value: {align}\")\n    \n        if wrap:\n            style[\"flex-wrap\"] = \"wrap\"\n        else:\n            style[\"flex-wrap\"] = \"nowrap\"\n    \n        style[\"gap\"] = f\"{gap}rem\"\n    \n        if widths == \"equal\":\n            style[\"flex\"] = \"1\"\n        elif isinstance(widths, list):\n            if len(widths) != len(items):\n                raise ValueError(\"Length of widths must match length of items\")\n            for i, width in enumerate(widths):\n                items[i] = div(items[i], style={\"flex\": str(width)})\n        elif widths is not None:\n            raise ValueError(\"Invalid widths value\")\n    \n>       return div(items, style=style)\nE       NameError: name 'div' is not defined\n\nmarimo/_plugins/stateless/flex.py:180: NameError\n=========================== short test summary info ============================\nFAILED tests/_plugins/stateless/test_flex.py::test_hstack - NameError: name '...\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_plugins/stateless/status/_progress.py-update_progress": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/stateless/status/test_progress.py FFF                     [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_update_progress _____________________________\n\nmock_flush = <MagicMock name='flush' id='139751910152448'>\n\n    @patch(\"marimo._runtime.output._output.flush\")\n    def test_update_progress(mock_flush: Any) -> None:\n        progress = _Progress(\n            title=\"Test\",\n            subtitle=\"Running\",\n            total=10000000,\n            show_rate=True,\n            show_eta=True,\n        )\n        # sleep 100ms\n        time.sleep(0.1)\n>       progress.update_progress(\n            increment=10, title=\"Updated\", subtitle=\"Still Running\"\n        )\n\ntests/_plugins/stateless/status/test_progress.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = _Progress(), increment = 10, title = 'Updated'\nsubtitle = 'Still Running'\n\n    def update_progress(self, increment=1, title=None, subtitle=None):\n>       self.value += increment\nE       AttributeError: '_Progress' object has no attribute 'value'\n\nmarimo/_plugins/stateless/status/_progress.py:55: AttributeError\n_________________________ test_update_progress_no_args _________________________\n\n    @patch(\"marimo._runtime.output._output.flush\")\n    def test_update_progress_no_args(mock_flush: Any) -> None:\n        del mock_flush\n        progress = _Progress(\n            title=\"Test\",\n            subtitle=\"Running\",\n            total=100,\n            show_rate=False,\n            show_eta=False,\n        )\n        # sleep 100ms\n        time.sleep(0.1)\n>       progress.update_progress()\n\ntests/_plugins/stateless/status/test_progress.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = _Progress(), increment = 1, title = None, subtitle = None\n\n    def update_progress(self, increment=1, title=None, subtitle=None):\n>       self.value += increment\nE       AttributeError: '_Progress' object has no attribute 'value'\n\nmarimo/_plugins/stateless/status/_progress.py:55: AttributeError\n_________________________ test_update_progress_closed __________________________\n\nmock_flush = <MagicMock name='flush' id='139751910152448'>\n\n    @patch(\"marimo._runtime.output._output.flush\")\n    def test_update_progress_closed(mock_flush: Any) -> None:\n        progress = _Progress(\n            title=\"Test\",\n            subtitle=\"Running\",\n            total=100,\n            show_rate=True,\n            show_eta=True,\n        )\n        progress.close()\n        assert progress.closed is True\n        with pytest.raises(RuntimeError):\n>           progress.update_progress()\n\ntests/_plugins/stateless/status/test_progress.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = _Progress(), increment = 1, title = None, subtitle = None\n\n    def update_progress(self, increment=1, title=None, subtitle=None):\n>       self.value += increment\nE       AttributeError: '_Progress' object has no attribute 'value'\n\nmarimo/_plugins/stateless/status/_progress.py:55: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/stateless/status/test_progress.py::test_update_progress\nFAILED tests/_plugins/stateless/status/test_progress.py::test_update_progress_no_args\nFAILED tests/_plugins/stateless/status/test_progress.py::test_update_progress_closed\n============================== 3 failed in 0.27s ===============================\n\n"], "marimo-marimo/_plugins/core/web_component.py-build_ui_plugin": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/core/test_web_component.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_args_escaped _______________________________\n\n    def test_args_escaped() -> None:\n        initial_value = \"'ello&\"\n>       html = build_ui_plugin(\n            \"tag-name\", initial_value, label=None, args={\"text\": \"a & b\"}\n        )\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:16: TypeError\n___________________________ test_initial_value_parse ___________________________\n\n    def test_initial_value_parse() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=None, args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:32: TypeError\n____________________________ test_label_md_compiled ____________________________\n\n    def test_label_md_compiled() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=\"$x$\", args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:40: TypeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_args_escaped - TypeErr...\nFAILED tests/_plugins/core/test_web_component.py::test_initial_value_parse - ...\nFAILED tests/_plugins/core/test_web_component.py::test_label_md_compiled - Ty...\n============================== 3 failed in 0.06s ===============================\n\n"], "marimo-marimo/_output/formatting.py-as_html": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatting.py\", line 216\nE       from typing import Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "marimo-marimo/_output/md.py-md": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_plugins/core/test_web_component.py F                              [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_embed_dollar_sign_in_md _________________________\n\n    def test_embed_dollar_sign_in_md() -> None:\n>       markdown = md(as_html([\"$\", \"$\"]).text)\n\ntests/_plugins/core/test_web_component.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = \"<marimo-json-output data-json-data='[&quot;text/plain:&#92;&quot;&#36;&#92;&quot;&quot;, &quot;text/plain:&#92;&quot;&#36;&#92;&quot;&quot;]'></marimo-json-output>\"\n\n    @mddoc\n    def md(text: str) -> Html:\n>       return Html(marimo.markdown(text))\nE       NameError: name 'marimo' is not defined\n\nmarimo/_output/md.py:78: NameError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_embed_dollar_sign_in_md\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_output/formatters/formatters.py-register_formatters": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:33: in <module>\n    register_formatters()\nmarimo/_output/formatters/formatters.py:63: in register_formatters\n    original_import = builtins.__import__\nE   NameError: name 'builtins' is not defined\n"], "marimo-marimo/_data/series.py-get_category_series_info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_data/test_series.py ss                                            [100%]\n\n=========================== short test summary info ============================\nSKIPPED [2] tests/_data/test_series.py:58: optional dependencies not installed\n============================== 2 skipped in 0.01s ==============================\n\n"], "marimo-marimo/_data/preview_column.py-get_column_preview": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_data/test_preview_column.py s                                     [100%]\n\n=========================== short test summary info ============================\nSKIPPED [1] tests/_data/test_preview_column.py:20: optional dependencies not installed\n============================== 1 skipped in 0.01s ==============================\n\n"], "marimo-marimo/_server/sessions.py-start_file_watcher": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/file_manager.py-save_app_config": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_stdin": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_operation": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-get_cell_console_outputs": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_runtime/dataflow.py-register_cell": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_runtime/packages/test_module_registry.py ...                      [100%]\n\n============================== 3 passed in 0.03s ===============================\n\n"], "marimo-marimo/_runtime/validate_graph.py-check_for_errors": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/_runtime/test_validate_graph.py FFFFFFF                            [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cycle_and_multiple_def __________________________\n\n    def test_cycle_and_multiple_def() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x, z = y, 0\"))\n        graph.register_cell(\"1\", parse_cell(\"y, z = x, 0\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-681142548510487573, code='x, z = y, 0', mod=<ast.Module object at 0x7f2cb20679...'z': {'1', '0'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f2cb1f042c0>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n________________________ test_multiple_definition_error ________________________\n\n    def test_multiple_definition_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-72631419063268046, code='x = 0', mod=<ast.Module object at 0x7f2cb1eea200>, de...{'1'}, '1': {'0'}}, definitions={'x': {'1', '0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f2cb1fc4340>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n__________________________ test_delete_nonlocal_error __________________________\n\n    def test_delete_nonlocal_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"del x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-72631419063268046, code='x = 0', mod=<ast.Module object at 0x7f2cb1fcb940>, de...'0': set(), '1': set()}, definitions={'x': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f2cb1fcf7c0>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n_________________ test_overlapping_multiple_definition_errors __________________\n\n    def test_overlapping_multiple_definition_errors() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x, y = 1, 2\"))\n        graph.register_cell(\"2\", parse_cell(\"y, z = 3, 4\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-72631419063268046, code='x = 0', mod=<ast.Module object at 0x7f2cb2084bb0>, de...ns={'x': {'1', '0'}, 'y': {'2', '1'}, 'z': {'2'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f2cb1de5300>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n_____________________________ test_two_node_cycle ______________________________\n\n    def test_two_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=4856882158192386795, code='x = y', mod=<ast.Module object at 0x7f2cb1fa77f0>, d...ons={'x': {'0'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f2cb20bd4c0>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n____________________________ test_three_node_cycle _____________________________\n\n    def test_three_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = z\"))\n        graph.register_cell(\"2\", parse_cell(\"z = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=4856882158192386795, code='x = y', mod=<ast.Module object at 0x7f2cb20860e0>, d...1'}, 'z': {'2'}}, cycles={(('0', '2'), ('2', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f2cb29f52c0>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n____________________ test_underscore_variables_are_private _____________________\n\n    def test_underscore_variables_are_private() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"_x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"_x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=5931393173151641146, code='_x = 0', mod=<ast.Module object at 0x7f2cb1fa78e0>, ...siblings={'0': set(), '1': set()}, definitions={}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f2cb1de6140>)\n\n    def check_for_errors(graph):\n        errors = {}\n        for cell in graph.cells:\n            # Check for missing required fields\n>           if not cell.get('id'):\nE           AttributeError: 'str' object has no attribute 'get'\n\nmarimo/_runtime/validate_graph.py:80: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/test_validate_graph.py::test_cycle_and_multiple_def - A...\nFAILED tests/_runtime/test_validate_graph.py::test_multiple_definition_error\nFAILED tests/_runtime/test_validate_graph.py::test_delete_nonlocal_error - At...\nFAILED tests/_runtime/test_validate_graph.py::test_overlapping_multiple_definition_errors\nFAILED tests/_runtime/test_validate_graph.py::test_two_node_cycle - Attribute...\nFAILED tests/_runtime/test_validate_graph.py::test_three_node_cycle - Attribu...\nFAILED tests/_runtime/test_validate_graph.py::test_underscore_variables_are_private\n============================== 7 failed in 0.08s ===============================\n\n"], "marimo-marimo/_runtime/runtime.py-_maybe_register_cell": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_runtime/reload/test_module_watcher.py FF                          [100%]\n\n=================================== FAILURES ===================================\n______________________ test_reload_with_modified_cell[k] _______________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2499/test_reload_with_modified_cell0')\npy_modname = 'ugmhaidwofrykljxvtpc'\nexecution_kernel = <marimo._runtime.runtime.Kernel object at 0x7fe4fa63a410>\nexec_req = <tests.conftest.ExecReqProvider object at 0x7fe4fa639b10>\n\n    async def test_reload_with_modified_cell(\n        tmp_path: pathlib.Path,\n        py_modname: str,\n        execution_kernel: Kernel,\n        exec_req: ExecReqProvider,\n    ):\n        k = execution_kernel\n        sys.path.append(str(tmp_path))\n        py_file = tmp_path / pathlib.Path(py_modname + \".py\")\n        py_file.write_text(\n            textwrap.dedent(\n                \"\"\"\n                def foo():\n                    return 1\n                \"\"\"\n            )\n        )\n    \n        config = copy.deepcopy(DEFAULT_CONFIG)\n        config[\"runtime\"][\"auto_reload\"] = \"lazy\"\n        k.set_user_config(SetUserConfigRequest(config=config))\n>       await k.run(\n            [\n                er_1 := exec_req.get(f\"from {py_modname} import foo\"),\n                er_2 := exec_req.get(\"x = foo()\"),\n                er_3 := exec_req.get(\"pass\"),\n            ]\n        )\n\ntests/_runtime/reload/test_module_watcher.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/runtime.py:1023: in run\n    self.mutate_graph(execution_requests, deletion_requests=[])\nmarimo/_runtime/runtime.py:732: in mutate_graph\n    old_children, error = self._maybe_register_cell(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._runtime.runtime.Kernel object at 0x7fe4fa63a410>\ncell_id = 'Hbol', code = 'from ugmhaidwofrykljxvtpc import foo'\n\n    def _maybe_register_cell(self, cell_id: str, code: str) -> Tuple[Set[str], Optional[Error]]:\n>       if cell_id in self._cells:\nE       AttributeError: 'Kernel' object has no attribute '_cells'\n\nmarimo/_runtime/runtime.py:574: AttributeError\n________________ test_reload_with_modified_cell[strict_kernel] _________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2499/test_reload_with_modified_cell1')\npy_modname = 'dmoftcbaqzrjhglvxyus'\nexecution_kernel = <marimo._runtime.runtime.Kernel object at 0x7fe4fa5f03a0>\nexec_req = <tests.conftest.ExecReqProvider object at 0x7fe4fa5f31c0>\n\n    async def test_reload_with_modified_cell(\n        tmp_path: pathlib.Path,\n        py_modname: str,\n        execution_kernel: Kernel,\n        exec_req: ExecReqProvider,\n    ):\n        k = execution_kernel\n        sys.path.append(str(tmp_path))\n        py_file = tmp_path / pathlib.Path(py_modname + \".py\")\n        py_file.write_text(\n            textwrap.dedent(\n                \"\"\"\n                def foo():\n                    return 1\n                \"\"\"\n            )\n        )\n    \n        config = copy.deepcopy(DEFAULT_CONFIG)\n        config[\"runtime\"][\"auto_reload\"] = \"lazy\"\n        k.set_user_config(SetUserConfigRequest(config=config))\n>       await k.run(\n            [\n                er_1 := exec_req.get(f\"from {py_modname} import foo\"),\n                er_2 := exec_req.get(\"x = foo()\"),\n                er_3 := exec_req.get(\"pass\"),\n            ]\n        )\n\ntests/_runtime/reload/test_module_watcher.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/runtime.py:1023: in run\n    self.mutate_graph(execution_requests, deletion_requests=[])\nmarimo/_runtime/runtime.py:732: in mutate_graph\n    old_children, error = self._maybe_register_cell(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._runtime.runtime.Kernel object at 0x7fe4fa5f03a0>\ncell_id = 'Hbol', code = 'from dmoftcbaqzrjhglvxyus import foo'\n\n    def _maybe_register_cell(self, cell_id: str, code: str) -> Tuple[Set[str], Optional[Error]]:\n>       if cell_id in self._cells:\nE       AttributeError: 'Kernel' object has no attribute '_cells'\n\nmarimo/_runtime/runtime.py:574: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/reload/test_module_watcher.py::test_reload_with_modified_cell[k]\nFAILED tests/_runtime/reload/test_module_watcher.py::test_reload_with_modified_cell[strict_kernel]\n============================== 2 failed in 0.15s ===============================\n\n"], "marimo-marimo/_runtime/runtime.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 86 items\n\n============================ no tests ran in 0.06s =============================\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_code_with_nbsp\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_empty_iteration_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_pickle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_break_cycle_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_processpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_state_invalidated\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wont_execute_bad_ref\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_stop\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_freeze\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future_complex\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_consecutive\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_fileno\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_ref_local_var_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_with_cell_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_make_local_with_global_keywd\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_enable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_delete_nonlocal_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_var_not_local_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_run_matplotlib_figures_closed\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_basic\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_tree\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_gather\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_pickle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_altair_chart.py::test_altair_settings_when_set\n(no match in any of [<Module test_altair_chart.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_init_not_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_ok_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_interruption\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_triangle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_non_ui_elements_not_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_scope_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_running_in_notebook\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_config_before_registering_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_input_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readlines_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_threadpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_nested_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_add_mock_package\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_private\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list_mock_packages\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_value\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_output_cleared_on_rerun\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_dunder_not_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_file_path\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_instances\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_await_allowed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_marimo_mpl_backend_not_used\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cycle_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_default_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_zero_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wait_for\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_exception\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_referrers_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_set_index_urls\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_install\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readline_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_available\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_local_var_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_with_state\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_multiple_ui_elements\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_async\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_new_errors_update_old_ones\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_locals_dont_leak\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_bound_child\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_delete_nonlocal_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_new_multiple_definition_does_not_invalidate\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_simultaneous_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_unparsable_cell\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_defs_with_no_definers_are_removed_from_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_uninstall\n(no match in any of [<Module test_patches.py>])\n\n"], "marimo-marimo/_runtime/packages/utils.py-is_python_isolated": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_package_utils.py F                          [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_python_isolated ____________________________\n\n    @pytest.mark.skipif(sys.platform == \"win32\", reason=\"Failing on Windows CI\")\n    def test_is_python_isolated() -> None:\n        # tests should always be run in an isolated (non-system) environment;\n        # we only run them in a virtualenv, venv, or conda env ...\n>       assert is_python_isolated()\nE       assert False\nE        +  where False = is_python_isolated()\n\ntests/_runtime/packages/test_package_utils.py:13: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_package_utils.py::test_is_python_isolated\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_runtime/packages/module_registry.py-missing_modules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_module_registry.py .                        [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n"], "TaskWeaver-taskweaver/misc/example.py-load_examples": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_example.py F                                       [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_load_examples ______________________________\n\n    def test_load_examples():\n        example_path = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"data\",\n            \"examples\",\n            \"planner_examples\",\n        )\n>       examples = load_examples(example_path, {\"Planner\", \"User\", \"CodeInterpreter\"})\n\ntests/unit_tests/test_example.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfolder = '/root/repos/py_data/TaskWeaver/tests/unit_tests/data/examples/planner_examples'\nrole_set = {'CodeInterpreter', 'Planner', 'User'}\n\n    def load_examples(folder, role_set):\n        examples = []\n>       for file_name in os.listdir(folder):\nE       NameError: name 'os' is not defined\n\ntaskweaver/misc/example.py:10: NameError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_example.py::test_load_examples - NameError: name...\n============================== 1 failed in 0.06s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-add_selected_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n>       selected_plugin_pool.add_selected_plugins(plugins[:1])\n\ntests/unit_tests/test_plugin_pool.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <taskweaver.code_interpreter.plugin_selection.SelectedPluginPool object at 0x7f2b35704a90>\nexternal_plugin_pool = [PluginEntry(name='anomaly_detection', plugin_only=False, impl='anomaly_detection', spec=PluginSpec(name='anomaly_dete...kWeaver/tests/unit_tests/data/plugins/.meta/meta_anomaly_detection.yaml', md5hash='8612e6dc922ea31a60bdf8da3eb8ad1e'))]\n\n    def add_selected_plugins(self, external_plugin_pool: List[PluginEntry]):\n        \"\"\"\n        Add selected plugins to the pool\n        \"\"\"\n        for plugin in external_plugin_pool:\n>           if plugin.selected:\nE           AttributeError: 'PluginEntry' object has no attribute 'selected'\n\ntaskweaver/code_interpreter/plugin_selection.py:21: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.18s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-filter_unused_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[1:3])\n        assert len(selected_plugin_pool) == 3\n    \n        selected_plugin_pool.add_selected_plugins(plugins[2:4])\n        assert len(selected_plugin_pool) == 4\n    \n>       selected_plugin_pool.filter_unused_plugins(\"xcxcxc anomaly_detection() ababab\")\n\ntests/unit_tests/test_plugin_pool.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <taskweaver.code_interpreter.plugin_selection.SelectedPluginPool object at 0x7f752dfa42e0>\ncode = 'xcxcxc anomaly_detection() ababab'\n\n    def filter_unused_plugins(self, code: str):\n        used_plugins = set()\n        for line in code.split(\"\\n\"):\n            if \"from langchain.agents import\" in line:\n                used_plugins.add(line.split(\"import\")[1].strip())\n            elif \"from langchain.chains import\" in line:\n                used_plugins.add(line.split(\"import\")[1].strip())\n            elif \"from langchain.llms import\" in line:\n                used_plugins.add(line.split(\"import\")[1].strip())\n            elif \"from langchain.prompts import\" in line:\n                used_plugins.add(line.split(\"import\")[1].strip())\n    \n        filtered_code = []\n        for line in code.split(\"\\n\"):\n>           if not any(plugin in line for plugin in self.plugins if plugin not in used_plugins):\nE           AttributeError: 'SelectedPluginPool' object has no attribute 'plugins'\n\ntaskweaver/code_interpreter/plugin_selection.py:39: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.18s ===============================\n\n"], "TaskWeaver-taskweaver/module/prompt_util.py-remove_all_delimiters": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_prompt_util.py F                                   [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_handle_delimiter _____________________________\n\n    def test_handle_delimiter():\n        from taskweaver.module.prompt_util import PromptUtil\n    \n        text = \"This is a test sentence.\"\n        delimiter = (\"{{DELIMITER_START_TEMPORAL}}\", \"{{DELIMITER_END_TEMPORAL}}\")\n        wrapped_text = PromptUtil.wrap_text_with_delimiter(text, delimiter)\n        assert wrapped_text == \"{{DELIMITER_START_TEMPORAL}}This is a test sentence.{{DELIMITER_END_TEMPORAL}}\"\n    \n        assert text == PromptUtil.remove_delimiter(wrapped_text, delimiter)\n        assert PromptUtil.remove_parts(wrapped_text, delimiter) == \"\"\n    \n        text = (\n            \"This is a test sentence. \"\n            \"{{DELIMITER_START_TEMPORAL}}This is a temporal part.{{DELIMITER_END_TEMPORAL}} \"\n            \"This is another test sentence.\"\n        )\n        assert PromptUtil.remove_parts(text, delimiter) == \"This is a test sentence.  This is another test sentence.\"\n        assert PromptUtil.remove_delimiter(text, delimiter) == (\n            \"This is a test sentence. \" \"This is a temporal part. \" \"This is another test sentence.\"\n        )\n    \n        text = \"This is a test sentence.\"\n        wrapped_text = PromptUtil.wrap_text_with_delimiter(text, PromptUtil.DELIMITER_TEMPORAL)\n        assert wrapped_text == \"{{DELIMITER_START_TEMPORAL}}This is a test sentence.{{DELIMITER_END_TEMPORAL}}\"\n>       assert text == PromptUtil.remove_all_delimiters(wrapped_text)\nE       AssertionError: assert 'This is a test sentence.' == 'DELIMITERSTA...ERENDTEMPORAL'\nE         \nE         - DELIMITERSTARTTEMPORALThis is a test sentenceDELIMITERENDTEMPORAL\nE         + This is a test sentence.\n\ntests/unit_tests/test_prompt_util.py:25: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_prompt_util.py::test_handle_delimiter - Assertio...\n============================== 1 failed in 0.05s ===============================\n\n"], "reflex-reflex/app.py-_enable_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_app_state_manager ____________________________\n\n    def test_app_state_manager():\n        app = App()\n        with pytest.raises(ValueError):\n            app.state_manager\n        app._enable_state()\n>       assert app.state_manager is not None\n\ntests/test_app.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    @property\n    def state_manager(self) -> StateManager:\n        \"\"\"Get the state manager.\n    \n        Returns:\n            The initialized state manager.\n    \n        Raises:\n            ValueError: if the state has not been initialized.\n        \"\"\"\n        if self._state_manager is None:\n>           raise ValueError(\"The state manager has not been initialized.\")\nE           ValueError: The state manager has not been initialized.\n\nreflex/app.py:340: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_state_manager - ValueError: The state mana...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n"], "reflex-reflex/app.py-_add_optional_endpoints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_app_with_optional_endpoints _______________________\n\n    def test_app_with_optional_endpoints():\n        from reflex.components.core.upload import Upload\n    \n        app = App()\n        Upload.is_used = True\n>       app._add_optional_endpoints()\n\ntests/test_app.py:1431: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _add_optional_endpoints(self):\n        \"\"\"Add optional api endpoints (_upload).\"\"\"\n>       @self.app.post(\"/_upload\")\nE       AttributeError: 'App' object has no attribute 'app'. Did you mean: 'api'?\n\nreflex/app.py:305: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_with_optional_endpoints - AttributeError: ...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n"], "reflex-reflex/app.py-add_page": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 24 items\n\ntests/test_app.py FFF......FFFFFFFFFFFFFFF                               [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_page_default_route __________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7ff33121edd0>\nabout_page = <function about_page.<locals>.about at 0x7ff33121f370>\n\n    def test_add_page_default_route(app: App, index_page, about_page):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            about_page: The about page.\n        \"\"\"\n        assert app.pages == {}\n        app.add_page(index_page)\n>       assert app.pages.keys() == {\"index\"}\nE       AssertionError: assert dict_keys(['/index']) == {'index'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:238: AssertionError\n_______________________ test_add_page_invalid_api_route ________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7ff330f3f1c0>\n\n    def test_add_page_invalid_api_route(app: App, index_page):\n        \"\"\"Test adding a page with an invalid route to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n        \"\"\"\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:300: Failed\n_______________________ test_add_page_set_route_dynamic ________________________\n\nindex_page = <function index_page.<locals>.index at 0x7ff3311b8550>\nwindows_platform = False\n\n    def test_add_page_set_route_dynamic(index_page, windows_platform: bool):\n        \"\"\"Test adding a page with dynamic route variable to an app.\n    \n        Args:\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        app = App(state=EmptyState)\n        assert app.state is not None\n        route = \"/test/[dynamic]\"\n        if windows_platform:\n            route.lstrip(\"/\").replace(\"/\", \"\\\\\")\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {\"test/[dynamic]\"}\nE       AssertionError: assert dict_keys(['/test/[dynamic]']) == {'test/[dynamic]'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:271: AssertionError\n____________ test_dynamic_route_var_route_change_completed_on_load _____________\n\nindex_page = <function index_page.<locals>.index at 0x7ff330f99240>\nwindows_platform = False, token = 'ea8b658b-3a34-437c-9322-6751d431e4c4'\napp_module_mock = <Mock id='140682475311728'>\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7ff330f795d0>\n\n    @pytest.mark.asyncio\n    async def test_dynamic_route_var_route_change_completed_on_load(\n        index_page,\n        windows_platform: bool,\n        token: str,\n        app_module_mock: unittest.mock.Mock,\n        mocker,\n    ):\n        \"\"\"Create app with dynamic route var, and simulate navigation.\n    \n        on_load should fire, allowing any additional vars to be updated before the\n        initial page hydrate.\n    \n        Args:\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n            token: a Token.\n            app_module_mock: Mocked app module.\n            mocker: pytest mocker object.\n        \"\"\"\n        arg_name = \"dynamic\"\n        route = f\"/test/[{arg_name}]\"\n        if windows_platform:\n            route.lstrip(\"/\").replace(\"/\", \"\\\\\")\n        app = app_module_mock.app = App(state=DynamicState)\n        assert app.state is not None\n        assert arg_name not in app.state.vars\n        app.add_page(index_page, route=route, on_load=DynamicState.on_load)  # type: ignore\n>       assert arg_name in app.state.vars\nE       AssertionError: assert 'dynamic' in {'comp_dynamic': ComputedVar(_cache=False, _backend=False, _initial_value=Unset, _static_deps=set(), _auto_deps=True, ...pile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[])), ...}\nE        +  where {'comp_dynamic': ComputedVar(_cache=False, _backend=False, _initial_value=Unset, _static_deps=set(), _auto_deps=True, ...pile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[])), ...} = <class 'tests.test_app.DynamicState'>.vars\nE        +    where <class 'tests.test_app.DynamicState'> = <App state=DynamicState>.state\n\ntests/test_app.py:995: AssertionError\n____________________ test_app_with_transpile_packages[True] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2500/test_app_with_transpile_packag0/app/.web'))\nexport = True\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n>       app._compile(export=export)\n\n/root/repos/py_data/reflex/tests/test_app.py:1523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = True\n\n    def _compile(self, export: bool = False):\n        \"\"\"Compile the app and output it to the pages folder.\n    \n        Args:\n            export: Whether to compile the app for export.\n    \n        Raises:\n            ReflexRuntimeError: When any page uses state, but no rx.State subclass is defined.\n        \"\"\"\n        from reflex.utils.exceptions import ReflexRuntimeError\n    \n        def get_compilation_time() -> str:\n            return str(datetime.now().time()).split(\".\")[0]\n    \n        # Render a default 404 page if the user didn't supply one\n        if constants.Page404.SLUG not in self.pages:\n            self.add_custom_404_page()\n    \n        # Add the optional endpoints (_upload)\n        self._add_optional_endpoints()\n    \n        if not self._should_compile():\n            return\n    \n        self._validate_var_dependencies()\n        self._setup_overlay_component()\n    \n        # Create a progress bar.\n        progress = Progress(\n            *Progress.get_default_columns()[:-1],\n            MofNCompleteColumn(),\n            TimeElapsedColumn(),\n        )\n    \n        # try to be somewhat accurate - but still not 100%\n        adhoc_steps_without_executor = 6\n        fixed_pages_within_executor = 5\n        progress.start()\n        task = progress.add_task(\n            f\"[{get_compilation_time()}] Compiling:\",\n            total=len(self.pages)\n            + fixed_pages_within_executor\n            + adhoc_steps_without_executor,\n        )\n    \n        # Get the env mode.\n        config = get_config()\n    \n        # Store the compile results.\n        compile_results = []\n    \n        # Add the app wrappers.\n        app_wrappers: Dict[tuple[int, str], Component] = {\n            # Default app wrap component renders {children}\n            (0, \"AppWrap\"): AppWrap.create()\n        }\n        if self.theme is not None:\n            # If a theme component was provided, wrap the app with it\n            app_wrappers[(20, \"Theme\")] = self.theme\n    \n        progress.advance(task)\n    \n        # Fix up the style.\n        self.style = evaluate_style_namespaces(self.style)\n    \n        # Track imports and custom components found.\n        all_imports = {}\n        custom_components = set()\n    \n        for _route, component in self.pages.items():\n            # Merge the component style with the app style.\n>           component._add_style_recursive(self.style, self.theme)\nE           AttributeError: 'dict' object has no attribute '_add_style_recursive'\n\n/root/repos/py_data/reflex/reflex/app.py:721: AttributeError\n___________________ test_app_with_transpile_packages[False] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2500/test_app_with_transpile_packag1/app/.web'))\nexport = False\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n>       app._compile(export=export)\n\n/root/repos/py_data/reflex/tests/test_app.py:1523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/app.py:687: in _compile\n    progress.start()\n/usr/local/lib/python3.10/site-packages/rich/progress.py:1159: in start\n    self.live.start(refresh=True)\n/usr/local/lib/python3.10/site-packages/rich/live.py:113: in start\n    self.console.set_live(self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <console width=80 None>, live = <rich.live.Live object at 0x7ff330e519f0>\n\n    def set_live(self, live: \"Live\") -> None:\n        \"\"\"Set Live instance. Used by Live context manager.\n    \n        Args:\n            live (Live): Live instance using this Console.\n    \n        Raises:\n            errors.LiveError: If this Console has a Live context currently active.\n        \"\"\"\n        with self._lock:\n            if self._live is not None:\n>               raise errors.LiveError(\"Only one live display may be active at once\")\nE               rich.errors.LiveError: Only one live display may be active at once\n\n/usr/local/lib/python3.10/site-packages/rich/console.py:836: LiveError\n____________________________ test_app_wrap_priority ____________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2500/test_app_wrap_priority0/app/.web'))\n\n    def test_app_wrap_priority(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the app wrap components are wrapped in the correct order.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n    \n        class Fragment1(Component):\n            tag = \"Fragment1\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(99, \"Box\"): rx.chakra.box()}\n    \n        class Fragment2(Component):\n            tag = \"Fragment2\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(50, \"Text\"): rx.chakra.text()}\n    \n        class Fragment3(Component):\n            tag = \"Fragment3\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(10, \"Fragment2\"): Fragment2.create()}\n    \n        def page():\n            return Fragment1.create(Fragment3.create())\n    \n        app.add_page(page)\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/app.py:687: in _compile\n    progress.start()\n/usr/local/lib/python3.10/site-packages/rich/progress.py:1159: in start\n    self.live.start(refresh=True)\n/usr/local/lib/python3.10/site-packages/rich/live.py:113: in start\n    self.console.set_live(self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <console width=80 None>, live = <rich.live.Live object at 0x7ff3305e2d40>\n\n    def set_live(self, live: \"Live\") -> None:\n        \"\"\"Set Live instance. Used by Live context manager.\n    \n        Args:\n            live (Live): Live instance using this Console.\n    \n        Raises:\n            errors.LiveError: If this Console has a Live context currently active.\n        \"\"\"\n        with self._lock:\n            if self._live is not None:\n>               raise errors.LiveError(\"Only one live display may be active at once\")\nE               rich.errors.LiveError: Only one live display may be active at once\n\n/usr/local/lib/python3.10/site-packages/rich/console.py:836: LiveError\n___________________________ test_add_page_set_route ____________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7ff33038a710>\nwindows_platform = False\n\n    def test_add_page_set_route(app: App, index_page, windows_platform: bool):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        route = \"test\" if windows_platform else \"/test\"\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {\"test\"}\nE       AssertionError: assert dict_keys(['/test']) == {'test'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:254: AssertionError\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7ff37d6d4700>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n____________________ test_overlay_component[None-None-None] ____________________\n\nstate = None, overlay_component = None, exp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n>       app._setup_overlay_component()\n\ntests/test_app.py:1247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:605: in _setup_overlay_component\n    self.pages[k] = self._add_overlay_to_component(component)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = {'component': {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\":...\"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}, 'description': None, 'image': None, 'meta': None, ...}\n\n    def _add_overlay_to_component(self, component: Component) -> Component:\n        if self.overlay_component is None:\n            return component\n    \n>       children = component.children\nE       AttributeError: 'dict' object has no attribute 'children'\n\nreflex/app.py:589: AttributeError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7ff37d6d4700>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n>       app._setup_overlay_component()\n\ntests/test_app.py:1247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:605: in _setup_overlay_component\n    self.pages[k] = self._add_overlay_to_component(component)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\ncomponent = {'component': {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\":...\"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}, 'description': None, 'image': None, 'meta': None, ...}\n\n    def _add_overlay_to_component(self, component: Component) -> Component:\n        if self.overlay_component is None:\n            return component\n    \n>       children = component.children\nE       AttributeError: 'dict' object has no attribute 'children'\n\nreflex/app.py:589: AttributeError\n___________________ test_overlay_component[State-None-None] ____________________\n\nstate = <class 'reflex.state.State'>, overlay_component = None\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n>       app._setup_overlay_component()\n\ntests/test_app.py:1247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:605: in _setup_overlay_component\n    self.pages[k] = self._add_overlay_to_component(component)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\ncomponent = {'component': {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\":...\"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}, 'description': None, 'image': None, 'meta': None, ...}\n\n    def _add_overlay_to_component(self, component: Component) -> Component:\n        if self.overlay_component is None:\n            return component\n    \n>       children = component.children\nE       AttributeError: 'dict' object has no attribute 'children'\n\nreflex/app.py:589: AttributeError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7ff3311bba30>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n>       app._setup_overlay_component()\n\ntests/test_app.py:1247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:605: in _setup_overlay_component\n    self.pages[k] = self._add_overlay_to_component(component)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\ncomponent = {'component': {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\":...\"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}, 'description': None, 'image': None, 'meta': None, ...}\n\n    def _add_overlay_to_component(self, component: Component) -> Component:\n        if self.overlay_component is None:\n            return component\n    \n>       children = component.children\nE       AttributeError: 'dict' object has no attribute 'children'\n\nreflex/app.py:589: AttributeError\n___________________ test_add_page_component_returning_tuple ____________________\n\n    def test_add_page_component_returning_tuple():\n        \"\"\"Test that a component or render method returning a\n        tuple is unpacked in a Fragment.\n        \"\"\"\n        app = App()\n    \n        def index():\n            return rx.text(\"first\"), rx.text(\"second\")\n    \n        def page2():\n            return (rx.text(\"third\"),)\n    \n        app.add_page(index)  # type: ignore\n        app.add_page(page2)  # type: ignore\n    \n>       assert isinstance((fragment_wrapper := app.pages[\"index\"].children[0]), Fragment)\nE       KeyError: 'index'\n\ntests/test_app.py:1478: KeyError\n________________________ test_add_page_set_route_nested ________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7ff330f3f7f0>\nwindows_platform = False\n\n    def test_add_page_set_route_nested(app: App, index_page, windows_platform: bool):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        route = \"test\\\\nested\" if windows_platform else \"/test/nested\"\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {route.strip(os.path.sep)}\nE       AssertionError: assert dict_keys(['/test/nested']) == {'test/nested'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:290: AssertionError\n_________________________ test_app_state_determination _________________________\n\n    def test_app_state_determination():\n        \"\"\"Test that the stateless status of an app is determined correctly.\"\"\"\n        a1 = App()\n        assert a1.state is None\n    \n        # No state, no router, no event handlers.\n        a1.add_page(rx.box(\"Index\"), route=\"/\")\n        assert a1.state is None\n    \n        # Add a page with `on_load` enables state.\n        a1.add_page(rx.box(\"About\"), route=\"/about\", on_load=rx.console_log(\"\"))\n>       assert a1.state is not None\nE       assert None is not None\nE        +  where None = <App state=None>.state\n\ntests/test_app.py:1376: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_add_page_default_route - AssertionError: asser...\nFAILED tests/test_app.py::test_add_page_invalid_api_route - Failed: DID NOT R...\nFAILED tests/test_app.py::test_add_page_set_route_dynamic - AssertionError: a...\nFAILED tests/test_app.py::test_dynamic_route_var_route_change_completed_on_load\nFAILED tests/test_app.py::test_app_with_transpile_packages[True] - AttributeE...\nFAILED tests/test_app.py::test_app_with_transpile_packages[False] - rich.erro...\nFAILED tests/test_app.py::test_app_wrap_priority - rich.errors.LiveError: Onl...\nFAILED tests/test_app.py::test_add_page_set_route - AssertionError: assert di...\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-None-None] - KeyError: ...\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-None-None] - KeyError:...\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - Attri...\nFAILED tests/test_app.py::test_add_page_component_returning_tuple - KeyError:...\nFAILED tests/test_app.py::test_add_page_set_route_nested - AssertionError: as...\nFAILED tests/test_app.py::test_app_state_determination - assert None is not None\n=================== 18 failed, 6 passed, 5 warnings in 0.70s ===================\n\n"], "reflex-reflex/app.py-_setup_overlay_component": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_app.py FFFFFFF                                                [100%]\n\n=================================== FAILURES ===================================\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7fe7bc638670>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n____________________ test_overlay_component[None-None-None] ____________________\n\nstate = None, overlay_component = None, exp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7fe7bc638670>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n___________________ test_overlay_component[State-None-None] ____________________\n\nstate = <class 'reflex.state.State'>, overlay_component = None\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7fe77013b9a0>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n>       if not self.use_state and self.overlay_component is None:\nE       AttributeError: 'App' object has no attribute 'use_state'. Did you mean: '_setup_state'?\n\nreflex/app.py:685: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-None-None] - AttributeE...\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-None-None] - Attribute...\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - Attri...\n======================== 7 failed, 5 warnings in 0.33s =========================\n\n"], "reflex-reflex/app.py-_compile": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_app.py FFFFFF                                                 [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_app_wrap_compile_theme __________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2501/test_app_wrap_compile_theme0/app/.web'))\n\n    def test_app_wrap_compile_theme(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the radix theme component wraps the app.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n        app.theme = rx.theme(accent_color=\"plum\")\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1289: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = False\n\n    def _compile(self, export: bool = False):\n        if not hasattr(self, \"State\"):\n            for page in self.pages.values():\n                if len(page.state) > 0:\n                    raise ReflexRuntimeError(\n                        \"At least one page uses state, but no rx.State subclass is defined. \"\n                        \"Please define a State class in your Reflex app to use state.\"\n                    )\n    \n>       output_dir = self.output_dir if not export else self.export_dir\nE       AttributeError: 'App' object has no attribute 'output_dir'\n\n/root/repos/py_data/reflex/reflex/app.py:743: AttributeError\n____________________ test_app_with_transpile_packages[True] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2501/test_app_with_transpile_packag0/app/.web'))\nexport = True\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n>       app._compile(export=export)\n\n/root/repos/py_data/reflex/tests/test_app.py:1523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = True\n\n    def _compile(self, export: bool = False):\n        if not hasattr(self, \"State\"):\n            for page in self.pages.values():\n>               if len(page.state) > 0:\nE               AttributeError: 'OverlayFragment' object has no attribute 'state'. Did you mean: 'State'?\n\n/root/repos/py_data/reflex/reflex/app.py:737: AttributeError\n___________________ test_app_with_transpile_packages[False] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2501/test_app_with_transpile_packag1/app/.web'))\nexport = False\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n>       app._compile(export=export)\n\n/root/repos/py_data/reflex/tests/test_app.py:1523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = False\n\n    def _compile(self, export: bool = False):\n        if not hasattr(self, \"State\"):\n            for page in self.pages.values():\n>               if len(page.state) > 0:\nE               AttributeError: 'OverlayFragment' object has no attribute 'state'. Did you mean: 'State'?\n\n/root/repos/py_data/reflex/reflex/app.py:737: AttributeError\n____________________________ test_app_wrap_priority ____________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2501/test_app_wrap_priority0/app/.web'))\n\n    def test_app_wrap_priority(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the app wrap components are wrapped in the correct order.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n    \n        class Fragment1(Component):\n            tag = \"Fragment1\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(99, \"Box\"): rx.chakra.box()}\n    \n        class Fragment2(Component):\n            tag = \"Fragment2\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(50, \"Text\"): rx.chakra.text()}\n    \n        class Fragment3(Component):\n            tag = \"Fragment3\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(10, \"Fragment2\"): Fragment2.create()}\n    \n        def page():\n            return Fragment1.create(Fragment3.create())\n    \n        app.add_page(page)\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>, export = False\n\n    def _compile(self, export: bool = False):\n        if not hasattr(self, \"State\"):\n            for page in self.pages.values():\n>               if len(page.state) > 0:\nE               AttributeError: 'OverlayFragment' object has no attribute 'state'. Did you mean: 'State'?\n\n/root/repos/py_data/reflex/reflex/app.py:737: AttributeError\n____________________ test_app_with_invalid_var_dependencies ____________________\n\ncompilable_app = (<App state=InvalidDepState>, PosixPath('/tmp/pytest-of-root/pytest-2501/test_app_with_invalid_var_depe0/app/.web'))\n\n    def test_app_with_invalid_var_dependencies(compilable_app: tuple[App, Path]):\n        app, _ = compilable_app\n    \n        class InvalidDepState(BaseState):\n            @computed_var(deps=[\"foolksjdf\"], cache=True)\n            def bar(self) -> str:\n                return \"bar\"\n    \n        app.state = InvalidDepState\n        with pytest.raises(exceptions.VarDependencyError):\n>           app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=InvalidDepState>, export = False\n\n    def _compile(self, export: bool = False):\n        if not hasattr(self, \"State\"):\n            for page in self.pages.values():\n                if len(page.state) > 0:\n                    raise ReflexRuntimeError(\n                        \"At least one page uses state, but no rx.State subclass is defined. \"\n                        \"Please define a State class in your Reflex app to use state.\"\n                    )\n    \n>       output_dir = self.output_dir if not export else self.export_dir\nE       AttributeError: 'App' object has no attribute 'output_dir'\n\n/root/repos/py_data/reflex/reflex/app.py:743: AttributeError\n_____________________ test_app_with_valid_var_dependencies _____________________\n\ncompilable_app = (<App state=ValidDepState>, PosixPath('/tmp/pytest-of-root/pytest-2501/test_app_with_valid_var_depend0/app/.web'))\n\n    def test_app_with_valid_var_dependencies(compilable_app: tuple[App, Path]):\n        app, _ = compilable_app\n    \n        class ValidDepState(BaseState):\n            base: int = 0\n            _backend: int = 0\n    \n            @computed_var(cache=True)\n            def foo(self) -> str:\n                return \"foo\"\n    \n            @computed_var(deps=[\"_backend\", \"base\", foo], cache=True)\n            def bar(self) -> str:\n                return \"bar\"\n    \n        app.state = ValidDepState\n>       app._compile()\n\n/root/repos/py_data/reflex/tests/test_app.py:1560: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=ValidDepState>, export = False\n\n    def _compile(self, export: bool = False):\n        if not hasattr(self, \"State\"):\n            for page in self.pages.values():\n                if len(page.state) > 0:\n                    raise ReflexRuntimeError(\n                        \"At least one page uses state, but no rx.State subclass is defined. \"\n                        \"Please define a State class in your Reflex app to use state.\"\n                    )\n    \n>       output_dir = self.output_dir if not export else self.export_dir\nE       AttributeError: 'App' object has no attribute 'output_dir'\n\n/root/repos/py_data/reflex/reflex/app.py:743: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_wrap_compile_theme - AttributeError: 'App'...\nFAILED tests/test_app.py::test_app_with_transpile_packages[True] - AttributeE...\nFAILED tests/test_app.py::test_app_with_transpile_packages[False] - Attribute...\nFAILED tests/test_app.py::test_app_wrap_priority - AttributeError: 'OverlayFr...\nFAILED tests/test_app.py::test_app_with_invalid_var_dependencies - AttributeE...\nFAILED tests/test_app.py::test_app_with_valid_var_dependencies - AttributeErr...\n======================== 6 failed, 5 warnings in 0.33s =========================\n\n"], "reflex-reflex/app.py-modify_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.24s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_waiter\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_blocker\n(no match in any of [<Module test_state.py>])\n\n"], "reflex-reflex/vars.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/meta.py:7: in <module>\n    from reflex.components.base.bare import Bare\nreflex/components/base/bare.py:13: in <module>\n    class Bare(Component):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/components/component.py:322: in __init_subclass__\n    field.default = Var.create(\nE   TypeError: Var.create() takes 1 positional argument but 2 positional arguments (and 1 keyword-only argument) were given\n"], "reflex-reflex/vars.py-create_safe": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:19: in <module>\n    from reflex.components.sonner.toast import Toaster, ToastProps\nreflex/components/sonner/__init__.py:3: in <module>\n    from .toast import toast\nreflex/components/sonner/toast.py:31: in <module>\n    toast_ref = Var.create_safe(\"refs['__toast']\", _var_is_string=False)\nE   TypeError: Var.create_safe() takes 1 positional argument but 2 positional arguments (and 1 keyword-only argument) were given\n"], "reflex-reflex/vars.py-foreach": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/core/test_foreach.py .                                  [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.06s =========================\n\n"], "reflex-reflex/vars.py-get_default_value": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:18: in <module>\n    from .states import (\ntests/states/__init__.py:7: in <module>\n    from .upload import (\ntests/states/upload.py:28: in <module>\n    class SubUploadState(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\nreflex/state.py:936: in _set_default_value\n    default_value = prop.get_default_value()\nreflex/vars.py:1860: in get_default_value\n    if self.type == \"dataframe\":\nreflex/vars.py:819: in __getattr__\n    raise VarAttributeError(\nE   reflex.utils.exceptions.VarAttributeError: The State var `base_state__sub_upload_state.img` has no attribute 'type' or may have been annotated wrongly.. Did you mean: '_type'?\n"], "reflex-reflex/state.py-get_skip_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py E                                                    [100%]\n\n==================================== ERRORS ====================================\n____________________ ERROR at setup of test_base_class_vars ____________________\n\n    @pytest.fixture\n    def test_state() -> TestState:\n        \"\"\"A state.\n    \n        Returns:\n            A test state.\n        \"\"\"\n>       return TestState()  # type: ignore\n\ntests/test_state.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:396: in __init__\n    self.substates[substate.get_name()] = substate(\nreflex/state.py:396: in __init__\n    self.substates[substate.get_name()] = substate(\nreflex/state.py:3082: in __setitem__\n    self._mark_dirty(super().__setitem__, args=(key, value))\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2952: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:3027: in __getattr__\n    if isinstance(value, self.__mutable_types__) and __name not in (\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'reflex.base.Base'>\ninstance = <FunctionWrapper at 0x7f6c86f09720 for builtin_function_or_method at 0x7f6c86eeebb0>\n\n    def __instancecheck__(self, instance: Any) -> bool:\n        \"\"\"\n        Avoid calling ABC _abc_subclasscheck unless we're pretty sure.\n    \n        See #3829 and python/cpython#92810\n        \"\"\"\n>       return hasattr(instance, '__fields__') and super().__instancecheck__(instance)\nE       RecursionError: maximum recursion depth exceeded while calling a Python object\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:304: RecursionError\n!!! Recursion error detected, but an error occurred locating the origin of recursion.\n  The following exception happened when comparing locals in the stack frame:\n    RecursionError: maximum recursion depth exceeded while calling a Python object\n  Displaying first and last 10 stack frames out of 1480.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_state.py::test_base_class_vars - RecursionError: maximum rec...\n========================= 5 warnings, 1 error in 0.70s =========================\n\n"], "reflex-reflex/state.py-add_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_state.py FF                                                   [ 66%]\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n________________________ test_add_var_default_handlers _________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    def test_add_var_default_handlers(test_state):\n        test_state.add_var(\"rand_int\", int, 10)\n>       assert \"set_rand_int\" in test_state.event_handlers\nE       AssertionError: assert 'set_rand_int' in {'do_something': EventHandler(event_actions={}, fn=<function TestState.do_something at 0x7fd2ad7d8820>, state_full_nam...: EventHandler(event_actions={}, fn=<function test_state.set_dt at 0x7fd2acf715a0>, state_full_name='test_state'), ...}\nE        +  where {'do_something': EventHandler(event_actions={}, fn=<function TestState.do_something at 0x7fd2ad7d8820>, state_full_nam...: EventHandler(event_actions={}, fn=<function test_state.set_dt at 0x7fd2acf715a0>, state_full_name='test_state'), ...} = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}}).event_handlers\n\ntests/test_state.py:890: AssertionError\n_________________________________ test_add_var _________________________________\n\n    def test_add_var():\n        class DynamicState(BaseState):\n            pass\n    \n        ds1 = DynamicState()\n        assert \"dynamic_int\" not in ds1.__dict__\n        assert not hasattr(ds1, \"dynamic_int\")\n        ds1.add_var(\"dynamic_int\", int, 42)\n        # Existing instances get the BaseVar\n>       assert ds1.dynamic_int.equals(DynamicState.dynamic_int)  # type: ignore\nE       AttributeError: 'int' object has no attribute 'equals'\n\ntests/test_state.py:869: AttributeError\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = '0a8213b6-2c40-486b-b48e-46a7f579f750'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n>       result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n        ).__anext__()\n\ntests/test_app.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1335: in _process\n    substate, handler = self._get_event_handler(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ATestState({'a_test_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'headers':...''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'var': 0}})\nevent = Event(token='0a8213b6-2c40-486b-b48e-46a7f579f750', name='a_test_state.set_int_val', router_data={'pathname': '/', 'query': {}}, payload={'value': 50})\n\n    def _get_event_handler(\n        self, event: Event\n    ) -> tuple[BaseState | StateProxy, EventHandler]:\n        \"\"\"Get the event handler for the given event.\n    \n        Args:\n            event: The event to get the handler for.\n    \n    \n        Returns:\n            The event handler.\n    \n        Raises:\n            ValueError: If the event handler or substate is not found.\n        \"\"\"\n        # Get the event handler.\n        path = event.name.split(\".\")\n        path, name = path[:-1], path[-1]\n        substate = self.get_substate(path)\n        if not substate:\n            raise ValueError(\n                \"The value of state cannot be None when processing an event.\"\n            )\n>       handler = substate.event_handlers[name]\nE       KeyError: 'set_int_val'\n\nreflex/state.py:1317: KeyError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_add_var_default_handlers - AssertionError: a...\nFAILED tests/test_state.py::test_add_var - AttributeError: 'int' object has n...\nFAILED tests/test_app.py::test_dynamic_var_event - KeyError: 'set_int_val'\n======================== 3 failed, 5 warnings in 0.58s =========================\n\n"], "reflex-reflex/state.py-reset": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_state.py FF                                                   [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_reset __________________________________\n\ntest_state = <[AttributeError(\"'TestState' object has no attribute 'var1'\") raised in repr()] TestState object at 0x7f37bbca0af0>\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': 'test'}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    def test_reset(test_state, child_state):\n        \"\"\"Test resetting the state.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n        \"\"\"\n        # Set some values.\n        test_state.num1 = 1\n        test_state.num2 = 2\n        child_state.value = \"test\"\n    \n        # Reset the state.\n        test_state.reset()\n    \n        # The values should be reset.\n>       assert test_state.num1 == 0\nE       assert 1 == 0\nE        +  where 1 = <[AttributeError(\"'TestState' object has no attribute 'var1'\") raised in repr()] TestState object at 0x7f37bbca0af0>.num1\n\ntests/test_state.py:676: AssertionError\n___________________________ test_reset_with_mutables ___________________________\n\n    def test_reset_with_mutables():\n        \"\"\"Calling reset should always reset fields to a copy of the defaults.\"\"\"\n        default = [[0, 0], [0, 1], [1, 1]]\n        copied_default = copy.deepcopy(default)\n    \n        class MutableResetState(BaseState):\n            items: List[List[int]] = default\n    \n        instance = MutableResetState()\n        assert instance.items.__wrapped__ is not default  # type: ignore\n        assert instance.items == default == copied_default\n        instance.items.append([3, 3])\n        assert instance.items != default\n        assert instance.items != copied_default\n    \n        instance.reset()\n>       assert instance.items.__wrapped__ is not default  # type: ignore\nE       AttributeError: 'list' object has no attribute '__wrapped__'\n\ntests/test_state.py:2419: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_reset - assert 1 == 0\nFAILED tests/test_state.py::test_reset_with_mutables - AttributeError: 'list'...\n======================== 2 failed, 5 warnings in 0.52s =========================\n\n"], "reflex-reflex/state.py-get_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/test_state.py .sFs.s                                               [ 33%]\ntests/test_state_tree.py sssssssss                                       [ 83%]\ntests/test_state.py sFs                                                  [100%]\n\n=================================== FAILURES ===================================\n______________ test_get_state_from_sibling_not_cached[in_process] ______________\n\nmock_app = <App state=Parent>, token = 'ef1478f5-10a0-40c2-a704-317e9b46abc3'\n\n    @pytest.mark.asyncio\n    async def test_get_state_from_sibling_not_cached(mock_app: rx.App, token: str):\n        \"\"\"A test simulating update_vars_internal when setting cookies with computed vars.\n    \n        In that case, a sibling state, UpdateVarsInternalState handles the fetching\n        of states that need to have values set. Only the states that have a computed\n        var are pre-fetched (like Child3 in this test), so `get_state` needs to\n        avoid refetching those already-cached states when getting substates,\n        otherwise the set values will be overridden by the freshly deserialized\n        version and lost.\n    \n        Explicit regression test for https://github.com/reflex-dev/reflex/issues/2851.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n    \n        class Parent(BaseState):\n            \"\"\"A root state like rx.State.\"\"\"\n    \n            parent_var: int = 0\n    \n        class Child(Parent):\n            \"\"\"A state simulating UpdateVarsInternalState.\"\"\"\n    \n            pass\n    \n        class Child2(Parent):\n            \"\"\"An unconnected child state.\"\"\"\n    \n            pass\n    \n        class Child3(Parent):\n            \"\"\"A child state with a computed var causing it to be pre-fetched.\n    \n            If child3_var gets set to a value, and `get_state` erroneously\n            re-fetches it from redis, the value will be lost.\n            \"\"\"\n    \n            child3_var: int = 0\n    \n            @rx.var\n            def v(self):\n                pass\n    \n        class Grandchild3(Child3):\n            \"\"\"An extra layer of substate to catch an issue discovered in\n            _determine_missing_parent_states while writing the regression test where\n            invalid parent state names were being constructed.\n            \"\"\"\n    \n            pass\n    \n        class GreatGrandchild3(Grandchild3):\n            \"\"\"Fetching this state wants to also fetch Child3 as a missing parent.\n            However, Child3 should already be cached in the state tree because it\n            has a computed var.\n            \"\"\"\n    \n            pass\n    \n        mock_app.state_manager.state = mock_app.state = Parent\n    \n        # Get the top level state via unconnected sibling.\n        root = await mock_app.state_manager.get_state(_substate_key(token, Child))\n        # Set value in parent_var to assert it does not get refetched later.\n        root.parent_var = 1\n    \n        if isinstance(mock_app.state_manager, StateManagerRedis):\n            # When redis is used, only states with computed vars are pre-fetched.\n            assert \"child2\" not in root.substates\n            assert \"child3\" in root.substates  # (due to @rx.var)\n    \n        # Get the unconnected sibling state, which will be used to `get_state` other instances.\n        child = root.get_substate(Child.get_full_name().split(\".\"))\n    \n        # Get an uncached child state.\n>       child2 = await child.get_state(Child2)\n\ntests/test_state.py:2895: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Child({'parent.child': {}})\nstate_cls = <class 'tests.test_state.test_get_state_from_sibling_not_cached.<locals>.Child2'>\n\n    async def get_state(self, state_cls: Type[BaseState]) -> BaseState:\n        if not hasattr(self, \"client_token\"):\n>           raise ValueError(\"State does not have a client_token\")\nE           ValueError: State does not have a client_token\n\nreflex/state.py:1307: ValueError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = 'c8f0ef04-1b86-4b6a-9c84-5c922437e92b'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n>       child_state2_get_state = await test_state.get_state(ChildState2)\n\ntests/test_state.py:2734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...{'value2': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\nstate_cls = <class 'tests.test_state.ChildState2'>\n\n    async def get_state(self, state_cls: Type[BaseState]) -> BaseState:\n        if not hasattr(self, \"client_token\"):\n>           raise ValueError(\"State does not have a client_token\")\nE           ValueError: State does not have a client_token\n\nreflex/state.py:1307: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_get_state_from_sibling_not_cached[in_process]\nFAILED tests/test_state.py::test_get_state[in_process] - ValueError: State do...\n============= 2 failed, 2 passed, 14 skipped, 5 warnings in 0.94s ==============\n\n"], "reflex-reflex/state.py-_process": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/test_app.py FFFFFFFFFFF                                            [ 52%]\ntests/test_state.py FFFFFFFFFs                                           [100%]\n\n=================================== FAILURES ===================================\n______ test_dict_mutation_detection__plain_list[update then __setitem__] _______\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...ny'}}}), ('dict_mutation_test_state.remove_last_detail', {'dict_mutation_test_state': {'details': {'name': 'Jenny'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '89ac1a79-e6b9-46b9-92ab-ecb31cf5efa5'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'DictMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n________ test_dict_mutation_detection__plain_list[delitem then update] _________\n\nevent_tuples = [('dict_mutation_test_state.clear_details', {'dict_mutation_test_state': {'details': {}}}), ('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '325c63c6-609e-4191-a750-b15da1fbc467'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'DictMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n__________ test_dict_mutation_detection__plain_list[add, remove, pop] __________\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...': {'details': {'age': 20}}}), ('dict_mutation_test_state.pop_out_age', {'dict_mutation_test_state': {'details': {}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '8aba958e-25a5-46bd-b32c-5f9ab27e9c05'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'DictMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n____________ test_dict_mutation_detection__plain_list[dict in list] ____________\n\nevent_tuples = [('dict_mutation_test_state.remove_home_address', {'dict_mutation_test_state': {'address': [{}, {'work': 'work address...to_home_address', {'dict_mutation_test_state': {'address': [{'street': 'street address'}, {'work': 'work address'}]}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '6a9ce963-3c4b-40a1-bca2-d3bca44d77bb'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'DictMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n____________ test_dict_mutation_detection__plain_list[nested dict] _____________\n\nevent_tuples = [('dict_mutation_test_state.change_friend_name', {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'n...'dict_mutation_test_state.remove_friend', {'dict_mutation_test_state': {'friend_in_nested_dict': {'name': 'Nikhil'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '7258d995-e13f-4f2a-96e0-af1223abef1c'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'DictMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = 'b5700dee-c52a-4f4e-a755-387d721e448c'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n>       result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n        ).__anext__()\n\ntests/test_app.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ATestState({'a_test_state': {'int_val': BaseVar(_var_name='int_val', _var_type=<class 'int'>, _var_is_local=False, _va...''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'var': 0}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ATestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n______ test_list_mutation_detection__plain_list[append then __setitem__] _______\n\nevent_tuples = [('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}), ('list_mutation_test_state.change_first_friend', {'list_mutation_test_state': {'plain_friends': ['Jenny', 'another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '07121f7d-3b4a-4ea3-8e60-457b68a0478c'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ListMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n________ test_list_mutation_detection__plain_list[delitem then append] _________\n\nevent_tuples = [('list_mutation_test_state.unfriend_first_friend', {'list_mutation_test_state': {'plain_friends': []}}), ('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '3160cc30-58d7-4791-a714-729f4bfcf9cc'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ListMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n_____ test_list_mutation_detection__plain_list[extend, remove, pop, clear] _____\n\nevent_tuples = [('list_mutation_test_state.make_friends_with_colleagues', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'P...: ['Peter']}}), ('list_mutation_test_state.unfriend_all_friends', {'list_mutation_test_state': {'plain_friends': []}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '16c16395-5238-4260-956f-3ab2d7070b51'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ListMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n____________ test_list_mutation_detection__plain_list[nested list] _____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_second_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Tom...tation_test_state.remove_first_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Jenny', 'Jimmy']]}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '0ae5558f-ceca-4467-b73c-c8715218a771'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ListMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n____________ test_list_mutation_detection__plain_list[list in dict] ____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_tommy_friends', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['...]}}}), ('list_mutation_test_state.tommy_has_no_fds', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': []}}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '121b2765-737a-4493-8ec8-301109df2d05'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ListMutationTestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n_________________________ test_process_event_generator _________________________\n\n    @pytest.mark.asyncio\n    async def test_process_event_generator():\n        \"\"\"Test event handlers that generate multiple updates.\"\"\"\n        gen_state = GenState()  # type: ignore\n        event = Event(\n            token=\"t\",\n            name=\"go\",\n            payload={\"c\": 5},\n        )\n        gen = gen_state._process(event)\n    \n        count = 0\n>       async for update in gen:\n\ntests/test_state.py:780: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = GenState({'gen_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'headers': {'ho...}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'value': 0}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'GenState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n_________________________ test_process_event_substate __________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ngrandchild_state = GrandchildState({'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_substate(test_state, child_state, grandchild_state):\n        \"\"\"Test processing an event on a substate.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n            grandchild_state: A grandchild state.\n        \"\"\"\n        # Events should bubble down to the substate.\n        assert child_state.value == \"\"\n        assert child_state.count == 23\n        event = Event(\n            token=\"t\", name=\"child_state.change_both\", payload={\"value\": \"hi\", \"count\": 12}\n        )\n>       update = await test_state._process(event).__anext__()\n\ntests/test_state.py:742: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'TestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n__________________________ test_process_event_simple ___________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_simple(test_state):\n        \"\"\"Test processing an event.\n    \n        Args:\n            test_state: A state.\n        \"\"\"\n        assert test_state.num1 == 0\n    \n        event = Event(token=\"t\", name=\"set_num1\", payload={\"value\": 69})\n>       update = await test_state._process(event).__anext__()\n\ntests/test_state.py:713: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'TestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n____________________ test_preprocess[OnLoadState-expected0] ____________________\n\napp_module_mock = <Mock id='139639331391184'>\ntoken = '23f9464c-dafc-42b4-96a4-c5b3e383c02e'\ntest_state = <class 'tests.test_state.OnLoadState'>\nexpected = {'on_load_state': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f0050be8070>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '23f9464c-dafc-42b4-96a4-c5b3e383c02e', ...e/', 'full_raw_path': 'None/', 'params': {}}}}, 'state.on_load_internal_state': {}, 'state.on_load_state': {'num': 0}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'State' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-16' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n___________________ test_preprocess[OnLoadState2-expected1] ____________________\n\napp_module_mock = <Mock id='139639340980096'>\ntoken = '392cf027-c67c-4abd-bd2c-3db1bd3532d5'\ntest_state = <class 'tests.test_state.OnLoadState2'>\nexpected = {'on_load_state2': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f0051208460>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '392cf027-c67c-4abd-bd2c-3db1bd3532d5', ...w_path': 'None/', 'params': {}}}}, 'state.on_load_state2': {'name': '', 'num': 0}, 'state.on_load_internal_state': {}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'State' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-18' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n___________________ test_preprocess[OnLoadState3-expected2] ____________________\n\napp_module_mock = <Mock id='139639344816400'>\ntoken = '1fd55767-5efd-46c1-a787-42a1a027b01d'\ntest_state = <class 'tests.test_state.OnLoadState3'>\nexpected = {'on_load_state3': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f00518b61a0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '1fd55767-5efd-46c1-a787-42a1a027b01d', .../', 'full_raw_path': 'None/', 'params': {}}}}, 'state.on_load_state3': {'num': 0}, 'state.on_load_internal_state': {}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'State' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-20' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n_____________________ test_preprocess_multiple_load_events _____________________\n\napp_module_mock = <Mock id='139639340979808'>\ntoken = '35d11356-efae-47b0-81e7-53cc06cf2566'\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f0051209120>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_multiple_load_events(app_module_mock, token, mocker):\n        \"\"\"Test that a state hydrate event for multiple on-load events is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {OnLoadState, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State,\n            load_events={\"index\": [OnLoadState.test_handler, OnLoadState.test_handler]},\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_full_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2672: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '35d11356-efae-47b0-81e7-53cc06cf2566', ...e/', 'full_raw_path': 'None/', 'params': {}}}}, 'state.on_load_internal_state': {}, 'state.on_load_state': {'num': 0}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'State' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-22' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n________________________ test_state_with_invalid_yield _________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f0050a13880>\n\n    @pytest.mark.asyncio\n    async def test_state_with_invalid_yield(capsys):\n        \"\"\"Test that an error is thrown when a state yields an invalid value.\n    \n        Args:\n            capsys: Pytest fixture for capture standard streams.\n        \"\"\"\n    \n        class StateWithInvalidYield(BaseState):\n            \"\"\"A state that yields an invalid value.\"\"\"\n    \n            def invalid_handler(self):\n                \"\"\"Invalid handler.\n    \n                Yields:\n                    an invalid value.\n                \"\"\"\n                yield 1\n    \n        invalid_state = StateWithInvalidYield()\n>       async for update in invalid_state._process(\n            rx.event.Event(token=\"fake_token\", name=\"invalid_handler\")\n        ):\n\ntests/test_state.py:1486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = StateWithInvalidYield({'state_with_invalid_yield': {'router': {'session': {'client_token': '', 'client_ip': '', 'sessi...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'StateWithInvalidYield' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n___________________________ test_setvar[in_process] ____________________________\n\nmock_app = <App state=TestState>, token = 'feb6a4ae-421b-46ca-8cc1-1078a8fb0cc5'\n\n    @pytest.mark.asyncio\n    async def test_setvar(mock_app: rx.App, token: str):\n        \"\"\"Test that setvar works correctly.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        state = await mock_app.state_manager.get_state(_substate_key(token, TestState))\n    \n        # Set Var in same state (with Var type casting)\n        for event in rx.event.fix_events(\n            [TestState.setvar(\"num1\", 42), TestState.setvar(\"num2\", \"4.2\")], token\n        ):\n>           async for update in state._process(event):\n\ntests/test_state.py:2949: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1365: in _process\n    event_info = await self._obtain_event_info(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nname = '_obtain_event_info'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'TestState' object has no attribute '_obtain_event_info'\n\nreflex/state.py:1040: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[update then __setitem__]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[delitem then update]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[add, remove, pop]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[dict in list]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[nested dict]\nFAILED tests/test_app.py::test_dynamic_var_event - AttributeError: 'ATestStat...\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[append then __setitem__]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[delitem then append]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[extend, remove, pop, clear]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[nested list]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[list in dict]\nFAILED tests/test_state.py::test_process_event_generator - AttributeError: 'G...\nFAILED tests/test_state.py::test_process_event_substate - AttributeError: 'Te...\nFAILED tests/test_state.py::test_process_event_simple - AttributeError: 'Test...\nFAILED tests/test_state.py::test_preprocess[OnLoadState-expected0] - Attribut...\nFAILED tests/test_state.py::test_preprocess[OnLoadState2-expected1] - Attribu...\nFAILED tests/test_state.py::test_preprocess[OnLoadState3-expected2] - Attribu...\nFAILED tests/test_state.py::test_preprocess_multiple_load_events - AttributeE...\nFAILED tests/test_state.py::test_state_with_invalid_yield - AttributeError: '...\nFAILED tests/test_state.py::test_setvar[in_process] - AttributeError: 'TestSt...\n================== 20 failed, 1 skipped, 5 warnings in 2.14s ===================\n\n"], "reflex-reflex/state.py-_dirty_computed_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py .                                                    [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.26s =========================\n\n"], "reflex-reflex/state.py-_potentially_dirty_substates": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_potentially_dirty_substates _______________________\n\n    def test_potentially_dirty_substates():\n        \"\"\"Test that potentially_dirty_substates returns the correct substates.\n    \n        Even if the name \"State\" is shadowed, it should still work correctly.\n        \"\"\"\n    \n        class State(RxState):\n            @ComputedVar\n            def foo(self) -> str:\n                return \"\"\n    \n        class C1(State):\n            @ComputedVar\n            def bar(self) -> str:\n                return \"\"\n    \n>       assert RxState._potentially_dirty_substates() == {State}\n\ntests/test_state.py:2930: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'reflex.state.State'>\n\n    @classmethod\n    def _potentially_dirty_substates(cls) -> set[Type[BaseState]]:\n        dirty_substates = set()\n>       for substate_cls in cls.__substate_classes__():\nE       AttributeError: type object 'State' has no attribute '__substate_classes__'\n\nreflex/state.py:1549: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_potentially_dirty_substates - AttributeError...\n======================== 1 failed, 5 warnings in 0.47s =========================\n\n"], "reflex-reflex/state.py-get_delta": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 15 items\n\ntests/test_state.py FFF                                                  [ 20%]\ntests/test_state_tree.py sssssssss                                       [ 80%]\ntests/test_state.py FFs                                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_dirty_computed_var_from_var _______________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\n\n    def test_dirty_computed_var_from_var(interdependent_state: InterdependentState) -> None:\n        \"\"\"Set Var that ComputedVar depends on, expect recalculation.\n    \n        The other ComputedVar depends on the changed ComputedVar and should also be\n        recalculated. No other ComputedVars should be recalculated.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.v1 = 1\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v1\": 1, \"v1x2\": 2, \"v1x2x2\": 4},\n        }\n\ntests/test_state.py:1001: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1568: in get_delta\n    return self.delta\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\nname = 'delta'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'InterdependentState' object has no attribute 'delta'\n\nreflex/state.py:1040: AttributeError\n___________________ test_dirty_computed_var_from_backend_var ___________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\n\n    def test_dirty_computed_var_from_backend_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set backend var that ComputedVar depends on, expect recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        assert InterdependentState._v3._backend is True\n        interdependent_state._v2 = 2\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v2x2\": 4, \"v3x2\": 4},\n        }\n\ntests/test_state.py:1016: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1568: in get_delta\n    return self.delta\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\nname = 'delta'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'InterdependentState' object has no attribute 'delta'\n\nreflex/state.py:1040: AttributeError\n_____________________ test_not_dirty_computed_var_from_var _____________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\n\n    def test_not_dirty_computed_var_from_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set Var that no ComputedVar depends on, expect no recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.x = 5\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"x\": 5},\n        }\n\ntests/test_state.py:986: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1568: in get_delta\n    return self.delta\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\nname = 'delta'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'InterdependentState' object has no attribute 'delta'\n\nreflex/state.py:1040: AttributeError\n________________ test_computed_var_cached_depends_on_non_cached ________________\n\n    def test_computed_var_cached_depends_on_non_cached():\n        \"\"\"Test that a cached var is recalculated if it depends on non-cached ComputedVar.\"\"\"\n    \n        class ComputedState(BaseState):\n            v: int = 0\n    \n            @rx.var\n            def no_cache_v(self) -> int:\n                return self.v\n    \n            @rx.var(cache=True)\n            def dep_v(self) -> int:\n                return self.no_cache_v  # type: ignore\n    \n            @rx.var(cache=True)\n            def comp_v(self) -> int:\n                return self.v\n    \n        cs = ComputedState()\n        assert cs.dirty_vars == set()\n>       assert cs.get_delta() == {cs.get_name(): {\"no_cache_v\": 0, \"dep_v\": 0}}\n\ntests/test_state.py:1183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1568: in get_delta\n    return self.delta\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'router': {'session': {'client_token': '',...: ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}})\nname = 'delta'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'ComputedState' object has no attribute 'delta'\n\nreflex/state.py:1040: AttributeError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = '62eeae6d-8e32-4a20-a42b-1f327bc0644f'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n        assert child_state2_direct is child_state2_get_state\n    \n        # Get arbitrary GrandchildState.\n        grandchild_state = await child_state2_get_state.get_state(GrandchildState)\n        assert isinstance(grandchild_state, GrandchildState)\n    \n        # Now the original root should have all substates populated.\n        assert tuple(sorted(test_state.substates)) == (\n            \"child_state\",\n            \"child_state2\",\n            \"child_state3\",\n        )\n    \n        # ChildState should be retrievable\n        child_state_direct = test_state.get_substate([\"child_state\"])\n        child_state_get_state = await test_state.get_state(ChildState)\n        # These should be the same object.\n        assert child_state_direct is child_state_get_state\n    \n        # GrandchildState instance should be the same as the one retrieved from the child_state2.\n        assert grandchild_state is child_state_direct.get_substate([\"grandchild_state\"])\n        grandchild_state.value2 = \"set_value\"\n    \n>       assert test_state.get_delta() == {\n            TestState.get_full_name(): {\n                \"sum\": 3.14,\n                \"upper\": \"\",\n            },\n            GrandchildState.get_full_name(): {\n                \"value2\": \"set_value\",\n            },\n            GrandchildState3.get_full_name(): {\n                \"computed\": \"\",\n            },\n        }\n\ntests/test_state.py:2759: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1568: in get_delta\n    return self.delta\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...st_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': 'set_value'}})\nname = 'delta'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'TestState' object has no attribute 'delta'\n\nreflex/state.py:1040: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_dirty_computed_var_from_var - AttributeError...\nFAILED tests/test_state.py::test_dirty_computed_var_from_backend_var - Attrib...\nFAILED tests/test_state.py::test_not_dirty_computed_var_from_var - AttributeE...\nFAILED tests/test_state.py::test_computed_var_cached_depends_on_non_cached - ...\nFAILED tests/test_state.py::test_get_state[in_process] - AttributeError: 'Tes...\n================== 5 failed, 10 skipped, 5 warnings in 0.88s ===================\n\n"], "reflex-reflex/model.py-get_db_engine": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f0e7f884d60>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n>       with Model.get_db_engine().connect() as connection:\n\n/root/repos/py_data/reflex/tests/test_model.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @staticmethod\n    def get_db_engine():\n        \"\"\"Get the database engine.\n    \n        Returns:\n            The database engine.\n        \"\"\"\n>       engine = create_engine(f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}')\nE       NameError: name 'create_engine' is not defined\n\n/root/repos/py_data/reflex/reflex/model.py:207: NameError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2502/test_automigration0/working_dir/alembic.ini' before proceeding.\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f0e7fa31480>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n>       with Model.get_db_engine().connect() as connection:\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @staticmethod\n    def get_db_engine():\n        \"\"\"Get the database engine.\n    \n        Returns:\n            The database engine.\n        \"\"\"\n>       engine = create_engine(f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}')\nE       NameError: name 'create_engine' is not defined\n\n/root/repos/py_data/reflex/reflex/model.py:207: NameError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2502/test_automigration1/working_dir/alembic.ini' before proceeding.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - NameError: name 'create_engi...\nFAILED tests/test_sqlalchemy.py::test_automigration - NameError: name 'create...\n======================== 2 failed, 5 warnings in 0.12s =========================\n\n"], "reflex-reflex/model.py-alembic_autogenerate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa253144e50>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n        with Model.get_db_engine().connect() as connection:\n>           assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\nE           TypeError: Model.alembic_autogenerate() got multiple values for argument 'connection'\n\n/root/repos/py_data/reflex/tests/test_model.py:93: TypeError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2503/test_automigration0/working_dir/alembic.ini' before proceeding.\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa25307b940>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n        with Model.get_db_engine().connect() as connection:\n>           assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\nE           TypeError: Model.alembic_autogenerate() got multiple values for argument 'connection'\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:66: TypeError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2503/test_automigration1/working_dir/alembic.ini' before proceeding.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - TypeError: Model.alembic_aut...\nFAILED tests/test_sqlalchemy.py::test_automigration - TypeError: Model.alembi...\n======================== 2 failed, 5 warnings in 0.12s =========================\n\n"], "reflex-reflex/model.py-migrate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fce56d30e20>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n        with Model.get_db_engine().connect() as connection:\n            assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\n>       assert Model.migrate()\n\n/root/repos/py_data/reflex/tests/test_model.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/model.py:385: in migrate\n    engine = create_engine(config.get_main_option(\"sqlalchemy.url\"))\n<string>:2: in create_engine\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:550: in create_engine\n    entrypoint = u._get_entrypoint()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/url.py:758: in _get_entrypoint\n    cls = registry.load(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7fcea4259120>\nname = 'driver'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:driver\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:375: NoSuchModuleError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic.ini' before proceeding.\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration0/working_dir/alembic/versions/135faae7244c_initial_revision.py ...  done\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fce56ee5540>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n        with Model.get_db_engine().connect() as connection:\n            assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\n>       assert Model.migrate()\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/model.py:385: in migrate\n    engine = create_engine(config.get_main_option(\"sqlalchemy.url\"))\n<string>:2: in create_engine\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:550: in create_engine\n    entrypoint = u._get_entrypoint()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/url.py:758: in _get_entrypoint\n    cls = registry.load(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7fcea4259120>\nname = 'driver'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:driver\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:375: NoSuchModuleError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic.ini' before proceeding.\nGenerating /tmp/pytest-of-root/pytest-2504/test_automigration1/working_dir/alembic/versions/56da0b2a743b_initial_revision.py ...  done\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\ntests/test_sqlalchemy.py::test_automigration\n  /root/repos/py_data/reflex/reflex/model.py:128: SAWarning:\n  \n  Table 'alembicthing' already exists within the given MetaData - not copying.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - sqlalchemy.exc.NoSuchModuleE...\nFAILED tests/test_sqlalchemy.py::test_automigration - sqlalchemy.exc.NoSuchMo...\n======================== 2 failed, 6 warnings in 0.29s =========================\n\n"], "reflex-reflex/model.py-select": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py .                                                    [ 50%]\ntests/test_sqlalchemy.py .                                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.29s =========================\n\n"], "reflex-reflex/compiler/compiler.py-compile_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncomponents = {{\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}}\n\n    def compile_components(components):\n        compiled_components = []\n        for component in components:\n>           component_path = component[\"path\"]\nE           TypeError: 'CustomComponent' object is not subscriptable\n\nreflex/compiler/compiler.py:427: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 1 failed, 5 warnings in 0.82s =========================\n\n"], "reflex-reflex/utils/prerequisites.py-get_or_set_last_reflex_version_check_datetime": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.80s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/reflex/utils/prerequisites.py::check_latest_package_version\n(no match in any of [<Module prerequisites.py>])\n\n"], "reflex-reflex/middleware/hydrate_middleware.py-preprocess": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/middleware/test_hydrate_middleware.py F                            [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_preprocess_no_events ___________________________\n\nhydrate_middleware = HydrateMiddleware()\nevent1 = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f7603dce020>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_no_events(hydrate_middleware, event1, mocker):\n        \"\"\"Test that app without on_load is processed correctly.\n    \n        Args:\n            hydrate_middleware: Instance of HydrateMiddleware\n            event1: An Event.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\"reflex.state.State.class_subclasses\", {TestState})\n        state = State()\n>       update = await hydrate_middleware.preprocess(\n            app=App(state=State),\n            event=event1,\n            state=state,\n        )\nE       TypeError: HydrateMiddleware.preprocess() got multiple values for argument 'app'\n\ntests/middleware/test_hydrate_middleware.py:43: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/middleware/test_hydrate_middleware.py::test_preprocess_no_events\n======================== 1 failed, 5 warnings in 0.11s =========================\n\n"], "reflex-reflex/components/component.py-get_event_triggers": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:785: in create\n    return cls(children=children, **props)\nreflex/components/component.py:367: in __init__\n    component_specific_triggers = self.get_event_triggers()\nreflex/components/component.py:587: in get_event_triggers\n    return self._event_triggers\nE   AttributeError: 'Theme' object has no attribute '_event_triggers'. Did you mean: 'event_triggers'?\n"], "reflex-reflex/components/component.py-get_props": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/test_component.py ...                                   [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 5 warnings in 0.72s =========================\n\n"], "reflex-reflex/components/component.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 16 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/components/test_component.py ______________\ntests/components/test_component.py:627: in <module>\n    (rx.text(\"first_text\"),),\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:762: in create\n    child = TextNode(child)\nE   NameError: name 'TextNode' is not defined\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (hello) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (1) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/test_component.py - NameError: name 'TextNode' is not ...\n========================= 5 warnings, 1 error in 0.68s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_unsupported_parent_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_instantiate_all_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_component\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_component_prop_validation\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_valid_parents\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_invalid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_add_style_foreach\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_with_only_valid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_hooks_nested2\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_create_unallowed_types\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_event_trigger_arbitrary_args\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_invalid_event_handler_args\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::wrapper\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::outer\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_create_unpack_tuple_child\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_custom_code\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_filters_none_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_valid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_hooks_nested\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_invalid_prop_type\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_var_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_declare_event_handlers_in_fields\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_rename_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_valid_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_unsupported_child_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_wrapper\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_hooks\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_get_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_hooks_var\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_deprecated_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_add_style_embedded_vars\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_custom_code\n\n"], "reflex-reflex/components/component.py-_add_style_recursive": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/core/test_foreach.py F                                  [ 33%]\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_foreach_component_styles _________________________\n\n    def test_foreach_component_styles():\n        \"\"\"Test that the foreach component works with global component styles.\"\"\"\n        component = el.div(\n            foreach(\n                ForEachState.colors_list,\n                display_color,\n            )\n        )\n>       component._add_style_recursive({box: {\"color\": \"red\"}})\n\ntests/components/core/test_foreach.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"div\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\", \"props\": {...olors_list\", \"arg_name\": \"color\", \"arg_index\": \"index_b8d51e6e7ef77261\", \"iterable_type\": \"list\"}], \"autofocus\": false}\nstyle = {<bound method RadixThemesComponent.create of <class 'reflex.components.radix.themes.layout.box.Box'>>: {'color': 'red'}}\ntheme = None\n\n    def _add_style_recursive(self, style: Dict[Component, Dict[str, Any]], theme: Optional[Dict[str, Any]] = None) -> Component:\n        if hasattr(self, \"_add_style\") and self._add_style != Component._add_style:\n>           warnings.warn(\n                f\"The `_add_style` method has been overridden in {self.__class__.__name__}. \"\n                \"This is not supported and may cause unexpected behavior. \"\n                \"Please use `add_style` instead.\",\n                UserWarning,\n            )\nE           NameError: name 'warnings' is not defined\n\nreflex/components/component.py:863: NameError\n____________________________ test_add_style_foreach ____________________________\n\n    def test_add_style_foreach():\n        class StyledComponent(Component):\n            tag = \"StyledComponent\"\n            ix: Var[int]\n    \n            def add_style(self):\n                return Style({\"color\": \"red\"})\n    \n        page = rx.vstack(rx.foreach(Var.range(3), lambda i: StyledComponent.create(i)))\n>       page._add_style_recursive(Style())\n\ntests/components/test_component.py:2062: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...undefined, 1))\", \"arg_name\": \"i\", \"arg_index\": \"index_b9940fc43e2dada9\", \"iterable_type\": \"list\"}], \"autofocus\": false}\nstyle = {}, theme = None\n\n    def _add_style_recursive(self, style: Dict[Component, Dict[str, Any]], theme: Optional[Dict[str, Any]] = None) -> Component:\n        if hasattr(self, \"_add_style\") and self._add_style != Component._add_style:\n>           warnings.warn(\n                f\"The `_add_style` method has been overridden in {self.__class__.__name__}. \"\n                \"This is not supported and may cause unexpected behavior. \"\n                \"Please use `add_style` instead.\",\n                UserWarning,\n            )\nE           NameError: name 'warnings' is not defined\n\nreflex/components/component.py:863: NameError\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n>       page._add_style_recursive(Style())\n\ntests/components/test_component.py:2037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...ps\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nstyle = {}, theme = None\n\n    def _add_style_recursive(self, style: Dict[Component, Dict[str, Any]], theme: Optional[Dict[str, Any]] = None) -> Component:\n        if hasattr(self, \"_add_style\") and self._add_style != Component._add_style:\n>           warnings.warn(\n                f\"The `_add_style` method has been overridden in {self.__class__.__name__}. \"\n                \"This is not supported and may cause unexpected behavior. \"\n                \"Please use `add_style` instead.\",\n                UserWarning,\n            )\nE           NameError: name 'warnings' is not defined\n\nreflex/components/component.py:863: NameError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/core/test_foreach.py::test_foreach_component_styles\nFAILED tests/components/test_component.py::test_add_style_foreach - NameError...\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - Nam...\n======================== 3 failed, 5 warnings in 0.92s =========================\n\n"], "reflex-reflex/components/component.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/components/test_component.py FFFF..                                [ 28%]\ntests/components/core/test_foreach.py ...........                        [ 80%]\ntests/components/test_component.py ..FF                                  [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_rename_props _______________________________\n\n    def test_rename_props():\n        \"\"\"Test that _rename_props works and is inherited.\"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            prop1: Var[str]\n            prop2: Var[str]\n    \n            _rename_props = {\"prop1\": \"renamed_prop1\", \"prop2\": \"renamed_prop2\"}\n    \n        class C2(C1):\n            tag = \"C2\"\n    \n            prop3: Var[str]\n    \n            _rename_props = {\"prop2\": \"subclass_prop2\", \"prop3\": \"renamed_prop3\"}\n    \n        c1 = C1.create(prop1=\"prop1_1\", prop2=\"prop2_1\")\n        rendered_c1 = c1.render()\n>       assert \"renamed_prop1={`prop1_1`}\" in rendered_c1[\"props\"]\nE       AssertionError: assert 'renamed_prop1={`prop1_1`}' in {'key1': 'value1', 'key2': 'value2'}\n\ntests/components/test_component.py:1597: AssertionError\n_________ test_component_create_unpack_tuple_child[element0-expected0] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"type\": \"component_type\", \"props\": {\"key1\": \"value1\", \"key2\": \"value2\"}},)\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'props': {'k...mponent_type'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'key1': 'value1', 'key2': 'value2'}} != {'props': []}\nE         Left contains 1 more item:\nE         {'type': 'component_type'}\nE         Right contains 6 more items:\nE         {'args': None,...\nE         \nE         ...Full output truncated (18 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element1-expected1] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"type\": \"component_type\", \"props\": {\"key1\": \"value1\", \"key2\": \"value2\"}}, {\"type\": \"component_type\", \"props\": {\"key1\": \"value1\", \"key2\": \"value2\"}})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo..., 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'props': {'k...mponent_type'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'key1': 'value1', 'key2': 'value2'}} != {'props': []}\nE         Left contains 1 more item:\nE         {'type': 'component_type'}\nE         Right contains 6 more items:\nE         {'args': None,...\nE         \nE         ...Full output truncated (31 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element2-expected2] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"type\": \"component_type\", \"props\": {\"key1\": \"value1\", \"key2\": \"value2\"}}, {\"type\": \"component_type\", \"props\": {\"key1\": \"value1\", \"key2\": \"value2\"}})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo...rgs': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'props': {'k...mponent_type'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'key1': 'value1', 'key2': 'value2'}} != {'props': []}\nE         Left contains 1 more item:\nE         {'type': 'component_type'}\nE         Right contains 6 more items:\nE         {'args': None,...\nE         \nE         ...Full output truncated (43 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________________ test_component_event_trigger_arbitrary_args __________________\n\n    def test_component_event_trigger_arbitrary_args():\n        \"\"\"Test that we can define arbitrary types for the args of an event trigger.\"\"\"\n    \n        class Obj(Base):\n            custom: int = 0\n    \n        def on_foo_spec(_e, alpha: str, bravo: Dict[str, Any], charlie: Obj):\n            return [_e.target.value, bravo[\"nested\"], charlie.custom + 42]\n    \n        class C1(Component):\n            library = \"/local\"\n            tag = \"C1\"\n    \n            def get_event_triggers(self) -> Dict[str, Any]:\n                return {\n                    **super().get_event_triggers(),\n                    \"on_foo\": on_foo_spec,\n                }\n    \n        comp = C1.create(on_foo=C1State.mock_handler)\n    \n>       assert comp.render()[\"props\"][0] == (\n            \"onFoo={(__e,_alpha,_bravo,_charlie) => addEvents(\"\n            '[Event(\"c1_state.mock_handler\", {_e:__e.target.value,_bravo:_bravo[\"nested\"],_charlie:((_charlie.custom) + (42))})], '\n            \"(__e,_alpha,_bravo,_charlie), {})}\"\n        )\nE       KeyError: 0\n\ntests/components/test_component.py:826: KeyError\n____________________________ test_deprecated_props _____________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f2f1091a440>\n\n    def test_deprecated_props(capsys):\n        \"\"\"Assert that deprecated underscore suffix props are translated.\n    \n        Args:\n            capsys: Pytest fixture for capturing stdout and stderr.\n        \"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            type: Var[str]\n            min: Var[str]\n            max: Var[str]\n    \n        # No warnings are emitted when using the new prop names.\n        c1_1 = C1.create(type=\"type1\", min=\"min1\", max=\"max1\")\n        out_err = capsys.readouterr()\n        assert not out_err.err\n        assert not out_err.out\n    \n        c1_1_render = c1_1.render()\n>       assert \"type={`type1`}\" in c1_1_render[\"props\"]\nE       AssertionError: assert 'type={`type1`}' in {'key1': 'value1', 'key2': 'value2'}\n\ntests/components/test_component.py:1628: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_rename_props - AssertionError...\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element0-expected0]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element1-expected1]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element2-expected2]\nFAILED tests/components/test_component.py::test_component_event_trigger_arbitrary_args\nFAILED tests/components/test_component.py::test_deprecated_props - AssertionE...\n=================== 6 failed, 15 passed, 5 warnings in 0.94s ===================\n\n"], "reflex-reflex/components/component.py-_get_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/components/test_component.py ..FFFFFFFFFFFFFFFFFFFFFFFFFFFFF       [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_vars[direct-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesText\", \"props\": [\"as={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesText\", \"props\": [\"as={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Text' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_________________________ test_get_vars[fstring-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesHeading\", \"props\": [\"as={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesHeading\", \"props\": [\"as={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Heading' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n___________________________ test_get_vars[direct-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n__________________________ test_get_vars[fstring-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n__________________________ test_get_vars[direct-key] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n__________________________ test_get_vars[fstring-key] __________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_______________________ test_get_vars[direct-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n______________________ test_get_vars[fstring-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[direct-special_props] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[fstring-special_props] _____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n__________________ test_get_vars[fstring-custom_attrs-nofmt] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[fstring-custom_attrs] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n____________________ test_get_vars[direct-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n___________________ test_get_vars[fstring-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_________________ test_get_vars[direct-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n________________ test_get_vars[fstring-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n______________________ test_get_vars[direct-event-chain] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={test}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'reflex.event.EventChain'>, _var_is_local=True, _var_is_string=False, _var...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={test}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[direct-event-handler] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler\\\", {})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = []\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler\\\", {})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n___________________ test_get_vars[direct-event-handler-arg] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n___________________ test_get_vars[direct-event-handler-arg2] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...False)]}, hooks={'const state__event_state = useContext(StateContexts.state__event_state)': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n__________________ test_get_vars[direct-event-handler-lambda] __________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'Fragment' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n______________________ test_get_vars[direct-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95930>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"test\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _var_fu...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95930>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[fstring-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95fc0>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"footestbar\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95fc0>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n______________________ test_get_vars[direct-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95ed0>\nexp_vars = [BaseVar(_var_name='[[\"test\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_ne...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95ed0>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[fstring-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95840>\nexp_vars = [BaseVar(_var_name='[[\"footestbar\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_n...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95840>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n__________________ test_get_vars[direct-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95060>\nexp_vars = [BaseVar(_var_name='[[[\"test\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95060>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_________________ test_get_vars[fstring-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d962f0>\nexp_vars = [BaseVar(_var_name='[[[\"footestbar\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d962f0>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n______________________ test_get_vars[direct-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95d20>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"test\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_na...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d95d20>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n_____________________ test_get_vars[fstring-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d96560>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"footestbar\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_f...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f9679d96560>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        vars = []\n>       for prop in self._spec.get(\"props\", {}).values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_spec'\n\nreflex/components/component.py:1063: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_vars[direct-prop] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[fstring-prop] - Attr...\nFAILED tests/components/test_component.py::test_get_vars[direct-id] - Attribu...\nFAILED tests/components/test_component.py::test_get_vars[fstring-id] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[direct-key] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[fstring-key] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[direct-class_name]\nFAILED tests/components/test_component.py::test_get_vars[fstring-class_name]\nFAILED tests/components/test_component.py::test_get_vars[direct-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs-nofmt]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs]\nFAILED tests/components/test_component.py::test_get_vars[direct-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-chain]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg2]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-lambda]\nFAILED tests/components/test_component.py::test_get_vars[direct-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_dict]\n=================== 29 failed, 2 passed, 5 warnings in 2.07s ===================\n\n"], "reflex-reflex/components/component.py-_has_stateful_event_triggers": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/components/test_component.py .FFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n_______________ test_has_state_event_triggers[component1-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9020f20040>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n________________ test_has_state_event_triggers[component2-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9020f20130>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n_______________ test_has_state_event_triggers[component3-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9020dcdcb0>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n________________ test_has_state_event_triggers[component4-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9020dcdf80>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n_______________ test_has_state_event_triggers[component5-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9021033920>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n________________ test_has_state_event_triggers[component6-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9020e5f600>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n________________ test_has_state_event_triggers[component7-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1144: in _has_stateful_event_triggers\n    if child._has_stateful_event_triggers():\nreflex/components/component.py:1140: in _has_stateful_event_triggers\n    if any(trigger.uses_state for trigger in self.event_triggers.values()):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_valueiterator object at 0x7f9020e5c2c0>\n\n>   if any(trigger.uses_state for trigger in self.event_triggers.values()):\nE   AttributeError: 'EventChain' object has no attribute 'uses_state'\n\nreflex/components/component.py:1140: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component1-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component2-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component3-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component4-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component5-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component6-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component7-True]\n=================== 7 failed, 1 passed, 5 warnings in 1.17s ====================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_get_custom_code _____________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\n\n    def test_get_custom_code(component1, component2):\n        \"\"\"Test getting the custom code of a component.\n    \n        Args:\n            component1: A test component.\n            component2: A test component.\n        \"\"\"\n        # Check that the code gets compiled correctly.\n        c1 = component1.create()\n        c2 = component2.create()\n>       assert c1._get_all_custom_code() == {\"console.log('component1')\"}\n\ntests/components/test_component.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] TestComponent1 object at 0x7f3626505f00>\n\n    def _get_all_custom_code(self) -> set[str]:\n        \"\"\"Get custom code for the component and its children.\n    \n        Returns:\n            The custom code.\n        \"\"\"\n        custom_code = set()\n>       if self.custom_code:\nE       AttributeError: 'TestComponent1' object has no attribute 'custom_code'. Did you mean: 'add_custom_code'?\n\nreflex/components/component.py:1202: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_custom_code - AttributeEr...\n======================== 1 failed, 5 warnings in 0.84s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_imports": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/components/test_component.py FFFFFFF                               [100%]\n\n=================================== FAILURES ===================================\n______________________ test_component_add_imports[tags0] _______________________\n\ntags = ['Component']\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\nE       AssertionError: assert {} == {'foo': [Impo...spile=False)]}\nE         \nE         Right contains 2 more items:\nE         {'foo': [ImportVar(tag='bar', is_default=False, alias=None, install=True, render=True, transpile=False)],\nE          'react': [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False)]}\nE         Use -v to get more diff\n\ntests/components/test_component.py:1803: AssertionError\n______________________ test_component_add_imports[tags1] _______________________\n\ntags = ['Component', 'useState']\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\nE       AssertionError: assert {} == {'foo': [Impo...spile=False)]}\nE         \nE         Right contains 2 more items:\nE         {'foo': [ImportVar(tag='bar', is_default=False, alias=None, install=True, render=True, transpile=False)],\nE          'react': [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False),\nE                    ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]}\nE         Use -v to get more diff\n\ntests/components/test_component.py:1803: AssertionError\n______________________ test_component_add_imports[tags2] _______________________\n\ntags = [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False)]\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\nE       AssertionError: assert {} == {'foo': [Impo...spile=False)]}\nE         \nE         Right contains 2 more items:\nE         {'foo': [ImportVar(tag='bar', is_default=False, alias=None, install=True, render=True, transpile=False)],\nE          'react': [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False)]}\nE         Use -v to get more diff\n\ntests/components/test_component.py:1803: AssertionError\n______________________ test_component_add_imports[tags3] _______________________\n\ntags = [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False), ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\nE       AssertionError: assert {} == {'foo': [Impo...spile=False)]}\nE         \nE         Right contains 2 more items:\nE         {'foo': [ImportVar(tag='bar', is_default=False, alias=None, install=True, render=True, transpile=False)],\nE          'react': [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False),\nE                    ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]}\nE         Use -v to get more diff\n\ntests/components/test_component.py:1803: AssertionError\n______________________ test_component_add_imports[tags4] _______________________\n\ntags = ['Component', ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]\n\n    @pytest.mark.parametrize(\n        \"tags\",\n        (\n            [\"Component\"],\n            [\"Component\", \"useState\"],\n            [ImportVar(tag=\"Component\")],\n            [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")],\n            [\"Component\", ImportVar(tag=\"useState\")],\n        ),\n    )\n    def test_component_add_imports(tags):\n        class BaseComponent(Component):\n            def _get_imports(self) -> ImportDict:\n                return {}\n    \n        class Reference(Component):\n            def _get_imports(self) -> ParsedImportDict:\n                return imports.merge_imports(\n                    super()._get_imports(),\n                    parse_imports({\"react\": tags}),\n                    {\"foo\": [ImportVar(tag=\"bar\")]},\n                )\n    \n        class TestBase(Component):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"foo\": \"bar\"}\n    \n        class Test(TestBase):\n            def add_imports(\n                self,\n            ) -> Dict[str, Union[str, ImportVar, List[str], List[ImportVar]]]:\n                return {\"react\": (tags[0] if len(tags) == 1 else tags)}\n    \n        baseline = Reference.create()\n        test = Test.create()\n    \n>       assert baseline._get_all_imports() == parse_imports(\n            {\n                \"react\": tags,\n                \"foo\": [ImportVar(tag=\"bar\")],\n            }\n        )\nE       AssertionError: assert {} == {'foo': [Impo...spile=False)]}\nE         \nE         Right contains 2 more items:\nE         {'foo': [ImportVar(tag='bar', is_default=False, alias=None, install=True, render=True, transpile=False)],\nE          'react': [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False),\nE                    ImportVar(tag='useState', is_default=False, alias=None, install=True, render=True, transpile=False)]}\nE         Use -v to get more diff\n\ntests/components/test_component.py:1803: AssertionError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n        _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n>       assert \"inner\" in imports_inner\nE       AssertionError: assert 'inner' in defaultdict(<class 'list'>, {'react': [ImportVar(tag='memo', is_default=False, alias=None, install=True, render=True, ... transpile=False), ImportVar(tag='isTrue', is_default=False, alias=None, install=True, render=True, transpile=False)]})\n\ntests/components/test_component.py:1687: AssertionError\n_______________________________ test_get_imports _______________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\n\n    def test_get_imports(component1, component2):\n        \"\"\"Test getting the imports of a component.\n    \n        Args:\n            component1: A test component.\n            component2: A test component.\n        \"\"\"\n        c1 = component1.create()\n        c2 = component2.create(c1)\n>       assert c1._get_all_imports() == {\"react\": [ImportVar(tag=\"Component\")]}\nE       AssertionError: assert {} == {'react': [Im...spile=False)]}\nE         \nE         Right contains 1 more item:\nE         {'react': [ImportVar(tag='Component', is_default=False, alias=None, install=True, render=True, transpile=False)]}\nE         Use -v to get more diff\n\ntests/components/test_component.py:451: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_component_add_imports[tags0]\nFAILED tests/components/test_component.py::test_component_add_imports[tags1]\nFAILED tests/components/test_component.py::test_component_add_imports[tags2]\nFAILED tests/components/test_component.py::test_component_add_imports[tags3]\nFAILED tests/components/test_component.py::test_component_add_imports[tags4]\nFAILED tests/components/test_component.py::test_custom_component_get_imports\nFAILED tests/components/test_component.py::test_get_imports - AssertionError:...\n======================== 7 failed, 5 warnings in 0.96s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks_internal": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n        page._add_style_recursive(Style())\n    \n>       assert (\n            \"const test_state = useContext(StateContexts.test_state)\"\n            in page._get_all_hooks_internal()\n        )\n\ntests/components/test_component.py:2039: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...}%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\n\n    def _get_all_hooks_internal(self) -> dict[str, None]:\n        hooks = {}\n>       for component in self.walk():\nE       AttributeError: 'VStack' object has no attribute 'walk'\n\nreflex/components/component.py:1515: AttributeError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - Att...\n======================== 1 failed, 5 warnings in 0.86s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_get_hooks_nested _____________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\ncomponent3 = <class 'tests.components.test_component.component3.<locals>.TestComponent3'>\n\n    def test_get_hooks_nested(component1, component2, component3):\n        \"\"\"Test that a component returns hooks from child components.\n    \n        Args:\n            component1: test component.\n            component2: another component.\n            component3: component with hooks defined.\n        \"\"\"\n        c = component1.create(\n            component2.create(arr=[]),\n            component3.create(),\n            component3.create(),\n            component3.create(),\n            text=\"a\",\n            number=1,\n        )\n>       assert c._get_all_hooks() == component3()._get_all_hooks()\n\ntests/components/test_component.py:926: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1531: in _get_all_hooks\n    hooks.update(child._get_all_hooks())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] TestComponent2 object at 0x7fc763f0e9b0>\n\n    def _get_all_hooks(self) -> dict[str, None]:\n        hooks = {}\n        for child in self.children:\n            hooks.update(child._get_all_hooks())\n>       hooks.update(self.hooks)\nE       AttributeError: 'TestComponent2' object has no attribute 'hooks'\n\nreflex/components/component.py:1532: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_hooks_nested - AttributeE...\n======================== 1 failed, 5 warnings in 0.84s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_create_custom_component _________________________\n\nmy_component = <function my_component.<locals>.my_component at 0x7fcca4e49f30>\n\n    def test_create_custom_component(my_component):\n        \"\"\"Test that we can create a custom component.\n    \n        Args:\n            my_component: A test custom component.\n        \"\"\"\n        component = CustomComponent(component_fn=my_component, prop1=\"test\", prop2=1)\n        assert component.tag == \"MyComponent\"\n        assert component.get_props() == set()\n>       assert component._get_all_custom_components() == {component}\n\ntests/components/test_component.py:842: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1754: in _get_all_custom_components\n    custom_components = {self} | super()._get_all_custom_components(seen=seen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"MyComponent\", \"props\": [\"prop1={`test`}\", \"prop2={1}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(self, seen: Set[str]) -> Set[str]:\n        result = set()\n>       for tag in self.tags:\nE       AttributeError: 'CustomComponent' object has no attribute 'tags'. Did you mean: 'tag'?\n\nreflex/components/component.py:1577: AttributeError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1754: in _get_all_custom_components\n    custom_components = {self} | super()._get_all_custom_components(seen=seen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(self, seen: Set[str]) -> Set[str]:\n        result = set()\n>       for tag in self.tags:\nE       AttributeError: 'CustomComponent' object has no attribute 'tags'. Did you mean: 'tag'?\n\nreflex/components/component.py:1577: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_create_custom_component - Att...\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 2 failed, 5 warnings in 0.88s =========================\n\n"], "reflex-reflex/components/core/upload.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.03s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_app.py::page\n(no match in any of [<Module test_app.py>])\n\n"], "reflex-reflex/components/next/image.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/media/test_image.py FF                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_set_src_img _______________________________\n\npil_image = <PIL.Image.Image image mode=RGBA size=100x100 at 0x7F259FA04B80>\n\n    def test_set_src_img(pil_image: Img):\n        \"\"\"Test that setting the src works.\n    \n        Args:\n            pil_image: The image to serialize.\n        \"\"\"\n>       image = Image.create(src=pil_image)\nE       TypeError: Image.create() missing 2 required keyword-only arguments: 'width' and 'height'\n\ntests/components/media/test_image.py:50: TypeError\n_________________________________ test_render __________________________________\n\npil_image = <PIL.Image.Image image mode=RGBA size=100x100 at 0x7F259FA05210>\n\n    def test_render(pil_image: Img):\n        \"\"\"Test that rendering an image works.\n    \n        Args:\n            pil_image: The image to serialize.\n        \"\"\"\n>       image = Image.create(src=pil_image)\nE       TypeError: Image.create() missing 2 required keyword-only arguments: 'width' and 'height'\n\ntests/components/media/test_image.py:60: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/media/test_image.py::test_set_src_img - TypeError: Im...\nFAILED tests/components/media/test_image.py::test_render - TypeError: Image.c...\n======================== 2 failed, 5 warnings in 0.12s =========================\n\n"], "reflex-reflex/components/lucide/icon.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/radix/test_icon_button.py .FF                           [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_icon_button_size_prop __________________________\n\n    def test_icon_button_size_prop():\n>       ib1 = IconButton.create(\"activity\", size=\"2\")\n\ntests/components/radix/test_icon_button.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/radix/themes/components/icon_button.py:66: in create\n    Icon.create(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'reflex.components.lucide.icon.Icon'>, children = ('activity',)\nprops = {}\n\n    @classmethod\n    def create(cls, *children, **props) -> Component:\n        \"\"\"Initialize the Icon component.\n    \n        Run some additional checks on Icon component.\n    \n        Args:\n            *children: The positional arguments\n            **props: The keyword arguments\n    \n        Raises:\n            AttributeError: The errors tied to bad usage of the Icon component.\n            ValueError: If the icon tag is invalid.\n    \n        Returns:\n            The created component.\n        \"\"\"\n        if len(children) > 0:\n>           raise AttributeError(\"Icon component does not accept children\")\nE           AttributeError: Icon component does not accept children\n\nreflex/components/lucide/icon.py:40: AttributeError\n_______________________________ test_icon_button _______________________________\n\n    def test_icon_button():\n>       ib1 = IconButton.create(\"activity\")\n\ntests/components/radix/test_icon_button.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/radix/themes/components/icon_button.py:66: in create\n    Icon.create(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'reflex.components.lucide.icon.Icon'>, children = ('activity',)\nprops = {}\n\n    @classmethod\n    def create(cls, *children, **props) -> Component:\n        \"\"\"Initialize the Icon component.\n    \n        Run some additional checks on Icon component.\n    \n        Args:\n            *children: The positional arguments\n            **props: The keyword arguments\n    \n        Raises:\n            AttributeError: The errors tied to bad usage of the Icon component.\n            ValueError: If the icon tag is invalid.\n    \n        Returns:\n            The created component.\n        \"\"\"\n        if len(children) > 0:\n>           raise AttributeError(\"Icon component does not accept children\")\nE           AttributeError: Icon component does not accept children\n\nreflex/components/lucide/icon.py:40: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/radix/test_icon_button.py::test_icon_button_size_prop\nFAILED tests/components/radix/test_icon_button.py::test_icon_button - Attribu...\n=================== 2 failed, 1 passed, 5 warnings in 0.13s ====================\n\n"], "reflex-reflex/components/tags/tag.py-format_props": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/utils/test_format.py .                                             [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.39s =========================\n\n"], "textual-src/textual/screen.py-focus_next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_next(\".c\").id == \"Paul\"\n\ntests/test_focus.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '.c'\n\n    def focus_next(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the next widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            widgets = self.query(selector).filter(Widget)\n            if widgets:\n                widgets[0].focus()\n                return widgets[0]\n            else:\n                return None\n        else:\n>           widgets = current_focus.query_next(selector).filter(Widget)\nE           AttributeError: 'Focusable' object has no attribute 'query_next'. Did you mean: 'query_one'?\n\nsrc/textual/screen.py:601: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n        screen.set_focus(screen.query_one(\"#w3\"))\n        assert screen.focused.id == \"w3\"\n    \n>       assert screen.focus_next(Button).id == \"w6\"\n\ntests/test_focus.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = <class 'textual.widgets._button.Button'>\n\n    def focus_next(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the next widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            widgets = self.query(selector).filter(Widget)\n            if widgets:\n                widgets[0].focus()\n                return widgets[0]\n            else:\n                return None\n        else:\n>           widgets = current_focus.query_next(selector).filter(Widget)\nE           AttributeError: 'Input' object has no attribute 'query_next'. Did you mean: 'query_one'?\n\nsrc/textual/screen.py:601: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_previous(\"#Paul\").id == \"Paul\"\n>       assert screen.focus_next(\"#foo\").id == \"foo\"\n\ntests/test_focus.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '#foo'\n\n    def focus_next(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the next widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            widgets = self.query(selector).filter(Widget)\n            if widgets:\n                widgets[0].focus()\n                return widgets[0]\n            else:\n                return None\n        else:\n>           widgets = current_focus.query_next(selector).filter(Widget)\nE           AttributeError: 'Focusable' object has no attribute 'query_next'. Did you mean: 'query_one'?\n\nsrc/textual/screen.py:601: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#child\"))\n        assert screen.focused.id == \"child\"\n    \n>       assert screen.focus_next().id == \"foo\"\n\ntests/test_focus.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '*'\n\n    def focus_next(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the next widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            widgets = self.query(selector).filter(Widget)\n            if widgets:\n                widgets[0].focus()\n                return widgets[0]\n            else:\n                return None\n        else:\n>           widgets = current_focus.query_next(selector).filter(Widget)\nE           AttributeError: 'Focusable' object has no attribute 'query_next'. Did you mean: 'query_one'?\n\nsrc/textual/screen.py:601: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n>       assert screen.focus_next(\"#bananas\") is None\n\ntests/test_focus.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:594: in focus_next\n    widgets = self.query(selector).filter(Widget)\nsrc/textual/css/query.py:190: in filter\n    return DOMQuery(\nsrc/textual/css/query.py:97: in __init__\n    self._filters.append(parse_selectors(filter))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncss_selectors = <class 'textual.widget.Widget'>\n\n    @lru_cache(maxsize=1024)\n    def parse_selectors(css_selectors: str) -> tuple[SelectorSet, ...]:\n>       if not css_selectors.strip():\nE       AttributeError: type object 'Widget' has no attribute 'strip'\n\nsrc/textual/css/parse.py:57: AttributeError\n_________________________ test_focus_next_and_previous _________________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous(screen: Screen):\n>       assert screen.focus_next().id == \"foo\"\n\ntests/test_focus.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:594: in focus_next\n    widgets = self.query(selector).filter(Widget)\nsrc/textual/css/query.py:190: in filter\n    return DOMQuery(\nsrc/textual/css/query.py:97: in __init__\n    self._filters.append(parse_selectors(filter))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncss_selectors = <class 'textual.widget.Widget'>\n\n    @lru_cache(maxsize=1024)\n    def parse_selectors(css_selectors: str) -> tuple[SelectorSet, ...]:\n>       if not css_selectors.strip():\nE       AttributeError: type object 'Widget' has no attribute 'strip'\n\nsrc/textual/css/parse.py:57: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_next(\".a\").id == \"foo\"\n\ntests/test_focus.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '.a'\n\n    def focus_next(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the next widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            widgets = self.query(selector).filter(Widget)\n            if widgets:\n                widgets[0].focus()\n                return widgets[0]\n            else:\n                return None\n        else:\n>           widgets = current_focus.query_next(selector).filter(Widget)\nE           AttributeError: 'Focusable' object has no attribute 'query_next'. Did you mean: 'query_one'?\n\nsrc/textual/screen.py:601: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#Paul\"))\n        assert screen.focused.id == \"Paul\"\n    \n>       assert screen.focus_next(Focusable).id == \"baz\"\n\ntests/test_focus.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = <class 'tests.test_focus.Focusable'>\n\n    def focus_next(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the next widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            widgets = self.query(selector).filter(Widget)\n            if widgets:\n                widgets[0].focus()\n                return widgets[0]\n            else:\n                return None\n        else:\n>           widgets = current_focus.query_next(selector).filter(Widget)\nE           AttributeError: 'Focusable' object has no attribute 'query_next'. Did you mean: 'query_one'?\n\nsrc/textual/screen.py:601: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Focu...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Fo...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: ty...\nFAILED tests/test_focus.py::test_focus_next_and_previous - AttributeError: ty...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\n======================== 8 failed, 8 warnings in 0.34s =========================\n\n"], "textual-src/textual/screen.py-focus_previous": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_next(\".c\").id == \"Paul\"\n        assert screen.focus_next(\".b\").id == \"baz\"\n        assert screen.focus_next(\".c\").id == \"child\"\n    \n>       assert screen.focus_previous(\".a\").id == \"foo\"\n\ntests/test_focus.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '.a'\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n        screen.set_focus(screen.query_one(\"#w3\"))\n        assert screen.focused.id == \"w3\"\n    \n        assert screen.focus_next(Button).id == \"w6\"\n        assert screen.focus_next(Switch).id == \"w7\"\n        assert screen.focus_next(Input).id == \"w12\"\n    \n>       assert screen.focus_previous(Button).id == \"w11\"\n\ntests/test_focus.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = <class 'textual.widgets._button.Button'>\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_previous(\"#Paul\").id == \"Paul\"\n\ntests/test_focus.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '#Paul'\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n        assert screen.focus_next(\"#bananas\") is None\n>       assert screen.focus_previous(\"#bananas\") is None\n\ntests/test_focus.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '#bananas'\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n>           return self.focus_first(selector)\nE           AttributeError: 'Screen' object has no attribute 'focus_first'. Did you mean: 'focus_next'?\n\nsrc/textual/screen.py:611: AttributeError\n_________________________ test_focus_next_and_previous _________________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous(screen: Screen):\n        assert screen.focus_next().id == \"foo\"\n        assert screen.focus_next().id == \"container1\"\n        assert screen.focus_next().id == \"Paul\"\n        assert screen.focus_next().id == \"baz\"\n        assert screen.focus_next().id == \"child\"\n    \n>       assert screen.focus_previous().id == \"baz\"\n\ntests/test_focus.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '*'\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_next(\".a\").id == \"foo\"\n        assert screen.focus_next(\".c\").id == \"Paul\"\n        assert screen.focus_next(\".c\").id == \"child\"\n    \n>       assert screen.focus_previous(\".c\").id == \"Paul\"\n\ntests/test_focus.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '.c'\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#Paul\"))\n        assert screen.focused.id == \"Paul\"\n    \n        assert screen.focus_next(Focusable).id == \"baz\"\n        assert screen.focus_next(Focusable).id == \"child\"\n    \n>       assert screen.focus_previous(Focusable).id == \"baz\"\n\ntests/test_focus.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = <class 'tests.test_focus.Focusable'>\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_previous().id == \"child\"\n\ntests/test_focus.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '*'\n\n    def focus_previous(self, selector: str | type[QueryType] = \"*\") -> Widget | None:\n        \"\"\"Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        current_focus = self.focused\n        if current_focus is None:\n            return self.focus_first(selector)\n    \n>       focusable_widgets = self.query(selector).filter(Widget.is_focusable)\nE       AttributeError: type object 'Widget' has no attribute 'is_focusable'. Did you mean: 'focusable'?\n\nsrc/textual/screen.py:613: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: type ...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous - AttributeError: ty...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.36s =========================\n\n"], "textual-src/textual/screen.py-set_focus": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n>       screen.set_focus(screen.query_one(\"#w3\"))\n\ntests/test_focus.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Input(id='w3'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#child\"))\n\ntests/test_focus.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='child'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n>       assert screen.focus_next(\"#bananas\") is None\n\ntests/test_focus.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:592: in focus_next\n    return self._move_focus(1, selector)\nsrc/textual/screen.py:548: in _move_focus\n    self.set_focus(to_focus)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = None, scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:692: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#Paul\"))\n\ntests/test_focus.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='Paul'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        if widget is None:\n            if self._focus_widget is not None:\n                self._focus_widget.is_focused = False\n                self._focus_widget = None\n        else:\n>           if self._focus_widget is not None:\nE           AttributeError: 'Screen' object has no attribute '_focus_widget'\n\nsrc/textual/screen.py:696: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Scre...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Sc...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.46s =========================\n\n"], "textual-src/textual/strip.py-index_to_cell_position": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/test_strip.py .FFFFFFFFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_index_to_cell_position[1-1] _______________________\n\nindex = 1, cell_position = 1\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 1\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n_______________________ test_index_to_cell_position[2-2] _______________________\n\nindex = 2, cell_position = 2\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 2\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n_______________________ test_index_to_cell_position[3-3] _______________________\n\nindex = 3, cell_position = 3\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 3\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n_______________________ test_index_to_cell_position[4-4] _______________________\n\nindex = 4, cell_position = 4\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 4\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n_______________________ test_index_to_cell_position[5-6] _______________________\n\nindex = 5, cell_position = 6\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 5\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n_______________________ test_index_to_cell_position[6-8] _______________________\n\nindex = 6, cell_position = 8\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 6\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n______________________ test_index_to_cell_position[7-10] _______________________\n\nindex = 7, cell_position = 10\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 7\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n______________________ test_index_to_cell_position[8-11] _______________________\n\nindex = 8, cell_position = 11\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 8\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n______________________ test_index_to_cell_position[9-12] _______________________\n\nindex = 9, cell_position = 12\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 9\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n______________________ test_index_to_cell_position[10-13] ______________________\n\nindex = 10, cell_position = 13\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 10\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n______________________ test_index_to_cell_position[11-14] ______________________\n\nindex = 11, cell_position = 14\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 11\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n___________________ test_index_cell_position_index_too_large ___________________\n\n    def test_index_cell_position_index_too_large():\n        strip = Strip([Segment(\"abcdef\"), Segment(\"ghi\")])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(100)\n\ntests/test_strip.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('abcdef'), Segment('ghi')], 9), index = 100\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n_____________________ test_index_cell_position_no_segments _____________________\n\n    def test_index_cell_position_no_segments():\n        strip = Strip([])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(2)\n\ntests/test_strip.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([], 0), index = 2\n\n    def index_to_cell_position(self, index: int) -> int:\n        cell_position = 0\n        for i in range(index):\n>           cell_position += len(self._cells[i])\nE           AttributeError: 'Strip' object has no attribute '_cells'\n\nsrc/textual/strip.py:161: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_strip.py::test_index_to_cell_position[1-1] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[2-2] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[3-3] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[4-4] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[5-6] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[6-8] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[7-10] - AttributeErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[8-11] - AttributeErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[9-12] - AttributeErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[10-13] - AttributeErr...\nFAILED tests/test_strip.py::test_index_to_cell_position[11-14] - AttributeErr...\nFAILED tests/test_strip.py::test_index_cell_position_index_too_large - Attrib...\nFAILED tests/test_strip.py::test_index_cell_position_no_segments - AttributeE...\n========================= 13 failed, 1 passed in 0.21s =========================\n\n"], "textual-src/textual/strip.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py .......                                       [100%]\n\n============================== 7 passed in 0.09s ===============================\n\n"], "textual-src/textual/app.py-batch_update": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_batch_update _______________________________\n\nself = App(title='App', classes={'-dark-mode'})\n\n    @contextmanager\n    def batch_update(self) -> Generator[None, None, None]:\n        try:\n>           self.suspend_updates()\nE           AttributeError: 'App' object has no attribute 'suspend_updates'\n\nsrc/textual/app.py:707: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_batch_update():\n        \"\"\"Test `batch_update` context manager\"\"\"\n        app = App()\n        assert app._batch_count == 0  # Start at zero\n    \n>       with app.batch_update():\n\ntests/test_app.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:135: in __enter__\n    return next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'})\n\n    @contextmanager\n    def batch_update(self) -> Generator[None, None, None]:\n        try:\n            self.suspend_updates()\n            yield\n        finally:\n>           self.resume_updates()\nE           AttributeError: 'App' object has no attribute 'resume_updates'\n\nsrc/textual/app.py:710: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_batch_update - AttributeError: 'App' object ha...\n============================== 1 failed in 0.25s ===============================\n\n"], "textual-src/textual/app.py-call_from_thread": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\n============================ no tests ran in 0.10s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_concurrency.py::on_ready\n(no match in any of [<Module test_concurrency.py>])\n\n"], "textual-src/textual/app.py-run_test": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 833 items\n\ntests/test_reactive.py F                                                 [  0%]\ntests/test_dynamic_bindings.py F                                         [  0%]\ntests/text_area/test_edit_via_api.py F                                   [  0%]\ntests/test_header.py F                                                   [  0%]\ntests/test_app.py F                                                      [  0%]\ntests/text_area/test_selection_bindings.py FF                            [  0%]\ntests/animations/test_tabs_underline_animation.py F                      [  0%]\ntests/text_area/test_selection_bindings.py FF                            [  1%]\ntests/test_reactive.py FF                                                [  1%]\ntests/test_progress_bar.py FFFFFFFF                                      [  2%]\ntests/test_tabbed_content.py F                                           [  2%]\ntests/test_overflow_change.py F                                          [  2%]\ntests/test_data_table.py F                                               [  2%]\ntests/input/test_input_value_visibility.py F                             [  2%]\ntests/text_area/test_selection_bindings.py FF                            [  3%]\ntests/workers/test_worker.py F                                           [  3%]\ntests/test_call_x_schedulers.py F                                        [  3%]\ntests/test_widget.py F                                                   [  3%]\ntests/text_area/test_edit_via_bindings.py FFFFFF                         [  4%]\ntests/text_area/test_selection_bindings.py FF                            [  4%]\ntests/animations/test_loading_indicator_animation.py F                   [  4%]\ntests/test_tabbed_content.py F                                           [  4%]\ntests/text_area/test_messages.py F                                       [  4%]\ntests/text_area/test_languages.py F                                      [  4%]\ntests/css/test_css_reloading.py F                                        [  5%]\ntests/test_tabbed_content.py F                                           [  5%]\ntests/test_pilot.py FFFF                                                 [  5%]\ntests/suggester/test_input_suggestions.py F                              [  5%]\ntests/test_query.py F                                                    [  5%]\ntests/test_tabbed_content.py F                                           [  6%]\ntests/text_area/test_selection_bindings.py FF                            [  6%]\ntests/test_tabbed_content.py F                                           [  6%]\ntests/select/test_blank_and_clear.py F                                   [  6%]\ntests/suggester/test_input_suggestions.py F                              [  6%]\ntests/select/test_value.py F                                             [  6%]\ntests/test_data_table.py F                                               [  6%]\ntests/test_keys.py F                                                     [  6%]\ntests/select/test_prompt.py F                                            [  7%]\ntests/test_data_table.py F                                               [  7%]\ntests/input/test_input_validation.py F                                   [  7%]\ntests/css/test_css_reloading.py F                                        [  7%]\ntests/text_area/test_setting_themes.py F                                 [  7%]\ntests/test_tabbed_content.py F                                           [  7%]\ntests/test_data_table.py F                                               [  7%]\ntests/css/test_inheritance.py x                                          [  7%]\ntests/tree/test_directory_tree.py F                                      [  8%]\ntests/test_lazy.py F                                                     [  8%]\ntests/test_data_table.py FF                                              [  8%]\ntests/test_tabbed_content.py F                                           [  8%]\ntests/text_area/test_selection.py F                                      [  8%]\ntests/input/test_input_value_visibility.py F                             [  8%]\ntests/test_data_table.py FFFF                                            [  9%]\ntests/text_area/test_edit_via_bindings.py F                              [  9%]\ntests/test_widget.py F                                                   [  9%]\ntests/test_data_table.py F                                               [  9%]\ntests/text_area/test_edit_via_api.py F                                   [  9%]\ntests/test_containers.py F                                               [  9%]\ntests/test_message_pump.py F                                             [  9%]\ntests/css/test_screen_css.py F                                           [ 10%]\ntests/listview/test_listview_initial_index.py FFFFFFFFF                  [ 11%]\ntests/input/test_input_validation.py F                                   [ 11%]\ntests/text_area/test_edit_via_bindings.py F                              [ 11%]\ntests/text_area/test_edit_via_api.py F                                   [ 11%]\ntests/text_area/test_selection_bindings.py FF                            [ 11%]\ntests/text_area/test_edit_via_api.py FFFF                                [ 12%]\ntests/test_pilot.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 18%]\nFFFFFFFFFFFF                                                             [ 19%]\ntests/input/test_input_validation.py FFFFFF                              [ 20%]\ntests/test_animation.py F                                                [ 20%]\ntests/test_border_subtitle.py F                                          [ 20%]\ntests/test_pilot.py FFFF                                                 [ 21%]\ntests/text_area/test_selection.py F                                      [ 21%]\ntests/text_area/test_edit_via_bindings.py FFFFF                          [ 22%]\ntests/test_data_table.py F                                               [ 22%]\ntests/select/test_empty_select.py F                                      [ 22%]\ntests/test_reactive.py FF                                                [ 22%]\ntests/text_area/test_selection_bindings.py FF                            [ 22%]\ntests/tree/test_tree_availability.py F                                   [ 22%]\ntests/test_driver.py F                                                   [ 23%]\ntests/animations/test_switch_animation.py F                              [ 23%]\ntests/text_area/test_selection_bindings.py FFFF                          [ 23%]\ntests/test_focus.py F                                                    [ 23%]\ntests/text_area/test_edit_via_bindings.py FFFFFF                         [ 24%]\ntests/text_area/test_edit_via_api.py F                                   [ 24%]\ntests/test_widget_removing.py F                                          [ 24%]\ntests/text_area/test_messages.py F                                       [ 24%]\ntests/test_widget_removing.py F                                          [ 24%]\ntests/test_data_table.py F                                               [ 25%]\ntests/select/test_changed_message.py F                                   [ 25%]\ntests/input/test_input_validation.py F                                   [ 25%]\ntests/css/test_initial.py F                                              [ 25%]\ntests/test_data_table.py F                                               [ 25%]\ntests/text_area/test_selection_bindings.py FF                            [ 25%]\ntests/text_area/test_edit_via_api.py F                                   [ 25%]\ntests/test_widget_removing.py F                                          [ 26%]\ntests/test_tabbed_content.py F                                           [ 26%]\ntests/test_data_table.py F                                               [ 26%]\ntests/test_tabbed_content.py F                                           [ 26%]\ntests/text_area/test_edit_via_api.py F                                   [ 26%]\ntests/test_unmount.py F                                                  [ 26%]\ntests/css/test_screen_css.py F                                           [ 26%]\ntests/toggles/test_radioset.py F                                         [ 26%]\ntests/text_area/test_selection.py FFFF                                   [ 27%]\ntests/animations/test_switch_animation.py F                              [ 27%]\ntests/test_mount.py F                                                    [ 27%]\ntests/test_tabbed_content.py F                                           [ 27%]\ntests/test_driver.py F                                                   [ 27%]\ntests/text_area/test_edit_via_api.py F                                   [ 27%]\ntests/test_reactive.py F                                                 [ 28%]\ntests/test_data_table.py F                                               [ 28%]\ntests/command_palette/test_events.py F                                   [ 28%]\ntests/test_data_table.py FF                                              [ 28%]\ntests/test_header.py F                                                   [ 28%]\ntests/text_area/test_selection.py FFF                                    [ 29%]\ntests/workers/test_worker.py F                                           [ 29%]\ntests/test_data_table.py F                                               [ 29%]\ntests/workers/test_worker_manager.py F                                   [ 29%]\ntests/text_area/test_edit_via_api.py F                                   [ 29%]\ntests/text_area/test_selection.py FFF                                    [ 29%]\ntests/test_reactive.py F                                                 [ 30%]\ntests/text_area/test_selection.py F                                      [ 30%]\ntests/text_area/test_edit_via_bindings.py F                              [ 30%]\ntests/test_data_table.py F                                               [ 30%]\ntests/tree/test_tree_availability.py F                                   [ 30%]\ntests/workers/test_worker.py F                                           [ 30%]\ntests/test_data_table.py F                                               [ 30%]\ntests/test_tabbed_content.py F                                           [ 30%]\ntests/test_data_table.py F                                               [ 30%]\ntests/test_screens.py F                                                  [ 31%]\ntests/test_data_table.py F                                               [ 31%]\ntests/test_message_handling.py F                                         [ 31%]\ntests/select/test_value.py F                                             [ 31%]\ntests/test_screens.py F                                                  [ 31%]\ntests/input/test_input_terminal_cursor.py F                              [ 31%]\ntests/test_reactive.py F                                                 [ 31%]\ntests/test_data_table.py FF                                              [ 32%]\ntests/test_app.py F                                                      [ 32%]\ntests/test_data_table.py FF                                              [ 32%]\ntests/test_tabbed_content.py F                                           [ 32%]\ntests/text_area/test_selection_bindings.py FF                            [ 32%]\ntests/test_driver.py F                                                   [ 32%]\ntests/test_animation.py F                                                [ 33%]\ntests/select/test_blank_and_clear.py F                                   [ 33%]\ntests/test_loading.py F                                                  [ 33%]\ntests/test_pilot.py FFFFFFFFFFFFFFFF                                     [ 35%]\ntests/text_area/test_selection_bindings.py FF                            [ 35%]\ntests/test_on.py F                                                       [ 35%]\ntests/text_area/test_selection_bindings.py FF                            [ 35%]\ntests/test_tabbed_content.py F                                           [ 35%]\ntests/test_reactive.py F                                                 [ 36%]\ntests/suggester/test_input_suggestions.py F                              [ 36%]\ntests/test_focus.py F                                                    [ 36%]\ntests/test_data_table.py F                                               [ 36%]\ntests/text_area/test_selection_bindings.py FF                            [ 36%]\ntests/test_widget_removing.py F                                          [ 36%]\ntests/text_area/test_selection.py F                                      [ 36%]\ntests/test_widget.py F                                                   [ 36%]\ntests/text_area/test_selection.py F                                      [ 37%]\ntests/text_area/test_edit_via_api.py F                                   [ 37%]\ntests/css/test_screen_css.py F                                           [ 37%]\ntests/test_reactive.py F                                                 [ 37%]\ntests/test_data_table.py F                                               [ 37%]\ntests/animations/test_disabling_animations.py F                          [ 37%]\ntests/test_data_table.py F                                               [ 37%]\ntests/test_focus.py F                                                    [ 37%]\ntests/tree/test_tree_availability.py F                                   [ 38%]\ntests/command_palette/test_events.py F                                   [ 38%]\ntests/text_area/test_edit_via_bindings.py FFFFFFFF                       [ 39%]\ntests/test_data_bind.py F                                                [ 39%]\ntests/text_area/test_selection_bindings.py FF                            [ 39%]\ntests/test_data_table.py F                                               [ 39%]\ntests/select/test_value.py F                                             [ 39%]\ntests/animations/test_disabling_animations.py F                          [ 39%]\ntests/test_data_table.py F                                               [ 39%]\ntests/text_area/test_selection.py F                                      [ 40%]\ntests/css/test_nested_css.py F                                           [ 40%]\ntests/suggester/test_input_suggestions.py F                              [ 40%]\ntests/select/test_blank_and_clear.py F                                   [ 40%]\ntests/test_animation.py F                                                [ 40%]\ntests/test_data_table.py F                                               [ 40%]\ntests/select/test_prompt.py F                                            [ 40%]\ntests/text_area/test_messages.py F                                       [ 40%]\ntests/css/test_initial.py F                                              [ 41%]\ntests/animations/test_progress_bar_animation.py F                        [ 41%]\ntests/test_on.py F                                                       [ 41%]\ntests/test_data_table.py F                                               [ 41%]\ntests/test_screens.py F                                                  [ 41%]\ntests/test_message_pump.py F                                             [ 41%]\ntests/text_area/test_languages.py F                                      [ 41%]\ntests/test_widget.py F                                                   [ 41%]\ntests/text_area/test_setting_themes.py F                                 [ 42%]\ntests/text_area/test_languages.py F                                      [ 42%]\ntests/test_screens.py F                                                  [ 42%]\ntests/test_call_x_schedulers.py F                                        [ 42%]\ntests/animations/test_tabs_underline_animation.py F                      [ 42%]\ntests/test_screens.py F                                                  [ 42%]\ntests/test_data_table.py F                                               [ 42%]\ntests/test_header.py F                                                   [ 42%]\ntests/test_data_table.py F                                               [ 42%]\ntests/text_area/test_edit_via_bindings.py FFFFFFFFF                      [ 44%]\ntests/text_area/test_messages.py F                                       [ 44%]\ntests/text_area/test_selection.py F                                      [ 44%]\ntests/input/test_input_value_visibility.py F                             [ 44%]\ntests/test_query.py FFFF                                                 [ 44%]\ntests/select/test_value.py F                                             [ 45%]\ntests/select/test_empty_select.py F                                      [ 45%]\ntests/text_area/test_selection_bindings.py FF                            [ 45%]\ntests/input/test_input_value_visibility.py F                             [ 45%]\ntests/test_data_table.py F                                               [ 45%]\ntests/test_pilot.py F                                                    [ 45%]\ntests/select/test_changed_message.py F                                   [ 45%]\ntests/animations/test_scrolling_animation.py F                           [ 45%]\ntests/test_query.py F                                                    [ 46%]\ntests/text_area/test_languages.py F                                      [ 46%]\ntests/text_area/test_selection_bindings.py FF                            [ 46%]\ntests/test_data_table.py F                                               [ 46%]\ntests/test_paste.py F                                                    [ 46%]\ntests/test_tabbed_content.py F                                           [ 46%]\ntests/test_widget.py F                                                   [ 46%]\ntests/test_pilot.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                 [ 51%]\ntests/test_reactive.py F                                                 [ 51%]\ntests/text_area/test_languages.py F                                      [ 51%]\ntests/text_area/test_edit_via_bindings.py FF                             [ 51%]\ntests/test_issue_4248.py F                                               [ 51%]\ntests/animations/test_progress_bar_animation.py F                        [ 51%]\ntests/text_area/test_edit_via_api.py F                                   [ 52%]\ntests/css/test_nested_css.py F                                           [ 52%]\ntests/test_widget_removing.py F                                          [ 52%]\ntests/workers/test_work_decorator.py FFFFFFFFFFFFFFFFFFFFFFFFFFFF        [ 55%]\ntests/text_area/test_edit_via_bindings.py F                              [ 55%]\ntests/test_widget.py F                                                   [ 55%]\ntests/css/test_programmatic_style_changes.py FFF                         [ 56%]\ntests/animations/test_disabling_animations.py F                          [ 56%]\ntests/animations/test_scrolling_animation.py F                           [ 56%]\ntests/text_area/test_selection_bindings.py F                             [ 56%]\ntests/test_reactive.py F                                                 [ 56%]\ntests/text_area/test_escape_binding.py F                                 [ 56%]\ntests/css/test_screen_css.py F                                           [ 57%]\ntests/animations/test_switch_animation.py F                              [ 57%]\ntests/test_header.py F                                                   [ 57%]\ntests/text_area/test_edit_via_api.py F                                   [ 57%]\ntests/css/test_nested_css.py F                                           [ 57%]\ntests/workers/test_worker.py F                                           [ 57%]\ntests/listview/test_listview_navigation.py F                             [ 57%]\ntests/test_app.py F                                                      [ 57%]\ntests/test_header.py F                                                   [ 57%]\ntests/css/test_nested_css.py F                                           [ 58%]\ntests/test_style_inheritance.py F                                        [ 58%]\ntests/test_screens.py F                                                  [ 58%]\ntests/input/test_input_validation.py FFFFF                               [ 58%]\ntests/text_area/test_edit_via_bindings.py FFFFFFFFF                      [ 60%]\ntests/test_tabbed_content.py F                                           [ 60%]\ntests/test_data_table.py F                                               [ 60%]\ntests/test_query.py F                                                    [ 60%]\ntests/input/test_input_validation.py F                                   [ 60%]\ntests/text_area/test_edit_via_api.py FF                                  [ 60%]\ntests/css/test_screen_css.py F                                           [ 60%]\ntests/workers/test_worker.py F                                           [ 60%]\ntests/test_data_table.py FF                                              [ 61%]\ntests/text_area/test_selection_bindings.py FFFF                          [ 61%]\ntests/text_area/test_edit_via_api.py F                                   [ 61%]\ntests/test_message_pump.py F                                             [ 61%]\ntests/test_tabbed_content.py F                                           [ 62%]\ntests/test_data_table.py FFF                                             [ 62%]\ntests/select/test_value.py F                                             [ 62%]\ntests/suggester/test_input_suggestions.py F                              [ 62%]\ntests/test_reactive.py F                                                 [ 62%]\ntests/animations/test_loading_indicator_animation.py F                   [ 62%]\ntests/test_widget.py F                                                   [ 63%]\ntests/test_query.py F                                                    [ 63%]\ntests/css/test_screen_css.py F                                           [ 63%]\ntests/test_tabbed_content.py F                                           [ 63%]\ntests/test_reactive.py F                                                 [ 63%]\ntests/test_containers.py F                                               [ 63%]\ntests/text_area/test_selection.py FFFFF                                  [ 64%]\ntests/text_area/test_edit_via_bindings.py FFFFFFFFF                      [ 65%]\ntests/workers/test_worker_manager.py F                                   [ 65%]\ntests/test_app.py F                                                      [ 65%]\ntests/test_animation.py F                                                [ 65%]\ntests/test_freeze.py .                                                   [ 65%]\ntests/text_area/test_selection_bindings.py FF                            [ 66%]\ntests/test_data_table.py F                                               [ 66%]\ntests/animations/test_disabling_animations.py F                          [ 66%]\ntests/text_area/test_edit_via_api.py F                                   [ 66%]\ntests/test_focus.py F                                                    [ 66%]\ntests/animations/test_progress_bar_animation.py F                        [ 66%]\ntests/test_data_table.py F                                               [ 66%]\ntests/test_paste.py F                                                    [ 66%]\ntests/test_reactive.py F                                                 [ 66%]\ntests/test_data_table.py F                                               [ 67%]\ntests/test_header.py F                                                   [ 67%]\ntests/test_disabled.py FFFFFFFFFF                                        [ 68%]\ntests/text_area/test_edit_via_bindings.py F                              [ 68%]\ntests/test_tabbed_content.py F                                           [ 68%]\ntests/test_header.py F                                                   [ 68%]\ntests/test_data_table.py F                                               [ 68%]\ntests/animations/test_loading_indicator_animation.py F                   [ 69%]\ntests/suggester/test_input_suggestions.py F                              [ 69%]\ntests/test_driver.py F                                                   [ 69%]\ntests/text_area/test_selection_bindings.py FF                            [ 69%]\ntests/workers/test_worker.py F                                           [ 69%]\ntests/test_containers.py F                                               [ 69%]\ntests/test_data_table.py F                                               [ 69%]\ntests/test_signal.py F                                                   [ 69%]\ntests/test_widget_removing.py F                                          [ 70%]\ntests/text_area/test_selection_bindings.py FFFFFFFFFFFF                  [ 71%]\ntests/input/test_input_terminal_cursor.py F                              [ 71%]\ntests/test_tabbed_content.py F                                           [ 71%]\ntests/test_widget.py F                                                   [ 71%]\ntests/test_message_pump.py F                                             [ 72%]\ntests/text_area/test_selection.py F                                      [ 72%]\ntests/text_area/test_edit_via_api.py FFF                                 [ 72%]\ntests/select/test_empty_select.py F                                      [ 72%]\ntests/animations/test_disabling_animations.py F                          [ 72%]\ntests/workers/test_worker.py F                                           [ 72%]\ntests/test_tabbed_content.py F                                           [ 72%]\ntests/text_area/test_edit_via_bindings.py FF                             [ 73%]\ntests/test_screens.py F                                                  [ 73%]\ntests/text_area/test_escape_binding.py F                                 [ 73%]\ntests/test_tabbed_content.py F                                           [ 73%]\ntests/test_focus.py F                                                    [ 73%]\ntests/suggester/test_input_suggestions.py F                              [ 73%]\ntests/test_data_table.py F                                               [ 73%]\ntests/animations/test_tabs_underline_animation.py F                      [ 74%]\ntests/input/test_input_value_visibility.py F                             [ 74%]\ntests/command_palette/test_events.py F                                   [ 74%]\ntests/test_data_table.py F                                               [ 74%]\ntests/test_containers.py F                                               [ 74%]\ntests/test_reactive.py F                                                 [ 74%]\ntests/test_data_table.py FF                                              [ 74%]\ntests/suggester/test_input_suggestions.py F                              [ 75%]\ntests/text_area/test_setting_themes.py F                                 [ 75%]\ntests/text_area/test_selection_bindings.py FF                            [ 75%]\ntests/test_focus.py F                                                    [ 75%]\ntests/text_area/test_messages.py F                                       [ 75%]\ntests/text_area/test_edit_via_api.py FFF                                 [ 75%]\ntests/test_screens.py F                                                  [ 76%]\ntests/text_area/test_edit_via_api.py F                                   [ 76%]\ntests/test_data_table.py F                                               [ 76%]\ntests/select/test_value.py F                                             [ 76%]\ntests/test_animation.py F                                                [ 76%]\ntests/test_data_table.py F                                               [ 76%]\ntests/text_area/test_edit_via_bindings.py F                              [ 76%]\ntests/command_palette/test_events.py F                                   [ 76%]\ntests/animations/test_disabling_animations.py F                          [ 77%]\ntests/test_data_table.py F                                               [ 77%]\ntests/text_area/test_selection.py F                                      [ 77%]\ntests/text_area/test_edit_via_api.py F                                   [ 77%]\ntests/test_data_table.py F                                               [ 77%]\ntests/select/test_empty_select.py F                                      [ 77%]\ntests/test_test_runner.py F                                              [ 77%]\ntests/input/test_input_restrict.py F                                     [ 77%]\ntests/test_pilot.py FFFFFFFFFFFF                                         [ 79%]\ntests/text_area/test_edit_via_bindings.py FFFF                           [ 79%]\ntests/input/test_input_validation.py FFFFFF                              [ 80%]\ntests/test_data_table.py F                                               [ 80%]\ntests/select/test_changed_message.py F                                   [ 80%]\ntests/test_tabbed_content.py F                                           [ 80%]\ntests/text_area/test_setting_themes.py F                                 [ 81%]\ntests/test_data_table.py F                                               [ 81%]\ntests/test_reactive.py F                                                 [ 81%]\ntests/test_data_table.py F                                               [ 81%]\ntests/test_on.py F                                                       [ 81%]\ntests/test_screens.py F                                                  [ 81%]\ntests/text_area/test_selection.py F                                      [ 81%]\ntests/test_tabbed_content.py F                                           [ 81%]\ntests/text_area/test_languages.py F                                      [ 81%]\ntests/input/test_input_validation.py F                                   [ 82%]\ntests/text_area/test_selection.py FFF                                    [ 82%]\ntests/test_signal.py F                                                   [ 82%]\ntests/select/test_value.py F                                             [ 82%]\ntests/text_area/test_edit_via_bindings.py FF                             [ 82%]\ntests/test_screens.py F                                                  [ 83%]\ntests/workers/test_worker.py F                                           [ 83%]\ntests/test_screens.py F                                                  [ 83%]\ntests/test_data_table.py F                                               [ 83%]\ntests/test_screens.py F                                                  [ 83%]\ntests/test_tabbed_content.py FF                                          [ 83%]\ntests/test_app.py F                                                      [ 83%]\ntests/text_area/test_edit_via_bindings.py FFFFFFFFFFFFFFF                [ 85%]\ntests/test_widget.py F                                                   [ 85%]\ntests/select/test_blank_and_clear.py F                                   [ 85%]\ntests/test_widget_removing.py F                                          [ 86%]\ntests/text_area/test_edit_via_api.py FF                                  [ 86%]\ntests/css/test_screen_css.py F                                           [ 86%]\ntests/test_shutdown.py F                                                 [ 86%]\ntests/workers/test_worker.py F                                           [ 86%]\ntests/text_area/test_languages.py F                                      [ 86%]\ntests/test_markdown.py F                                                 [ 86%]\ntests/test_data_table.py FFFFFF                                          [ 87%]\ntests/tree/test_node_refresh.py F                                        [ 87%]\ntests/css/test_screen_css.py F                                           [ 87%]\ntests/suggester/test_input_suggestions.py FFFFFFF                        [ 88%]\ntests/test_data_table.py F                                               [ 88%]\ntests/test_widget.py F                                                   [ 88%]\ntests/test_focus.py F                                                    [ 89%]\ntests/text_area/test_edit_via_api.py FF                                  [ 89%]\ntests/tree/test_tree_availability.py F                                   [ 89%]\ntests/test_reactive.py F                                                 [ 89%]\ntests/test_data_table.py F                                               [ 89%]\ntests/css/test_screen_css.py F                                           [ 89%]\ntests/workers/test_worker_manager.py F                                   [ 89%]\ntests/test_screens.py F                                                  [ 90%]\ntests/test_containers.py F                                               [ 90%]\ntests/test_data_table.py FF                                              [ 90%]\ntests/text_area/test_edit_via_bindings.py F                              [ 90%]\ntests/workers/test_worker.py F                                           [ 90%]\ntests/text_area/test_selection_bindings.py FF                            [ 90%]\ntests/test_app.py F                                                      [ 90%]\ntests/test_tabbed_content.py F                                           [ 91%]\ntests/select/test_value.py F                                             [ 91%]\ntests/css/test_screen_css.py F                                           [ 91%]\ntests/test_query.py F                                                    [ 91%]\ntests/css/test_programmatic_style_changes.py FFFFFF                      [ 92%]\ntests/text_area/test_edit_via_api.py F                                   [ 92%]\ntests/test_animation.py F                                                [ 92%]\ntests/animations/test_scrolling_animation.py F                           [ 92%]\ntests/test_data_table.py F                                               [ 92%]\ntests/text_area/test_selection_bindings.py FF                            [ 92%]\ntests/test_header.py F                                                   [ 93%]\ntests/test_data_table.py FFF                                             [ 93%]\ntests/text_area/test_edit_via_api.py F                                   [ 93%]\ntests/test_data_table.py FFF                                             [ 93%]\ntests/text_area/test_selection.py FFFFFFFFFFFFFFFF                       [ 95%]\ntests/test_data_table.py F                                               [ 95%]\ntests/text_area/test_edit_via_api.py F                                   [ 96%]\ntests/option_list/test_option_list_movement.py F                         [ 96%]\ntests/text_area/test_edit_via_bindings.py F                              [ 96%]\ntests/test_data_table.py F                                               [ 96%]\ntests/test_visible.py F                                                  [ 96%]\ntests/test_data_bind.py F                                                [ 96%]\ntests/test_query.py F                                                    [ 96%]\ntests/test_tabbed_content.py F                                           [ 96%]\ntests/text_area/test_edit_via_bindings.py F                              [ 96%]\ntests/text_area/test_selection.py FFFFFFFFFFFFFFFFFFFFF                  [ 99%]\ntests/test_tabbed_content.py F                                           [ 99%]\ntests/test_data_table.py F                                               [ 99%]\ntests/test_tabbed_content.py F                                           [ 99%]\ntests/text_area/test_edit_via_api.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_reactive_method_call_order ________________________\n\n    async def test_reactive_method_call_order():\n        class CallOrder(App):\n            count = reactive(OLD_VALUE, init=False)\n            count_times_ten = reactive(OLD_VALUE * 10, init=False)\n            calls = []\n    \n            def validate_count(self, value: int) -> int:\n                self.calls.append(f\"validate {value}\")\n                return value + 1\n    \n            def watch_count(self, value: int) -> None:\n                self.calls.append(f\"watch {value}\")\n    \n            def compute_count_times_ten(self) -> int:\n                self.calls.append(f\"compute {self.count}\")\n                return self.count * 10\n    \n        app = CallOrder()\n>       async with app.run_test():\n\ntests/test_reactive.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a316530>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_dynamic_disabled _____________________________\n\n    async def test_dynamic_disabled():\n        \"\"\"Check we can dynamically disable bindings.\"\"\"\n        actions = []\n    \n        class DynamicApp(App):\n            BINDINGS = [\n                (\"a\", \"register('a')\", \"A\"),\n                (\"b\", \"register('b')\", \"B\"),\n                (\"c\", \"register('c')\", \"B\"),\n            ]\n    \n            def action_register(self, key: str) -> None:\n                actions.append(key)\n    \n            def check_action(\n                self, action: str, parameters: tuple[object, ...]\n            ) -> bool | None:\n                if action == \"register\":\n                    if parameters == (\"b\",):\n                        return False\n                    if parameters == (\"c\",):\n                        return None\n                return True\n    \n        app = DynamicApp()\n>       async with app.run_test() as pilot:\n\ntests/test_dynamic_bindings.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936b880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_delete_within_line ____________________________\n\n    async def test_delete_within_line():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30be50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_screen_title_none_is_ignored _______________________\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a416cb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_return_code_is_one_after_crash ______________________\n\n    async def test_return_code_is_one_after_crash():\n        class MyApp(App):\n            def key_p(self):\n                1 / 0\n    \n        app = MyApp()\n        with contextlib.suppress(ZeroDivisionError):\n>           async with app.run_test() as pilot:\n\ntests/test_app.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492045b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_mouse_click[True] ____________________________\n\napp = <coroutine object app at 0x7f924929d1c0>\n\n    async def test_mouse_click(app: TextAreaApp):\n        \"\"\"When you click the TextArea, the cursor moves to the expected location.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:34: AttributeError\n___________________________ test_mouse_click[False] ____________________________\n\napp = <coroutine object app at 0x7f924929ec70>\n\n    async def test_mouse_click(app: TextAreaApp):\n        \"\"\"When you click the TextArea, the cursor moves to the expected location.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:34: AttributeError\n_________________ test_tabs_underline_does_not_animate_on_none _________________\n\n    async def test_tabs_underline_does_not_animate_on_none() -> None:\n        \"\"\"The underline jumps to its final position when not animated.\"\"\"\n        app = TabbedContentApp()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_tabs_underline_animation.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924930dcf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_cursor_selection_left_to_previous_line[True] _______________\n\napp = <coroutine object app at 0x7f9249268190>\n\n    async def test_cursor_selection_left_to_previous_line(app: TextAreaApp):\n        \"\"\"When you press shift+left resulting in the cursor moving back to the previous line,\n        the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:106: AttributeError\n______________ test_cursor_selection_left_to_previous_line[False] ______________\n\napp = <coroutine object app at 0x7f924929e960>\n\n    async def test_cursor_selection_left_to_previous_line(app: TextAreaApp):\n        \"\"\"When you press shift+left resulting in the cursor moving back to the previous line,\n        the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:106: AttributeError\n_____________________________ test_watch_init_true _____________________________\n\n    async def test_watch_init_true():\n        class WatcherInitTrue(App):\n            count = var(OLD_VALUE)\n            watcher_call_count = 0\n    \n            def watch_count(self, new_value: int) -> None:\n                self.watcher_call_count += 1\n    \n        app = WatcherInitTrue()\n>       async with app.run_test():\n\ntests/test_reactive.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92493416c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_set_reactive _______________________________\n\n    async def test_set_reactive():\n        \"\"\"Test set_reactive doesn't call watchers.\"\"\"\n    \n        class MyWidget(Widget):\n            foo = reactive(\"\")\n    \n            def __init__(self, foo: str) -> None:\n                super().__init__()\n                self.set_reactive(MyWidget.foo, foo)\n    \n            def watch_foo(self) -> None:\n                # Should never get here\n                1 / 0\n    \n        class MyApp(App):\n            def compose(self) -> ComposeResult:\n                yield MyWidget(\"foobar\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32dff0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_show_sub_widgets[True-True-True] _____________________\n\nshow_bar = True, show_percentage = True, show_eta = True\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30ca60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_show_sub_widgets[True-True-False] ____________________\n\nshow_bar = True, show_percentage = True, show_eta = False\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923e560>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_show_sub_widgets[True-False-True] ____________________\n\nshow_bar = True, show_percentage = False, show_eta = True\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249534a90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_show_sub_widgets[True-False-False] ____________________\n\nshow_bar = True, show_percentage = False, show_eta = False\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249342290>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_show_sub_widgets[False-True-True] ____________________\n\nshow_bar = False, show_percentage = True, show_eta = True\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a316b90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_show_sub_widgets[False-True-False] ____________________\n\nshow_bar = False, show_percentage = True, show_eta = False\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92496b21d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_show_sub_widgets[False-False-True] ____________________\n\nshow_bar = False, show_percentage = False, show_eta = True\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249bd7a60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_show_sub_widgets[False-False-False] ___________________\n\nshow_bar = False, show_percentage = False, show_eta = False\n\n    @pytest.mark.parametrize(\n        [\"show_bar\", \"show_percentage\", \"show_eta\"],\n        [\n            (True, True, True),\n            (True, True, False),\n            (True, False, True),\n            (True, False, False),\n            (False, True, True),\n            (False, True, False),\n            (False, False, True),\n            (False, False, False),\n        ],\n    )\n    async def test_show_sub_widgets(show_bar: bool, show_percentage: bool, show_eta: bool):\n        class PBApp(App[None]):\n            def compose(self):\n                self.pb = ProgressBar(\n                    show_bar=show_bar, show_percentage=show_percentage, show_eta=show_eta\n                )\n                yield self.pb\n    \n        app = PBApp()\n    \n>       async with app.run_test():\n\ntests/test_progress_bar.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924983e0e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_tabbed_content_switch_via_code ______________________\n\n    async def test_tabbed_content_switch_via_code():\n        \"\"\"Check tab navigation via code.\"\"\"\n    \n        class TabbedApp(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"foo\", id=\"foo\"):\n                        yield Label(\"Foo\", id=\"foo-label\")\n                    with TabPane(\"bar\", id=\"bar\"):\n                        yield Label(\"Bar\", id=\"bar-label\")\n                    with TabPane(\"baz\", id=\"baz\"):\n                        yield Label(\"Baz\", id=\"baz-label\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249a6fd30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_overflow_change_updates_virtual_size_appropriately ____________\n\n    async def test_overflow_change_updates_virtual_size_appropriately():\n        class MyApp(App):\n            def compose(self):\n                yield VerticalScroll()\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_overflow_change.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924930e1a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_reuse_row_key_after_clear ________________________\n\n    async def test_reuse_row_key_after_clear():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/1806\"\"\"\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:1089: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32d060>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_input_value_visible_on_instantiation ___________________\n\n    async def test_input_value_visible_on_instantiation():\n        \"\"\"Check if the full input value is rendered if the input is instantiated with it.\"\"\"\n    \n        class MyApp(App):\n            def compose(self):\n                yield Input(value=\"value\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/input/test_input_value_visibility.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926df90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_cursor_selection_up[True] ________________________\n\napp = <coroutine object app at 0x7f9249232d50>\n\n    async def test_cursor_selection_up(app: TextAreaApp):\n        \"\"\"When you press shift+up the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:118: AttributeError\n_______________________ test_cursor_selection_up[False] ________________________\n\napp = <coroutine object app at 0x7f9249233450>\n\n    async def test_cursor_selection_up(app: TextAreaApp):\n        \"\"\"When you press shift+up the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:118: AttributeError\n_______________________________ test_run_success _______________________________\n\n    async def test_run_success() -> None:\n        \"\"\"Test successful runs.\"\"\"\n    \n        def foo() -> str:\n            \"\"\"Regular function.\"\"\"\n            return \"foo\"\n    \n        async def bar() -> str:\n            \"\"\"Coroutine.\"\"\"\n            return \"bar\"\n    \n        async def baz() -> str:\n            \"\"\"Coroutine.\"\"\"\n            return \"baz\"\n    \n        class RunApp(App):\n            pass\n    \n        app = RunApp()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249657430>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_call_after_refresh ____________________________\n\n    async def test_call_after_refresh() -> None:\n        \"\"\"Check that call later makes a call after a refresh.\"\"\"\n        app = CallLaterApp()\n    \n        display_count = -1\n    \n        called_event = asyncio.Event()\n    \n        callback_message_pump: MessagePump | None = None\n    \n        def callback() -> None:\n            nonlocal display_count\n            nonlocal callback_message_pump\n            called_event.set()\n            display_count = app.display_count\n            callback_message_pump = active_message_pump.get()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936af80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_compose_order ______________________________\n\n    async def test_compose_order() -> None:\n        from textual.containers import Horizontal\n        from textual.screen import Screen\n        from textual.widgets import Select\n    \n        class MyScreen(Screen):\n            def on_mount(self) -> None:\n                self.query_one(Select).value = 1\n    \n            def compose(self) -> ComposeResult:\n                yield Horizontal(\n                    Select(((str(n), n) for n in range(10)), id=\"select\"),\n                    id=\"screen-horizontal\",\n                )\n    \n        class SelectBugApp(App[None]):\n            async def on_mount(self):\n                await self.push_screen(MyScreen(id=\"my-screen\"))\n                self.query_one(Select)\n    \n        app = SelectBugApp()\n        messages: list[Message] = []\n    \n>       async with app.run_test(message_hook=messages.append) as pilot:\n\ntests/test_widget.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249bd7fa0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_delete_word_left[selection0-  012 345 6789-final_selection0] _______\n\nselection = Selection(start=(0, 0), end=(0, 0))\nexpected_result = '  012 345 6789'\nfinal_selection = Selection(start=(0, 0), end=(0, 0))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"  012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  2 345 6789\", Selection.cursor((0, 2))),\n            (Selection.cursor((0, 5)), \"   345 6789\", Selection.cursor((0, 2))),\n            (\n                Selection.cursor((0, 6)),\n                \"  345 6789\",\n                Selection.cursor((0, 2)),\n            ),\n            (Selection.cursor((0, 14)), \"  012 345 \", Selection.cursor((0, 10))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a33e6b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_delete_word_left[selection1-  2 345 6789-final_selection1] ________\n\nselection = Selection(start=(0, 4), end=(0, 4))\nexpected_result = '  2 345 6789'\nfinal_selection = Selection(start=(0, 2), end=(0, 2))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"  012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  2 345 6789\", Selection.cursor((0, 2))),\n            (Selection.cursor((0, 5)), \"   345 6789\", Selection.cursor((0, 2))),\n            (\n                Selection.cursor((0, 6)),\n                \"  345 6789\",\n                Selection.cursor((0, 2)),\n            ),\n            (Selection.cursor((0, 14)), \"  012 345 \", Selection.cursor((0, 10))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30d6c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_delete_word_left[selection2-   345 6789-final_selection2] ________\n\nselection = Selection(start=(0, 5), end=(0, 5)), expected_result = '   345 6789'\nfinal_selection = Selection(start=(0, 2), end=(0, 2))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"  012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  2 345 6789\", Selection.cursor((0, 2))),\n            (Selection.cursor((0, 5)), \"   345 6789\", Selection.cursor((0, 2))),\n            (\n                Selection.cursor((0, 6)),\n                \"  345 6789\",\n                Selection.cursor((0, 2)),\n            ),\n            (Selection.cursor((0, 14)), \"  012 345 \", Selection.cursor((0, 10))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249343940>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_delete_word_left[selection3-  345 6789-final_selection3] _________\n\nselection = Selection(start=(0, 6), end=(0, 6)), expected_result = '  345 6789'\nfinal_selection = Selection(start=(0, 2), end=(0, 2))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"  012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  2 345 6789\", Selection.cursor((0, 2))),\n            (Selection.cursor((0, 5)), \"   345 6789\", Selection.cursor((0, 2))),\n            (\n                Selection.cursor((0, 6)),\n                \"  345 6789\",\n                Selection.cursor((0, 2)),\n            ),\n            (Selection.cursor((0, 14)), \"  012 345 \", Selection.cursor((0, 10))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32cac0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_delete_word_left[selection4-  012 345 -final_selection4] _________\n\nselection = Selection(start=(0, 14), end=(0, 14))\nexpected_result = '  012 345 '\nfinal_selection = Selection(start=(0, 10), end=(0, 10))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"  012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  2 345 6789\", Selection.cursor((0, 2))),\n            (Selection.cursor((0, 5)), \"   345 6789\", Selection.cursor((0, 2))),\n            (\n                Selection.cursor((0, 6)),\n                \"  345 6789\",\n                Selection.cursor((0, 2)),\n            ),\n            (Selection.cursor((0, 14)), \"  012 345 \", Selection.cursor((0, 10))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a316aa0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_delete_word_left[selection5-  01789-final_selection5] __________\n\nselection = Selection(start=(0, 4), end=(0, 11)), expected_result = '  01789'\nfinal_selection = Selection(start=(0, 4), end=(0, 4))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"  012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  2 345 6789\", Selection.cursor((0, 2))),\n            (Selection.cursor((0, 5)), \"   345 6789\", Selection.cursor((0, 2))),\n            (\n                Selection.cursor((0, 6)),\n                \"  345 6789\",\n                Selection.cursor((0, 2)),\n            ),\n            (Selection.cursor((0, 14)), \"  012 345 \", Selection.cursor((0, 10))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936b2e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_cursor_selection_left[True] _______________________\n\napp = <coroutine object app at 0x7f9249297290>\n\n    async def test_cursor_selection_left(app: TextAreaApp):\n        \"\"\"When you press shift+left the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:96: AttributeError\n______________________ test_cursor_selection_left[False] _______________________\n\napp = <coroutine object app at 0x7f92492e5850>\n\n    async def test_cursor_selection_left(app: TextAreaApp):\n        \"\"\"When you press shift+left the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:96: AttributeError\n_________________ test_loading_indicator_is_not_static_on_full _________________\n\n    async def test_loading_indicator_is_not_static_on_full() -> None:\n        \"\"\"The loading indicator doesn't fall back to the static render on FULL.\"\"\"\n        app = App()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_loading_indicator_animation.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32da80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_disabling_nested_tabs __________________________\n\n    async def test_disabling_nested_tabs():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3145.\"\"\"\n    \n        class TabbedApp(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent(id=\"tabbed-content\"):\n                    with TabPane(\"Tab Pane 1\"):\n                        yield Label(\"foo\")\n                    with TabPane(\"Tab Pane 2\"):\n                        yield Label(\"bar\")\n                    with TabPane(\"Tab Pane 3\"):\n                        with TabbedContent():\n                            with TabPane(\"Inner Pane 1\"):\n                                yield Label(\"fizz\")\n                            with TabPane(\"Inner Pane 2\"):\n                                yield Label(\"bang\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:816: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a417e20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_changed_message_edit_via_api _______________________\n\n    async def test_changed_message_edit_via_api():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_messages.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926c2b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_setting_builtin_language_via_constructor _________________\n\n    async def test_setting_builtin_language_via_constructor():\n        class MyTextAreaApp(App):\n            def compose(self) -> ComposeResult:\n                yield TextArea(\"print('hello')\", language=\"python\")\n    \n        app = MyTextAreaApp()\n    \n>       async with app.run_test():\n\ntests/text_area/test_languages.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249534970>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_css_reloading_applies_to_non_top_screen _________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f92492c4640>\n\n    async def test_css_reloading_applies_to_non_top_screen(monkeypatch) -> None:  # type: ignore\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3931\"\"\"\n    \n        monkeypatch.setenv(\n            \"TEXTUAL\", \"debug\"\n        )  # This will make sure we create a file monitor.\n    \n        # Write some initial CSS.\n        Path(CSS_PATH).write_text(\n            \"\"\"\\\n    Label {\n        height: 5;\n        border: panel white;\n    }\n    \"\"\"\n        )\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_css_reloading.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c50f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_hiding_nested_tabs ____________________________\n\n    async def test_hiding_nested_tabs():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3145.\"\"\"\n    \n        class TabbedApp(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent(id=\"tabbed-content\"):\n                    with TabPane(\"Tab Pane 1\"):\n                        yield Label(\"foo\")\n                    with TabPane(\"Tab Pane 2\"):\n                        yield Label(\"bar\")\n                    with TabPane(\"Tab Pane 3\"):\n                        with TabbedContent():\n                            with TabPane(\"Inner Pane 1\"):\n                                yield Label(\"fizz\")\n                            with TabPane(\"Inner Pane 2\"):\n                                yield Label(\"bang\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:842: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249534e80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_widget_under_another_widget[click] _____________\n\nmethod = 'click'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_widget_under_another_widget(method):\n        \"\"\"The targeting method should return False when the targeted widget is covered.\"\"\"\n    \n        class ObscuredButton(App):\n            CSS = \"\"\"\n            Label {\n                width: 30;\n                height: 5;\n            }\n            \"\"\"\n    \n            def compose(self):\n                yield Button()\n                yield Label()\n    \n            def on_mount(self):\n                self.query_one(Label).styles.offset = (0, -3)\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936bdc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_widget_under_another_widget[hover] _____________\n\nmethod = 'hover'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_widget_under_another_widget(method):\n        \"\"\"The targeting method should return False when the targeted widget is covered.\"\"\"\n    \n        class ObscuredButton(App):\n            CSS = \"\"\"\n            Label {\n                width: 30;\n                height: 5;\n            }\n            \"\"\"\n    \n            def compose(self):\n                yield Button()\n                yield Label()\n    \n            def on_mount(self):\n                self.query_one(Label).styles.offset = (0, -3)\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a4497b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_pilot_target_widget_under_another_widget[mouse_down] ___________\n\nmethod = 'mouse_down'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_widget_under_another_widget(method):\n        \"\"\"The targeting method should return False when the targeted widget is covered.\"\"\"\n    \n        class ObscuredButton(App):\n            CSS = \"\"\"\n            Label {\n                width: 30;\n                height: 5;\n            }\n            \"\"\"\n    \n            def compose(self):\n                yield Button()\n                yield Label()\n    \n            def on_mount(self):\n                self.query_one(Label).styles.offset = (0, -3)\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c6380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_widget_under_another_widget[mouse_up] ____________\n\nmethod = 'mouse_up'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_widget_under_another_widget(method):\n        \"\"\"The targeting method should return False when the targeted widget is covered.\"\"\"\n    \n        class ObscuredButton(App):\n            CSS = \"\"\"\n            Label {\n                width: 30;\n                height: 5;\n            }\n            \"\"\"\n    \n            def compose(self):\n                yield Button()\n                yield Label()\n    \n            def on_mount(self):\n                self.query_one(Label).styles.offset = (0, -3)\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923c9a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_no_suggestion_on_empty_value _______________________\n\n    async def test_no_suggestion_on_empty_value():\n        app = SuggestionsApp([\"hello\"])\n>       async with app.run_test():\n\ntests/suggester/test_input_suggestions.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30c460>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_query_set_styles_invalid_css_raises_error ________________\n\n    async def test_query_set_styles_invalid_css_raises_error():\n        app = App()\n>       async with app.run_test():\n\ntests/test_query.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249207250>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_reenabling_tab ______________________________\n\n    async def test_reenabling_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).get_tab(\"tab-2\").disabled = True\n    \n            def reenable(self) -> None:\n                self.query_one(TabbedContent).get_tab(\"tab-2\").disabled = False\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:593: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a417880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_cursor_word_right[True] _________________________\n\napp = <coroutine object app at 0x7f9249185d90>\n\n    async def test_cursor_word_right(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:160: AttributeError\n________________________ test_cursor_word_right[False] _________________________\n\napp = <coroutine object app at 0x7f9249186500>\n\n    async def test_cursor_word_right(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:160: AttributeError\n____________________________ test_show_unknown_tab _____________________________\n\n    async def test_show_unknown_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n        app = TabbedApp()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:689: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2ea230>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_clear_fails_if_allow_blank_is_false ___________________\n\n    async def test_clear_fails_if_allow_blank_is_false():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select(SELECT_OPTIONS, allow_blank=False)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_blank_and_clear.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30a1a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_suggestion_priority ___________________________\n\n    async def test_suggestion_priority():\n        app = SuggestionsApp([\"dog\", \"dad\"])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249909210>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_value_assign_to_blank __________________________\n\n    async def test_value_assign_to_blank():\n        \"\"\"Setting the value to BLANK should work with default `allow_blank` value.\"\"\"\n        app = SelectApp(1)\n>       async with app.run_test():\n\ntests/select/test_value.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f8d60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_get_row_at ________________________________\n\n    async def test_get_row_at():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32f0a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_character_bindings ____________________________\n\n    async def test_character_bindings():\n        \"\"\"Test you can bind to a character as well as a longer key name.\"\"\"\n        counter = 0\n    \n        class BindApp(App):\n            BINDINGS = [(\".,~,space\", \"increment\", \"foo\")]\n    \n            def action_increment(self) -> None:\n                nonlocal counter\n                counter += 1\n    \n        app = BindApp()\n>       async with app.run_test() as pilot:\n\ntests/test_keys.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923c400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_reactive_prompt_change __________________________\n\n    async def test_reactive_prompt_change():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2983\"\"\"\n    \n        class SelectApp(App):\n            def compose(self):\n                yield Select[int](\n                    [(str(n), n) for n in range(3)],\n                    prompt=\"Old prompt\",\n                )\n    \n        app = SelectApp()\n>       async with app.run_test() as pilot:\n\ntests/select/test_prompt.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32f040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_update_cell_invalid_column_key ______________________\n\n    async def test_update_cell_invalid_column_key():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3335\"\"\"\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:677: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a3143a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_input_submitted_message_validation_failure ________________\n\n    async def test_input_submitted_message_validation_failure():\n        app = InputApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c5bd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_css_reloading_file_not_found _______________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f924936a2f0>\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2506/test_css_reloading_file_not_fo0')\n\n    async def test_css_reloading_file_not_found(monkeypatch, tmp_path):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3996\n    \n        Files can become temporarily unavailable during saving on certain environments.\n        \"\"\"\n        monkeypatch.setenv(\"TEXTUAL\", \"debug\")\n    \n        css_path = tmp_path / \"test_css_reloading_file_not_found.tcss\"\n        with open(css_path, \"w\") as css_file:\n            css_file.write(\"#a {color: red;}\")\n    \n        class TextualApp(App):\n            CSS_PATH = css_path\n    \n        app = TextualApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_css_reloading.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936ac20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_setting_builtin_themes __________________________\n\n    async def test_setting_builtin_themes():\n        class MyTextAreaApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield TextArea(\"print('hello')\", language=\"python\", theme=\"vscode_dark\")\n    \n        app = MyTextAreaApp()\n    \n>       async with app.run_test():\n\ntests/text_area/test_setting_themes.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249534f40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_tabbed_content_initial __________________________\n\n    async def test_tabbed_content_initial():\n        \"\"\"Checked tabbed content with non-default tab.\"\"\"\n    \n        class TabbedApp(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent(initial=\"bar\"):\n                    with TabPane(\"foo\", id=\"foo\"):\n                        yield Label(\"Foo\", id=\"foo-label\")\n                    with TabPane(\"bar\", id=\"bar\"):\n                        yield Label(\"Bar\", id=\"bar-label\")\n                    with TabPane(\"baz\", id=\"baz\"):\n                        yield Label(\"Baz\", id=\"baz-label\")\n    \n        app = TabbedApp()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926ed10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_get_cell_coordinate_returns_coordinate __________________\n\n    async def test_get_cell_coordinate_returns_coordinate():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249741780>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_directory_tree_reloading_preserves_state _________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2506/test_directory_tree_reloading_0')\n\n    async def test_directory_tree_reloading_preserves_state(tmp_path: Path) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4122.\n    \n        Ensures `clear_node` does clear the node specified.\n        \"\"\"\n        ROOT = \"root\"\n        structure = [\n            ROOT,\n            \"root/file1.txt\",\n            \"root/file2.txt\",\n        ]\n    \n        for path in structure:\n            if path.endswith(\".txt\"):\n                (tmp_path / path).touch()\n            else:\n                (tmp_path / path).mkdir()\n    \n        app = DirectoryTreeApp(tmp_path / ROOT)\n>       async with app.run_test() as pilot:\n\ntests/tree/test_directory_tree.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32ebc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________________ test_lazy ___________________________________\n\n    async def test_lazy():\n        app = LazyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_lazy.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926f6d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_remove_row ________________________________\n\n    async def test_remove_row():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:301: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910bd90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_sort_reverse_coordinate_and_key_access __________________\n\n    async def test_sort_reverse_coordinate_and_key_access():\n        \"\"\"Ensure that, after sorting, that coordinates and cell keys\n        can still be used to retrieve the correct cell.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:947: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924990b340>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_hide_unknown_tab _____________________________\n\n    async def test_hide_unknown_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n        app = TabbedApp()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:677: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918f9a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_selected_text_backward __________________________\n\n    async def test_selected_text_backward():\n        \"\"\"Selecting text from bottom to top results in the correct selected_text.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249340670>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_input_value_visible_if_mounted_later ___________________\n\n    async def test_input_value_visible_if_mounted_later():\n        \"\"\"Check if full input value is rendered if the widget is mounted later.\"\"\"\n    \n        class MyApp(App):\n            BINDINGS = [(\"a\", \"add_input\", \"add_input\")]\n    \n            async def action_add_input(self):\n                await self.mount(Input(value=\"value\"))\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_value_visibility.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2e82b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_update_cell_at_column_width[A-BB-3] ___________________\n\nlabel = 'A', new_value = 'BB', new_content_width = 3\n\n    @pytest.mark.parametrize(\n        \"label,new_value,new_content_width\",\n        [\n            # Shorter than initial cell value, larger than label => width remains same\n            (\"A\", \"BB\", 3),\n            # Larger than cell value, shorter than label => width remains that of label\n            (\"1234567\", \"1234\", 7),\n            # Shorter than cell value, shorter than label => width remains same\n            (\"12345\", \"123\", 5),\n            # Larger than cell value, larger than label => width updates to new cell value\n            (\"12345\", \"123456789\", 9),\n        ],\n    )\n    async def test_update_cell_at_column_width(label, new_value, new_content_width):\n        # Initial cell values are length 3. Let's update cell content and ensure\n        # that the width of the column is correct given the new cell content widths\n        # and the label of the column the cell is in.\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249109360>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_update_cell_at_column_width[1234567-1234-7] _______________\n\nlabel = '1234567', new_value = '1234', new_content_width = 7\n\n    @pytest.mark.parametrize(\n        \"label,new_value,new_content_width\",\n        [\n            # Shorter than initial cell value, larger than label => width remains same\n            (\"A\", \"BB\", 3),\n            # Larger than cell value, shorter than label => width remains that of label\n            (\"1234567\", \"1234\", 7),\n            # Shorter than cell value, shorter than label => width remains same\n            (\"12345\", \"123\", 5),\n            # Larger than cell value, larger than label => width updates to new cell value\n            (\"12345\", \"123456789\", 9),\n        ],\n    )\n    async def test_update_cell_at_column_width(label, new_value, new_content_width):\n        # Initial cell values are length 3. Let's update cell content and ensure\n        # that the width of the column is correct given the new cell content widths\n        # and the label of the column the cell is in.\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92496575e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_update_cell_at_column_width[12345-123-5] _________________\n\nlabel = '12345', new_value = '123', new_content_width = 5\n\n    @pytest.mark.parametrize(\n        \"label,new_value,new_content_width\",\n        [\n            # Shorter than initial cell value, larger than label => width remains same\n            (\"A\", \"BB\", 3),\n            # Larger than cell value, shorter than label => width remains that of label\n            (\"1234567\", \"1234\", 7),\n            # Shorter than cell value, shorter than label => width remains same\n            (\"12345\", \"123\", 5),\n            # Larger than cell value, larger than label => width updates to new cell value\n            (\"12345\", \"123456789\", 9),\n        ],\n    )\n    async def test_update_cell_at_column_width(label, new_value, new_content_width):\n        # Initial cell values are length 3. Let's update cell content and ensure\n        # that the width of the column is correct given the new cell content widths\n        # and the label of the column the cell is in.\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924980b370>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_update_cell_at_column_width[12345-123456789-9] ______________\n\nlabel = '12345', new_value = '123456789', new_content_width = 9\n\n    @pytest.mark.parametrize(\n        \"label,new_value,new_content_width\",\n        [\n            # Shorter than initial cell value, larger than label => width remains same\n            (\"A\", \"BB\", 3),\n            # Larger than cell value, shorter than label => width remains that of label\n            (\"1234567\", \"1234\", 7),\n            # Shorter than cell value, shorter than label => width remains same\n            (\"12345\", \"123\", 5),\n            # Larger than cell value, larger than label => width updates to new cell value\n            (\"12345\", \"123456789\", 9),\n        ],\n    )\n    async def test_update_cell_at_column_width(label, new_value, new_content_width):\n        # Initial cell values are length 3. Let's update cell content and ensure\n        # that the width of the column is correct given the new cell content widths\n        # and the label of the column the cell is in.\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924990b5e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_paste_read_only_does_nothing _______________________\n\n    async def test_paste_read_only_does_nothing():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:507: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c7940>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_get_child_by_type ____________________________\n\n    async def test_get_child_by_type():\n        class GetChildApp(App):\n            def compose(self) -> ComposeResult:\n                yield Widget(id=\"widget1\")\n                yield Container(\n                    Label(id=\"label1\"),\n                    Widget(id=\"widget2\"),\n                    id=\"container1\",\n                )\n    \n        app = GetChildApp()\n>       async with app.run_test():\n\ntests/test_widget.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a9c90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_click_column_cursor ___________________________\n\n    async def test_click_column_cursor():\n        \"\"\"When the column cursor is used, and we click, we emit a ColumnHighlighted\n        *and* a ColumnSelected message for the column that was clicked.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:814: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249808490>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_delete_fully_within_selection ______________________\n\n    async def test_delete_fully_within_selection():\n        \"\"\"User-facing selection should be best-effort adjusted when a programmatic\n        replacement is made to the document.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:514: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249368730>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_horizontal_vs_horizontalscroll_scrolling _________________\n\n    async def test_horizontal_vs_horizontalscroll_scrolling():\n        \"\"\"Check the default scrollbar behaviours for `Horizontal` and `HorizontalScroll`.\"\"\"\n    \n        class HorizontalsApp(App[None]):\n            CSS = \"\"\"\n            Screen {\n                layout: vertical;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                with Horizontal():\n                    for _ in range(10):\n                        yield Label(\"How is life going? \" * 3 + \" | \")\n                with HorizontalScroll():\n                    for _ in range(10):\n                        yield Label(\"How is life going? \" * 3 + \" | \")\n    \n        WIDTH = 80\n        HEIGHT = 24\n        app = HorizontalsApp()\n>       async with app.run_test(size=(WIDTH, HEIGHT)):\n\ntests/test_containers.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249908d90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_prevent_with_call_next __________________________\n\n    async def test_prevent_with_call_next() -> None:\n        \"\"\"Test for https://github.com/Textualize/textual/issues/3166.\n    \n        Does a callback scheduled with `call_next` respect messages that\n        were prevented when it was scheduled?\n        \"\"\"\n    \n        hits = 0\n    \n        class PreventTestApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield Input()\n    \n            def change_input(self) -> None:\n                self.query_one(Input).value += \"a\"\n    \n            def on_input_changed(self) -> None:\n                nonlocal hits\n                hits += 1\n    \n        app = PreventTestApp()\n>       async with app.run_test() as pilot:\n\ntests/test_message_pump.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a316350>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_screen_css_switch_mode_screen_type_by_name ________________\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a9db0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[0-1] _______________________\n\ninitial_index = 0, expected_index = 1\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926d870>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[1-1] _______________________\n\ninitial_index = 1, expected_index = 1\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249340130>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[2-4] _______________________\n\ninitial_index = 2, expected_index = 4\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926d9f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[3-4] _______________________\n\ninitial_index = 3, expected_index = 4\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a44a3b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[4-4] _______________________\n\ninitial_index = 4, expected_index = 4\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30b790>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[5-5] _______________________\n\ninitial_index = 5, expected_index = 5\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2eb520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[6-7] _______________________\n\ninitial_index = 6, expected_index = 7\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491713c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[7-7] _______________________\n\ninitial_index = 7, expected_index = 7\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a0310>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_listview_initial_index[8-1] _______________________\n\ninitial_index = 8, expected_index = 1\n\n    @pytest.mark.parametrize(\n        \"initial_index,expected_index\",\n        [\n            (0, 1),\n            (1, 1),\n            (2, 4),\n            (3, 4),\n            (4, 4),\n            (5, 5),\n            (6, 7),\n            (7, 7),\n            (8, 1),\n        ],\n    )\n    async def test_listview_initial_index(initial_index, expected_index) -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4449\"\"\"\n    \n        class ListViewDisabledItemsApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield ListView(\n                    ListItem(Label(\"0\"), disabled=True),\n                    ListItem(Label(\"1\")),\n                    ListItem(Label(\"2\"), disabled=True),\n                    ListItem(Label(\"3\"), disabled=True),\n                    ListItem(Label(\"4\")),\n                    ListItem(Label(\"5\")),\n                    ListItem(Label(\"6\"), disabled=True),\n                    ListItem(Label(\"7\")),\n                    ListItem(Label(\"8\"), disabled=True),\n                    initial_index=initial_index,\n                )\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_initial_index.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c4fd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_input_changed_message_validation_failure _________________\n\n    async def test_input_changed_message_validation_failure():\n        app = InputApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30d150>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_delete_word_right_delete_to_end_of_line _________________\n\n    async def test_delete_word_right_delete_to_end_of_line():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:399: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a417b20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_insert_newlines_end ___________________________\n\n    async def test_insert_newlines_end():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249171c60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_cursor_vertical_movement_visual_alignment_snapping[True] _________\n\napp = <coroutine object app at 0x7f9249185af0>\n\n    async def test_cursor_vertical_movement_visual_alignment_snapping(app: TextAreaApp):\n        \"\"\"When you move the cursor vertically, it should stay vertically\n        aligned even when double-width characters are used.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:278: AttributeError\n________ test_cursor_vertical_movement_visual_alignment_snapping[False] ________\n\napp = <coroutine object app at 0x7f9249186030>\n\n    async def test_cursor_vertical_movement_visual_alignment_snapping(app: TextAreaApp):\n        \"\"\"When you move the cursor vertically, it should stay vertically\n        aligned even when double-width characters are used.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:278: AttributeError\n_ test_insert_character_near_cursor_maintain_selection_offset[cursor_location0-insert_location0-cursor_destination0] _\n\ncursor_location = (0, 3), insert_location = (0, 2), cursor_destination = (0, 4)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((0, 3), (0, 2), (0, 4)),  # API insert just before cursor\n            ((0, 3), (0, 3), (0, 4)),  # API insert at cursor location\n            ((0, 3), (0, 4), (0, 3)),  # API insert just after cursor\n            ((0, 3), (0, 5), (0, 3)),  # API insert just after cursor\n        ],\n    )\n    async def test_insert_character_near_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination,\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a3a60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_insert_character_near_cursor_maintain_selection_offset[cursor_location1-insert_location1-cursor_destination1] _\n\ncursor_location = (0, 3), insert_location = (0, 3), cursor_destination = (0, 4)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((0, 3), (0, 2), (0, 4)),  # API insert just before cursor\n            ((0, 3), (0, 3), (0, 4)),  # API insert at cursor location\n            ((0, 3), (0, 4), (0, 3)),  # API insert just after cursor\n            ((0, 3), (0, 5), (0, 3)),  # API insert just after cursor\n        ],\n    )\n    async def test_insert_character_near_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination,\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249149930>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_insert_character_near_cursor_maintain_selection_offset[cursor_location2-insert_location2-cursor_destination2] _\n\ncursor_location = (0, 3), insert_location = (0, 4), cursor_destination = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((0, 3), (0, 2), (0, 4)),  # API insert just before cursor\n            ((0, 3), (0, 3), (0, 4)),  # API insert at cursor location\n            ((0, 3), (0, 4), (0, 3)),  # API insert just after cursor\n            ((0, 3), (0, 5), (0, 3)),  # API insert just after cursor\n        ],\n    )\n    async def test_insert_character_near_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination,\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910ba90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_insert_character_near_cursor_maintain_selection_offset[cursor_location3-insert_location3-cursor_destination3] _\n\ncursor_location = (0, 3), insert_location = (0, 5), cursor_destination = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((0, 3), (0, 2), (0, 4)),  # API insert just before cursor\n            ((0, 3), (0, 3), (0, 4)),  # API insert at cursor location\n            ((0, 3), (0, 4), (0, 3)),  # API insert just after cursor\n            ((0, 3), (0, 5), (0, 3)),  # API insert just after cursor\n        ],\n    )\n    async def test_insert_character_near_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination,\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30ea40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size0-offset0] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (100, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2e87c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size1-offset1] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (100, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924980b490>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size2-offset2] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (50, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249173fa0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size3-offset3] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (-10, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a33d750>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size4-offset4] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (-10, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30e080>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size5-offset5] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (-10, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910ad70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size6-offset6] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (50, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249657610>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size7-offset7] ______\n\nmethod = 'click', screen_size = (80, 24), offset = (100, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fd0c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size8-offset8] ______\n\nmethod = 'click', screen_size = (5, 5), offset = (7, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a449630>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_outside_screen_errors[click-screen_size9-offset9] ______\n\nmethod = 'click', screen_size = (5, 5), offset = (7, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249342140>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[click-screen_size10-offset10] _____\n\nmethod = 'click', screen_size = (5, 5), offset = (3, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491183d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[click-screen_size11-offset11] _____\n\nmethod = 'click', screen_size = (5, 5), offset = (-1, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a92a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[click-screen_size12-offset12] _____\n\nmethod = 'click', screen_size = (5, 5), offset = (-1, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fc220>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[click-screen_size13-offset13] _____\n\nmethod = 'click', screen_size = (5, 5), offset = (-1, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249006d10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[click-screen_size14-offset14] _____\n\nmethod = 'click', screen_size = (5, 5), offset = (3, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924990b640>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[click-screen_size15-offset15] _____\n\nmethod = 'click', screen_size = (5, 5), offset = (7, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92493421a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size16-offset16] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (100, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f9cf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size17-offset17] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (100, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924914b160>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size18-offset18] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (50, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a26e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size19-offset19] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (-10, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a416410>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size20-offset20] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (-10, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249062470>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size21-offset21] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (-10, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923fd00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size22-offset22] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (50, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a309ba0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size23-offset23] _____\n\nmethod = 'hover', screen_size = (80, 24), offset = (100, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924983d360>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size24-offset24] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (7, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a448490>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size25-offset25] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (7, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c6290>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size26-offset26] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (3, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923f700>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size27-offset27] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (-1, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249031300>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size28-offset28] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (-1, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249172830>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size29-offset29] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (-1, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a33c2e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size30-offset30] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (3, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924901add0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_outside_screen_errors[hover-screen_size31-offset31] _____\n\nmethod = 'hover', screen_size = (5, 5), offset = (7, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e3130>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size32-offset32] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (100, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924914a560>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size33-offset33] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (100, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490180d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size34-offset34] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (50, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249062920>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size35-offset35] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (-10, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924983c880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size36-offset36] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (-10, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490326b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size37-offset37] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (-10, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923eb00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size38-offset38] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (50, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fffd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size39-offset39] __\n\nmethod = 'mouse_down', screen_size = (80, 24), offset = (100, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491abbe0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size40-offset40] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (7, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a28f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size41-offset41] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (7, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249119300>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size42-offset42] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (3, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2ebf10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size43-offset43] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (-1, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924901b850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size44-offset44] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (-1, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32fc10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size45-offset45] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (-1, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490163e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size46-offset46] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (3, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30ec20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_outside_screen_errors[mouse_down-screen_size47-offset47] __\n\nmethod = 'mouse_down', screen_size = (5, 5), offset = (7, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92496573d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size48-offset48] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (100, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249142d40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size49-offset49] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (100, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924990b580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size50-offset50] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (50, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249063220>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size51-offset51] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (-10, 36)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249030400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size52-offset52] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (-10, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249204250>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size53-offset53] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (-10, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249103d00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size54-offset54] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (50, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fe9e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size55-offset55] ___\n\nmethod = 'mouse_up', screen_size = (80, 24), offset = (100, -2)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249119cf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size56-offset56] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (7, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249033190>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size57-offset57] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (7, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249103550>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size58-offset58] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (3, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c5750>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size59-offset59] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (-1, 7)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249006a70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size60-offset60] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (-1, 3)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a415e10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size61-offset61] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (-1, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30bf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size62-offset62] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (3, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918ff70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_outside_screen_errors[mouse_up-screen_size63-offset63] ___\n\nmethod = 'mouse_up', screen_size = (5, 5), offset = (7, -1)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"screen_size\", \"offset\"],\n        [\n            #\n            (\"click\", (80, 24), (100, 12)),  # Right of screen.\n            (\"click\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"click\", (80, 24), (50, 36)),  # Under screen.\n            (\"click\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"click\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"click\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"click\", (80, 24), (50, -2)),  # Above screen.\n            (\"click\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"click\", (5, 5), (7, 3)),  # Right of screen.\n            (\"click\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"click\", (5, 5), (3, 7)),  # Under screen.\n            (\"click\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"click\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"click\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"click\", (5, 5), (3, -1)),  # Above screen.\n            (\"click\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"hover\", (80, 24), (100, 12)),  # Right of screen.\n            (\"hover\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"hover\", (80, 24), (50, 36)),  # Under screen.\n            (\"hover\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"hover\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"hover\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"hover\", (80, 24), (50, -2)),  # Above screen.\n            (\"hover\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"hover\", (5, 5), (7, 3)),  # Right of screen.\n            (\"hover\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"hover\", (5, 5), (3, 7)),  # Under screen.\n            (\"hover\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"hover\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"hover\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"hover\", (5, 5), (3, -1)),  # Above screen.\n            (\"hover\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_down\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_down\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_down\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_down\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_down\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_down\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_down\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_down\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_down\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_down\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_down\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_down\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_down\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_down\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_down\", (5, 5), (7, -1)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (80, 24), (100, 12)),  # Right of screen.\n            (\"mouse_up\", (80, 24), (100, 36)),  # Bottom-right of screen.\n            (\"mouse_up\", (80, 24), (50, 36)),  # Under screen.\n            (\"mouse_up\", (80, 24), (-10, 36)),  # Bottom-left of screen.\n            (\"mouse_up\", (80, 24), (-10, 12)),  # Left of screen.\n            (\"mouse_up\", (80, 24), (-10, -2)),  # Top-left of screen.\n            (\"mouse_up\", (80, 24), (50, -2)),  # Above screen.\n            (\"mouse_up\", (80, 24), (100, -2)),  # Top-right of screen.\n            #\n            (\"mouse_up\", (5, 5), (7, 3)),  # Right of screen.\n            (\"mouse_up\", (5, 5), (7, 7)),  # Bottom-right of screen.\n            (\"mouse_up\", (5, 5), (3, 7)),  # Under screen.\n            (\"mouse_up\", (5, 5), (-1, 7)),  # Bottom-left of screen.\n            (\"mouse_up\", (5, 5), (-1, 3)),  # Left of screen.\n            (\"mouse_up\", (5, 5), (-1, -1)),  # Top-left of screen.\n            (\"mouse_up\", (5, 5), (3, -1)),  # Above screen.\n            (\"mouse_up\", (5, 5), (7, -1)),  # Top-right of screen.\n        ],\n    )\n    async def test_pilot_target_outside_screen_errors(method, screen_size, offset):\n        \"\"\"Make sure that targeting a click/hover completely outside of the screen errors.\"\"\"\n        app = App()\n>       async with app.run_test(size=screen_size) as pilot:\n\ntests/test_pilot.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a44b610>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_valid_empty _______________________________\n\n    async def test_valid_empty():\n        app = InputApp(None)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249030eb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_validation_on_blur_should_not_happen_unless_specified[validate_on0] ___\n\nvalidate_on = set()\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"submitted\"},\n            {\"changed\"},\n            {\"submitted\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_blur_should_not_happen_unless_specified(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f31420>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_validation_on_blur_should_not_happen_unless_specified[validate_on1] ___\n\nvalidate_on = {'submitted'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"submitted\"},\n            {\"changed\"},\n            {\"submitted\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_blur_should_not_happen_unless_specified(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490ff5b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_validation_on_blur_should_not_happen_unless_specified[validate_on2] ___\n\nvalidate_on = {'changed'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"submitted\"},\n            {\"changed\"},\n            {\"submitted\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_blur_should_not_happen_unless_specified(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908de10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_validation_on_blur_should_not_happen_unless_specified[validate_on3] ___\n\nvalidate_on = {'changed', 'submitted'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"submitted\"},\n            {\"changed\"},\n            {\"submitted\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_blur_should_not_happen_unless_specified(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910a710>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_validation_on_blur_should_not_happen_unless_specified[validate_on4] ___\n\nvalidate_on = {'fried', 'garbage'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"submitted\"},\n            {\"changed\"},\n            {\"submitted\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_blur_should_not_happen_unless_specified(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32e140>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_wait_for_current_and_scheduled_animations ________________\n\n    async def test_wait_for_current_and_scheduled_animations() -> None:\n        \"\"\"Test that we can wait for current and scheduled animations.\"\"\"\n    \n        app = AnimApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_animation.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f97e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_border_subtitle _____________________________\n\n    async def test_border_subtitle():\n        class BorderWidget(Widget):\n            BORDER_TITLE = \"foo\"\n            BORDER_SUBTITLE = \"bar\"\n    \n        class SimpleApp(App):\n            def compose(self) -> ComposeResult:\n                yield BorderWidget()\n    \n        empty_app = SimpleApp()\n>       async with empty_app.run_test() as pilot:\n\ntests/test_border_subtitle.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908c160>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_pilot_target_visible_widget[click] ____________________\n\nmethod = 'click'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_visible_widget(method):\n        \"\"\"The targeting method should return True when the targeted widget is hit.\"\"\"\n    \n        class ObscuredButton(App):\n            def compose(self):\n                yield Button()\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a44a0b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_pilot_target_visible_widget[hover] ____________________\n\nmethod = 'hover'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_visible_widget(method):\n        \"\"\"The targeting method should return True when the targeted widget is hit.\"\"\"\n    \n        class ObscuredButton(App):\n            def compose(self):\n                yield Button()\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249368850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_pilot_target_visible_widget[mouse_down] _________________\n\nmethod = 'mouse_down'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_visible_widget(method):\n        \"\"\"The targeting method should return True when the targeted widget is hit.\"\"\"\n    \n        class ObscuredButton(App):\n            def compose(self):\n                yield Button()\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2e90f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_pilot_target_visible_widget[mouse_up] __________________\n\nmethod = 'mouse_up'\n\n    @pytest.mark.parametrize(\"method\", [\"click\", \"hover\", \"mouse_down\", \"mouse_up\"])\n    async def test_pilot_target_visible_widget(method):\n        \"\"\"The targeting method should return True when the targeted widget is hit.\"\"\"\n    \n        class ObscuredButton(App):\n            def compose(self):\n                yield Button()\n    \n        app = ObscuredButton()\n>       async with app.run_test() as pilot:\n\ntests/test_pilot.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f338b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_cursor_location_set_while_selecting ___________________\n\n    async def test_cursor_location_set_while_selecting():\n        \"\"\"If you set the cursor_location while a selection is in progress,\n        the start/anchor point of the selection will remain where it is.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92498e1690>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_delete_line[selection0-] _________________________\n\nselection = Selection(start=(0, 0), end=(0, 0)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 4)), \"\"),\n            (Selection.cursor((0, 10)), \"\"),\n            (Selection((0, 2), (0, 4)), \"\"),\n            (Selection((0, 4), (0, 2)), \"\"),\n        ],\n    )\n    async def test_delete_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c4dc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_delete_line[selection1-] _________________________\n\nselection = Selection(start=(0, 4), end=(0, 4)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 4)), \"\"),\n            (Selection.cursor((0, 10)), \"\"),\n            (Selection((0, 2), (0, 4)), \"\"),\n            (Selection((0, 4), (0, 2)), \"\"),\n        ],\n    )\n    async def test_delete_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30c610>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_delete_line[selection2-] _________________________\n\nselection = Selection(start=(0, 10), end=(0, 10)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 4)), \"\"),\n            (Selection.cursor((0, 10)), \"\"),\n            (Selection((0, 2), (0, 4)), \"\"),\n            (Selection((0, 4), (0, 2)), \"\"),\n        ],\n    )\n    async def test_delete_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926cf70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_delete_line[selection3-] _________________________\n\nselection = Selection(start=(0, 2), end=(0, 4)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 4)), \"\"),\n            (Selection.cursor((0, 10)), \"\"),\n            (Selection((0, 2), (0, 4)), \"\"),\n            (Selection((0, 4), (0, 2)), \"\"),\n        ],\n    )\n    async def test_delete_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908fa90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_delete_line[selection4-] _________________________\n\nselection = Selection(start=(0, 4), end=(0, 2)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 4)), \"\"),\n            (Selection.cursor((0, 10)), \"\"),\n            (Selection((0, 2), (0, 4)), \"\"),\n            (Selection((0, 4), (0, 2)), \"\"),\n        ],\n    )\n    async def test_delete_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30a290>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_get_row_invalid_row_key _________________________\n\n    async def test_get_row_invalid_row_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:519: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249657340>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_empty_set_options_raises_exception_if_allow_blank_is_false ________\n\n    async def test_empty_set_options_raises_exception_if_allow_blank_is_false():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select([(str(n), n) for n in range(3)], allow_blank=False)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_empty_select.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249148d90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_reactive_compute_first_time_set _____________________\n\n    async def test_reactive_compute_first_time_set():\n        class ReactiveComputeFirstTimeSet(App):\n            number = reactive(1)\n            double_number = reactive(None)\n    \n            def compute_double_number(self):\n                return self.number * 2\n    \n        app = ReactiveComputeFirstTimeSet()\n>       async with app.run_test():\n\ntests/test_reactive.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249017c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_validate_init_true ____________________________\n\n    async def test_validate_init_true():\n        \"\"\"When init is True for a reactive attribute, Textual should call the validator\n        AND the watch method when the app starts.\"\"\"\n        validator_call_count = 0\n    \n        class ValidatorInitTrue(App):\n            count = var(5, init=True)\n    \n            def validate_count(self, value: int) -> int:\n                nonlocal validator_call_count\n                validator_call_count += 1\n                return value + 1\n    \n        app = ValidatorInitTrue()\n>       async with app.run_test():\n\ntests/test_reactive.py:191: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c48e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_cursor_word_right_select[True] ______________________\n\napp = <coroutine object app at 0x7f9248f4a2d0>\n\n    async def test_cursor_word_right_select(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:170: AttributeError\n_____________________ test_cursor_word_right_select[False] _____________________\n\napp = <coroutine object app at 0x7f9248f48890>\n\n    async def test_cursor_word_right_select(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:170: AttributeError\n___________________ test_enabled_tree_node_selected_message ____________________\n\n    async def test_enabled_tree_node_selected_message() -> None:\n        \"\"\"Clicking the root node disclosure triangle on an enabled tree\n        should result in an `NodeExpanded` message being emitted.\"\"\"\n        app = TreeApp(disabled=False)\n>       async with app.run_test() as pilot:\n\ntests/tree/test_tree_availability.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249018580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_driver_mouse_down_up_click ________________________\n\n    async def test_driver_mouse_down_up_click():\n        \"\"\"Mouse down and up should issue a click.\"\"\"\n    \n        class MyApp(App):\n            messages = []\n    \n            @on(Click)\n            @on(MouseDown)\n            @on(MouseUp)\n            def handle(self, event):\n                self.messages.append(event)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_driver.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a2d10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_switch_animates_on_basic _________________________\n\n    async def test_switch_animates_on_basic() -> None:\n        app = SwitchApp()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_switch_animation.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c7940>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_cursor_to_line_home_basic_behaviour[True-home] ______________\n\nkey = 'home', app = <coroutine object app at 0x7f9248fe0c10>\n\n    @pytest.mark.parametrize(\"key\", [\"home\", \"ctrl+a\"])\n    async def test_cursor_to_line_home_basic_behaviour(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the start of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:216: AttributeError\n____________ test_cursor_to_line_home_basic_behaviour[True-ctrl+a] _____________\n\nkey = 'ctrl+a', app = <coroutine object app at 0x7f9248fe0e40>\n\n    @pytest.mark.parametrize(\"key\", [\"home\", \"ctrl+a\"])\n    async def test_cursor_to_line_home_basic_behaviour(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the start of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:216: AttributeError\n_____________ test_cursor_to_line_home_basic_behaviour[False-home] _____________\n\nkey = 'home', app = <coroutine object app at 0x7f9248fe15b0>\n\n    @pytest.mark.parametrize(\"key\", [\"home\", \"ctrl+a\"])\n    async def test_cursor_to_line_home_basic_behaviour(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the start of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:216: AttributeError\n____________ test_cursor_to_line_home_basic_behaviour[False-ctrl+a] ____________\n\nkey = 'ctrl+a', app = <coroutine object app at 0x7f9248fe1a80>\n\n    @pytest.mark.parametrize(\"key\", [\"home\", \"ctrl+a\"])\n    async def test_cursor_to_line_home_basic_behaviour(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the start of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:216: AttributeError\n___________________________ test_focus_pseudo_class ____________________________\n\n    async def test_focus_pseudo_class():\n        \"\"\"Test focus and blue pseudo classes\"\"\"\n    \n        # https://github.com/Textualize/textual/pull/3645\n        class FocusApp(App):\n            AUTO_FOCUS = None\n    \n            def compose(self) -> ComposeResult:\n                yield Button(\"Hello\")\n    \n        app = FocusApp()\n>       async with app.run_test() as pilot:\n\ntests/test_focus.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249205360>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_delete_word_left_with_tabs[selection0-\\t012 \\t 345\\t6789-final_selection0] _\n\nselection = Selection(start=(0, 0), end=(0, 0))\nexpected_result = '\\t012 \\t 345\\t6789'\nfinal_selection = Selection(start=(0, 0), end=(0, 0))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"\\t012 \\t 345\\t6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"\\t \\t 345\\t6789\", Selection.cursor((0, 1))),\n            (Selection.cursor((0, 5)), \"\\t\\t 345\\t6789\", Selection.cursor((0, 1))),\n            (\n                Selection.cursor((0, 6)),\n                \"\\t 345\\t6789\",\n                Selection.cursor((0, 1)),\n            ),\n            (Selection.cursor((0, 15)), \"\\t012 \\t 345\\t\", Selection.cursor((0, 11))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"\\t0126789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left_with_tabs(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491010f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_delete_word_left_with_tabs[selection1-\\t \\t 345\\t6789-final_selection1] _\n\nselection = Selection(start=(0, 4), end=(0, 4))\nexpected_result = '\\t \\t 345\\t6789'\nfinal_selection = Selection(start=(0, 1), end=(0, 1))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"\\t012 \\t 345\\t6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"\\t \\t 345\\t6789\", Selection.cursor((0, 1))),\n            (Selection.cursor((0, 5)), \"\\t\\t 345\\t6789\", Selection.cursor((0, 1))),\n            (\n                Selection.cursor((0, 6)),\n                \"\\t 345\\t6789\",\n                Selection.cursor((0, 1)),\n            ),\n            (Selection.cursor((0, 15)), \"\\t012 \\t 345\\t\", Selection.cursor((0, 11))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"\\t0126789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left_with_tabs(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f25750>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_delete_word_left_with_tabs[selection2-\\t\\t 345\\t6789-final_selection2] __\n\nselection = Selection(start=(0, 5), end=(0, 5))\nexpected_result = '\\t\\t 345\\t6789'\nfinal_selection = Selection(start=(0, 1), end=(0, 1))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"\\t012 \\t 345\\t6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"\\t \\t 345\\t6789\", Selection.cursor((0, 1))),\n            (Selection.cursor((0, 5)), \"\\t\\t 345\\t6789\", Selection.cursor((0, 1))),\n            (\n                Selection.cursor((0, 6)),\n                \"\\t 345\\t6789\",\n                Selection.cursor((0, 1)),\n            ),\n            (Selection.cursor((0, 15)), \"\\t012 \\t 345\\t\", Selection.cursor((0, 11))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"\\t0126789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left_with_tabs(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb4e80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_delete_word_left_with_tabs[selection3-\\t 345\\t6789-final_selection3] ___\n\nselection = Selection(start=(0, 6), end=(0, 6))\nexpected_result = '\\t 345\\t6789'\nfinal_selection = Selection(start=(0, 1), end=(0, 1))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"\\t012 \\t 345\\t6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"\\t \\t 345\\t6789\", Selection.cursor((0, 1))),\n            (Selection.cursor((0, 5)), \"\\t\\t 345\\t6789\", Selection.cursor((0, 1))),\n            (\n                Selection.cursor((0, 6)),\n                \"\\t 345\\t6789\",\n                Selection.cursor((0, 1)),\n            ),\n            (Selection.cursor((0, 15)), \"\\t012 \\t 345\\t\", Selection.cursor((0, 11))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"\\t0126789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left_with_tabs(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30dcf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_delete_word_left_with_tabs[selection4-\\t012 \\t 345\\t-final_selection4] __\n\nselection = Selection(start=(0, 15), end=(0, 15))\nexpected_result = '\\t012 \\t 345\\t'\nfinal_selection = Selection(start=(0, 11), end=(0, 11))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"\\t012 \\t 345\\t6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"\\t \\t 345\\t6789\", Selection.cursor((0, 1))),\n            (Selection.cursor((0, 5)), \"\\t\\t 345\\t6789\", Selection.cursor((0, 1))),\n            (\n                Selection.cursor((0, 6)),\n                \"\\t 345\\t6789\",\n                Selection.cursor((0, 1)),\n            ),\n            (Selection.cursor((0, 15)), \"\\t012 \\t 345\\t\", Selection.cursor((0, 11))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"\\t0126789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left_with_tabs(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32d2d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_delete_word_left_with_tabs[selection5-\\t0126789-final_selection5] ____\n\nselection = Selection(start=(0, 4), end=(0, 11)), expected_result = '\\t0126789'\nfinal_selection = Selection(start=(0, 4), end=(0, 4))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"\\t012 \\t 345\\t6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"\\t \\t 345\\t6789\", Selection.cursor((0, 1))),\n            (Selection.cursor((0, 5)), \"\\t\\t 345\\t6789\", Selection.cursor((0, 1))),\n            (\n                Selection.cursor((0, 6)),\n                \"\\t 345\\t6789\",\n                Selection.cursor((0, 1)),\n            ),\n            (Selection.cursor((0, 15)), \"\\t012 \\t 345\\t\", Selection.cursor((0, 11))),\n            # When there's a selection and you \"delete word left\", it just deletes the selection\n            (Selection((0, 4), (0, 11)), \"\\t0126789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_left_with_tabs(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c7d00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_insert_text_non_cursor_location_dont_maintain_offset ___________\n\n    async def test_insert_text_non_cursor_location_dont_maintain_offset():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a449240>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_widget_remove_children_with_type_selector ________________\n\n    async def test_widget_remove_children_with_type_selector():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908eda0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_selection_changed_via_typing _______________________\n\n    async def test_selection_changed_via_typing():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_messages.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926e9e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_widget_remove_children_container _____________________\n\n    async def test_widget_remove_children_container():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924990b700>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_sort_by_function_sum ___________________________\n\n    async def test_sort_by_function_sum():\n        \"\"\"Test sorting a `DataTable` using a custom sort function.\"\"\"\n    \n        def custom_sort(row_data):\n            return sum(row_data)\n    \n        row_data = (\n            [1, 3, 8],  # SUM=12\n            [2, 9, 5],  # SUM=16\n            [1, 1, 9],  # SUM=11\n        )\n    \n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:1281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249062410>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_message_control _____________________________\n\n    async def test_message_control():\n        app = SelectApp()\n>       async with app.run_test() as pilot:\n\ntests/select/test_changed_message.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a448b50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_on_blur_triggers_validation _______________________\n\n    async def test_on_blur_triggers_validation():\n        app = InputApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33cd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_initial_default _____________________________\n\n    async def test_initial_default():\n        class InitialApp(App):\n            def compose(self) -> ComposeResult:\n                yield Base(id=\"base\")\n                yield CustomWidget1(id=\"custom1\")\n                yield CustomWidget2(id=\"custom2\")\n    \n        app = InitialApp()\n>       async with app.run_test():\n\ntests/css/test_initial.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918d8a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_update_cell_at_coordinate_doesnt_exist __________________\n\n    async def test_update_cell_at_coordinate_doesnt_exist():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:698: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249205510>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_cursor_selection_right_to_previous_line[True] ______________\n\napp = <coroutine object app at 0x7f9248f97f40>\n\n    async def test_cursor_selection_right_to_previous_line(app: TextAreaApp):\n        \"\"\"When you press shift+right resulting in the cursor moving to the next line,\n        the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:87: AttributeError\n_____________ test_cursor_selection_right_to_previous_line[False] ______________\n\napp = <coroutine object app at 0x7f9248f947b0>\n\n    async def test_cursor_selection_right_to_previous_line(app: TextAreaApp):\n        \"\"\"When you press shift+right resulting in the cursor moving to the next line,\n        the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:87: AttributeError\n__________________________ test_insert_newlines_start __________________________\n\n    async def test_insert_newlines_start():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490602b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_widget_remove_children_no_children_match_selector ____________\n\n    async def test_widget_remove_children_no_children_match_selector():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33c10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_hiding_tabs_moves_active_to_next_tab ___________________\n\n    async def test_hiding_tabs_moves_active_to_next_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n                    yield Label(\"tab-3\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:744: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491727a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_get_cell_coordinate_invalid_row_key ___________________\n\n    async def test_get_cell_coordinate_invalid_row_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e0910>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_unsetting_tabbed_content_active _____________________\n\n    async def test_unsetting_tabbed_content_active():\n        \"\"\"Check that setting `TabbedContent.active = \"\"` unsets active tab.\"\"\"\n    \n        messages = []\n    \n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent(initial=\"bar\"):\n                    with TabPane(\"foo\", id=\"foo\"):\n                        yield Label(\"Foo\", id=\"foo-label\")\n                    with TabPane(\"bar\", id=\"bar\"):\n                        yield Label(\"Bar\", id=\"bar-label\")\n                    with TabPane(\"baz\", id=\"baz\"):\n                        yield Label(\"Baz\", id=\"baz-label\")\n    \n            def on_tabbed_content_cleared(self, event: TabbedContent.Cleared) -> None:\n                messages.append(event)\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92498e0f40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_insert_windows_newlines _________________________\n\n    async def test_insert_windows_newlines():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249006b90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_unmount _________________________________\n\n    async def test_unmount():\n        \"\"\"Test unmount events are received in reverse DOM order.\"\"\"\n        unmount_ids: list[str] = []\n    \n        class UnmountWidget(Container):\n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(\n                    f\"{self.__class__.__name__}#{self.id}-{self.parent is not None}-{len(self._nodes)}\"\n                )\n    \n        class MyScreen(Screen):\n            def compose(self) -> ComposeResult:\n                yield UnmountWidget(\n                    UnmountWidget(\n                        UnmountWidget(id=\"bar1\"), UnmountWidget(id=\"bar2\"), id=\"bar\"\n                    ),\n                    UnmountWidget(\n                        UnmountWidget(id=\"baz1\"), UnmountWidget(id=\"baz2\"), id=\"baz\"\n                    ),\n                    id=\"top\",\n                )\n    \n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(f\"{self.__class__.__name__}#{self.id}\")\n    \n        class UnmountApp(App):\n            async def on_mount(self) -> None:\n                await self.push_screen(MyScreen(id=\"main\"))\n    \n        app = UnmountApp()\n>       async with app.run_test() as pilot:\n\ntests/test_unmount.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491423e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb7be0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_keyboard_navigation_with_disabled_buttons ________________\n\n    async def test_keyboard_navigation_with_disabled_buttons():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3839.\"\"\"\n    \n        app = RadioSetDisabledButtonsApp()\n>       async with app.run_test() as pilot:\n\ntests/toggles/test_radioset.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249206b90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_get_cursor_right_location[start0-end0] __________________\n\nstart = (0, 0), end = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 1)),\n            ((0, 16), (1, 0)),\n            ((3, 20), (4, 0)),\n            ((4, 0), (4, 0)),\n        ],\n    )\n    async def test_get_cursor_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249017d30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_get_cursor_right_location[start1-end1] __________________\n\nstart = (0, 16), end = (1, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 1)),\n            ((0, 16), (1, 0)),\n            ((3, 20), (4, 0)),\n            ((4, 0), (4, 0)),\n        ],\n    )\n    async def test_get_cursor_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fd7e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_get_cursor_right_location[start2-end2] __________________\n\nstart = (3, 20), end = (4, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 1)),\n            ((0, 16), (1, 0)),\n            ((3, 20), (4, 0)),\n            ((4, 0), (4, 0)),\n        ],\n    )\n    async def test_get_cursor_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249063880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_get_cursor_right_location[start3-end3] __________________\n\nstart = (4, 0), end = (4, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 1)),\n            ((0, 16), (1, 0)),\n            ((3, 20), (4, 0)),\n            ((4, 0), (4, 0)),\n        ],\n    )\n    async def test_get_cursor_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30d8a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_switch_does_not_animate_on_none _____________________\n\n    async def test_switch_does_not_animate_on_none() -> None:\n        app = SwitchApp()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_switch_animation.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c6e90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_render_only_after_mount _________________________\n\n    async def test_render_only_after_mount():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2914\"\"\"\n        app = App()\n>       async with app.run_test() as pilot:\n\ntests/test_mount.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a4492d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_reenabling_via_tabbed_content ______________________\n\n    async def test_reenabling_via_tabbed_content():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).disable_tab(\"tab-2\")\n    \n            def reenable(self) -> None:\n                self.query_one(TabbedContent).enable_tab(\"tab-2\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249170ee0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_driver_mouse_down_drag_inside_widget_up_click ______________\n\n    async def test_driver_mouse_down_drag_inside_widget_up_click():\n        \"\"\"Mouse down and up should issue a click, even if the mouse moves but remains\n        inside the same widget.\"\"\"\n    \n        class MyApp(App):\n            messages = []\n    \n            def compose(self):\n                yield Button()\n    \n            def on_button_pressed(self, event):\n                self.messages.append(event)\n    \n        app = MyApp()\n        button_width = 16\n        button_height = 3\n>       async with app.run_test() as pilot:\n\ntests/test_driver.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924911bf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_replace_multiline_text __________________________\n\n    async def test_replace_multiline_text():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30ad70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_reactive_always_update __________________________\n\n    async def test_reactive_always_update():\n        calls = []\n    \n        class AlwaysUpdate(App):\n            first_name = reactive(\"Darren\", init=False, always_update=True)\n            last_name = reactive(\"Burns\", init=False)\n    \n            def watch_first_name(self, value):\n                calls.append(f\"first_name {value}\")\n    \n            def watch_last_name(self, value):\n                calls.append(f\"last_name {value}\")\n    \n        app = AlwaysUpdate()\n>       async with app.run_test():\n\ntests/test_reactive.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb52a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_click_row_cursor _____________________________\n\n    async def test_click_row_cursor():\n        \"\"\"When the row cursor is used, and we click, we emit a RowHighlighted\n        *and* a RowSelected message for the row that was clicked.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:791: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_command_palette_closed_event _______________________\n\n    async def test_command_palette_closed_event():\n        app = AppWithActiveCommandPalette()\n>       async with app.run_test() as pilot:\n\ntests/command_palette/test_events.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936b2e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_coordinate_to_cell_key __________________________\n\n    async def test_coordinate_to_cell_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:741: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249206740>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_row_cursor_highlight_events _______________________\n\n    async def test_row_cursor_highlight_events():\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1014: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924936a170>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_screen_sub_title_none_is_ignored _____________________\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908e440>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_select_all[123\\n456\\n789-expected_selection0] ______________\n\ncontent = '123\\n456\\n789'\nexpected_selection = Selection(start=(0, 0), end=(2, 3))\n\n    @pytest.mark.parametrize(\n        \"content,expected_selection\",\n        [\n            (\"123\\n456\\n789\", Selection((0, 0), (2, 3))),\n            (\"123\\n456\\n789\\n\", Selection((0, 0), (3, 0))),\n            (\"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_all(content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249108a00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_select_all[123\\n456\\n789\\n-expected_selection1] _____________\n\ncontent = '123\\n456\\n789\\n'\nexpected_selection = Selection(start=(0, 0), end=(3, 0))\n\n    @pytest.mark.parametrize(\n        \"content,expected_selection\",\n        [\n            (\"123\\n456\\n789\", Selection((0, 0), (2, 3))),\n            (\"123\\n456\\n789\\n\", Selection((0, 0), (3, 0))),\n            (\"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_all(content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249141330>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_select_all[-expected_selection2] _____________________\n\ncontent = '', expected_selection = Selection(start=(0, 0), end=(0, 0))\n\n    @pytest.mark.parametrize(\n        \"content,expected_selection\",\n        [\n            (\"123\\n456\\n789\", Selection((0, 0), (2, 3))),\n            (\"123\\n456\\n789\\n\", Selection((0, 0), (3, 0))),\n            (\"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_all(content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c41f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_run_cancel_immediately __________________________\n\n    async def test_run_cancel_immediately() -> None:\n        \"\"\"Edge case for cancelling immediately.\"\"\"\n    \n        async def run_error() -> str:\n            await asyncio.sleep(0.1)\n            return \"Never\"\n    \n        class ErrorApp(App):\n            pass\n    \n        app = ErrorApp()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92498e1300>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_hover_coordinate _____________________________\n\n    async def test_hover_coordinate():\n        \"\"\"Ensure that the hover_coordinate reactive is updated as expected.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:838: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a0be0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_run_worker_thread_non_async _______________________\n\n    async def test_run_worker_thread_non_async() -> None:\n        \"\"\"Check self.run_worker\"\"\"\n        worker_events: list[Worker.StateChanged] = []\n    \n        work_result: str = \"\"\n    \n        class WorkerWidget(Widget):\n            def work(self) -> str:\n                nonlocal work_result\n                time.sleep(0.02)\n                work_result = \"foo\"\n                return \"foo\"\n    \n            def on_mount(self):\n                self.run_worker(self.work, thread=True)\n    \n            def on_worker_state_changed(self, event) -> None:\n                worker_events.append(event)\n    \n        class WorkerApp(App):\n            def compose(self) -> ComposeResult:\n                yield WorkerWidget()\n    \n        app = WorkerApp()\n>       async with app.run_test():\n\ntests/workers/test_worker_manager.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30f730>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_text_setter _______________________________\n\n    async def test_text_setter():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249143190>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_get_cursor_left_location[start0-end0] __________________\n\nstart = (0, 0), end = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((1, 0), (0, 16)),\n        ],\n    )\n    async def test_get_cursor_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a0370>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_get_cursor_left_location[start1-end1] __________________\n\nstart = (0, 4), end = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((1, 0), (0, 16)),\n        ],\n    )\n    async def test_get_cursor_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249004580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_get_cursor_left_location[start2-end2] __________________\n\nstart = (1, 0), end = (0, 16)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((1, 0), (0, 16)),\n        ],\n    )\n    async def test_get_cursor_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2e8ca0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_watch_async_init_false __________________________\n\n    async def test_watch_async_init_false():\n        \"\"\"Ensure that async watchers are called eventually when set by user code\"\"\"\n    \n        class WatchAsyncApp(App):\n            count = reactive(OLD_VALUE, init=False)\n            watcher_old_value = None\n            watcher_new_value = None\n            watcher_called_event = asyncio.Event()\n    \n            async def watch_count(self, old_value: int, new_value: int) -> None:\n                self.watcher_old_value = old_value\n                self.watcher_new_value = new_value\n                self.watcher_called_event.set()\n    \n        app = WatchAsyncApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_cursor_location_get ___________________________\n\n    async def test_cursor_location_get():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249205ed0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_delete_left_end _____________________________\n\n    async def test_delete_left_end():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491181f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_cell_padding_updates_virtual_size ____________________\n\n    async def test_cell_padding_updates_virtual_size():\n        app = DataTableApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1359: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30b610>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_disabled_tree_node_selected_message ___________________\n\n    async def test_disabled_tree_node_selected_message() -> None:\n        \"\"\"Clicking the root node disclosure triangle on a disabled tree\n        should result in no messages being emitted.\"\"\"\n        app = TreeApp(disabled=True)\n>       async with app.run_test() as pilot:\n\ntests/tree/test_tree_availability.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a44a2c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_progress_update _____________________________\n\n    async def test_progress_update():\n        async def long_work():\n            pass\n    \n        app = App()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918fbb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_update_cell_at_coordinate_exists _____________________\n\n    async def test_update_cell_at_coordinate_exists():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:687: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb7f40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_enabling_unknown_tab ___________________________\n\n    async def test_enabling_unknown_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n        app = TabbedApp()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:665: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924901a020>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_remove_row_and_update __________________________\n\n    async def test_remove_row_and_update():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3470 -\n        Crash when attempting to remove and update the same cell.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f26170>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_auto_focus_skips_non_focusable_widgets __________________\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249140670>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_unset_hover_highlight_when_no_table_cell_under_mouse ___________\n\n    async def test_unset_hover_highlight_when_no_table_cell_under_mouse():\n        \"\"\"When there isn't a table cell under the mouse cursor, there should be no\n        hover highlighting.\n    \n        Regression test for #2909 https://github.com/Textualize/textual/issues/2909\n        \"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f25ae0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_message_inheritance_namespace ______________________\n\n    async def test_message_inheritance_namespace():\n        \"\"\"Inherited messages get their correct namespaces.\n    \n        Regression test for https://github.com/Textualize/textual/issues/1814.\n        \"\"\"\n    \n        class BaseWidget(Widget):\n            class Fired(Message):\n                pass\n    \n            def trigger(self) -> None:\n                self.post_message(self.Fired())\n    \n        class Left(BaseWidget):\n            class Fired(BaseWidget.Fired):\n                pass\n    \n        class Right(BaseWidget):\n            class Fired(BaseWidget.Fired):\n                pass\n    \n        handlers_called = []\n    \n        class MessageInheritanceApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield Left()\n                yield Right()\n    \n            def on_left_fired(self):\n                handlers_called.append(\"left\")\n    \n            def on_right_fired(self):\n                handlers_called.append(\"right\")\n    \n        app = MessageInheritanceApp()\n>       async with app.run_test():\n\ntests/test_message_handling.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249101150>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_set_value_to_blank_with_allow_blank_false ________________\n\n    async def test_set_value_to_blank_with_allow_blank_false():\n        \"\"\"Setting the value to BLANK with allow_blank=False should raise an error.\"\"\"\n    \n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select[int](SELECT_OPTIONS, allow_blank=False)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_value.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a09a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924911ba60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_terminal_cursor_position_update_on_cursor_move ______________\n\n    async def test_terminal_cursor_position_update_on_cursor_move():\n        app = InputApp()\n>       async with app.run_test():\n\ntests/input/test_input_terminal_cursor.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb6fb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_compute _________________________________\n\n    async def test_compute():\n        \"\"\"Check compute method is called.\"\"\"\n    \n        class ComputeApp(App):\n            count = var(0)\n            count_double = var(0)\n    \n            def __init__(self) -> None:\n                self.start = 0\n                super().__init__()\n    \n            def compute_count_double(self) -> int:\n                return self.start + self.count * 2\n    \n        app = ComputeApp()\n    \n>       async with app.run_test():\n\ntests/test_reactive.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249142f20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_cursor_movement_with_home_pagedown_etc[True] _______________\n\nshow_header = True\n\n    @pytest.mark.parametrize(\"show_header\", [True, False])\n    async def test_cursor_movement_with_home_pagedown_etc(show_header):\n        app = DataTableApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2ea110>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_cursor_movement_with_home_pagedown_etc[False] ______________\n\nshow_header = False\n\n    @pytest.mark.parametrize(\"show_header\", [True, False])\n    async def test_cursor_movement_with_home_pagedown_etc(show_header):\n        app = DataTableApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923dea0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_no_return_code_while_running _______________________\n\n    async def test_no_return_code_while_running():\n        app = App()\n>       async with app.run_test():\n\ntests/test_app.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32ef50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_move_cursor _______________________________\n\n    async def test_move_cursor():\n        app = DataTableApp()\n    \n>       async with app.run_test():\n\ntests/test_data_table.py:1176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a309690>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_datatable_click_cell_cursor _______________________\n\n    async def test_datatable_click_cell_cursor():\n        \"\"\"When the cell cursor is used, and we click, we emit a CellHighlighted\n        *and* a CellSelected message for the cell that was clicked.\n        Regression test for https://github.com/Textualize/textual/issues/1723\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:763: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249018ac0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_reenabling_via_tab_pane _________________________\n\n    async def test_reenabling_via_tab_pane():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n            def on_mount(self) -> None:\n                self.query_one(\"TabPane#tab-2\").disabled = True\n    \n            def reenable(self) -> None:\n                self.query_one(\"TabPane#tab-2\").disabled = False\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:637: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249061e70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_mouse_click_clamp_from_right[True] ____________________\n\napp = <coroutine object app at 0x7f9248e7f680>\n\n    async def test_mouse_click_clamp_from_right(app: TextAreaApp):\n        \"\"\"When you click to the right of the document bounds, the cursor is clamped\n        to within the document bounds.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:43: AttributeError\n___________________ test_mouse_click_clamp_from_right[False] ___________________\n\napp = <coroutine object app at 0x7f9248e7daf0>\n\n    async def test_mouse_click_clamp_from_right(app: TextAreaApp):\n        \"\"\"When you click to the right of the document bounds, the cursor is clamped\n        to within the document bounds.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:43: AttributeError\n_____________ test_driver_mouse_down_drag_outside_widget_up_click ______________\n\n    async def test_driver_mouse_down_drag_outside_widget_up_click():\n        \"\"\"Mouse down and up don't issue a click if the mouse moves outside of the initial widget.\"\"\"\n    \n        class MyApp(App):\n            messages = []\n    \n            def compose(self):\n                yield Button()\n    \n            def on_button_pressed(self, event):\n                self.messages.append(event)\n    \n        app = MyApp()\n        button_width = 16\n        button_height = 3\n>       async with app.run_test() as pilot:\n\ntests/test_driver.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fb130>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_schedule_reverse_animations _______________________\n\n    async def test_schedule_reverse_animations() -> None:\n        \"\"\"Test that you can schedule reverse animations.\n    \n        Regression test for #1372 https://github.com/Textualize/textual/issues/1372\n        \"\"\"\n    \n        app = AnimApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_animation.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e23cd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_setting_and_checking_blank ________________________\n\n    async def test_setting_and_checking_blank():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select(SELECT_OPTIONS)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_blank_and_clear.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249014f70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_loading_disables_and_remove_scrollbars __________________\n\n    async def test_loading_disables_and_remove_scrollbars():\n        app = LoadingApp()\n>       async with app.run_test() as pilot:\n\ntests/test_loading.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fe110>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[click-offset0] ______________\n\nmethod = 'click', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c62f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[click-offset1] ______________\n\nmethod = 'click', offset = (2, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a8bb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[click-offset2] ______________\n\nmethod = 'click', offset = (10, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918c310>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[click-offset3] ______________\n\nmethod = 'click', offset = (70, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e3e20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[hover-offset4] ______________\n\nmethod = 'hover', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32cf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[hover-offset5] ______________\n\nmethod = 'hover', offset = (2, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249100fa0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[hover-offset6] ______________\n\nmethod = 'hover', offset = (10, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c56c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_pilot_target_screen_always_true[hover-offset7] ______________\n\nmethod = 'hover', offset = (70, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926fc70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_screen_always_true[mouse_down-offset8] ___________\n\nmethod = 'mouse_down', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c6e00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_screen_always_true[mouse_down-offset9] ___________\n\nmethod = 'mouse_down', offset = (2, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30a590>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_pilot_target_screen_always_true[mouse_down-offset10] ___________\n\nmethod = 'mouse_down', offset = (10, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249148be0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_pilot_target_screen_always_true[mouse_down-offset11] ___________\n\nmethod = 'mouse_down', offset = (70, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e22c80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_screen_always_true[mouse_up-offset12] ____________\n\nmethod = 'mouse_up', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec4a00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_screen_always_true[mouse_up-offset13] ____________\n\nmethod = 'mouse_up', offset = (2, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249170220>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_screen_always_true[mouse_up-offset14] ____________\n\nmethod = 'mouse_up', offset = (10, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908d7b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_pilot_target_screen_always_true[mouse_up-offset15] ____________\n\nmethod = 'mouse_up', offset = (70, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),\n            (\"click\", (2, 0)),\n            (\"click\", (10, 23)),\n            (\"click\", (70, 0)),\n            #\n            (\"hover\", (0, 0)),\n            (\"hover\", (2, 0)),\n            (\"hover\", (10, 23)),\n            (\"hover\", (70, 0)),\n            #\n            (\"mouse_down\", (0, 0)),\n            (\"mouse_down\", (2, 0)),\n            (\"mouse_down\", (10, 23)),\n            (\"mouse_down\", (70, 0)),\n            #\n            (\"mouse_up\", (0, 0)),\n            (\"mouse_up\", (2, 0)),\n            (\"mouse_up\", (10, 23)),\n            (\"mouse_up\", (70, 0)),\n        ],\n    )\n    async def test_pilot_target_screen_always_true(method, offset):\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2ea0e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_cursor_selection_right[True] _______________________\n\napp = <coroutine object app at 0x7f9248e2c6d0>\n\n    async def test_cursor_selection_right(app: TextAreaApp):\n        \"\"\"When you press shift+right the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:78: AttributeError\n______________________ test_cursor_selection_right[False] ______________________\n\napp = <coroutine object app at 0x7f9248f95bd0>\n\n    async def test_cursor_selection_right(app: TextAreaApp):\n        \"\"\"When you press shift+right the selection is updated correctly.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:78: AttributeError\n_________________________ test_on_arbitrary_attributes _________________________\n\n    async def test_on_arbitrary_attributes() -> None:\n        log: list[str] = []\n    \n        class OnArbitraryAttributesApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield TabPane(\"One\", id=\"one\")\n                    yield TabPane(\"Two\", id=\"two\")\n                    yield TabPane(\"Three\", id=\"three\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).add_class(\"tabs\")\n    \n            @on(TabbedContent.TabActivated, pane=\"#one\")\n            def one(self) -> None:\n                log.append(\"one\")\n    \n            @on(TabbedContent.TabActivated, pane=\"#two\")\n            def two(self) -> None:\n                log.append(\"two\")\n    \n        app = OnArbitraryAttributesApp()\n>       async with app.run_test() as pilot:\n\ntests/test_on.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f25120>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_cursor_selection_down[True] _______________________\n\napp = <coroutine object app at 0x7f9248e7d000>\n\n    async def test_cursor_selection_down(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:139: AttributeError\n______________________ test_cursor_selection_down[False] _______________________\n\napp = <coroutine object app at 0x7f9248e7d230>\n\n    async def test_cursor_selection_down(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:139: AttributeError\n_____________________ test_disabled_tab_cannot_be_clicked ______________________\n\n    async def test_disabled_tab_cannot_be_clicked():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).get_tab(\"tab-2\").disabled = True\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:494: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491024a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_watch_async_init_true __________________________\n\n    async def test_watch_async_init_true():\n        \"\"\"Ensure that when init is True in a reactive, its async watcher gets called\n        by Textual eventually, even when the user does not set the value themselves.\"\"\"\n    \n        class WatchAsyncApp(App):\n            count = reactive(OLD_VALUE, init=True)\n            watcher_called_event = asyncio.Event()\n            watcher_old_value = None\n            watcher_new_value = None\n    \n            async def watch_count(self, old_value: int, new_value: int) -> None:\n                self.watcher_old_value = old_value\n                self.watcher_new_value = new_value\n                self.watcher_called_event.set()\n    \n        app = WatchAsyncApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a44a650>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_suggestion ________________________________\n\n    async def test_suggestion():\n        app = SuggestionsApp([\"hello\"])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32f250>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_focus_does_not_move_to_invisible_widgets _________________\n\n    async def test_focus_does_not_move_to_invisible_widgets():\n        \"\"\"Make sure invisible widgets don't get focused by accident.\n    \n        This is kind of a regression test for https://github.com/Textualize/textual/issues/3053,\n        but not really.\n        \"\"\"\n    \n        class MyApp(App):\n            CSS = \"#inv { visibility: hidden; }\"\n    \n            def compose(self):\n                yield Button(\"one\", id=\"one\")\n                yield Button(\"two\", id=\"inv\")\n                yield Button(\"three\", id=\"three\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_focus.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910aad0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_get_cell_invalid_row_key _________________________\n\n    async def test_get_cell_invalid_row_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30a7a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_select_all_binding[True] _________________________\n\napp = <coroutine object app at 0x7f9248e2d3f0>\n\n    async def test_select_all_binding(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:306: AttributeError\n________________________ test_select_all_binding[False] ________________________\n\napp = <coroutine object app at 0x7f9248e2e030>\n\n    async def test_select_all_binding(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:306: AttributeError\n___________ test_widget_remove_children_with_selector_does_not_leak ____________\n\n    async def test_widget_remove_children_with_selector_does_not_leak():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249140580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_cursor_screen_offset_and_terminal_cursor_position_scrolling _______\n\n    async def test_cursor_screen_offset_and_terminal_cursor_position_scrolling():\n        class TextAreaCursorScreenOffset(App):\n            def compose(self) -> ComposeResult:\n                yield TextArea.code_editor(\"AB\\nAB\\nAB\\nAB\\nAB\\nAB\\n\")\n    \n        app = TextAreaCursorScreenOffset()\n>       async with app.run_test(size=(80, 2)) as pilot:\n\ntests/text_area/test_selection.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2ea890>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test__allow_scroll ______________________________\n\n    async def test__allow_scroll():\n        from textual.containers import ScrollableContainer\n    \n        class AllowScrollApp(App):\n            CSS = \"ScrollableContainer { width: 3; height: 3; }\"\n    \n            def compose(self):\n                with ScrollableContainer():\n                    yield Label(\"This is\\n\\n\\n\\n\\nlarge text.\")\n    \n        app = AllowScrollApp()\n>       async with app.run_test():\n\ntests/test_widget.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249005180>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_cursor_screen_offset_and_terminal_cursor_position_update _________\n\n    async def test_cursor_screen_offset_and_terminal_cursor_position_update():\n        class TextAreaCursorScreenOffset(App):\n            def compose(self) -> ComposeResult:\n                yield TextArea.code_editor(\"abc\\ndef\")\n    \n        app = TextAreaCursorScreenOffset()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924911ae30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_insert_empty_string ___________________________\n\n    async def test_insert_empty_string():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c6740>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f9cf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_no_duplicate_external_watchers ______________________\n\n    async def test_no_duplicate_external_watchers() -> None:\n        \"\"\"Make sure we skip duplicated watchers.\"\"\"\n    \n        counter = 0\n    \n        class Holder(Widget):\n            attr = var(None)\n    \n        class MyApp(App[None]):\n            def __init__(self) -> None:\n                super().__init__()\n                self.holder = Holder()\n    \n            def on_mount(self) -> None:\n                self.watch(self.holder, \"attr\", self.callback)\n                self.watch(self.holder, \"attr\", self.callback)\n    \n            def callback(self) -> None:\n                nonlocal counter\n                counter += 1\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:627: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e74f10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_remove_column_and_update _________________________\n\n    async def test_remove_column_and_update():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3470 -\n        Crash when attempting to remove and update the same cell.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30a740>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_style_animations_via_animate_are_disabled_on_none ____________\n\n    async def test_style_animations_via_animate_are_disabled_on_none() -> None:\n        app = SingleLabelApp()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test():\n\ntests/animations/test_disabling_animations.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924911b0d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_update_cell_cell_doesnt_exist ______________________\n\n    async def test_update_cell_cell_doesnt_exist():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:666: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926da20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_mouse_up_does_not_give_focus _______________________\n\n    async def test_mouse_up_does_not_give_focus():\n        class MyApp(App):\n            AUTO_FOCUS = None\n    \n            def compose(self):\n                yield Button()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_focus.py:378: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910a110>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_creating_enabled_tree __________________________\n\n    async def test_creating_enabled_tree():\n        \"\"\"Mounting an enabled `Tree` should result in the base `Widget`\n        having a `disabled` property equal to `False`\"\"\"\n        app = TreeApp(disabled=False)\n>       async with app.run_test() as pilot:\n\ntests/tree/test_tree_availability.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e0160>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_command_palette_closed_event_value ____________________\n\n    async def test_command_palette_closed_event_value():\n        app = AppWithActiveCommandPalette()\n>       async with app.run_test() as pilot:\n\ntests/command_palette/test_events.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924901b400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_delete_to_start_of_line[selection0-0123456789] ______________\n\nselection = Selection(start=(0, 0), end=(0, 0)), expected_result = '0123456789'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fe620>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_delete_to_start_of_line[selection1-56789] ________________\n\nselection = Selection(start=(0, 5), end=(0, 5)), expected_result = '56789'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249063e80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_delete_to_start_of_line[selection2-9] __________________\n\nselection = Selection(start=(0, 9), end=(0, 9)), expected_result = '9'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491709d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_delete_to_start_of_line[selection3-] ___________________\n\nselection = Selection(start=(0, 10), end=(0, 10)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a32d240>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_delete_to_start_of_line[selection4-9] __________________\n\nselection = Selection(start=(0, 0), end=(0, 9)), expected_result = '9'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491c6560>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_delete_to_start_of_line[selection5-] ___________________\n\nselection = Selection(start=(0, 0), end=(0, 10)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491735b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_delete_to_start_of_line[selection6-56789] ________________\n\nselection = Selection(start=(0, 2), end=(0, 5)), expected_result = '56789'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fa680>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_delete_to_start_of_line[selection7-23456789] _______________\n\nselection = Selection(start=(0, 5), end=(0, 2)), expected_result = '23456789'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"0123456789\"),\n            (Selection.cursor((0, 5)), \"56789\"),\n            (Selection.cursor((0, 9)), \"9\"),\n            (Selection.cursor((0, 10)), \"\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"9\"),\n            (Selection((0, 0), (0, 10)), \"\"),\n            (Selection((0, 2), (0, 5)), \"56789\"),\n            (Selection((0, 5), (0, 2)), \"23456789\"),\n        ],\n    )\n    async def test_delete_to_start_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e2a560>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_data_binding _______________________________\n\n    async def test_data_binding():\n        app = DataBindApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_bind.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249016f80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_cursor_page_up[True] ___________________________\n\napp = <coroutine object app at 0x7f9248e092a0>\n\n    async def test_cursor_page_up(app: TextAreaApp):\n        \"\"\"Pageup moves the cursor up 1 page, retaining column index.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:264: AttributeError\n__________________________ test_cursor_page_up[False] __________________________\n\napp = <coroutine object app at 0x7f9248e09e70>\n\n    async def test_cursor_page_up(app: TextAreaApp):\n        \"\"\"Pageup moves the cursor up 1 page, retaining column index.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:264: AttributeError\n_________________ test_get_cell_coordinate_invalid_column_key __________________\n\n    async def test_get_cell_coordinate_invalid_column_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:473: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e27dc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_set_options_resets_value_if_allow_blank_is_false _____________\n\n    async def test_set_options_resets_value_if_allow_blank_is_false():\n        \"\"\"Resetting the options should reset the value if allow_blank=False.\"\"\"\n    \n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select[int](SELECT_OPTIONS, allow_blank=False)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_value.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924901a590>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_style_animations_via_transition_work_on_full _______________\n\n    async def test_style_animations_via_transition_work_on_full() -> None:\n        app = LabelWithTransitionsApp()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test():\n\ntests/animations/test_disabling_animations.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923f8e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_get_column_index_returns_index ______________________\n\n    async def test_get_column_index_returns_index():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c6710>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_selected_text_forward __________________________\n\n    async def test_selected_text_forward():\n        \"\"\"Selecting text from top to bottom results in the correct selected_text.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e24ca0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910ab00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word _____\n\n    async def test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word():\n        app = SuggestionsApp([\"hello\"])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249143250>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_value_is_blank_by_default ________________________\n\n    async def test_value_is_blank_by_default():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select(SELECT_OPTIONS)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_blank_and_clear.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5dba0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_reverse_animations ____________________________\n\n    async def test_reverse_animations() -> None:\n        \"\"\"Test that you can create reverse animations.\n    \n        Regression test for #1372 https://github.com/Textualize/textual/issues/1372\n        \"\"\"\n    \n        app = AnimApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_animation.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a8490>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_get_row_index_returns_index _______________________\n\n    async def test_get_row_index_returns_index():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:557: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249062830>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_reactive_prompt_change_when_allow_blank_is_false _____________\n\n    async def test_reactive_prompt_change_when_allow_blank_is_false():\n        class SelectApp(App):\n            def compose(self):\n                yield Select[int](\n                    [(str(n), n) for n in range(3)],\n                    prompt=\"Old prompt\",\n                    allow_blank=False,\n                )\n    \n        app = SelectApp()\n>       async with app.run_test() as pilot:\n\ntests/select/test_prompt.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908df60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_changed_message_via_typing ________________________\n\n    async def test_changed_message_via_typing():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_messages.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5f3a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_initial _________________________________\n\n    async def test_initial():\n        class InitialApp(App):\n            CSS = \"\"\"\n            CustomWidget1 {\n                color: red;\n            }\n    \n            CustomWidget2 {\n               color: initial;\n            }\n    \n            CustomWidget3 {\n                color: blue;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Base(id=\"base\")\n                yield CustomWidget1(id=\"custom1\")\n                yield CustomWidget2(id=\"custom2\")\n                yield CustomWidget3(id=\"custom3\")\n    \n        app = InitialApp()\n>       async with app.run_test():\n\ntests/css/test_initial.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926edd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_progress_bar_does_not_animate_on_none __________________\n\n    async def test_progress_bar_does_not_animate_on_none() -> None:\n        \"\"\"An indeterminate progress bar is fully highlighted when not animating.\"\"\"\n        app = ProgressBarApp()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test():\n\ntests/animations/test_progress_bar_animation.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a1ab0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_on_inheritance ______________________________\n\n    async def test_on_inheritance() -> None:\n        \"\"\"Test on decorator and inheritance.\"\"\"\n        pressed: list[str] = []\n    \n        class MyWidget(Widget):\n            def compose(self) -> ComposeResult:\n                yield Button(\"OK\", id=\"ok\")\n    \n            # Also called\n            @on(Button.Pressed, \"#ok\")\n            def ok(self):\n                pressed.append(\"MyWidget.ok base\")\n    \n        class DerivedWidget(MyWidget):\n            # Should be called first\n            @on(Button.Pressed, \"#ok\")\n            def ok(self):\n                pressed.append(\"MyWidget.ok derived\")\n    \n        class ButtonApp(App):\n            def compose(self) -> ComposeResult:\n                yield DerivedWidget()\n    \n        app = ButtonApp()\n>       async with app.run_test() as pilot:\n\ntests/test_on.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f24dc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_initial_column_widths __________________________\n\n    async def test_initial_column_widths() -> None:\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926c790>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_default_custom_screen __________________________\n\n    async def test_default_custom_screen() -> None:\n        \"\"\"Test we can override the default screen.\"\"\"\n    \n        class CustomScreen(Screen):\n            pass\n    \n        class CustomScreenApp(App):\n            def get_default_screen(self) -> Screen:\n                return CustomScreen()\n    \n        app = CustomScreenApp()\n>       async with app.run_test():\n\ntests/test_screens.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a30b9a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_prevent_default _____________________________\n\n    async def test_prevent_default():\n        \"\"\"Test that prevent_default doesn't apply when a message is bubbled.\"\"\"\n    \n        app_button_pressed = False\n    \n        class MyButton(Button):\n            def _on_button_pressed(self, event: Button.Pressed) -> None:\n                event.prevent_default()\n    \n        class PreventApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield MyButton(\"Press me\")\n                yield Label(\"No pressure\")\n    \n            def on_button_pressed(self, event: Button.Pressed) -> None:\n                nonlocal app_button_pressed\n                app_button_pressed = True\n                self.query_one(Label).update(\"Ouch!\")\n    \n        app = PreventApp()\n>       async with app.run_test() as pilot:\n\ntests/test_message_pump.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e28d90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_register_language ____________________________\n\n    @pytest.mark.syntax\n    async def test_register_language():\n        app = TextAreaApp()\n    \n>       async with app.run_test():\n\ntests/text_area/test_languages.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5e5c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_mount_error_bad_widget __________________________\n\n    async def test_mount_error_bad_widget():\n        class DaftWidget(Widget):\n            def __init__(self):\n                # intentionally missing super()\n                pass\n    \n        class NotWidgetApp(App):\n            def compose(self) -> ComposeResult:\n                yield DaftWidget()\n    \n        app = NotWidgetApp()\n        with pytest.raises(MountError):\n>           async with app.run_test():\n\ntests/test_widget.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d86890>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_registering_and_setting_theme ______________________\n\n    async def test_registering_and_setting_theme():\n        app = TextAreaApp()\n    \n>       async with app.run_test():\n\ntests/text_area/test_setting_themes.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249100b50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_setting_unknown_language _________________________\n\n    async def test_setting_unknown_language():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_languages.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923f340>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_screen_walk_children ___________________________\n\n    async def test_screen_walk_children():\n        \"\"\"Test query only reports active screen.\"\"\"\n    \n        class ScreensApp(App):\n            pass\n    \n        app = ScreensApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249004d90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_call_later ________________________________\n\n    async def test_call_later() -> None:\n        \"\"\"Check that call later makes a call.\"\"\"\n        app = CallLaterApp()\n        called_event = asyncio.Event()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e29780>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_tabs_underline_animates_on_basic _____________________\n\n    async def test_tabs_underline_animates_on_basic() -> None:\n        \"\"\"The underline takes some time to move when animated.\"\"\"\n        app = TabbedContentApp()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_tabs_underline_animation.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491034c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_dismiss_action ______________________________\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924911b2e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_row_label_selected ____________________________\n\n    async def test_row_label_selected():\n        \"\"\"Ensure that the DataTable sends a RowLabelSelected event when\n        the user clicks on a row label.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:893: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f96f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_screen_sub_title_reactive_updates_sub_title _______________\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e22770>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_cell_cursor_highlight_events _______________________\n\n    async def test_cell_cursor_highlight_events():\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d75cc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_delete_to_end_of_line[selection0-] ____________________\n\nselection = Selection(start=(0, 0), end=(0, 0)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491091b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_delete_to_end_of_line[selection1-01234] _________________\n\nselection = Selection(start=(0, 5), end=(0, 5)), expected_result = '01234'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d77100>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_delete_to_end_of_line[selection2-012345678] _______________\n\nselection = Selection(start=(0, 9), end=(0, 9)), expected_result = '012345678'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924926fc70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_delete_to_end_of_line[selection3-0123456789] _______________\n\nselection = Selection(start=(0, 10), end=(0, 10))\nexpected_result = '0123456789'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2e9660>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_delete_to_end_of_line[selection4-012345678] _______________\n\nselection = Selection(start=(0, 0), end=(0, 9)), expected_result = '012345678'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb4850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_delete_to_end_of_line[selection5-0123456789] _______________\n\nselection = Selection(start=(0, 0), end=(0, 10)), expected_result = '0123456789'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249033760>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_delete_to_end_of_line[selection6-01234] _________________\n\nselection = Selection(start=(0, 2), end=(0, 5)), expected_result = '01234'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e2bf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_delete_to_end_of_line[selection7-01] ___________________\n\nselection = Selection(start=(0, 5), end=(0, 2)), expected_result = '01'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"\"),\n            (Selection.cursor((0, 5)), \"01234\"),\n            (Selection.cursor((0, 9)), \"012345678\"),\n            (Selection.cursor((0, 10)), \"0123456789\"),\n            # Selections\n            (Selection((0, 0), (0, 9)), \"012345678\"),\n            (Selection((0, 0), (0, 10)), \"0123456789\"),\n            (Selection((0, 2), (0, 5)), \"01234\"),\n            (Selection((0, 5), (0, 2)), \"01\"),\n        ],\n    )\n    async def test_delete_to_end_of_line(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924a2ea680>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_delete_word_left_to_start_of_line ____________________\n\n    async def test_delete_word_left_to_start_of_line():\n        \"\"\"If no word boundary found when we 'delete word left', then\n        the deletion happens to the start of the line.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923c400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_changed_message_edit_via_assignment ___________________\n\n    async def test_changed_message_edit_via_assignment():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_messages.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e29210>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_selection_clamp _____________________________\n\n    async def test_selection_clamp():\n        \"\"\"When you set the selection reactive, it's clamped to within the document bounds.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e226e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_input_value_visible_after_value_assignment ________________\n\n    async def test_input_value_visible_after_value_assignment():\n        \"\"\"Check if the full input value is rendered if the value is assigned to programmatically.\"\"\"\n    \n        class MyApp(App):\n            def compose(self):\n                yield Input()\n    \n            def on_mount(self):\n                self.query_one(Input).value = \"value\"\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/input/test_input_value_visibility.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249017130>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_query_refresh[args0] ___________________________\n\nargs = (False, False)\n\n    @pytest.mark.parametrize(\n        \"args\", [(False, False), (True, False), (True, True), (False, True)]\n    )\n    async def test_query_refresh(args):\n        refreshes = []\n    \n        class MyWidget(Widget):\n            def refresh(self, *, repaint=None, layout=None, recompose=None):\n                super().refresh(repaint=repaint, layout=layout)\n                refreshes.append((repaint, layout))\n    \n        class MyApp(App):\n            def compose(self):\n                yield MyWidget()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_query.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5da50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_query_refresh[args1] ___________________________\n\nargs = (True, False)\n\n    @pytest.mark.parametrize(\n        \"args\", [(False, False), (True, False), (True, True), (False, True)]\n    )\n    async def test_query_refresh(args):\n        refreshes = []\n    \n        class MyWidget(Widget):\n            def refresh(self, *, repaint=None, layout=None, recompose=None):\n                super().refresh(repaint=repaint, layout=layout)\n                refreshes.append((repaint, layout))\n    \n        class MyApp(App):\n            def compose(self):\n                yield MyWidget()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_query.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490076d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_query_refresh[args2] ___________________________\n\nargs = (True, True)\n\n    @pytest.mark.parametrize(\n        \"args\", [(False, False), (True, False), (True, True), (False, True)]\n    )\n    async def test_query_refresh(args):\n        refreshes = []\n    \n        class MyWidget(Widget):\n            def refresh(self, *, repaint=None, layout=None, recompose=None):\n                super().refresh(repaint=repaint, layout=layout)\n                refreshes.append((repaint, layout))\n    \n        class MyApp(App):\n            def compose(self):\n                yield MyWidget()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_query.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249142bf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_query_refresh[args3] ___________________________\n\nargs = (False, True)\n\n    @pytest.mark.parametrize(\n        \"args\", [(False, False), (True, False), (True, True), (False, True)]\n    )\n    async def test_query_refresh(args):\n        refreshes = []\n    \n        class MyWidget(Widget):\n            def refresh(self, *, repaint=None, layout=None, recompose=None):\n                super().refresh(repaint=repaint, layout=layout)\n                refreshes.append((repaint, layout))\n    \n        class MyApp(App):\n            def compose(self):\n                yield MyWidget()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_query.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249019c00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_initial_value_inside_compose_is_validated ________________\n\n    async def test_initial_value_inside_compose_is_validated():\n        \"\"\"Setting the value to an unknown value inside compose should raise an error.\"\"\"\n    \n        class SelectApp(App[None]):\n            def compose(self):\n                s = Select[int](SELECT_OPTIONS)\n                s.value = 73\n                yield s\n    \n        app = SelectApp()\n        with pytest.raises(InvalidSelectValueError):\n>           async with app.run_test():\n\ntests/select/test_value.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e248b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_empty_select_is_ok_with_blanks ______________________\n\n    async def test_empty_select_is_ok_with_blanks():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select([])\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_empty_select.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a9b70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_mouse_click_gutter_clamp[True] ______________________\n\napp = <coroutine object app at 0x7f9248dd2880>\n\n    async def test_mouse_click_gutter_clamp(app: TextAreaApp):\n        \"\"\"When you click the gutter, it selects the start of the line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:51: AttributeError\n_____________________ test_mouse_click_gutter_clamp[False] _____________________\n\napp = <coroutine object app at 0x7f9248dd0200>\n\n    async def test_mouse_click_gutter_clamp(app: TextAreaApp):\n        \"\"\"When you click the gutter, it selects the start of the line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:51: AttributeError\n____________ test_input_value_visible_if_mounted_later_and_focused _____________\n\n    async def test_input_value_visible_if_mounted_later_and_focused():\n        \"\"\"Check if full input value is rendered if the widget is mounted later and immediately focused.\"\"\"\n    \n        class MyApp(App):\n            BINDINGS = [(\"a\", \"add_input\", \"add_input\")]\n    \n            async def action_add_input(self):\n                inp = Input(value=\"value\")\n                await self.mount(inp)\n                inp.focus()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_value_visibility.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e742b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_get_column_index_invalid_column_key ___________________\n\n    async def test_get_column_index_invalid_column_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:643: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d978e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_pilot_resize_terminal __________________________\n\n    async def test_pilot_resize_terminal():\n        app = App()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:390: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f273d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_same_selection_does_not_post_message ___________________\n\n    async def test_same_selection_does_not_post_message():\n        app = SelectApp()\n>       async with app.run_test() as pilot:\n\ntests/select/test_changed_message.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d97670>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_scrolling_animates_on_full ________________________\n\n    async def test_scrolling_animates_on_full() -> None:\n        app = TallApp()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_scrolling_animation.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c7700>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_query_focus_blur _____________________________\n\n    async def test_query_focus_blur():\n        class FocusApp(App):\n            AUTO_FOCUS = None\n    \n            def compose(self) -> ComposeResult:\n                yield Input(id=\"foo\")\n                yield Input(id=\"bar\")\n                yield Input(id=\"baz\")\n    \n        app = FocusApp()\n>       async with app.run_test() as pilot:\n\ntests/test_query.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249060c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_setting_language_to_none _________________________\n\n    async def test_setting_language_to_none():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_languages.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d96380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_cursor_word_left_select[True] ______________________\n\napp = <coroutine object app at 0x7f9248dd2ea0>\n\n    async def test_cursor_word_left_select(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:191: AttributeError\n_____________________ test_cursor_word_left_select[False] ______________________\n\napp = <coroutine object app at 0x7f9248e0b290>\n\n    async def test_cursor_word_left_select(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:191: AttributeError\n_____________________________ test_header_selected _____________________________\n\n    async def test_header_selected():\n        \"\"\"Ensure that a HeaderSelected event gets posted when we click\n        on the header in the DataTable.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:870: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e2380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_empty_paste _______________________________\n\n    async def test_empty_paste():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2563.\"\"\"\n    \n        paste_events = []\n    \n        class MyInput(Input):\n            def on_paste(self, event):\n                super()._on_paste(event)\n                paste_events.append(event)\n    \n        class PasteApp(App):\n            def compose(self):\n                yield MyInput()\n    \n            def key_p(self):\n                self.query_one(MyInput).post_message(events.Paste(\"\"))\n    \n        app = PasteApp()\n>       async with app.run_test() as pilot:\n\ntests/test_paste.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f30040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_disabling_tab_within_tabbed_content_stays_isolated ____________\n\n    async def test_disabling_tab_within_tabbed_content_stays_isolated():\n        \"\"\"Disabling a tab within a tab pane should not affect the TabbedContent.\"\"\"\n    \n        class TabsNestedInTabbedContent(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"TabbedContent\", id=\"duplicate\"):\n                        yield Tabs(\n                            Tab(\"Tab1\", id=\"duplicate\"),\n                            Tab(\"Tab2\", id=\"stay-enabled\"),\n                            id=\"test-tabs\",\n                        )\n    \n        app = TabsNestedInTabbedContent()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e3370>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_sort_children ______________________________\n\n    async def test_sort_children() -> None:\n        \"\"\"Test the sort_children method.\"\"\"\n    \n        class SortApp(App):\n    \n            def compose(self) -> ComposeResult:\n                with Container(id=\"container\"):\n                    yield Label(\"three\", id=\"l3\")\n                    yield Label(\"one\", id=\"l1\")\n                    yield Label(\"four\", id=\"l4\")\n                    yield Label(\"two\", id=\"l2\")\n    \n        app = SortApp()\n>       async with app.run_test():\n\ntests/test_widget.py:456: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924910a260>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset0] _\n\nmethod = 'click', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249015030>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset1] _\n\nmethod = 'click', offset = (40, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249808100>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset2] _\n\nmethod = 'click', offset = (79, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249005ed0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset3] _\n\nmethod = 'click', offset = (79, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e76650>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset4] _\n\nmethod = 'click', offset = (79, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249032920>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset5] _\n\nmethod = 'click', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924971b040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset6] _\n\nmethod = 'click', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249143310>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset7] _\n\nmethod = 'click', offset = (0, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e24550>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset8] _\n\nmethod = 'click', offset = (40, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249100730>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset9] _\n\nmethod = 'hover', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a8c40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset10] _\n\nmethod = 'hover', offset = (40, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5c2b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset11] _\n\nmethod = 'hover', offset = (79, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249100400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset12] _\n\nmethod = 'hover', offset = (79, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249172ef0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset13] _\n\nmethod = 'hover', offset = (79, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490ffdf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset14] _\n\nmethod = 'hover', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dba380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset15] _\n\nmethod = 'hover', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e28c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset16] _\n\nmethod = 'hover', offset = (0, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a1c60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset17] _\n\nmethod = 'hover', offset = (40, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d95000>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset18] _\n\nmethod = 'mouse_down', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923d540>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset19] _\n\nmethod = 'mouse_down', offset = (40, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e0100>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset20] _\n\nmethod = 'mouse_down', offset = (79, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249141a50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset21] _\n\nmethod = 'mouse_down', offset = (79, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249149ae0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset22] _\n\nmethod = 'mouse_down', offset = (79, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491abd60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset23] _\n\nmethod = 'mouse_down', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249062230>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset24] _\n\nmethod = 'mouse_down', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d4b580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset25] _\n\nmethod = 'mouse_down', offset = (0, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbaef0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset26] _\n\nmethod = 'mouse_down', offset = (40, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbe5f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset27] _\n\nmethod = 'mouse_up', offset = (0, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e35e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset28] _\n\nmethod = 'mouse_up', offset = (40, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f8700>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset29] _\n\nmethod = 'mouse_up', offset = (79, 0)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d18400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset30] _\n\nmethod = 'mouse_up', offset = (79, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb7b20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset31] _\n\nmethod = 'mouse_up', offset = (79, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249101870>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset32] _\n\nmethod = 'mouse_up', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908d510>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset33] _\n\nmethod = 'mouse_up', offset = (40, 23)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a00d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset34] _\n\nmethod = 'mouse_up', offset = (0, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e2110>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset35] _\n\nmethod = 'mouse_up', offset = (40, 12)\n\n    @pytest.mark.parametrize(\n        [\"method\", \"offset\"],\n        [\n            (\"click\", (0, 0)),  # Top-left corner.\n            (\"click\", (40, 0)),  # Top edge.\n            (\"click\", (79, 0)),  # Top-right corner.\n            (\"click\", (79, 12)),  # Right edge.\n            (\"click\", (79, 23)),  # Bottom-right corner.\n            (\"click\", (40, 23)),  # Bottom edge.\n            (\"click\", (40, 23)),  # Bottom-left corner.\n            (\"click\", (0, 12)),  # Left edge.\n            (\"click\", (40, 12)),  # Right in the middle.\n            #\n            (\"hover\", (0, 0)),  # Top-left corner.\n            (\"hover\", (40, 0)),  # Top edge.\n            (\"hover\", (79, 0)),  # Top-right corner.\n            (\"hover\", (79, 12)),  # Right edge.\n            (\"hover\", (79, 23)),  # Bottom-right corner.\n            (\"hover\", (40, 23)),  # Bottom edge.\n            (\"hover\", (40, 23)),  # Bottom-left corner.\n            (\"hover\", (0, 12)),  # Left edge.\n            (\"hover\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_down\", (0, 0)),  # Top-left corner.\n            (\"mouse_down\", (40, 0)),  # Top edge.\n            (\"mouse_down\", (79, 0)),  # Top-right corner.\n            (\"mouse_down\", (79, 12)),  # Right edge.\n            (\"mouse_down\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_down\", (40, 23)),  # Bottom edge.\n            (\"mouse_down\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_down\", (0, 12)),  # Left edge.\n            (\"mouse_down\", (40, 12)),  # Right in the middle.\n            #\n            (\"mouse_up\", (0, 0)),  # Top-left corner.\n            (\"mouse_up\", (40, 0)),  # Top edge.\n            (\"mouse_up\", (79, 0)),  # Top-right corner.\n            (\"mouse_up\", (79, 12)),  # Right edge.\n            (\"mouse_up\", (79, 23)),  # Bottom-right corner.\n            (\"mouse_up\", (40, 23)),  # Bottom edge.\n            (\"mouse_up\", (40, 23)),  # Bottom-left corner.\n            (\"mouse_up\", (0, 12)),  # Left edge.\n            (\"mouse_up\", (40, 12)),  # Right in the middle.\n        ],\n    )\n    async def test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system(\n        method, offset\n    ):\n        \"\"\"Make sure that the coordinate system for the click is the correct one.\n    \n        Especially relevant because I kept getting confused about the way it works.\n        \"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 24)) as pilot:\n\ntests/test_pilot.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491708b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________________ test_watch __________________________________\n\n    async def test_watch():\n        \"\"\"Test that changes to a watched reactive attribute happen immediately.\"\"\"\n    \n        class WatchApp(App):\n            count = reactive(0, init=False)\n    \n            watcher_call_count = 0\n    \n            def watch_count(self, value: int) -> None:\n                self.watcher_call_count = value\n    \n        app = WatchApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c4850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_language_binary_missing _________________________\n\nobj = <module 'textual.document._syntax_aware_document' from '/root/repos/py_data/textual/src/textual/document/_syntax_aware_document.py'>\nname = 'get_language', ann = 'textual.document._syntax_aware_document'\n\n    def annotated_getattr(obj: object, name: str, ann: str) -> object:\n        try:\n>           obj = getattr(obj, name)\nE           AttributeError: module 'textual.document._syntax_aware_document' has no attribute 'get_language'\n\n/usr/local/lib/python3.10/site-packages/_pytest/monkeypatch.py:92: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9248d86860>\n\n    @pytest.mark.syntax\n    async def test_language_binary_missing(monkeypatch: pytest.MonkeyPatch):\n        # mock a failed installation of tree-sitter-language binaries by\n        # raising an OSError from get_language\n        def raise_oserror(_):\n            raise OSError(\n                \"/path/to/tree_sitter_languages/languages.so: \"\n                \"cannot open shared object file: No such file or directory\"\n            )\n    \n>       monkeypatch.setattr(\n            \"textual.document._syntax_aware_document.get_language\", raise_oserror\n        )\n\ntests/text_area/test_languages.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/_pytest/monkeypatch.py:106: in derive_importpath\n    annotated_getattr(target, attr, ann=module)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <module 'textual.document._syntax_aware_document' from '/root/repos/py_data/textual/src/textual/document/_syntax_aware_document.py'>\nname = 'get_language', ann = 'textual.document._syntax_aware_document'\n\n    def annotated_getattr(obj: object, name: str, ann: str) -> object:\n        try:\n            obj = getattr(obj, name)\n        except AttributeError as e:\n>           raise AttributeError(\n                f\"{type(obj).__name__!r} object at {ann} has no attribute {name!r}\"\n            ) from e\nE           AttributeError: 'module' object at textual.document._syntax_aware_document has no attribute 'get_language'\n\n/usr/local/lib/python3.10/site-packages/_pytest/monkeypatch.py:94: AttributeError\n__________________________ test_single_keypress_enter __________________________\n\n    async def test_single_keypress_enter():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e2bdf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_delete_left _______________________________\n\n    async def test_delete_left():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249005180>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_issue_4248 ________________________________\n\n    async def test_issue_4248() -> None:\n        \"\"\"Various forms of click parameters should be fine.\"\"\"\n    \n        bumps = 0\n    \n        class ActionApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield Label(\"[@click]click me and crash[/]\", id=\"nothing\")\n                yield Label(\"[@click=]click me and crash[/]\", id=\"no-params\")\n                yield Label(\"[@click=()]click me and crash[/]\", id=\"empty-params\")\n                yield Label(\"[@click=foobar]click me[/]\", id=\"unknown-sans-parens\")\n                yield Label(\"[@click=foobar()]click me[/]\", id=\"unknown-with-parens\")\n                yield Label(\"[@click=app.bump]click me[/]\", id=\"known-sans-parens\")\n                yield Label(\"[@click=app.bump()]click me[/]\", id=\"known-empty-parens\")\n                yield Label(\"[@click=app.bump(100)]click me[/]\", id=\"known-with-param\")\n    \n            def action_bump(self, by_value: int = 1) -> None:\n                nonlocal bumps\n                bumps += by_value\n    \n        app = ActionApp()\n>       async with app.run_test() as pilot:\n\ntests/test_issue_4248.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d54280>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_progress_bar_animates_on_full ______________________\n\n    async def test_progress_bar_animates_on_full() -> None:\n        \"\"\"An indeterminate progress bar is not fully highlighted when animating.\"\"\"\n        app = ProgressBarApp()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test():\n\ntests/animations/test_progress_bar_animation.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb7910>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_replace_empty_string ___________________________\n\n    async def test_replace_empty_string():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d57af0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d18f70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_widget_remove_children_with_star_selector ________________\n\n    async def test_widget_remove_children_with_star_selector():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924908e1d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack0] _____________\n\ncall_stack = ('async_no_thread', 'async_no_thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490147c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack1] _____________\n\ncall_stack = ('async_no_thread', 'async_no_thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249100280>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack2] _____________\n\ncall_stack = ('async_no_thread', 'async_no_thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249016080>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack3] _____________\n\ncall_stack = ('async_no_thread', 'async_thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d86380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack4] _____________\n\ncall_stack = ('async_no_thread', 'async_thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbb8b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack5] _____________\n\ncall_stack = ('async_no_thread', 'async_thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249063880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack6] _____________\n\ncall_stack = ('async_no_thread', 'thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a0c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack7] _____________\n\ncall_stack = ('async_no_thread', 'thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d862c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack8] _____________\n\ncall_stack = ('async_no_thread', 'thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249017670>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack9] _____________\n\ncall_stack = ('async_thread', 'async_no_thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c78d30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack10] ____________\n\ncall_stack = ('async_thread', 'async_no_thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a8460>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack11] ____________\n\ncall_stack = ('async_thread', 'async_no_thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d76a70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack12] ____________\n\ncall_stack = ('async_thread', 'async_thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d1bb80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack13] ____________\n\ncall_stack = ('async_thread', 'async_thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248caae00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack14] ____________\n\ncall_stack = ('async_thread', 'async_thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249016500>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack15] ____________\n\ncall_stack = ('async_thread', 'thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d94490>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack16] ____________\n\ncall_stack = ('async_thread', 'thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d1a380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack17] ____________\n\ncall_stack = ('async_thread', 'thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918fe50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack18] ____________\n\ncall_stack = ('thread', 'async_no_thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490067a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack19] ____________\n\ncall_stack = ('thread', 'async_no_thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f9f00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack20] ____________\n\ncall_stack = ('thread', 'async_no_thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e772b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack21] ____________\n\ncall_stack = ('thread', 'async_thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f8520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack22] ____________\n\ncall_stack = ('thread', 'async_thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92492c5f60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack23] ____________\n\ncall_stack = ('thread', 'async_thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e2230>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack24] ____________\n\ncall_stack = ('thread', 'thread', 'async_no_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924914bf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack25] ____________\n\ncall_stack = ('thread', 'thread', 'async_thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bec4c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack26] ____________\n\ncall_stack = ('thread', 'thread', 'thread')\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490f8d00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_calling_workers_from_within_workers[call_stack27] ____________\n\ncall_stack = ('async_no_thread', 'async_no_thread', 'thread', 'thread', 'async_thread', 'async_thread', ...)\n\n    @pytest.mark.parametrize(\n        \"call_stack\",\n        [  # from itertools import product; list(product(\"async_no_thread async_thread thread\".split(), repeat=3))\n            (\"async_no_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_no_thread\", \"async_thread\", \"thread\"),\n            (\"async_no_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_no_thread\", \"thread\", \"async_thread\"),\n            (\"async_no_thread\", \"thread\", \"thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_no_thread\", \"thread\"),\n            (\"async_thread\", \"async_thread\", \"async_no_thread\"),\n            (\"async_thread\", \"async_thread\", \"async_thread\"),\n            (\"async_thread\", \"async_thread\", \"thread\"),\n            (\"async_thread\", \"thread\", \"async_no_thread\"),\n            (\"async_thread\", \"thread\", \"async_thread\"),\n            (\"async_thread\", \"thread\", \"thread\"),\n            (\"thread\", \"async_no_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_no_thread\", \"async_thread\"),\n            (\"thread\", \"async_no_thread\", \"thread\"),\n            (\"thread\", \"async_thread\", \"async_no_thread\"),\n            (\"thread\", \"async_thread\", \"async_thread\"),\n            (\"thread\", \"async_thread\", \"thread\"),\n            (\"thread\", \"thread\", \"async_no_thread\"),\n            (\"thread\", \"thread\", \"async_thread\"),\n            (\"thread\", \"thread\", \"thread\"),\n            (  # Plus a longer chain to stress test this mechanism.\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_thread\",\n                \"thread\",\n                \"async_thread\",\n                \"async_thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"async_no_thread\",\n                \"thread\",\n                \"thread\",\n            ),\n        ],\n    )\n    async def test_calling_workers_from_within_workers(call_stack: Tuple[str]):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3472.\n    \n        This makes sure we can nest worker calls without a problem.\n        \"\"\"\n        app = NestedWorkersApp(list(call_stack))\n>       async with app.run_test():\n\ntests/workers/test_work_decorator.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cda620>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_delete_word_right_at_end_of_line _____________________\n\n    async def test_delete_word_right_at_end_of_line():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:412: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249118c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_remove __________________________________\n\n    async def test_remove():\n        class RemoveMeLabel(Label):\n            async def on_mount(self) -> None:\n                await self.run_action(\"app.remove_all\")\n    \n        class Container(Widget):\n            async def clear(self) -> None:\n                await self.query(\"*\").remove()\n    \n        class RemoveApp(App):\n            def compose(self) -> ComposeResult:\n                yield Container(RemoveMeLabel())\n    \n            async def action_remove_all(self) -> None:\n                await self.query_one(Container).clear()\n                self.exit(123)\n    \n        app = RemoveApp()\n>       async with app.run_test() as pilot:\n\ntests/test_widget.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f259f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_programmatic_align_change_updates_children_position[align_horizontal-right] _\n\nstyle = 'align_horizontal', value = 'right'\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"align_horizontal\", \"right\"),\n            (\"align_vertical\", \"bottom\"),\n            (\"align\", (\"right\", \"bottom\")),\n        ],\n    )\n    async def test_programmatic_align_change_updates_children_position(\n        style: str, value: str\n    ):\n        \"\"\"Regression test for #1607 for the align(_xxx) styles.\n    \n        See https://github.com/Textualize/textual/issues/1607.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"Grid { grid-size: 2 2; }\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a80a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_programmatic_align_change_updates_children_position[align_vertical-bottom] _\n\nstyle = 'align_vertical', value = 'bottom'\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"align_horizontal\", \"right\"),\n            (\"align_vertical\", \"bottom\"),\n            (\"align\", (\"right\", \"bottom\")),\n        ],\n    )\n    async def test_programmatic_align_change_updates_children_position(\n        style: str, value: str\n    ):\n        \"\"\"Regression test for #1607 for the align(_xxx) styles.\n    \n        See https://github.com/Textualize/textual/issues/1607.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"Grid { grid-size: 2 2; }\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_programmatic_align_change_updates_children_position[align-value2] ____\n\nstyle = 'align', value = ('right', 'bottom')\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"align_horizontal\", \"right\"),\n            (\"align_vertical\", \"bottom\"),\n            (\"align\", (\"right\", \"bottom\")),\n        ],\n    )\n    async def test_programmatic_align_change_updates_children_position(\n        style: str, value: str\n    ):\n        \"\"\"Regression test for #1607 for the align(_xxx) styles.\n    \n        See https://github.com/Textualize/textual/issues/1607.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"Grid { grid-size: 2 2; }\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f24df0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_style_animations_via_transition_are_disabled_on_none ___________\n\n    async def test_style_animations_via_transition_are_disabled_on_none() -> None:\n        app = LabelWithTransitionsApp()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test():\n\ntests/animations/test_disabling_animations.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924923d840>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_scrolling_does_not_animate_on_none ____________________\n\n    async def test_scrolling_does_not_animate_on_none() -> None:\n        app = TallApp()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_scrolling_animation.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fce20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_cursor_movement_basic __________________________\n\n    async def test_cursor_movement_basic():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_selection_bindings.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d1aad0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_external_watch_init_does_not_propagate_to_externals ___________\n\n    async def test_external_watch_init_does_not_propagate_to_externals() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3878.\n    \n        Make sure that when setting an extra watcher programmatically and `init` is set,\n        we init only the new watcher and not the other ones (even if they were\n        added dynamically with `watch`), but at the same time make sure all watchers\n        work in regular circumstances.\n        \"\"\"\n    \n        logs: list[str] = []\n    \n        class SomeWidget(Widget):\n            test_var: var[int] = var(0)\n    \n        class MyApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield SomeWidget()\n    \n            def add_first_watcher(self) -> None:\n                def first_callback() -> None:\n                    logs.append(\"first\")\n    \n                self.watch(self.query_one(SomeWidget), \"test_var\", first_callback)\n    \n            def add_second_watcher(self) -> None:\n                def second_callback() -> None:\n                    logs.append(\"second\")\n    \n                self.watch(self.query_one(SomeWidget), \"test_var\", second_callback)\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:702: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491491b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_escape_key_when_tab_behavior_is_focus __________________\n\n    async def test_escape_key_when_tab_behavior_is_focus():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4110\n    \n        When the `tab_behavior` of TextArea is the default to shift focus,\n        pressing <Escape> should not shift focus but instead skip and allow any\n        parent bindings to run.\n        \"\"\"\n    \n        app = TextAreaDialogApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_escape_binding.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d54ee0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248caaf50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_switch_animates_on_full _________________________\n\n    async def test_switch_animates_on_full() -> None:\n        app = SwitchApp()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_switch_animation.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e21870>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set _\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d1ae90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_replace_fully_within_selection ______________________\n\n    async def test_replace_fully_within_selection():\n        \"\"\"Adjust the selection when a replacement happens inside it.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bef730>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d75bd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_double_start _______________________________\n\n    async def test_double_start():\n        async def long_work():\n            return 0\n    \n        app = App()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249061870>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_keyboard_navigation_with_disabled_items _________________\n\n    async def test_keyboard_navigation_with_disabled_items() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3881.\"\"\"\n    \n        app = ListViewDisabledItemsApp()\n>       async with app.run_test() as pilot:\n\ntests/listview/test_listview_navigation.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d494e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_default_return_code_is_zero _______________________\n\n    async def test_default_return_code_is_zero():\n        app = App()\n>       async with app.run_test():\n\ntests/test_app.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918e680>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_app_title_reactive_does_not_update_title_when_screen_title_is_set ____\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb78e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e2a590>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_text_style_inheritance __________________________\n\n    async def test_text_style_inheritance():\n        \"\"\"Check that changes to text style are inherited in children.\"\"\"\n    \n        class FocusableThing(Static, can_focus=True):\n            DEFAULT_CSS = \"\"\"\n            FocusableThing {\n                text-style: bold;\n            }\n    \n            FocusableThing:focus {\n                text-style: bold reverse;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Static(\"test\", id=\"child-of-focusable-thing\")\n    \n        class InheritanceApp(App):\n            def compose(self) -> ComposeResult:\n                yield Button(\"button1\")\n                yield FocusableThing()\n                yield Button(\"button2\")\n    \n        app = InheritanceApp()\n>       async with app.run_test() as pilot:\n\ntests/test_style_inheritance.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248caa4d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e3790>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_validation_on_changed_should_not_happen[validate_on0] __________\n\nvalidate_on = set()\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"submitted\"},\n            {\"blur\", \"submitted\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_changed_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490fe6b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_validation_on_changed_should_not_happen[validate_on1] __________\n\nvalidate_on = {'blur'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"submitted\"},\n            {\"blur\", \"submitted\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_changed_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e26ef0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_validation_on_changed_should_not_happen[validate_on2] __________\n\nvalidate_on = {'submitted'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"submitted\"},\n            {\"blur\", \"submitted\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_changed_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d19750>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_validation_on_changed_should_not_happen[validate_on3] __________\n\nvalidate_on = {'blur', 'submitted'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"submitted\"},\n            {\"blur\", \"submitted\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_changed_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d54820>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_validation_on_changed_should_not_happen[validate_on4] __________\n\nvalidate_on = {'fried', 'garbage'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"submitted\"},\n            {\"blur\", \"submitted\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_changed_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248caaa70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_tab_with_spaces_goes_to_tab_stop[-0-4] __________________\n\ncontent = '', cursor_column = 0, cursor_destination = 4\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249101090>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_tab_with_spaces_goes_to_tab_stop[x-0-4] _________________\n\ncontent = 'x', cursor_column = 0, cursor_destination = 4\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c50b80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_tab_with_spaces_goes_to_tab_stop[x-1-4] _________________\n\ncontent = 'x', cursor_column = 1, cursor_destination = 4\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bee020>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_tab_with_spaces_goes_to_tab_stop[xxx-3-4] ________________\n\ncontent = 'xxx', cursor_column = 3, cursor_destination = 4\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249172cb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_tab_with_spaces_goes_to_tab_stop[xxxx-4-8] ________________\n\ncontent = 'xxxx', cursor_column = 4, cursor_destination = 8\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918c850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_tab_with_spaces_goes_to_tab_stop[xxxxx-5-8] _______________\n\ncontent = 'xxxxx', cursor_column = 5, cursor_destination = 8\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490ffa90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_tab_with_spaces_goes_to_tab_stop[xxxxxx-6-8] _______________\n\ncontent = 'xxxxxx', cursor_column = 6, cursor_destination = 8\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ca83a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_tab_with_spaces_goes_to_tab_stop[\\U0001f4a9-1-3] _____________\n\ncontent = '\ud83d\udca9', cursor_column = 1, cursor_destination = 3\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb5c60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_tab_with_spaces_goes_to_tab_stop[\\U0001f4a9\\U0001f4a9-2-6] ________\n\ncontent = '\ud83d\udca9\ud83d\udca9', cursor_column = 2, cursor_destination = 6\n\n    @pytest.mark.parametrize(\n        \"content,cursor_column,cursor_destination\",\n        [\n            (\"\", 0, 4),\n            (\"x\", 0, 4),\n            (\"x\", 1, 4),\n            (\"xxx\", 3, 4),\n            (\"xxxx\", 4, 8),\n            (\"xxxxx\", 5, 8),\n            (\"xxxxxx\", 6, 8),\n            (\"\ud83d\udca9\", 1, 3),\n            (\"\ud83d\udca9\ud83d\udca9\", 2, 6),\n        ],\n    )\n    async def test_tab_with_spaces_goes_to_tab_stop(\n        content, cursor_column, cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249c0c9d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_disabling_via_tabbed_content _______________________\n\n    async def test_disabling_via_tabbed_content():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).disable_tab(\"tab-2\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:510: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbdba0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_add_column_with_width __________________________\n\n    async def test_add_column_with_width():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e25db0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_query_set_styles_kwds __________________________\n\n    async def test_query_set_styles_kwds():\n        class LabelApp(App):\n            def compose(self):\n                yield Label(\"Some text\")\n    \n        app = LabelApp()\n>       async with app.run_test():\n\ntests/test_query.py:261: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491ab4f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_none_validate_on_means_all_validations_happen ______________\n\n    async def test_none_validate_on_means_all_validations_happen():\n        app = InputApp(None)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7bbe0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_insert_text_multiline_selection_bottom[select_from0-select_to0] _____\n\nselect_from = (0, 3), select_to = (2, 5)\n\n    @pytest.mark.parametrize(\n        \"select_from,select_to\",\n        [\n            [(0, 3), (2, 5)],\n            [(2, 5), (0, 3)],  # Ensuring independence from selection direction.\n        ],\n    )\n    async def test_insert_text_multiline_selection_bottom(select_from, select_to):\n        \"\"\"\n        The edited text is within the selected text on the bottom line\n        of the selection. The bottom of the selection should be adjusted\n        such that any text that was previously selected is still selected.\n        \"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:477: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491189a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_insert_text_multiline_selection_bottom[select_from1-select_to1] _____\n\nselect_from = (2, 5), select_to = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"select_from,select_to\",\n        [\n            [(0, 3), (2, 5)],\n            [(2, 5), (0, 3)],  # Ensuring independence from selection direction.\n        ],\n    )\n    async def test_insert_text_multiline_selection_bottom(select_from, select_to):\n        \"\"\"\n        The edited text is within the selected text on the bottom line\n        of the selection. The bottom of the selection should be adjusted\n        such that any text that was previously selected is still selected.\n        \"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:477: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbe050>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5cc70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_run_cancel ________________________________\n\n    async def test_run_cancel() -> None:\n        \"\"\"Test run may be cancelled.\"\"\"\n    \n        async def run_error() -> str:\n            await asyncio.sleep(0.1)\n            return \"Never\"\n    \n        class ErrorApp(App):\n            pass\n    \n        app = ErrorApp()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924914a560>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_empty_table_interactions _________________________\n\n    async def test_empty_table_interactions():\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f32dd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_add_rows_user_defined_keys ________________________\n\n    async def test_add_rows_user_defined_keys():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e74760>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_cursor_to_line_end[True-end] _______________________\n\nkey = 'end', app = <coroutine object app at 0x7f9248c4b300>\n\n    @pytest.mark.parametrize(\"key\", [\"end\", \"ctrl+e\"])\n    async def test_cursor_to_line_end(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the end of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:204: AttributeError\n_____________________ test_cursor_to_line_end[True-ctrl+e] _____________________\n\nkey = 'ctrl+e', app = <coroutine object app at 0x7f9248c4b610>\n\n    @pytest.mark.parametrize(\"key\", [\"end\", \"ctrl+e\"])\n    async def test_cursor_to_line_end(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the end of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:204: AttributeError\n______________________ test_cursor_to_line_end[False-end] ______________________\n\nkey = 'end', app = <coroutine object app at 0x7f9248c6bf40>\n\n    @pytest.mark.parametrize(\"key\", [\"end\", \"ctrl+e\"])\n    async def test_cursor_to_line_end(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the end of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:204: AttributeError\n____________________ test_cursor_to_line_end[False-ctrl+e] _____________________\n\nkey = 'ctrl+e', app = <coroutine object app at 0x7f9248c6aff0>\n\n    @pytest.mark.parametrize(\"key\", [\"end\", \"ctrl+e\"])\n    async def test_cursor_to_line_end(key, app: TextAreaApp):\n        \"\"\"You can use the keyboard to jump the cursor to the end of the current line.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:204: AttributeError\n__________________________________ test_clear __________________________________\n\n    async def test_clear():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d54f70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_message_queue_size ____________________________\n\n    async def test_message_queue_size():\n        \"\"\"Test message queue size property.\"\"\"\n        app = App()\n        assert app.message_queue_size == 0\n    \n        class TestMessage(Message):\n            pass\n    \n>       async with app.run_test() as pilot:\n\ntests/test_message_pump.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d1a350>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_tabbed_content_messages _________________________\n\n    async def test_tabbed_content_messages():\n        class TabbedApp(App):\n            activation_history: list[Tab] = []\n    \n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"foo\", id=\"foo\"):\n                        yield Label(\"Foo\", id=\"foo-label\")\n                    with TabPane(\"bar\", id=\"bar\"):\n                        yield Label(\"Bar\", id=\"bar-label\")\n                    with TabPane(\"baz\", id=\"baz\"):\n                        yield Label(\"Baz\", id=\"baz-label\")\n    \n            def on_tabbed_content_tab_activated(\n                self, event: TabbedContent.TabActivated\n            ) -> None:\n                self.activation_history.append(event.tab)\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5c190>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_add_row_duplicate_key __________________________\n\n    async def test_add_row_duplicate_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490606a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_move_cursor_respects_animate_parameter __________________\n\n    async def test_move_cursor_respects_animate_parameter():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3840\n    \n        Make sure that the call to `_scroll_cursor_into_view` from `move_cursor` happens\n        before the call from the watcher method from `cursor_coordinate`.\n        The former should animate because we call it with `animate=True` whereas the later\n        should not.\n        \"\"\"\n    \n        scrolls = []\n    \n        class _DataTable(DataTable):\n            def _scroll_cursor_into_view(self, animate=False):\n                nonlocal scrolls\n                scrolls.append(animate)\n                super()._scroll_cursor_into_view(animate)\n    \n        class LongDataTableApp(App):\n            def compose(self):\n                yield _DataTable()\n    \n            def on_mount(self):\n                dt = self.query_one(_DataTable)\n                dt.add_columns(\"one\", \"two\")\n                for _ in range(100):\n                    dt.add_row(\"one\", \"two\")\n    \n            def key_s(self):\n                table = self.query_one(_DataTable)\n                table.move_cursor(row=99, animate=True)\n    \n        app = LongDataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1419: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbad10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_clicking_border_link_doesnt_crash ____________________\n\n    async def test_clicking_border_link_doesnt_crash():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/4410\"\"\"\n    \n        class DataTableWithBorderLinkApp(App):\n            CSS = \"\"\"\n            DataTable {\n                border: solid red;\n            }\n            \"\"\"\n            link_clicked = False\n    \n            def compose(self) -> ComposeResult:\n                yield DataTable()\n    \n            def on_mount(self) -> None:\n                table = self.query_one(DataTable)\n                table.border_title = \"[@click=app.test_link]Border Link[/]\"\n    \n            def action_test_link(self) -> None:\n                self.link_clicked = True\n    \n        app = DataTableWithBorderLinkApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1447: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e2a2f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_initial_value_is_picked_if_allow_blank_is_false _____________\n\n    async def test_initial_value_is_picked_if_allow_blank_is_false():\n        \"\"\"The initial value should be respected even if allow_blank=False.\"\"\"\n    \n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select[int](SELECT_OPTIONS, value=2, allow_blank=False)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_value.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248db94b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_no_suggestion_on_empty_value_after_deleting _______________\n\n    async def test_no_suggestion_on_empty_value_after_deleting():\n        app = SuggestionsApp([\"hello\"])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e21480>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_reactive_with_callable_default ______________________\n\n    async def test_reactive_with_callable_default():\n        \"\"\"A callable can be supplied as the default value for a reactive.\n        Textual will call it in order to retrieve the default value.\"\"\"\n    \n        class ReactiveCallable(App):\n            value = reactive(lambda: 123)\n            watcher_called_with = None\n    \n            def watch_value(self, new_value):\n                self.watcher_called_with = new_value\n    \n        app = ReactiveCallable()\n>       async with app.run_test():\n\ntests/test_reactive.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c796c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_loading_indicator_is_not_static_on_basic _________________\n\n    async def test_loading_indicator_is_not_static_on_basic() -> None:\n        \"\"\"The loading indicator doesn't fall back to the static render on BASIC.\"\"\"\n        app = App()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_loading_indicator_animation.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248baadd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_offset_getter_setter ___________________________\n\n    async def test_offset_getter_setter():\n        class OffsetApp(App):\n            def compose(self):\n                yield Label(\"hello\")\n    \n        app = OffsetApp()\n>       async with app.run_test():\n\ntests/test_widget.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249061990>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_query_set_styles_css_and_kwds ______________________\n\n    async def test_query_set_styles_css_and_kwds():\n        class LabelApp(App):\n            def compose(self):\n                yield Label(\"Some text\")\n    \n        app = LabelApp()\n>       async with app.run_test():\n\ntests/test_query.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924914bac0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec63e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_creating_disabled_tab __________________________\n\n    async def test_creating_disabled_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"first\"):\n                        yield Label(\"hello\")\n                    with TabPane(\"second\", disabled=True):\n                        yield Label(\"world\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:542: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e243d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_external_watch_init_does_not_propagate __________________\n\n    async def test_external_watch_init_does_not_propagate() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3878.\n    \n        Make sure that when setting an extra watcher programmatically and `init` is set,\n        we init only the new watcher and not the other ones, but at the same\n        time make sure both watchers work in regular circumstances.\n        \"\"\"\n    \n        logs: list[str] = []\n    \n        class SomeWidget(Widget):\n            test_1: var[int] = var(0)\n            test_2: var[int] = var(0, init=False)\n    \n            def watch_test_1(self) -> None:\n                logs.append(\"test_1\")\n    \n            def watch_test_2(self) -> None:\n                logs.append(\"test_2\")\n    \n        class InitOverrideApp(App[None]):\n            def compose(self) -> ComposeResult:\n                yield SomeWidget()\n    \n            def on_mount(self) -> None:\n                def watch_test_2_extra() -> None:\n                    logs.append(\"test_2_extra\")\n    \n                self.watch(self.query_one(SomeWidget), \"test_2\", watch_test_2_extra)\n    \n        app = InitOverrideApp()\n>       async with app.run_test():\n\ntests/test_reactive.py:664: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249552290>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_center_container _____________________________\n\n    async def test_center_container():\n        \"\"\"Check the size of the container `Center`.\"\"\"\n    \n        class CenterApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with Center():\n                    yield Label(\"<>\\n<>\\n<>\")\n    \n        app = CenterApp()\n>       async with app.run_test():\n\ntests/test_containers.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d54280>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_select_line[1-123\\n456\\n789\\n-expected_selection0] ____________\n\nindex = 1, content = '123\\n456\\n789\\n'\nexpected_selection = Selection(start=(1, 0), end=(1, 3))\n\n    @pytest.mark.parametrize(\n        \"index,content,expected_selection\",\n        [\n            (1, \"123\\n456\\n789\\n\", Selection((1, 0), (1, 3))),\n            (2, \"123\\n456\\n789\\n\", Selection((2, 0), (2, 3))),\n            (3, \"123\\n456\\n789\\n\", Selection((3, 0), (3, 0))),\n            (1000, \"123\\n456\\n789\\n\", Selection.cursor((0, 0))),\n            (0, \"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_line(index, content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249007fa0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_select_line[2-123\\n456\\n789\\n-expected_selection1] ____________\n\nindex = 2, content = '123\\n456\\n789\\n'\nexpected_selection = Selection(start=(2, 0), end=(2, 3))\n\n    @pytest.mark.parametrize(\n        \"index,content,expected_selection\",\n        [\n            (1, \"123\\n456\\n789\\n\", Selection((1, 0), (1, 3))),\n            (2, \"123\\n456\\n789\\n\", Selection((2, 0), (2, 3))),\n            (3, \"123\\n456\\n789\\n\", Selection((3, 0), (3, 0))),\n            (1000, \"123\\n456\\n789\\n\", Selection.cursor((0, 0))),\n            (0, \"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_line(index, content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249172bf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_select_line[3-123\\n456\\n789\\n-expected_selection2] ____________\n\nindex = 3, content = '123\\n456\\n789\\n'\nexpected_selection = Selection(start=(3, 0), end=(3, 0))\n\n    @pytest.mark.parametrize(\n        \"index,content,expected_selection\",\n        [\n            (1, \"123\\n456\\n789\\n\", Selection((1, 0), (1, 3))),\n            (2, \"123\\n456\\n789\\n\", Selection((2, 0), (2, 3))),\n            (3, \"123\\n456\\n789\\n\", Selection((3, 0), (3, 0))),\n            (1000, \"123\\n456\\n789\\n\", Selection.cursor((0, 0))),\n            (0, \"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_line(index, content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d97f70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_select_line[1000-123\\n456\\n789\\n-expected_selection3] __________\n\nindex = 1000, content = '123\\n456\\n789\\n'\nexpected_selection = Selection(start=(0, 0), end=(0, 0))\n\n    @pytest.mark.parametrize(\n        \"index,content,expected_selection\",\n        [\n            (1, \"123\\n456\\n789\\n\", Selection((1, 0), (1, 3))),\n            (2, \"123\\n456\\n789\\n\", Selection((2, 0), (2, 3))),\n            (3, \"123\\n456\\n789\\n\", Selection((3, 0), (3, 0))),\n            (1000, \"123\\n456\\n789\\n\", Selection.cursor((0, 0))),\n            (0, \"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_line(index, content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248db8fa0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_select_line[0--expected_selection4] ___________________\n\nindex = 0, content = ''\nexpected_selection = Selection(start=(0, 0), end=(0, 0))\n\n    @pytest.mark.parametrize(\n        \"index,content,expected_selection\",\n        [\n            (1, \"123\\n456\\n789\\n\", Selection((1, 0), (1, 3))),\n            (2, \"123\\n456\\n789\\n\", Selection((2, 0), (2, 3))),\n            (3, \"123\\n456\\n789\\n\", Selection((3, 0), (3, 0))),\n            (1000, \"123\\n456\\n789\\n\", Selection.cursor((0, 0))),\n            (0, \"\", Selection((0, 0), (0, 0))),\n        ],\n    )\n    async def test_select_line(index, content, expected_selection):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_delete_line_multiline_document[selection0-345\\n678\\n9\\n] _________\n\nselection = Selection(start=(0, 0), end=(0, 0))\nexpected_result = '345\\n678\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249550820>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_delete_line_multiline_document[selection1-345\\n678\\n9\\n] _________\n\nselection = Selection(start=(0, 2), end=(0, 2))\nexpected_result = '345\\n678\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d19870>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_delete_line_multiline_document[selection2-012\\n345\\n678\\n] ________\n\nselection = Selection(start=(3, 1), end=(3, 1))\nexpected_result = '012\\n345\\n678\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec42e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_delete_line_multiline_document[selection3-012\\n345\\n678\\n9\\n] ______\n\nselection = Selection(start=(4, 0), end=(4, 0))\nexpected_result = '012\\n345\\n678\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e28880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_delete_line_multiline_document[selection4-012\\n678\\n9\\n] _________\n\nselection = Selection(start=(1, 1), end=(1, 2))\nexpected_result = '012\\n678\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249148b20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_delete_line_multiline_document[selection5-012\\n9\\n] ___________\n\nselection = Selection(start=(1, 2), end=(2, 1)), expected_result = '012\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249033a00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_delete_line_multiline_document[selection6-012\\n9\\n] ___________\n\nselection = Selection(start=(1, 2), end=(3, 0)), expected_result = '012\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e294b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_delete_line_multiline_document[selection7-012\\n9\\n] ___________\n\nselection = Selection(start=(3, 0), end=(1, 2)), expected_result = '012\\n9\\n'\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d87bb0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_delete_line_multiline_document[selection8-] _______________\n\nselection = Selection(start=(0, 0), end=(4, 0)), expected_result = ''\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result\",\n        [\n            # Cursors\n            (Selection.cursor((0, 0)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((0, 2)), \"345\\n678\\n9\\n\"),\n            (Selection.cursor((3, 1)), \"012\\n345\\n678\\n\"),\n            (Selection.cursor((4, 0)), \"012\\n345\\n678\\n9\\n\"),\n            # Selections\n            (Selection((1, 1), (1, 2)), \"012\\n678\\n9\\n\"),  # non-empty single line selection\n            (Selection((1, 2), (2, 1)), \"012\\n9\\n\"),  # delete lines selection touches\n            (\n                Selection((1, 2), (3, 0)),\n                \"012\\n9\\n\",\n            ),  # cursor at column 0 of line 3, should not be deleted!\n            (\n                Selection((3, 0), (1, 2)),\n                \"012\\n9\\n\",\n            ),  # opposite direction\n            (Selection((0, 0), (4, 0)), \"\"),  # delete all lines\n        ],\n    )\n    async def test_delete_line_multiline_document(selection, expected_result):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d566b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_run_worker_thread_async _________________________\n\n    async def test_run_worker_thread_async() -> None:\n        \"\"\"Check self.run_worker\"\"\"\n        worker_events: list[Worker.StateChanged] = []\n    \n        work_result: str = \"\"\n    \n        class WorkerWidget(Widget):\n            async def work(self) -> str:\n                nonlocal work_result\n                time.sleep(0.02)\n                work_result = \"foo\"\n                return \"foo\"\n    \n            def on_mount(self):\n                self.run_worker(self.work, thread=True)\n    \n            def on_worker_state_changed(self, event) -> None:\n                worker_events.append(event)\n    \n        class WorkerApp(App):\n            def compose(self) -> ComposeResult:\n                yield WorkerWidget()\n    \n        app = WorkerApp()\n>       async with app.run_test():\n\ntests/workers/test_worker_manager.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491494e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_set_return_code _____________________________\n\n    async def test_set_return_code():\n        app = App()\n>       async with app.run_test():\n\ntests/test_app.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e775e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_animate_height ______________________________\n\n    async def test_animate_height() -> None:\n        \"\"\"Test animating styles.height works.\"\"\"\n    \n        # Styles.height is a scalar, which makes it more complicated to animate\n    \n        app = AnimApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_animation.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249552290>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_cursor_selection_down_when_cursor_on_last_line[True] ___________\n\napp = <coroutine object app at 0x7f9248b21540>\n\n    async def test_cursor_selection_down_when_cursor_on_last_line(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:148: AttributeError\n__________ test_cursor_selection_down_when_cursor_on_last_line[False] __________\n\napp = <coroutine object app at 0x7f9248b23140>\n\n    async def test_cursor_selection_down_when_cursor_on_last_line(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:148: AttributeError\n______________________ test_reuse_column_key_after_clear _______________________\n\n    async def test_reuse_column_key_after_clear():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/1806\"\"\"\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:1104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918ebc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_style_animations_via_animate_are_disabled_on_basic ____________\n\n    async def test_style_animations_via_animate_are_disabled_on_basic() -> None:\n        app = SingleLabelApp()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test():\n\ntests/animations/test_disabling_animations.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ca9900>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_insert_multiline_text_maintain_offset __________________\n\n    async def test_insert_multiline_text_maintain_offset():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d4ae00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_get_focusable_widget_at _________________________\n\n    async def test_get_focusable_widget_at() -> None:\n        \"\"\"Check that clicking a non-focusable widget will focus any (focusable) ancestors.\"\"\"\n    \n        class FocusApp(App):\n            AUTO_FOCUS = None\n    \n            def compose(self) -> ComposeResult:\n                with ScrollableContainer(id=\"focusable\"):\n                    with Container():\n                        yield Label(\"Foo\", id=\"foo\")\n                        yield Label(\"Bar\", id=\"bar\")\n                yield Label(\"Egg\", id=\"egg\")\n    \n        app = FocusApp()\n>       async with app.run_test() as pilot:\n\ntests/test_focus.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbbe50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_progress_bar_animates_on_basic ______________________\n\n    async def test_progress_bar_animates_on_basic() -> None:\n        \"\"\"An indeterminate progress bar is not fully highlighted when animating.\"\"\"\n        app = ProgressBarApp()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test():\n\ntests/animations/test_progress_bar_animation.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c532b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_sort_by_multiple_columns_no_key _____________________\n\n    async def test_sort_by_multiple_columns_no_key():\n        \"\"\"Test sorting a `DataTable` by multiple columns.\"\"\"\n    \n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:1240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d86170>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_paste_app ________________________________\n\n    async def test_paste_app():\n        paste_events = []\n    \n        class PasteApp(App):\n            def on_paste(self, event):\n                paste_events.append(event)\n    \n        app = PasteApp()\n>       async with app.run_test() as pilot:\n\ntests/test_paste.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490ffcd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_premature_reactive_call _________________________\n\n    async def test_premature_reactive_call():\n        watcher_called = False\n    \n        class BrokenWidget(Widget):\n            foo = reactive(1)\n    \n            def __init__(self) -> None:\n                super().__init__()\n                self.foo = \"bar\"\n    \n            async def watch_foo(self) -> None:\n                nonlocal watcher_called\n                watcher_called = True\n    \n        class PrematureApp(App):\n            def compose(self) -> ComposeResult:\n                yield BrokenWidget()\n    \n        app = PrematureApp()\n>       async with app.run_test() as pilot:\n\ntests/test_reactive.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e22fe0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_get_cell_at_exception __________________________\n\n    async def test_get_cell_at_exception():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af25f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_screen_sub_title_overrides_app_sub_title _________________\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f310f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_children_loses_focus_if_container_is_disabled[Button] __________\n\nwidget = <class 'textual.widgets._button.Button'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491183d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_children_loses_focus_if_container_is_disabled[Checkbox] _________\n\nwidget = <class 'textual.widgets._checkbox.Checkbox'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d48be0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_children_loses_focus_if_container_is_disabled[DataTable] _________\n\nwidget = <class 'textual.widgets._data_table.DataTable'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec7100>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_children_loses_focus_if_container_is_disabled[DirectoryTree] _______\n\nwidget = <class 'textual.widgets._directory_tree.DirectoryTree'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb5090>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_children_loses_focus_if_container_is_disabled[Input] ___________\n\nwidget = <class 'textual.widgets._input.Input'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a1e70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_children_loses_focus_if_container_is_disabled[ListView] _________\n\nwidget = <class 'textual.widgets._list_view.ListView'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d4a830>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_children_loses_focus_if_container_is_disabled[OptionList] ________\n\nwidget = <class 'textual.widgets._option_list.OptionList'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec6260>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_children_loses_focus_if_container_is_disabled[RadioSet] _________\n\nwidget = <class 'textual.widgets._radio_set.RadioSet'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbe5f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_children_loses_focus_if_container_is_disabled[Select] __________\n\nwidget = <class 'textual.widgets._select.Select'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e76c80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_children_loses_focus_if_container_is_disabled[Switch] __________\n\nwidget = <class 'textual.widgets._switch.Switch'>\n\n    @pytest.mark.parametrize(\n        \"widget\",\n        [\n            Button,\n            Checkbox,\n            DataTable,\n            DirectoryTree,\n            Input,\n            ListView,\n            OptionList,\n            RadioSet,\n            Select,\n            Switch,\n        ],\n    )\n    async def test_children_loses_focus_if_container_is_disabled(widget):\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2772.\"\"\"\n        app = ChildrenNoFocusDisabledContainer()\n>       async with app.run_test() as pilot:\n\ntests/test_disabled.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b88730>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_single_keypress_printable_character ___________________\n\n    async def test_single_keypress_printable_character():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba9ff0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_hide_show_messages ____________________________\n\n    async def test_hide_show_messages():\n        hide_msg = False\n        show_msg = False\n    \n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n            def on_tabs_tab_hidden(self) -> None:\n                nonlocal hide_msg\n                hide_msg = True\n    \n            def on_tabs_tab_shown(self) -> None:\n                nonlocal show_msg\n                show_msg = True\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:712: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d76380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_screen_title_reactive_updates_title ___________________\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a0550>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_get_cell_returns_value_at_cell ______________________\n\n    async def test_get_cell_returns_value_at_cell():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e2bb50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_loading_indicator_is_static_on_none ___________________\n\n    async def test_loading_indicator_is_static_on_none() -> None:\n        \"\"\"The loading indicator falls back to the static render on NONE.\"\"\"\n        app = App()\n        app.animation_level = \"none\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_loading_indicator_animation.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c521a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_accept_suggestion ____________________________\n\n    async def test_accept_suggestion():\n        app = SuggestionsApp([\"hello\"])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d87ac0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_driver_mouse_down_up_click_widget ____________________\n\n    async def test_driver_mouse_down_up_click_widget():\n        \"\"\"Mouse down and up should issue a click when they're on a widget.\"\"\"\n    \n        class MyApp(App):\n            messages = []\n    \n            def compose(self):\n                yield Button()\n    \n            def on_button_pressed(self, event):\n                self.messages.append(event)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_driver.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbff40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_cursor_word_left[True] __________________________\n\napp = <coroutine object app at 0x7f9248bf2810>\n\n    async def test_cursor_word_left(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:180: AttributeError\n_________________________ test_cursor_word_left[False] _________________________\n\napp = <coroutine object app at 0x7f9248bf3bc0>\n\n    async def test_cursor_word_left(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:180: AttributeError\n_______________________________ test_initialize ________________________________\n\n    async def test_initialize():\n        \"\"\"Test initial values.\"\"\"\n    \n        def foo() -> str:\n            return \"foo\"\n    \n        app = App()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249170d60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_middle_container _____________________________\n\n    async def test_middle_container():\n        \"\"\"Check the size of the container `Middle`.\"\"\"\n    \n        class MiddleApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with Middle():\n                    yield Label(\"1234\")\n    \n        app = MiddleApp()\n>       async with app.run_test():\n\ntests/test_containers.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b98c40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_cell_padding_cannot_be_negative _____________________\n\n    async def test_cell_padding_cannot_be_negative():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:1379: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b50310>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_signal __________________________________\n\n    async def test_signal():\n        \"\"\"Test signal subscribe\"\"\"\n        called = 0\n    \n        class TestLabel(Label):\n            def on_mount(self) -> None:\n                def signal_result(_):\n                    nonlocal called\n                    called += 1\n    \n                assert isinstance(self.app, TestApp)\n                self.app.test_signal.subscribe(self, signal_result)\n    \n        class TestApp(App):\n            BINDINGS = [(\"space\", \"signal\")]\n    \n            def __init__(self) -> None:\n                self.test_signal: Signal[str] = Signal(self, \"coffee ready\")\n                super().__init__()\n    \n            def compose(self) -> ComposeResult:\n                yield TestLabel()\n    \n            def action_signal(self) -> None:\n                self.test_signal.publish(\"foo\")\n    \n        app = TestApp()\n>       async with app.run_test() as pilot:\n\ntests/test_signal.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cd90c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_widget_remove_children_no_children ____________________\n\n    async def test_widget_remove_children_no_children():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249031d50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_cursor_line_home_smart_home[True-cursor_start0-cursor_destination0] ___\n\ncursor_start = (0, 0), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b20e40>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n___ test_cursor_line_home_smart_home[True-cursor_start1-cursor_destination1] ___\n\ncursor_start = (0, 2), cursor_destination = (0, 0)\napp = <coroutine object app at 0x7f9248b21310>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n___ test_cursor_line_home_smart_home[True-cursor_start2-cursor_destination2] ___\n\ncursor_start = (0, 4), cursor_destination = (0, 0)\napp = <coroutine object app at 0x7f9248b18430>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n___ test_cursor_line_home_smart_home[True-cursor_start3-cursor_destination3] ___\n\ncursor_start = (0, 5), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b19380>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n___ test_cursor_line_home_smart_home[True-cursor_start4-cursor_destination4] ___\n\ncursor_start = (0, 9), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b18eb0>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n___ test_cursor_line_home_smart_home[True-cursor_start5-cursor_destination5] ___\n\ncursor_start = (0, 15), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b1ad50>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n__ test_cursor_line_home_smart_home[False-cursor_start0-cursor_destination0] ___\n\ncursor_start = (0, 0), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b18cf0>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n__ test_cursor_line_home_smart_home[False-cursor_start1-cursor_destination1] ___\n\ncursor_start = (0, 2), cursor_destination = (0, 0)\napp = <coroutine object app at 0x7f9248b21cb0>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n__ test_cursor_line_home_smart_home[False-cursor_start2-cursor_destination2] ___\n\ncursor_start = (0, 4), cursor_destination = (0, 0)\napp = <coroutine object app at 0x7f9248bf3bc0>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n__ test_cursor_line_home_smart_home[False-cursor_start3-cursor_destination3] ___\n\ncursor_start = (0, 5), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b19770>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n__ test_cursor_line_home_smart_home[False-cursor_start4-cursor_destination4] ___\n\ncursor_start = (0, 9), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b1ab90>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n__ test_cursor_line_home_smart_home[False-cursor_start5-cursor_destination5] ___\n\ncursor_start = (0, 15), cursor_destination = (0, 4)\napp = <coroutine object app at 0x7f9248b1a500>\n\n    @pytest.mark.parametrize(\n        \"cursor_start,cursor_destination\",\n        [\n            ((0, 0), (0, 4)),\n            ((0, 2), (0, 0)),\n            ((0, 4), (0, 0)),\n            ((0, 5), (0, 4)),\n            ((0, 9), (0, 4)),\n            ((0, 15), (0, 4)),\n        ],\n    )\n    async def test_cursor_line_home_smart_home(\n        cursor_start, cursor_destination, app: TextAreaApp\n    ):\n        \"\"\"If the line begins with whitespace, pressing home firstly goes\n        to the start of the (non-whitespace) content. Pressing it again takes you to column\n        0. If you press it again, it goes back to the first non-whitespace column.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:241: AttributeError\n____________________ test_initial_terminal_cursor_position _____________________\n\n    async def test_initial_terminal_cursor_position():\n        app = InputApp()\n>       async with app.run_test():\n\ntests/input/test_input_terminal_cursor.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248befb20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_disabling_does_not_deactivate_tab ____________________\n\n    async def test_disabling_does_not_deactivate_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).get_tab(\"tab-1\").disabled = True\n    \n        app = TabbedApp()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249171150>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_sort_children_no_key ___________________________\n\n    async def test_sort_children_no_key() -> None:\n        \"\"\"Test sorting with no key.\"\"\"\n    \n        class SortApp(App):\n    \n            def compose(self) -> ComposeResult:\n                with Container(id=\"container\"):\n                    yield Label(\"three\", id=\"l3\")\n                    yield Label(\"one\", id=\"l1\")\n                    yield Label(\"four\", id=\"l4\")\n                    yield Label(\"two\", id=\"l2\")\n    \n        app = SortApp()\n>       async with app.run_test():\n\ntests/test_widget.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d75fc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_prevent _________________________________\n\n    async def test_prevent() -> None:\n        app = PreventTestApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_message_pump.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c50280>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_move_cursor_relative ___________________________\n\n    async def test_move_cursor_relative():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e231f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_replace_multiline_text_maintain_selection ________________\n\n    async def test_replace_multiline_text_maintain_selection():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af2da0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_edits_on_read_only_mode _________________________\n\n    async def test_edits_on_read_only_mode():\n        \"\"\"API edits should still be permitted on read-only mode.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d1b430>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_delete_empty_document __________________________\n\n    async def test_delete_empty_document():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:383: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f30430>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_empty_select_raises_exception_if_allow_blank_is_false __________\n\n    async def test_empty_select_raises_exception_if_allow_blank_is_false():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select([], allow_blank=False)\n    \n        app = SelectApp()\n        with pytest.raises(EmptySelectError):\n>           async with app.run_test():\n\ntests/select/test_empty_select.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248db9ab0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_style_animations_via_animate_work_on_full ________________\n\n    async def test_style_animations_via_animate_work_on_full() -> None:\n        app = SingleLabelApp()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test():\n\ntests/animations/test_disabling_animations.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bab8e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_wait_without_start ____________________________\n\n    async def test_wait_without_start():\n        async def work():\n            return\n    \n        app = App()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a075e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_tabbed_content_switch_via_ui _______________________\n\n    async def test_tabbed_content_switch_via_ui():\n        \"\"\"Check tab navigation via the user interface.\"\"\"\n    \n        class TabbedApp(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"foo\", id=\"foo\"):\n                        yield Label(\"Foo\", id=\"foo-label\")\n                    with TabPane(\"bar\", id=\"bar\"):\n                        yield Label(\"Bar\", id=\"bar-label\")\n                    with TabPane(\"baz\", id=\"baz\"):\n                        yield Label(\"Baz\", id=\"baz-label\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490304f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_paste[selection0] ____________________________\n\nselection = Selection(start=(1, 0), end=(3, 0))\n\n    @pytest.mark.parametrize(\n        \"selection\",\n        [\n            Selection(start=(1, 0), end=(3, 0)),\n            Selection(start=(3, 0), end=(1, 0)),\n        ],\n    )\n    async def test_paste(selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249171990>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_paste[selection1] ____________________________\n\nselection = Selection(start=(3, 0), end=(1, 0))\n\n    @pytest.mark.parametrize(\n        \"selection\",\n        [\n            Selection(start=(1, 0), end=(3, 0)),\n            Selection(start=(3, 0), end=(1, 0)),\n        ],\n    )\n    async def test_paste(selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:488: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918e380>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_push_screen_wait_for_dismiss _______________________\n\n    async def test_push_screen_wait_for_dismiss() -> None:\n        \"\"\"Test push_screen returns result.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            @work\n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # Press X to exit, then Y to dismiss, expect True result\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d57250>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_escape_key_when_tab_behavior_is_indent __________________\n\n    async def test_escape_key_when_tab_behavior_is_indent():\n        \"\"\"When the `tab_behavior` of TextArea is indent rather than switch focus,\n        pressing <Escape> should instead shift focus.\n        \"\"\"\n    \n        app = TextAreaDialogApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_escape_binding.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bab8b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_tabs_nested_in_tabbed_content_doesnt_crash ________________\n\n    async def test_tabs_nested_in_tabbed_content_doesnt_crash():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3412\"\"\"\n    \n        class TabsNestedInTabbedContent(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"Outer TabPane\"):\n                        yield Tabs(\"Inner Tab\")\n    \n        app = TabsNestedInTabbedContent()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:860: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c78ee0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_focus_moves_to_visible_widgets_inside_invisible_containers ________\n\n    async def test_focus_moves_to_visible_widgets_inside_invisible_containers():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3053.\"\"\"\n    \n        class MyApp(App):\n            CSS = \"\"\"\n            #inv { visibility: hidden; }\n            #three { visibility: visible; }\n            \"\"\"\n    \n            def compose(self):\n                yield Button(id=\"one\")\n                with Container(id=\"inv\"):\n                    yield Button(id=\"three\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_focus.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92499c2230>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_suggestion_shows_up_after_deleting_extra_chars ______________\n\n    async def test_suggestion_shows_up_after_deleting_extra_chars():\n        app = SuggestionsApp([\"hello\"])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248caa560>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_sort_coordinate_and_key_access ______________________\n\n    async def test_sort_coordinate_and_key_access():\n        \"\"\"Ensure that, after sorting, that coordinates and cell keys\n        can still be used to retrieve the correct cell.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:914: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be43a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_tabs_underline_animates_on_full _____________________\n\n    async def test_tabs_underline_animates_on_full() -> None:\n        \"\"\"The underline takes some time to move when animated.\"\"\"\n        app = TabbedContentApp()\n        app.animation_level = \"full\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_tabs_underline_animation.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb68f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_input_value_visible_if_mounted_later_and_assigned_after _________\n\n    async def test_input_value_visible_if_mounted_later_and_assigned_after():\n        \"\"\"Check if full value rendered if the widget is mounted later and the value is then assigned to.\"\"\"\n    \n        class MyApp(App):\n            BINDINGS = [\n                (\"a\", \"add_input\", \"add_input\"),\n                (\"v\", \"set_value\", \"set_value\"),\n            ]\n    \n            async def action_add_input(self):\n                await self.mount(Input())\n    \n            def action_set_value(self):\n                self.query_one(Input).value = \"value\"\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_value_visibility.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b99ab0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_command_palette_opened_event _______________________\n\n    async def test_command_palette_opened_event():\n        app = AppWithActiveCommandPalette()\n>       async with app.run_test():\n\ntests/command_palette/test_events.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbf700>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_add_row_expands_column_widths ______________________\n\n    async def test_add_row_expands_column_widths():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/1026.\"\"\"\n        app = DataTableApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249033040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_vertical_vs_verticalscroll_scrolling ___________________\n\n    async def test_vertical_vs_verticalscroll_scrolling():\n        \"\"\"Check the default scrollbar behaviours for `Vertical` and `VerticalScroll`.\"\"\"\n    \n        class VerticalsApp(App[None]):\n            CSS = \"\"\"\n            Screen {\n                layout: horizontal;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                with Vertical():\n                    for _ in range(10):\n                        yield Label(\"How is life going?\\n\" * 3 + \"\\n\\n\")\n                with VerticalScroll():\n                    for _ in range(10):\n                        yield Label(\"How is life going?\\n\" * 3 + \"\\n\\n\")\n    \n        WIDTH = 80\n        HEIGHT = 24\n        app = VerticalsApp()\n>       async with app.run_test(size=(WIDTH, HEIGHT)):\n\ntests/test_containers.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248caaec0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_watch_compute ______________________________\n\n    async def test_watch_compute():\n        \"\"\"Check that watching a computed attribute works.\"\"\"\n    \n        watch_called: list[bool] = []\n    \n        class Calculator(App):\n            numbers = var(\"0\")\n            show_ac = var(True)\n            value = var(\"\")\n    \n            def compute_show_ac(self) -> bool:\n                return self.value in (\"\", \"0\") and self.numbers == \"0\"\n    \n            def watch_show_ac(self, show_ac: bool) -> None:\n                \"\"\"Called when show_ac changes.\"\"\"\n                watch_called.append(show_ac)\n    \n        app = Calculator()\n    \n        # Referencing the value calls compute\n        # Setting any reactive values calls compute\n>       async with app.run_test():\n\ntests/test_reactive.py:384: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d843a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_get_row_at_invalid_index[-1] _______________________\n\nindex = -1\n\n    @pytest.mark.parametrize(\"index\", (-1, 2))\n    async def test_get_row_at_invalid_index(index):\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:546: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249170040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_get_row_at_invalid_index[2] _______________________\n\nindex = 2\n\n    @pytest.mark.parametrize(\"index\", (-1, 2))\n    async def test_get_row_at_invalid_index(index):\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:546: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e29570>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________________ test_no_suggestions ______________________________\n\n    async def test_no_suggestions():\n        app = SuggestionsApp([])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e2410>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_default_theme ______________________________\n\n    async def test_default_theme():\n        app = TextAreaApp()\n    \n>       async with app.run_test():\n\ntests/text_area/test_setting_themes.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a06590>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_select_line_binding[True] ________________________\n\napp = <coroutine object app at 0x7f9248b23220>\n\n    async def test_select_line_binding(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:296: AttributeError\n_______________________ test_select_line_binding[False] ________________________\n\napp = <coroutine object app at 0x7f9248bf1690>\n\n    async def test_select_line_binding(app: TextAreaApp):\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:296: AttributeError\n_________________________ test_mouse_down_gives_focus __________________________\n\n    async def test_mouse_down_gives_focus():\n        class MyApp(App):\n            AUTO_FOCUS = None\n    \n            def compose(self):\n                yield Button()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_focus.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbcaf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_selection_changed_via_api ________________________\n\n    async def test_selection_changed_via_api():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_messages.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f5f790>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_insert_newline_around_cursor_maintain_selection_offset[cursor_location0-insert_location0-cursor_destination0] _\n\ncursor_location = (1, 0), insert_location = (0, 0), cursor_destination = (2, 0)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((1, 0), (0, 0), (2, 0)),  # API insert before cursor row\n            ((0, 0), (0, 0), (1, 0)),  # API insert right at cursor row\n            ((0, 0), (1, 0), (0, 0)),  # API insert after cursor row\n        ],\n    )\n    async def test_insert_newline_around_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a04760>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_insert_newline_around_cursor_maintain_selection_offset[cursor_location1-insert_location1-cursor_destination1] _\n\ncursor_location = (0, 0), insert_location = (0, 0), cursor_destination = (1, 0)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((1, 0), (0, 0), (2, 0)),  # API insert before cursor row\n            ((0, 0), (0, 0), (1, 0)),  # API insert right at cursor row\n            ((0, 0), (1, 0), (0, 0)),  # API insert after cursor row\n        ],\n    )\n    async def test_insert_newline_around_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d74700>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_insert_newline_around_cursor_maintain_selection_offset[cursor_location2-insert_location2-cursor_destination2] _\n\ncursor_location = (0, 0), insert_location = (1, 0), cursor_destination = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"cursor_location,insert_location,cursor_destination\",\n        [\n            ((1, 0), (0, 0), (2, 0)),  # API insert before cursor row\n            ((0, 0), (0, 0), (1, 0)),  # API insert right at cursor row\n            ((0, 0), (1, 0), (0, 0)),  # API insert after cursor row\n        ],\n    )\n    async def test_insert_newline_around_cursor_maintain_selection_offset(\n        cursor_location,\n        insert_location,\n        cursor_destination\n    ):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e75030>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b95660>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_clear_empty_document ___________________________\n\n    async def test_clear_empty_document():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:400: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7bf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_coordinate_to_cell_key_invalid_coordinate ________________\n\n    async def test_coordinate_to_cell_key_invalid_coordinate():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:752: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248db81c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_initial_value_is_validated ________________________\n\n    async def test_initial_value_is_validated():\n        \"\"\"The initial value should be respected if it is a legal value.\n    \n        Regression test for https://github.com/Textualize/textual/discussions/3037.\n        \"\"\"\n        app = SelectApp(1)\n>       async with app.run_test():\n\ntests/select/test_value.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e262c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_wait_for_current_animations _______________________\n\n    async def test_wait_for_current_animations() -> None:\n        \"\"\"Test that we can wait only for the current animations taking place.\"\"\"\n    \n        app = AnimApp()\n    \n        delay = 10\n    \n>       async with app.run_test() as pilot:\n\ntests/test_animation.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af2770>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_get_column ________________________________\n\n    async def test_get_column():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:583: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e779d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_delete_right_end_of_line _________________________\n\n    async def test_delete_right_end_of_line():\n        \"\"\"Pressing 'delete' at the end of the line merges this line with the line below.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ca9360>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_command_palette_option_highlighted_event _________________\n\n    async def test_command_palette_option_highlighted_event():\n        app = AppWithActiveCommandPalette()\n>       async with app.run_test() as pilot:\n\ntests/command_palette/test_events.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbdf30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_style_animations_via_transition_are_disabled_on_basic __________\n\n    async def test_style_animations_via_transition_are_disabled_on_basic() -> None:\n        app = LabelWithTransitionsApp()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test():\n\ntests/animations/test_disabling_animations.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248babe80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_get_column_invalid_key __________________________\n\n    async def test_get_column_invalid_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:597: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248fb6ce0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_cursor_location_set ___________________________\n\n    async def test_cursor_location_set():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cda5f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_delete_multiple_lines_selection_above __________________\n\n    async def test_delete_multiple_lines_selection_above():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6d420>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_add_column_duplicate_key _________________________\n\n    async def test_add_column_duplicate_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e76260>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_empty_set_options_is_ok_with_blanks ___________________\n\n    async def test_empty_set_options_is_ok_with_blanks():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select([(str(n), n) for n in range(3)], value=0)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_empty_select.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d94820>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_run_test _________________________________\n\n    async def test_run_test() -> None:\n        \"\"\"Test the run_test context manager.\"\"\"\n        keys_pressed: list[str] = []\n    \n        class TestApp(App[str]):\n            def on_key(self, event: events.Key) -> None:\n                keys_pressed.append(event.key)\n    \n        app = TestApp()\n>       async with app.run_test() as pilot:\n\ntests/test_test_runner.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec7670>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_bad_type _________________________________\n\n    async def test_bad_type():\n        \"\"\"Check an invalid type raises a ValueError.\"\"\"\n    \n        class InputApp(App):\n            def compose(self) -> ComposeResult:\n                yield Input(type=\"foo\")  # Bad type\n    \n        app = InputApp()\n    \n        with pytest.raises(ValueError):\n>           async with app.run_test():\n\ntests/input/test_input_restrict.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba8190>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_on_widget_that_is_not_visible_errors[click-#label0] _____\n\nmethod = 'click', target = '#label0'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e21270>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_on_widget_that_is_not_visible_errors[click-#label90] ____\n\nmethod = 'click', target = '#label90'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be63e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_on_widget_that_is_not_visible_errors[click-Button] _____\n\nmethod = 'click', target = <class 'textual.widgets._button.Button'>\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491a2350>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_on_widget_that_is_not_visible_errors[hover-#label0] _____\n\nmethod = 'hover', target = '#label0'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b98880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_pilot_target_on_widget_that_is_not_visible_errors[hover-#label90] ____\n\nmethod = 'hover', target = '#label90'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c51e10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_pilot_target_on_widget_that_is_not_visible_errors[hover-Button] _____\n\nmethod = 'hover', target = <class 'textual.widgets._button.Button'>\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be63b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_on_widget_that_is_not_visible_errors[mouse_down-#label0] __\n\nmethod = 'mouse_down', target = '#label0'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dba050>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_pilot_target_on_widget_that_is_not_visible_errors[mouse_down-#label90] __\n\nmethod = 'mouse_down', target = '#label90'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92491712a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_on_widget_that_is_not_visible_errors[mouse_down-Button] ___\n\nmethod = 'mouse_down', target = <class 'textual.widgets._button.Button'>\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b529b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_on_widget_that_is_not_visible_errors[mouse_up-#label0] ___\n\nmethod = 'mouse_up', target = '#label0'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af3c10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_pilot_target_on_widget_that_is_not_visible_errors[mouse_up-#label90] ___\n\nmethod = 'mouse_up', target = '#label90'\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bab8b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_pilot_target_on_widget_that_is_not_visible_errors[mouse_up-Button] ____\n\nmethod = 'mouse_up', target = <class 'textual.widgets._button.Button'>\n\n    @pytest.mark.parametrize(\n        [\"method\", \"target\"],\n        [\n            (\"click\", \"#label0\"),\n            (\"click\", \"#label90\"),\n            (\"click\", Button),\n            #\n            (\"hover\", \"#label0\"),\n            (\"hover\", \"#label90\"),\n            (\"hover\", Button),\n            #\n            (\"mouse_down\", \"#label0\"),\n            (\"mouse_down\", \"#label90\"),\n            (\"mouse_down\", Button),\n            #\n            (\"mouse_up\", \"#label0\"),\n            (\"mouse_up\", \"#label90\"),\n            (\"mouse_up\", Button),\n        ],\n    )\n    async def test_pilot_target_on_widget_that_is_not_visible_errors(method, target):\n        \"\"\"Make sure that clicking a widget that is not scrolled into view raises an error.\"\"\"\n        app = ManyLabelsApp()\n>       async with app.run_test(size=(80, 5)) as pilot:\n\ntests/test_pilot.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b880a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_deletion_with_non_empty_selection[delete-selection0] ___________\n\nkey = 'delete', selection = Selection(start=(1, 2), end=(3, 4))\n\n    @pytest.mark.parametrize(\n        \"key,selection\",\n        [\n            (\"delete\", Selection((1, 2), (3, 4))),\n            (\"delete\", Selection((3, 4), (1, 2))),\n            (\"backspace\", Selection((1, 2), (3, 4))),\n            (\"backspace\", Selection((3, 4), (1, 2))),\n        ],\n    )\n    async def test_deletion_with_non_empty_selection(key, selection):\n        \"\"\"When there's a selection, pressing backspace or delete should delete everything\n        that is selected and reset the selection to a cursor at the appropriate location.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b52350>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________ test_deletion_with_non_empty_selection[delete-selection1] ___________\n\nkey = 'delete', selection = Selection(start=(3, 4), end=(1, 2))\n\n    @pytest.mark.parametrize(\n        \"key,selection\",\n        [\n            (\"delete\", Selection((1, 2), (3, 4))),\n            (\"delete\", Selection((3, 4), (1, 2))),\n            (\"backspace\", Selection((1, 2), (3, 4))),\n            (\"backspace\", Selection((3, 4), (1, 2))),\n        ],\n    )\n    async def test_deletion_with_non_empty_selection(key, selection):\n        \"\"\"When there's a selection, pressing backspace or delete should delete everything\n        that is selected and reset the selection to a cursor at the appropriate location.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be5ae0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_deletion_with_non_empty_selection[backspace-selection2] _________\n\nkey = 'backspace', selection = Selection(start=(1, 2), end=(3, 4))\n\n    @pytest.mark.parametrize(\n        \"key,selection\",\n        [\n            (\"delete\", Selection((1, 2), (3, 4))),\n            (\"delete\", Selection((3, 4), (1, 2))),\n            (\"backspace\", Selection((1, 2), (3, 4))),\n            (\"backspace\", Selection((3, 4), (1, 2))),\n        ],\n    )\n    async def test_deletion_with_non_empty_selection(key, selection):\n        \"\"\"When there's a selection, pressing backspace or delete should delete everything\n        that is selected and reset the selection to a cursor at the appropriate location.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f33010>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_deletion_with_non_empty_selection[backspace-selection3] _________\n\nkey = 'backspace', selection = Selection(start=(3, 4), end=(1, 2))\n\n    @pytest.mark.parametrize(\n        \"key,selection\",\n        [\n            (\"delete\", Selection((1, 2), (3, 4))),\n            (\"delete\", Selection((3, 4), (1, 2))),\n            (\"backspace\", Selection((1, 2), (3, 4))),\n            (\"backspace\", Selection((3, 4), (1, 2))),\n        ],\n    )\n    async def test_deletion_with_non_empty_selection(key, selection):\n        \"\"\"When there's a selection, pressing backspace or delete should delete everything\n        that is selected and reset the selection to a cursor at the appropriate location.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7b1c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_validation_on_submitted_should_not_happen[validate_on0] _________\n\nvalidate_on = set()\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"changed\"},\n            {\"blur\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_submitted_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248babaf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_validation_on_submitted_should_not_happen[validate_on1] _________\n\nvalidate_on = {'blur'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"changed\"},\n            {\"blur\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_submitted_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec6020>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_validation_on_submitted_should_not_happen[validate_on2] _________\n\nvalidate_on = {'changed'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"changed\"},\n            {\"blur\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_submitted_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d55d50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_validation_on_submitted_should_not_happen[validate_on3] _________\n\nvalidate_on = {'blur', 'changed'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"changed\"},\n            {\"blur\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_submitted_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d95b10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_validation_on_submitted_should_not_happen[validate_on4] _________\n\nvalidate_on = {'fried', 'garbage'}\n\n    @pytest.mark.parametrize(\n        \"validate_on\",\n        [\n            set(),\n            {\"blur\"},\n            {\"changed\"},\n            {\"blur\", \"changed\"},\n            {\"fried\", \"garbage\"},\n        ],\n    )\n    async def test_validation_on_submitted_should_not_happen(validate_on):\n        app = InputApp(validate_on)\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e206d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_input_changed_message_validation_success _________________\n\n    async def test_input_changed_message_validation_success():\n        app = InputApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e27520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_get_row_index_invalid_row_key ______________________\n\n    async def test_get_row_index_invalid_row_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:572: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec6980>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_selecting_posts_message _________________________\n\n    async def test_selecting_posts_message():\n        app = SelectApp()\n>       async with app.run_test() as pilot:\n\ntests/select/test_changed_message.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d56a10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_disabling_via_tab_pane __________________________\n\n    async def test_disabling_via_tab_pane():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n            def on_mount(self) -> None:\n                self.query_one(\"TabPane#tab-2\").disabled = True\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:526: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a34b80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_setting_unknown_theme_raises_exception __________________\n\n    async def test_setting_unknown_theme_raises_exception():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_setting_themes.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249773280>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________________ test_get_row _________________________________\n\n    async def test_get_row():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:503: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b00a00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_validate_init_true_set_before_dom_ready _________________\n\n    async def test_validate_init_true_set_before_dom_ready():\n        \"\"\"When init is True for a reactive attribute, Textual should call the validator\n        AND the watch method when the app starts.\"\"\"\n        validator_call_count = 0\n    \n        class ValidatorInitTrue(App):\n            count = var(5, init=True)\n    \n            def validate_count(self, value: int) -> int:\n                nonlocal validator_call_count\n                validator_call_count += 1\n                return value + 1\n    \n        app = ValidatorInitTrue()\n        app.count = 5\n>       async with app.run_test():\n\ntests/test_reactive.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cab5e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_remove_column ______________________________\n\n    async def test_remove_column():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924918dae0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_on_button_pressed ____________________________\n\n    async def test_on_button_pressed() -> None:\n        \"\"\"Test handlers with @on decorator.\"\"\"\n    \n        pressed: list[str] = []\n    \n        class ButtonApp(App):\n            def compose(self) -> ComposeResult:\n                yield Button(\"OK\", id=\"ok\")\n                yield Button(\"Cancel\", classes=\"exit cancel\")\n                yield Button(\"Quit\", classes=\"exit quit\")\n    \n            @on(Button.Pressed, \"#ok\")\n            def ok(self):\n                pressed.append(\"ok\")\n    \n            @on(Button.Pressed, \".exit\")\n            def exit(self):\n                pressed.append(\"exit\")\n    \n            @on(Button.Pressed, \".exit.quit\")\n            def _(self):\n                pressed.append(\"quit\")\n    \n            def on_button_pressed(self):\n                pressed.append(\"default\")\n    \n        app = ButtonApp()\n>       async with app.run_test() as pilot:\n\ntests/test_on.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e257e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_push_screen_wait_for_dismiss_no_worker __________________\n\n    async def test_push_screen_wait_for_dismiss_no_worker() -> None:\n        \"\"\"Test wait_for_dismiss raises NoActiveWorker when not using workers.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # using `wait_for_dismiss` outside of a worker should raise NoActiveWorker\n        with pytest.raises(NoActiveWorker):\n>           async with app.run_test() as pilot:\n\ntests/test_screens.py:498: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e76860>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_default_selection ____________________________\n\n    async def test_default_selection():\n        \"\"\"The cursor starts at (0, 0) in the document.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92490e2410>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_showing_tabs_does_not_change_active_tab _________________\n\n    async def test_showing_tabs_does_not_change_active_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n                    yield Label(\"tab-3\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:763: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ca9900>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_setting_builtin_language_via_attribute __________________\n\n    async def test_setting_builtin_language_via_attribute():\n        class MyTextAreaApp(App):\n            def compose(self) -> ComposeResult:\n                text_area = TextArea(\"print('hello')\")\n                text_area.language = \"python\"\n                yield text_area\n    \n        app = MyTextAreaApp()\n    \n>       async with app.run_test():\n\ntests/text_area/test_languages.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d49060>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_input_submitted_message_validation_success ________________\n\n    async def test_input_submitted_message_validation_success():\n        app = InputApp()\n>       async with app.run_test() as pilot:\n\ntests/input/test_input_validation.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a35150>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_get_cursor_up_location[start0-end0] ___________________\n\nstart = (0, 4), end = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 4), (0, 0)),  # jump to start\n            ((1, 2), (0, 2)),  # go to column above\n            ((2, 56), (1, 24)),  # snap to end of row above\n        ],\n    )\n    async def test_get_cursor_up_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6dc30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_get_cursor_up_location[start1-end1] ___________________\n\nstart = (1, 2), end = (0, 2)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 4), (0, 0)),  # jump to start\n            ((1, 2), (0, 2)),  # go to column above\n            ((2, 56), (1, 24)),  # snap to end of row above\n        ],\n    )\n    async def test_get_cursor_up_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af0e20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_get_cursor_up_location[start2-end2] ___________________\n\nstart = (2, 56), end = (1, 24)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 4), (0, 0)),  # jump to start\n            ((1, 2), (0, 2)),  # go to column above\n            ((2, 56), (1, 24)),  # snap to end of row above\n        ],\n    )\n    async def test_get_cursor_up_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b8b5e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_signal_parameters ____________________________\n\n    async def test_signal_parameters():\n        str_result: str | None = None\n        int_result: int | None = None\n    \n        class TestApp(App):\n            BINDINGS = [(\"space\", \"signal\")]\n    \n            def __init__(self) -> None:\n                self.str_signal: Signal[str] = Signal(self, \"str\")\n                self.int_signal: Signal[int] = Signal(self, \"int\")\n                super().__init__()\n    \n            def action_signal(self) -> None:\n                self.str_signal.publish(\"foo\")\n                self.int_signal.publish(3)\n    \n            def on_mount(self) -> None:\n                def on_str(my_str):\n                    nonlocal str_result\n                    str_result = my_str\n    \n                def on_int(my_int):\n                    nonlocal int_result\n                    int_result = my_int\n    \n                self.str_signal.subscribe(self, on_str)\n                self.int_signal.subscribe(self, on_int)\n    \n        app = TestApp()\n>       async with app.run_test() as pilot:\n\ntests/test_signal.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c52a10>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_value_unknown_option_raises_error ____________________\n\n    async def test_value_unknown_option_raises_error():\n        \"\"\"Setting the value to an unknown value raises an error.\"\"\"\n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_value.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ab1e70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_replace_lines_with_fewer_lines[selection0] ________________\n\nselection = Selection(start=(1, 0), end=(3, 0))\n\n    @pytest.mark.parametrize(\n        \"selection\",\n        [\n            Selection(start=(1, 0), end=(3, 0)),\n            Selection(start=(3, 0), end=(1, 0)),\n        ],\n    )\n    async def test_replace_lines_with_fewer_lines(selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:463: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be58d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_replace_lines_with_fewer_lines[selection1] ________________\n\nselection = Selection(start=(3, 0), end=(1, 0))\n\n    @pytest.mark.parametrize(\n        \"selection\",\n        [\n            Selection(start=(1, 0), end=(3, 0)),\n            Selection(start=(3, 0), end=(1, 0)),\n        ],\n    )\n    async def test_replace_lines_with_fewer_lines(selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:463: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a90a30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248f324d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_run_error ________________________________\n\n    async def test_run_error() -> None:\n        async def run_error() -> str:\n            await asyncio.sleep(0.1)\n            1 / 0\n            return \"Never\"\n    \n        class ErrorApp(App):\n            pass\n    \n        app = ErrorApp()\n        with pytest.raises(WorkerFailed):\n>           async with app.run_test():\n\ntests/workers/test_worker.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b89210>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_dismiss_non_top_screen __________________________\n\n    async def test_dismiss_non_top_screen():\n        class MyApp(App[None]):\n            async def key_p(self) -> None:\n                self.bottom = Screen()\n                top = Screen()\n                await self.push_screen(self.bottom)\n                await self.push_screen(top)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248db8940>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_add_columns _______________________________\n\n    async def test_add_columns():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92489076a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_installed_screens ____________________________\n\n    async def test_installed_screens():\n        class ScreensApp(App):\n            SCREENS = {\n                \"home\": Screen,  # Screen type\n                \"one\": Screen(),  # Screen instance\n                \"two\": Screen,  # Callable[[], Screen]\n            }\n    \n        app = ScreensApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e755a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_showing_first_tab_activates_tab[tab-1] __________________\n\ntab_id = 'tab-1'\n\n    @pytest.mark.parametrize(\"tab_id\", [\"tab-1\", \"tab-2\"])\n    async def test_showing_first_tab_activates_tab(tab_id: str):\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:785: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cd8520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_showing_first_tab_activates_tab[tab-2] __________________\n\ntab_id = 'tab-2'\n\n    @pytest.mark.parametrize(\"tab_id\", [\"tab-1\", \"tab-2\"])\n    async def test_showing_first_tab_activates_tab(tab_id: str):\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:785: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d77550>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_ansi_theme ________________________________\n\n    async def test_ansi_theme():\n        app = App()\n>       async with app.run_test():\n\ntests/test_app.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e27b50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_edit_read_only_mode_does_nothing[enter] _________________\n\nbinding = 'enter'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248907610>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_edit_read_only_mode_does_nothing[backspace] _______________\n\nbinding = 'backspace'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249030e20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_edit_read_only_mode_does_nothing[ctrl+u] _________________\n\nbinding = 'ctrl+u'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bed1e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_edit_read_only_mode_does_nothing[ctrl+f] _________________\n\nbinding = 'ctrl+f'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cdae60>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_edit_read_only_mode_does_nothing[ctrl+w] _________________\n\nbinding = 'ctrl+w'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e74190>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_edit_read_only_mode_does_nothing[ctrl+k] _________________\n\nbinding = 'ctrl+k'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e257e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_edit_read_only_mode_does_nothing[ctrl+x] _________________\n\nbinding = 'ctrl+x'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7a5f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_edit_read_only_mode_does_nothing[space] _________________\n\nbinding = 'space'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba0520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_edit_read_only_mode_does_nothing[1] ___________________\n\nbinding = '1'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c50280>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_edit_read_only_mode_does_nothing[tab] __________________\n\nbinding = 'tab'\n\n    @pytest.mark.parametrize(\n        \"binding\",\n        [\n            \"enter\",\n            \"backspace\",\n            \"ctrl+u\",\n            \"ctrl+f\",\n            \"ctrl+w\",\n            \"ctrl+k\",\n            \"ctrl+x\",\n            \"space\",\n            \"1\",\n            \"tab\",\n        ],\n    )\n    async def test_edit_read_only_mode_does_nothing(binding):\n        \"\"\"Try out various key-presses and bindings and ensure they don't alter\n        the document when read_only=True.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a37c40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______ test_delete_word_right[selection0-012 345 6789-final_selection0] _______\n\nselection = Selection(start=(0, 0), end=(0, 0))\nexpected_result = '012 345 6789'\nfinal_selection = Selection(start=(0, 0), end=(0, 0))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  01 345 6789\", Selection.cursor((0, 4))),\n            (Selection.cursor((0, 5)), \"  012345 6789\", Selection.cursor((0, 5))),\n            (Selection.cursor((0, 14)), \"  012 345 6789\", Selection.cursor((0, 14))),\n            # When non-empty selection, \"delete word right\" just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_right(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d96890>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_delete_word_right[selection1-  01 345 6789-final_selection1] _______\n\nselection = Selection(start=(0, 4), end=(0, 4))\nexpected_result = '  01 345 6789'\nfinal_selection = Selection(start=(0, 4), end=(0, 4))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  01 345 6789\", Selection.cursor((0, 4))),\n            (Selection.cursor((0, 5)), \"  012345 6789\", Selection.cursor((0, 5))),\n            (Selection.cursor((0, 14)), \"  012 345 6789\", Selection.cursor((0, 14))),\n            # When non-empty selection, \"delete word right\" just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_right(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b03910>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_delete_word_right[selection2-  012345 6789-final_selection2] _______\n\nselection = Selection(start=(0, 5), end=(0, 5))\nexpected_result = '  012345 6789'\nfinal_selection = Selection(start=(0, 5), end=(0, 5))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  01 345 6789\", Selection.cursor((0, 4))),\n            (Selection.cursor((0, 5)), \"  012345 6789\", Selection.cursor((0, 5))),\n            (Selection.cursor((0, 14)), \"  012 345 6789\", Selection.cursor((0, 14))),\n            # When non-empty selection, \"delete word right\" just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_right(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be7f40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_delete_word_right[selection3-  012 345 6789-final_selection3] ______\n\nselection = Selection(start=(0, 14), end=(0, 14))\nexpected_result = '  012 345 6789'\nfinal_selection = Selection(start=(0, 14), end=(0, 14))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  01 345 6789\", Selection.cursor((0, 4))),\n            (Selection.cursor((0, 5)), \"  012345 6789\", Selection.cursor((0, 5))),\n            (Selection.cursor((0, 14)), \"  012 345 6789\", Selection.cursor((0, 14))),\n            # When non-empty selection, \"delete word right\" just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_right(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b9bfd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_delete_word_right[selection4-  01789-final_selection4] __________\n\nselection = Selection(start=(0, 4), end=(0, 11)), expected_result = '  01789'\nfinal_selection = Selection(start=(0, 4), end=(0, 4))\n\n    @pytest.mark.parametrize(\n        \"selection,expected_result,final_selection\",\n        [\n            (Selection.cursor((0, 0)), \"012 345 6789\", Selection.cursor((0, 0))),\n            (Selection.cursor((0, 4)), \"  01 345 6789\", Selection.cursor((0, 4))),\n            (Selection.cursor((0, 5)), \"  012345 6789\", Selection.cursor((0, 5))),\n            (Selection.cursor((0, 14)), \"  012 345 6789\", Selection.cursor((0, 14))),\n            # When non-empty selection, \"delete word right\" just deletes the selection\n            (Selection((0, 4), (0, 11)), \"  01789\", Selection.cursor((0, 4))),\n        ],\n    )\n    async def test_delete_word_right(selection, expected_result, final_selection):\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248907790>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_remove_unmounted _____________________________\n\n    async def test_remove_unmounted():\n        mounted = False\n    \n        class RemoveApp(App):\n            def on_mount(self):\n                nonlocal mounted\n                label = Label()\n                label.remove()\n                mounted = True\n    \n        app = RemoveApp()\n>       async with app.run_test() as pilot:\n\ntests/test_widget.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d49540>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_clear_with_allow_blanks _________________________\n\n    async def test_clear_with_allow_blanks():\n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select(SELECT_OPTIONS, value=1)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_blank_and_clear.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec4e20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_widget_remove_children_with_string_selector _______________\n\n    async def test_widget_remove_children_with_string_selector():\n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_widget_removing.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a369e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_insert_text_multiline_selection_top[select_from0-select_to0] _______\n\nselect_from = (0, 3), select_to = (2, 1)\n\n    @pytest.mark.parametrize(\n        \"select_from,select_to\",\n        [\n            [(0, 3), (2, 1)],\n            [(2, 1), (0, 3)],  # Ensuring independence from selection direction.\n        ],\n    )\n    async def test_insert_text_multiline_selection_top(select_from, select_to):\n        \"\"\"\n        An example to attempt to explain what we're testing here...\n    \n        X = edit range, * = character in TextArea, S = selection\n    \n        *********XX\n        XXXXX***SSS\n        SSSSSSSSSSS\n        SSSS*******\n    \n        If an edit happens at XXXX, we need to ensure that the SSS on the\n        same line is adjusted appropriately so that it's still highlighting\n        the same characters as before.\n        \"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a04850>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_insert_text_multiline_selection_top[select_from1-select_to1] _______\n\nselect_from = (2, 1), select_to = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"select_from,select_to\",\n        [\n            [(0, 3), (2, 1)],\n            [(2, 1), (0, 3)],  # Ensuring independence from selection direction.\n        ],\n    )\n    async def test_insert_text_multiline_selection_top(select_from, select_to):\n        \"\"\"\n        An example to attempt to explain what we're testing here...\n    \n        X = edit range, * = character in TextArea, S = selection\n    \n        *********XX\n        XXXXX***SSS\n        SSSSSSSSSSS\n        SSSS*******\n    \n        If an edit happens at XXXX, we need to ensure that the SSS on the\n        same line is adjusted appropriately so that it's still highlighting\n        the same characters as before.\n        \"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248becd90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbbb50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_shutdown _________________________________\n\n    async def test_shutdown():\n        # regression test for https://github.com/Textualize/textual/issues/4634\n        # Testing that an app with the footer doesn't deadlock\n        app = TreeApp()\n        print(\"Check for deadlock in test_shutdown.py\")\n>       async with app.run_test():\n\ntests/test_shutdown.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbcb50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n----------------------------- Captured stdout call -----------------------------\nCheck for deadlock in test_shutdown.py\n________________________ test_self_referential_deadlock ________________________\n\n    async def test_self_referential_deadlock():\n        async def self_referential_work():\n            await get_current_worker().wait()\n    \n        app = App()\n        with pytest.raises(WorkerFailed) as exc:\n>           async with app.run_test():\n\ntests/workers/test_worker.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b528c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________ test_register_language_existing_language ___________________\n\n    @pytest.mark.syntax\n    async def test_register_language_existing_language():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_languages.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d74b80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_link_in_markdown_table_posts_message_when_clicked ____________\n\n    async def test_link_in_markdown_table_posts_message_when_clicked():\n        \"\"\"A link inside a markdown table should post a `Markdown.LinkClicked`\n        message when clicked.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4683\n        \"\"\"\n    \n        markdown_table = \"\"\"\\\n    | Textual Links                                    |\n    | ------------------------------------------------ |\n    | [GitHub](https://github.com/textualize/textual/) |\n    | [Documentation](https://textual.textualize.io/)  |\\\n    \"\"\"\n    \n        class MarkdownTableApp(App):\n            messages = []\n    \n            def compose(self) -> ComposeResult:\n                yield Markdown(markdown_table)\n    \n            @on(Markdown.LinkClicked)\n            def log_markdown_link_clicked(\n                self,\n                event: Markdown.LinkClicked,\n            ) -> None:\n                self.messages.append(event.__class__.__name__)\n    \n        app = MarkdownTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_markdown.py:197: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b8b3d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_add_columns_user_defined_keys ______________________\n\n    async def test_add_columns_user_defined_keys():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a382b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_add_row_auto_height[hey there-1] _____________________\n\ncell = 'hey there', height = 1\n\n    @pytest.mark.parametrize(\n        [\"cell\", \"height\"],\n        [\n            (\"hey there\", 1),\n            (Text(\"hey there\"), 1),\n            (Text(\"long string\", overflow=\"fold\"), 2),\n            (Panel.fit(\"Hello\\nworld\"), 4),\n            (\"1\\n2\\n3\\n4\\n5\\n6\\n7\", 7),\n        ],\n    )\n    async def test_add_row_auto_height(cell: RenderableType, height: int):\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c53910>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_add_row_auto_height[cell1-1] _______________________\n\ncell = <text 'hey there' []>, height = 1\n\n    @pytest.mark.parametrize(\n        [\"cell\", \"height\"],\n        [\n            (\"hey there\", 1),\n            (Text(\"hey there\"), 1),\n            (Text(\"long string\", overflow=\"fold\"), 2),\n            (Panel.fit(\"Hello\\nworld\"), 4),\n            (\"1\\n2\\n3\\n4\\n5\\n6\\n7\", 7),\n        ],\n    )\n    async def test_add_row_auto_height(cell: RenderableType, height: int):\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6ce80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_add_row_auto_height[cell2-2] _______________________\n\ncell = <text 'long string' []>, height = 2\n\n    @pytest.mark.parametrize(\n        [\"cell\", \"height\"],\n        [\n            (\"hey there\", 1),\n            (Text(\"hey there\"), 1),\n            (Text(\"long string\", overflow=\"fold\"), 2),\n            (Panel.fit(\"Hello\\nworld\"), 4),\n            (\"1\\n2\\n3\\n4\\n5\\n6\\n7\", 7),\n        ],\n    )\n    async def test_add_row_auto_height(cell: RenderableType, height: int):\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d979a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_add_row_auto_height[cell3-4] _______________________\n\ncell = <rich.panel.Panel object at 0x7f9249980310>, height = 4\n\n    @pytest.mark.parametrize(\n        [\"cell\", \"height\"],\n        [\n            (\"hey there\", 1),\n            (Text(\"hey there\"), 1),\n            (Text(\"long string\", overflow=\"fold\"), 2),\n            (Panel.fit(\"Hello\\nworld\"), 4),\n            (\"1\\n2\\n3\\n4\\n5\\n6\\n7\", 7),\n        ],\n    )\n    async def test_add_row_auto_height(cell: RenderableType, height: int):\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d540a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_add_row_auto_height[1\\n2\\n3\\n4\\n5\\n6\\n7-7] ________________\n\ncell = '1\\n2\\n3\\n4\\n5\\n6\\n7', height = 7\n\n    @pytest.mark.parametrize(\n        [\"cell\", \"height\"],\n        [\n            (\"hey there\", 1),\n            (Text(\"hey there\"), 1),\n            (Text(\"long string\", overflow=\"fold\"), 2),\n            (Panel.fit(\"Hello\\nworld\"), 4),\n            (\"1\\n2\\n3\\n4\\n5\\n6\\n7\", 7),\n        ],\n    )\n    async def test_add_row_auto_height(cell: RenderableType, height: int):\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a06dd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_initial_state ______________________________\n\n    async def test_initial_state() -> None:\n        \"\"\"Initially all the visible nodes should have had a render call.\"\"\"\n        app = RefreshApp()\n>       async with app.run_test():\n\ntests/tree/test_node_refresh.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b99840>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_screen_css_switch_mode_screen_instance_by_name ______________\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92489747c0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_suggestion_with_special_characters[.......-3] ______________\n\nsuggestion = '.......', truncate_at = 3\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a042b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________ test_suggestion_with_special_characters[hey there-3] _____________\n\nsuggestion = 'hey there', truncate_at = 3\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b50b20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________ test_suggestion_with_special_characters[Ol\\xe1, tudo bem?-3] _________\n\nsuggestion = 'Ol\u00e1, tudo bem?', truncate_at = 3\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba1960>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_suggestion_with_special_characters[\\xe1\\xe0\\xf3\\xe3\\xf5\\xf1\\xe7-2] ____\n\nsuggestion = '\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7', truncate_at = 2\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a36710>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_suggestion_with_special_characters[!\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~-3] _\n\nsuggestion = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~', truncate_at = 3\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249031270>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_ test_suggestion_with_special_characters[~}|{`_^]\\\\[@?>=<;:/.-,+*)('&%$#\"!-5] _\n\nsuggestion = '~}|{`_^]\\\\[@?>=<;:/.-,+*)(\\'&%$#\"!', truncate_at = 5\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b52b00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________ test_suggestion_with_special_characters[!$'*-:=@]`}-5] ____________\n\nsuggestion = \"!$'*-:=@]`}\", truncate_at = 5\n\n    @pytest.mark.parametrize(\n        (\"suggestion\", \"truncate_at\"),\n        [\n            (\".......\", 3),\n            (\"hey there\", 3),\n            (\"Ol\u00e1, tudo bem?\", 3),\n            (\"\u00e1\u00e0\u00f3\u00e3\u00f5\u00f1\u00e7\", 2),\n            (string.punctuation, 3),\n            (string.punctuation[::-1], 5),\n            (string.punctuation[::3], 5),\n        ],\n    )\n    async def test_suggestion_with_special_characters(suggestion: str, truncate_at: int):\n        app = SuggestionsApp([suggestion])\n>       async with app.run_test() as pilot:\n\ntests/suggester/test_input_suggestions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248babdc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_update_cell_cell_exists _________________________\n\n    async def test_update_cell_cell_exists():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:656: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248dbc9a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_mount_error_not_widget __________________________\n\n    async def test_mount_error_not_widget():\n        class NotWidgetApp(App):\n            def compose(self) -> ComposeResult:\n                yield {}\n    \n        app = NotWidgetApp()\n        with pytest.raises(MountError):\n>           async with app.run_test():\n\ntests/test_widget.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af13f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_focus_chain_handles_inherited_visibility _________________\n\n    async def test_focus_chain_handles_inherited_visibility():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3053\n    \n        This is more or less a test for the interactions between #3053 and #3071.\n        We want to make sure that the focus chain is computed correctly when going through\n        a DOM with containers with all sorts of visibilities set.\n        \"\"\"\n    \n        class W(Widget):\n            can_focus = True\n    \n        w1 = W(id=\"one\")\n        c2 = Container(id=\"two\")\n        w3 = W(id=\"three\")\n        c4 = Container(id=\"four\")\n        w5 = W(id=\"five\")\n        c6 = Container(id=\"six\")\n        w7 = W(id=\"seven\")\n        c8 = Container(id=\"eight\")\n        w9 = W(id=\"nine\")\n        w10 = W(id=\"ten\")\n        w11 = W(id=\"eleven\")\n        w12 = W(id=\"twelve\")\n        w13 = W(id=\"thirteen\")\n    \n        class InheritedVisibilityApp(App[None]):\n            CSS = \"\"\"\n            #four, #eight, #ten {\n                visibility: visible;\n            }\n    \n            #six, #thirteen {\n                visibility: hidden;\n            }\n            \"\"\"\n    \n            def compose(self):\n                yield w1  # visible, inherited\n                with c2:  # visible, inherited\n                    yield w3  # visible, inherited\n                    with c4:  # visible, set\n                        yield w5  # visible, inherited\n                        with c6:  # hidden, set\n                            yield w7  # hidden, inherited\n                            with c8:  # visible, set\n                                yield w9  # visible, inherited\n                            yield w10  # visible, set\n                        yield w11  # visible, inherited\n                    yield w12  # visible, inherited\n                yield w13  # invisible, set\n    \n        app = InheritedVisibilityApp()\n>       async with app.run_test():\n\ntests/test_focus.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a35c00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________ test_insert_text_start_maintain_selection_offset _______________\n\n    async def test_insert_text_start_maintain_selection_offset():\n        \"\"\"Ensure that we can maintain the offset between the location\n        an insert happens and the location of the selection.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249031060>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_insert_multiline_text __________________________\n\n    async def test_insert_multiline_text():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6f3d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_creating_disabled_tree __________________________\n\n    async def test_creating_disabled_tree():\n        \"\"\"Mounting a disabled `Tree` should result in the base `Widget`\n        having a `disabled` property equal to `True`\"\"\"\n        app = TreeApp(disabled=True)\n>       async with app.run_test() as pilot:\n\ntests/tree/test_tree_availability.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ab0190>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_watch_init_false_always_update_false ___________________\n\n    async def test_watch_init_false_always_update_false():\n        class WatcherInitFalse(App):\n            count = reactive(0, init=False)\n            watcher_call_count = 0\n    \n            def watch_count(self, new_value: int) -> None:\n                self.watcher_call_count += 1\n    \n        app = WatcherInitFalse()\n>       async with app.run_test():\n\ntests/test_reactive.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a04460>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_get_cell_invalid_column_key _______________________\n\n    async def test_get_cell_invalid_column_key():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cd8ca0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d4b5e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_run_worker_async _____________________________\n\n    async def test_run_worker_async() -> None:\n        \"\"\"Check self.run_worker\"\"\"\n        worker_events: list[Worker.StateChanged] = []\n    \n        work_result: str = \"\"\n    \n        new_worker: Worker\n    \n        class WorkerWidget(Widget):\n            async def work(self) -> str:\n                nonlocal work_result\n                await asyncio.sleep(0.02)\n                work_result = \"foo\"\n                return \"foo\"\n    \n            def on_mount(self):\n                nonlocal new_worker\n                new_worker = self.run_worker(self.work, start=False)\n    \n            def on_worker_state_changed(self, event) -> None:\n                worker_events.append(event)\n    \n        class WorkerApp(App):\n            def compose(self) -> ComposeResult:\n                yield WorkerWidget()\n    \n        app = WorkerApp()\n>       async with app.run_test():\n\ntests/workers/test_worker_manager.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c53c70>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92489065f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________ test_scrollbar_zero_thickness _________________________\n\n    async def test_scrollbar_zero_thickness():\n        \"\"\"Ensuring that scrollbars can be set to zero thickness.\"\"\"\n    \n        class ScrollbarZero(App):\n            CSS = \"\"\"* {\n                scrollbar-size: 0 0;\n                scrollbar-size-vertical: 0;  /* just exercising the parser */\n                scrollbar-size-horizontal: 0;  /* exercise the parser */\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                with Vertical():\n                    for _ in range(10):\n                        yield Label(\"Hello, world!\")\n    \n        app = ScrollbarZero()\n>       async with app.run_test(size=(8, 6)):\n\ntests/test_containers.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba2050>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_get_column_at ______________________________\n\n    async def test_get_column_at():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:605: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d48400>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_scrolling_cursor_into_view ________________________\n\n    async def test_scrolling_cursor_into_view():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2459\"\"\"\n    \n        class ScrollingApp(DataTableApp):\n            CSS = \"DataTable { height: 100%; }\"\n    \n            def key_c(self):\n                self.query_one(DataTable).cursor_coordinate = Coordinate(200, 0)\n    \n        app = ScrollingApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba3580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_delete_left_start ____________________________\n\n    async def test_delete_left_start():\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a36ce0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________________ test_get_worker ________________________________\n\n    async def test_get_worker() -> None:\n        \"\"\"Check get current worker.\"\"\"\n    \n        async def run_worker() -> Worker:\n            worker = get_current_worker()\n            return worker\n    \n        class WorkerApp(App):\n            pass\n    \n        app = WorkerApp()\n>       async with app.run_test():\n\ntests/workers/test_worker.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248beebf0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________ test_cursor_selection_up_when_cursor_on_first_line[True] ___________\n\napp = <coroutine object app at 0x7f9248983c30>\n\n    async def test_cursor_selection_up_when_cursor_on_first_line(app: TextAreaApp):\n        \"\"\"When you press shift+up the on the first line, it selects to the start.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:128: AttributeError\n__________ test_cursor_selection_up_when_cursor_on_first_line[False] ___________\n\napp = <coroutine object app at 0x7f9248983990>\n\n    async def test_cursor_selection_up_when_cursor_on_first_line(app: TextAreaApp):\n        \"\"\"When you press shift+up the on the first line, it selects to the start.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:128: AttributeError\n___________________________ test_hover_update_styles ___________________________\n\n    async def test_hover_update_styles():\n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_app.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d949d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________ test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content ________\n\n    async def test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content():\n        \"\"\"When a Tabs is nested as a descendant in the DOM of a TabbedContent,\n        the messages posted from that Tabs should not interfere with the TabbedContent.\n        A TabbedContent should only handle messages from Tabs which are direct children.\n    \n        Relates to https://github.com/Textualize/textual/issues/3412\n        \"\"\"\n    \n        class TabsNestedInTabbedContent(App):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    with TabPane(\"OuterTab\", id=\"outer1\"):\n                        yield Tabs(\n                            Tab(\"Tab1\", id=\"tab1\"),\n                            Tab(\"Tab2\", id=\"tab2\"),\n                            id=\"inner-tabs\",\n                        )\n    \n        app = TabsNestedInTabbedContent()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:883: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b98880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_set_options_resets_value_to_blank ____________________\n\n    async def test_set_options_resets_value_to_blank():\n        \"\"\"Resetting the options should reset the value to BLANK.\"\"\"\n    \n        class SelectApp(App[None]):\n            def compose(self):\n                yield Select[int](SELECT_OPTIONS, value=2)\n    \n        app = SelectApp()\n>       async with app.run_test():\n\ntests/select/test_value.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e74c40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_screen_css_switch_mode_screen_instance __________________\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b8ab30>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_query_set_styles_css ___________________________\n\n    async def test_query_set_styles_css():\n        class LabelApp(App):\n            def compose(self):\n                yield Label(\"Some text\")\n    \n        app = LabelApp()\n>       async with app.run_test():\n\ntests/test_query.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ab3e50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_programmatic_style_change_updates_children[grid_size_rows-3] _______\n\nstyle = 'grid_size_rows', value = 3\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"grid_size_rows\", 3),\n            (\"grid_size_columns\", 3),\n            (\"grid_gutter_vertical\", 4),\n            (\"grid_gutter_horizontal\", 4),\n            (\"grid_rows\", \"1fr 3fr\"),\n            (\"grid_columns\", \"1fr 3fr\"),\n        ],\n    )\n    async def test_programmatic_style_change_updates_children(style: str, value: object):\n        \"\"\"Regression test for #1607 https://github.com/Textualize/textual/issues/1607\n    \n        Some programmatic style changes to a widget were not updating the layout of the\n        children widgets, which seemed to be happening when the style change did not affect\n        the size of the widget but did affect the layout of the children.\n    \n        This test, in particular, checks the attributes that _should_ affect the size of the\n        children widgets.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"\"\"\n            Grid { grid-size: 2 2; }\n            Label { width: 100%; height: 100%; }\n            \"\"\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c50ac0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____ test_programmatic_style_change_updates_children[grid_size_columns-3] _____\n\nstyle = 'grid_size_columns', value = 3\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"grid_size_rows\", 3),\n            (\"grid_size_columns\", 3),\n            (\"grid_gutter_vertical\", 4),\n            (\"grid_gutter_horizontal\", 4),\n            (\"grid_rows\", \"1fr 3fr\"),\n            (\"grid_columns\", \"1fr 3fr\"),\n        ],\n    )\n    async def test_programmatic_style_change_updates_children(style: str, value: object):\n        \"\"\"Regression test for #1607 https://github.com/Textualize/textual/issues/1607\n    \n        Some programmatic style changes to a widget were not updating the layout of the\n        children widgets, which seemed to be happening when the style change did not affect\n        the size of the widget but did affect the layout of the children.\n    \n        This test, in particular, checks the attributes that _should_ affect the size of the\n        children widgets.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"\"\"\n            Grid { grid-size: 2 2; }\n            Label { width: 100%; height: 100%; }\n            \"\"\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af1fc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___ test_programmatic_style_change_updates_children[grid_gutter_vertical-4] ____\n\nstyle = 'grid_gutter_vertical', value = 4\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"grid_size_rows\", 3),\n            (\"grid_size_columns\", 3),\n            (\"grid_gutter_vertical\", 4),\n            (\"grid_gutter_horizontal\", 4),\n            (\"grid_rows\", \"1fr 3fr\"),\n            (\"grid_columns\", \"1fr 3fr\"),\n        ],\n    )\n    async def test_programmatic_style_change_updates_children(style: str, value: object):\n        \"\"\"Regression test for #1607 https://github.com/Textualize/textual/issues/1607\n    \n        Some programmatic style changes to a widget were not updating the layout of the\n        children widgets, which seemed to be happening when the style change did not affect\n        the size of the widget but did affect the layout of the children.\n    \n        This test, in particular, checks the attributes that _should_ affect the size of the\n        children widgets.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"\"\"\n            Grid { grid-size: 2 2; }\n            Label { width: 100%; height: 100%; }\n            \"\"\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d75d20>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__ test_programmatic_style_change_updates_children[grid_gutter_horizontal-4] ___\n\nstyle = 'grid_gutter_horizontal', value = 4\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"grid_size_rows\", 3),\n            (\"grid_size_columns\", 3),\n            (\"grid_gutter_vertical\", 4),\n            (\"grid_gutter_horizontal\", 4),\n            (\"grid_rows\", \"1fr 3fr\"),\n            (\"grid_columns\", \"1fr 3fr\"),\n        ],\n    )\n    async def test_programmatic_style_change_updates_children(style: str, value: object):\n        \"\"\"Regression test for #1607 https://github.com/Textualize/textual/issues/1607\n    \n        Some programmatic style changes to a widget were not updating the layout of the\n        children widgets, which seemed to be happening when the style change did not affect\n        the size of the widget but did affect the layout of the children.\n    \n        This test, in particular, checks the attributes that _should_ affect the size of the\n        children widgets.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"\"\"\n            Grid { grid-size: 2 2; }\n            Label { width: 100%; height: 100%; }\n            \"\"\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ec60e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______ test_programmatic_style_change_updates_children[grid_rows-1fr 3fr] ______\n\nstyle = 'grid_rows', value = '1fr 3fr'\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"grid_size_rows\", 3),\n            (\"grid_size_columns\", 3),\n            (\"grid_gutter_vertical\", 4),\n            (\"grid_gutter_horizontal\", 4),\n            (\"grid_rows\", \"1fr 3fr\"),\n            (\"grid_columns\", \"1fr 3fr\"),\n        ],\n    )\n    async def test_programmatic_style_change_updates_children(style: str, value: object):\n        \"\"\"Regression test for #1607 https://github.com/Textualize/textual/issues/1607\n    \n        Some programmatic style changes to a widget were not updating the layout of the\n        children widgets, which seemed to be happening when the style change did not affect\n        the size of the widget but did affect the layout of the children.\n    \n        This test, in particular, checks the attributes that _should_ affect the size of the\n        children widgets.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"\"\"\n            Grid { grid-size: 2 2; }\n            Label { width: 100%; height: 100%; }\n            \"\"\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be7520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____ test_programmatic_style_change_updates_children[grid_columns-1fr 3fr] _____\n\nstyle = 'grid_columns', value = '1fr 3fr'\n\n    @pytest.mark.parametrize(\n        \"style, value\",\n        [\n            (\"grid_size_rows\", 3),\n            (\"grid_size_columns\", 3),\n            (\"grid_gutter_vertical\", 4),\n            (\"grid_gutter_horizontal\", 4),\n            (\"grid_rows\", \"1fr 3fr\"),\n            (\"grid_columns\", \"1fr 3fr\"),\n        ],\n    )\n    async def test_programmatic_style_change_updates_children(style: str, value: object):\n        \"\"\"Regression test for #1607 https://github.com/Textualize/textual/issues/1607\n    \n        Some programmatic style changes to a widget were not updating the layout of the\n        children widgets, which seemed to be happening when the style change did not affect\n        the size of the widget but did affect the layout of the children.\n    \n        This test, in particular, checks the attributes that _should_ affect the size of the\n        children widgets.\n        \"\"\"\n    \n        class MyApp(App[None]):\n            CSS = \"\"\"\n            Grid { grid-size: 2 2; }\n            Label { width: 100%; height: 100%; }\n            \"\"\"\n    \n            def compose(self):\n                yield Grid(\n                    Label(\"one\"),\n                    Label(\"two\"),\n                    Label(\"three\"),\n                    Label(\"four\"),\n                )\n    \n        app = MyApp()\n    \n>       async with app.run_test() as pilot:\n\ntests/css/test_programmatic_style_changes.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a902b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_insert_text_start ____________________________\n\n    async def test_insert_text_start():\n        \"\"\"The document is correctly updated on inserting at the start.\n        If we don't maintain the selection offset, the cursor jumps\n        to the end of the edit and the selection is empty.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6e590>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_scheduling_animation ___________________________\n\n    async def test_scheduling_animation() -> None:\n        \"\"\"Test that scheduling an animation works.\"\"\"\n    \n        app = AnimApp()\n        delay = 0.1\n    \n>       async with app.run_test() as pilot:\n\ntests/test_animation.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b50b50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_scrolling_animates_on_basic _______________________\n\n    async def test_scrolling_animates_on_basic() -> None:\n        app = TallApp()\n        app.animation_level = \"basic\"\n    \n>       async with app.run_test() as pilot:\n\ntests/animations/test_scrolling_animation.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9249033ca0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_get_cell_at_returns_value_at_cell ____________________\n\n    async def test_get_cell_at_returns_value_at_cell():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:484: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7a4a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_cursor_page_down[True] __________________________\n\napp = <coroutine object app at 0x7f9248ad5770>\n\n    async def test_cursor_page_down(app: TextAreaApp):\n        \"\"\"Pagedown moves the cursor down 1 page, retaining column index.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:251: AttributeError\n_________________________ test_cursor_page_down[False] _________________________\n\napp = <coroutine object app at 0x7f9248980430>\n\n    async def test_cursor_page_down(app: TextAreaApp):\n        \"\"\"Pagedown moves the cursor down 1 page, retaining column index.\"\"\"\n>       async with app.run_test() as pilot:\nE       AttributeError: 'coroutine' object has no attribute 'run_test'\n\ntests/text_area/test_selection_bindings.py:251: AttributeError\n____________________ test_screen_title_overrides_app_title _____________________\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248beff40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_get_column_at_invalid_index[-1] _____________________\n\nindex = -1\n\n    @pytest.mark.parametrize(\"index\", [-1, 5])\n    async def test_get_column_at_invalid_index(index):\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924887d180>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_get_column_at_invalid_index[5] ______________________\n\nindex = 5\n\n    @pytest.mark.parametrize(\"index\", [-1, 5])\n    async def test_get_column_at_invalid_index(index):\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bef580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_sort_by_all_columns_no_key ________________________\n\n    async def test_sort_by_all_columns_no_key():\n        \"\"\"Test sorting a `DataTable` by all columns.\"\"\"\n    \n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:1215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d56ef0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_delete_within_line_dont_maintain_offset _________________\n\n    async def test_delete_within_line_dont_maintain_offset():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6cf40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_column_labels ______________________________\n\n    async def test_column_labels() -> None:\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248af13f0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_column_cursor_highlight_events ______________________\n\n    async def test_column_cursor_highlight_events():\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:1050: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b01a80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_______________________ test_datatable_message_emission ________________________\n\n    async def test_datatable_message_emission():\n        app = DataTableApp()\n        expected_messages = []\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cd8580>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start0-end0] __________________\n\nstart = (0, 0), end = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b50880>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start1-end1] __________________\n\nstart = (0, 1), end = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d191e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start2-end2] __________________\n\nstart = (0, 2), end = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92499e5060>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start3-end3] __________________\n\nstart = (0, 3), end = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d979d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start4-end4] __________________\n\nstart = (0, 4), end = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a045b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start5-end5] __________________\n\nstart = (0, 5), end = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7a7d0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start6-end6] __________________\n\nstart = (0, 6), end = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a36f50>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start7-end7] __________________\n\nstart = (0, 7), end = (0, 3)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b8a320>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start8-end8] __________________\n\nstart = (0, 10), end = (0, 7)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924887c520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_left_location[start9-end9] __________________\n\nstart = (1, 0), end = (0, 10)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a92080>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_left_location[start10-end10] _________________\n\nstart = (1, 2), end = (1, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92489c8040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_left_location[start11-end11] _________________\n\nstart = (1, 4), end = (1, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248977430>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_left_location[start12-end12] _________________\n\nstart = (1, 7), end = (1, 4)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b89510>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_left_location[start13-end13] _________________\n\nstart = (1, 8), end = (1, 7)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b00d90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_left_location[start14-end14] _________________\n\nstart = (1, 13), end = (1, 11)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248833ee0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_left_location[start15-end15] _________________\n\nstart = (1, 14), end = (1, 11)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 0)),\n            ((0, 1), (0, 0)),\n            ((0, 2), (0, 0)),\n            ((0, 3), (0, 0)),\n            ((0, 4), (0, 3)),\n            ((0, 5), (0, 3)),\n            ((0, 6), (0, 3)),\n            ((0, 7), (0, 3)),\n            ((0, 10), (0, 7)),\n            ((1, 0), (0, 10)),\n            ((1, 2), (1, 0)),\n            ((1, 4), (1, 0)),\n            ((1, 7), (1, 4)),\n            ((1, 8), (1, 7)),\n            ((1, 13), (1, 11)),\n            ((1, 14), (1, 11)),\n        ],\n    )\n    async def test_cursor_word_left_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ba2020>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________________ test_hover_mouse_leave ____________________________\n\n    async def test_hover_mouse_leave():\n        \"\"\"When the mouse cursor leaves the DataTable, there should be no hover highlighting.\"\"\"\n        app = DataTableApp()\n>       async with app.run_test() as pilot:\n\ntests/test_data_table.py:852: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248e74e80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_insert_text_non_cursor_location _____________________\n\n    async def test_insert_text_non_cursor_location():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d49f90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_keyboard_navigation_with_disabled_options ________________\n\n    async def test_keyboard_navigation_with_disabled_options() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3881.\"\"\"\n    \n        app = OptionListDisabledOptionsApp()\n>       async with app.run_test() as pilot:\n\ntests/option_list/test_option_list_movement.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924881bcd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_delete_word_left_at_line_start ______________________\n\n    async def test_delete_word_left_at_line_start():\n        \"\"\"If we're at the start of a line and we 'delete word left', the\n        line merges with the line above (if possible).\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bee830>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________________________ test_add_rows _________________________________\n\n    async def test_add_rows():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92488764a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_visible_is_inherited ___________________________\n\n    async def test_visible_is_inherited() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3071\"\"\"\n    \n        class InheritedVisibilityApp(App[None]):\n            CSS = \"\"\"\n            #four {\n                visibility: visible;\n            }\n    \n            #six {\n                visibility: hidden;\n            }\n            \"\"\"\n    \n            def compose(self):\n                yield Widget(id=\"one\")\n                with VerticalScroll(id=\"two\"):\n                    yield Widget(id=\"three\")\n                    with VerticalScroll(id=\"four\"):\n                        yield Widget(id=\"five\")\n                        with VerticalScroll(id=\"six\"):\n                            yield Widget(id=\"seven\")\n    \n        app = InheritedVisibilityApp()\n>       async with app.run_test():\n\ntests/test_visible.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a38760>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________ test_data_binding_missing_reactive ______________________\n\n    async def test_data_binding_missing_reactive():\n    \n        class DataBindErrorApp(App):\n            foo = reactive(\"Bar\")\n    \n            def compose(self) -> ComposeResult:\n                yield FooLabel(id=\"label1\").data_bind(\n                    nofoo=DataBindErrorApp.foo\n                )  # Missing reactive\n    \n        app = DataBindErrorApp()\n        with pytest.raises(ReactiveError):\n>           async with app.run_test():\n\ntests/test_data_bind.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248ab0490>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_universal_selector_doesnt_select_self __________________\n\n    async def test_universal_selector_doesnt_select_self():\n        class ExampleApp(App):\n            def compose(self) -> ComposeResult:\n                yield Container(\n                    Widget(\n                        Widget(),\n                        Widget(\n                            Widget(),\n                        ),\n                    ),\n                    Widget(),\n                    id=\"root-container\",\n                )\n    \n        app = ExampleApp()\n>       async with app.run_test():\n\ntests/test_query.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a36410>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n____________________ test_hide_last_tab_means_no_tab_active ____________________\n\n    async def test_hide_last_tab_means_no_tab_active():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:728: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b51060>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n______________________________ test_delete_right _______________________________\n\n    async def test_delete_right():\n        \"\"\"Pressing 'delete' deletes the character to the right of the cursor.\"\"\"\n        app = TextAreaApp()\n>       async with app.run_test() as pilot:\n\ntests/text_area/test_edit_via_bindings.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b96dd0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n___________________________ test_move_cursor_select ____________________________\n\n    async def test_move_cursor_select():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b01300>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_selected_text_multibyte _________________________\n\n    async def test_selected_text_multibyte():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b9b460>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start0-end0] _________________\n\nstart = (0, 0), end = (0, 2)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248cd9420>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start1-end1] _________________\n\nstart = (0, 1), end = (0, 2)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248874310>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start2-end2] _________________\n\nstart = (0, 2), end = (0, 5)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bec790>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start3-end3] _________________\n\nstart = (0, 3), end = (0, 5)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248c7a0b0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start4-end4] _________________\n\nstart = (0, 4), end = (0, 5)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b886a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start5-end5] _________________\n\nstart = (0, 5), end = (0, 10)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924897f070>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start6-end6] _________________\n\nstart = (0, 6), end = (0, 10)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248833730>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start7-end7] _________________\n\nstart = (0, 7), end = (0, 10)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248958070>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start8-end8] _________________\n\nstart = (0, 10), end = (1, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248be5f90>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________ test_cursor_word_right_location[start9-end9] _________________\n\nstart = (1, 0), end = (1, 6)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d952a0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_right_location[start10-end10] ________________\n\nstart = (1, 2), end = (1, 6)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92489a60e0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_right_location[start11-end11] ________________\n\nstart = (1, 4), end = (1, 6)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a92860>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_right_location[start12-end12] ________________\n\nstart = (1, 7), end = (1, 9)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248874520>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_right_location[start13-end13] ________________\n\nstart = (1, 8), end = (1, 9)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248d57ca0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_right_location[start14-end14] ________________\n\nstart = (1, 13), end = (1, 14)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f924887de40>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n________________ test_cursor_word_right_location[start15-end15] ________________\n\nstart = (1, 14), end = (1, 14)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((0, 0), (0, 2)),\n            ((0, 1), (0, 2)),\n            ((0, 2), (0, 5)),\n            ((0, 3), (0, 5)),\n            ((0, 4), (0, 5)),\n            ((0, 5), (0, 10)),\n            ((0, 6), (0, 10)),\n            ((0, 7), (0, 10)),\n            ((0, 10), (1, 0)),\n            ((1, 0), (1, 6)),\n            ((1, 2), (1, 6)),\n            ((1, 4), (1, 6)),\n            ((1, 7), (1, 9)),\n            ((1, 8), (1, 9)),\n            ((1, 13), (1, 14)),\n            ((1, 14), (1, 14)),\n        ],\n    )\n    async def test_cursor_word_right_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a6fd00>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_get_cursor_down_location[start0-end0] __________________\n\nstart = (3, 4), end = (4, 0)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((3, 4), (4, 0)),  # jump to end\n            ((1, 2), (2, 2)),  # go to column above\n            ((2, 56), (3, 20)),  # snap to end of row below\n        ],\n    )\n    async def test_get_cursor_down_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f92489a5780>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_get_cursor_down_location[start1-end1] __________________\n\nstart = (1, 2), end = (2, 2)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((3, 4), (4, 0)),  # jump to end\n            ((1, 2), (2, 2)),  # go to column above\n            ((2, 56), (3, 20)),  # snap to end of row below\n        ],\n    )\n    async def test_get_cursor_down_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a38ca0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________ test_get_cursor_down_location[start2-end2] __________________\n\nstart = (2, 56), end = (3, 20)\n\n    @pytest.mark.parametrize(\n        \"start,end\",\n        [\n            ((3, 4), (4, 0)),  # jump to end\n            ((1, 2), (2, 2)),  # go to column above\n            ((2, 56), (3, 20)),  # snap to end of row below\n        ],\n    )\n    async def test_get_cursor_down_location(start, end):\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_selection.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248b94b80>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________ test_disabling_unknown_tab __________________________\n\n    async def test_disabling_unknown_tab():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n    \n        app = TabbedApp()\n>       async with app.run_test():\n\ntests/test_tabbed_content.py:653: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248babdc0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n__________________________________ test_clear __________________________________\n\n    async def test_clear():\n        app = DataTableApp()\n>       async with app.run_test():\n\ntests/test_data_table.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248a05ae0>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_____________________ test_navigation_around_disabled_tabs _____________________\n\n    async def test_navigation_around_disabled_tabs():\n        class TabbedApp(App[None]):\n            def compose(self) -> ComposeResult:\n                with TabbedContent():\n                    yield Label(\"tab-1\")\n                    yield Label(\"tab-2\")\n                    yield Label(\"tab-3\")\n                    yield Label(\"tab-4\")\n    \n            def on_mount(self) -> None:\n                self.query_one(TabbedContent).get_tab(\"tab-1\").disabled = True\n                self.query_one(TabbedContent).get_tab(\"tab-3\").disabled = True\n    \n        app = TabbedApp()\n>       async with app.run_test() as pilot:\n\ntests/test_tabbed_content.py:561: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248bee980>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n_________________________ test_insert_old_mac_newlines _________________________\n\n    async def test_insert_old_mac_newlines():\n        app = TextAreaApp()\n>       async with app.run_test():\n\ntests/text_area/test_edit_via_api.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._AsyncGeneratorContextManager object at 0x7f9248874040>\n\n    async def __aenter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return await anext(self.gen)\nE           TypeError: 'coroutine' object is not an async iterator\n\n/usr/local/lib/python3.10/contextlib.py:199: TypeError\n=============================== warnings summary ===============================\ntests/text_area/test_languages.py:66\n  /root/repos/py_data/textual/tests/text_area/test_languages.py:66: PytestUnknownMarkWarning: Unknown pytest.mark.syntax - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.syntax\n\ntests/text_area/test_languages.py:89\n  /root/repos/py_data/textual/tests/text_area/test_languages.py:89: PytestUnknownMarkWarning: Unknown pytest.mark.syntax - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.syntax\n\ntests/text_area/test_languages.py:105\n  /root/repos/py_data/textual/tests/text_area/test_languages.py:105: PytestUnknownMarkWarning: Unknown pytest.mark.syntax - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.syntax\n\ntests/test_reactive.py: 18 warnings\ntests/test_dynamic_bindings.py: 1 warning\ntests/text_area/test_edit_via_api.py: 35 warnings\ntests/test_header.py: 8 warnings\ntests/test_app.py: 6 warnings\ntests/text_area/test_selection_bindings.py: 61 warnings\ntests/animations/test_tabs_underline_animation.py: 3 warnings\ntests/test_progress_bar.py: 8 warnings\ntests/test_tabbed_content.py: 29 warnings\ntests/test_overflow_change.py: 1 warning\ntests/test_data_table.py: 81 warnings\ntests/input/test_input_value_visibility.py: 5 warnings\ntests/workers/test_worker.py: 10 warnings\ntests/test_call_x_schedulers.py: 2 warnings\ntests/test_widget.py: 10 warnings\ntests/text_area/test_edit_via_bindings.py: 86 warnings\ntests/animations/test_loading_indicator_animation.py: 3 warnings\ntests/text_area/test_messages.py: 5 warnings\ntests/text_area/test_languages.py: 7 warnings\ntests/css/test_css_reloading.py: 2 warnings\ntests/test_pilot.py: 137 warnings\ntests/suggester/test_input_suggestions.py: 15 warnings\ntests/test_query.py: 10 warnings\ntests/select/test_blank_and_clear.py: 4 warnings\ntests/select/test_value.py: 8 warnings\ntests/test_keys.py: 1 warning\ntests/select/test_prompt.py: 2 warnings\ntests/input/test_input_validation.py: 22 warnings\ntests/text_area/test_setting_themes.py: 4 warnings\ntests/css/test_inheritance.py: 1 warning\ntests/tree/test_directory_tree.py: 1 warning\ntests/test_lazy.py: 1 warning\ntests/text_area/test_selection.py: 65 warnings\ntests/test_containers.py: 5 warnings\ntests/test_message_pump.py: 4 warnings\ntests/css/test_screen_css.py: 10 warnings\ntests/listview/test_listview_initial_index.py: 9 warnings\ntests/test_animation.py: 6 warnings\ntests/test_border_subtitle.py: 1 warning\ntests/select/test_empty_select.py: 4 warnings\ntests/tree/test_tree_availability.py: 4 warnings\ntests/test_driver.py: 4 warnings\ntests/animations/test_switch_animation.py: 3 warnings\ntests/test_focus.py: 7 warnings\ntests/test_widget_removing.py: 7 warnings\ntests/select/test_changed_message.py: 3 warnings\ntests/css/test_initial.py: 2 warnings\ntests/test_unmount.py: 1 warning\ntests/toggles/test_radioset.py: 1 warning\ntests/test_mount.py: 1 warning\ntests/command_palette/test_events.py: 4 warnings\ntests/workers/test_worker_manager.py: 3 warnings\ntests/test_screens.py: 13 warnings\ntests/test_message_handling.py: 1 warning\ntests/input/test_input_terminal_cursor.py: 2 warnings\ntests/test_loading.py: 1 warning\ntests/test_on.py: 3 warnings\ntests/animations/test_disabling_animations.py: 6 warnings\ntests/test_data_bind.py: 2 warnings\ntests/css/test_nested_css.py: 4 warnings\ntests/animations/test_progress_bar_animation.py: 3 warnings\ntests/animations/test_scrolling_animation.py: 3 warnings\ntests/test_paste.py: 2 warnings\ntests/test_issue_4248.py: 1 warning\ntests/workers/test_work_decorator.py: 28 warnings\ntests/css/test_programmatic_style_changes.py: 9 warnings\ntests/text_area/test_escape_binding.py: 2 warnings\ntests/listview/test_listview_navigation.py: 1 warning\ntests/test_style_inheritance.py: 1 warning\ntests/test_freeze.py: 1 warning\ntests/test_disabled.py: 10 warnings\ntests/test_signal.py: 2 warnings\ntests/test_test_runner.py: 1 warning\ntests/input/test_input_restrict.py: 1 warning\ntests/test_shutdown.py: 1 warning\ntests/test_markdown.py: 1 warning\ntests/tree/test_node_refresh.py: 1 warning\ntests/option_list/test_option_list_movement.py: 1 warning\ntests/test_visible.py: 1 warning\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_method_call_order\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/test_driver.py::test_driver_mouse_down_up_click\n  /usr/local/lib/python3.10/posixpath.py:528: RuntimeWarning: coroutine 'App.run_test' was never awaited\n    split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_freeze.py::test_freeze\n  /root/repos/py_data/textual/tests/test_freeze.py:24: RuntimeWarning: coroutine 'App.run_test' was never awaited\n    with pytest.raises(Exception):\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_reactive.py::test_reactive_method_call_order - TypeError: '...\nFAILED tests/test_dynamic_bindings.py::test_dynamic_disabled - TypeError: 'co...\nFAILED tests/text_area/test_edit_via_api.py::test_delete_within_line - TypeEr...\nFAILED tests/test_header.py::test_screen_title_none_is_ignored - TypeError: '...\nFAILED tests/test_app.py::test_return_code_is_one_after_crash - TypeError: 'c...\nFAILED tests/text_area/test_selection_bindings.py::test_mouse_click[True] - A...\nFAILED tests/text_area/test_selection_bindings.py::test_mouse_click[False] - ...\nFAILED tests/animations/test_tabs_underline_animation.py::test_tabs_underline_does_not_animate_on_none\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line[False]\nFAILED tests/test_reactive.py::test_watch_init_true - TypeError: 'coroutine' ...\nFAILED tests/test_reactive.py::test_set_reactive - TypeError: 'coroutine' obj...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[True-True-True] - Ty...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[True-True-False] - T...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[True-False-True] - T...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[True-False-False] - ...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[False-True-True] - T...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[False-True-False] - ...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[False-False-True] - ...\nFAILED tests/test_progress_bar.py::test_show_sub_widgets[False-False-False]\nFAILED tests/test_tabbed_content.py::test_tabbed_content_switch_via_code - Ty...\nFAILED tests/test_overflow_change.py::test_overflow_change_updates_virtual_size_appropriately\nFAILED tests/test_data_table.py::test_reuse_row_key_after_clear - TypeError: ...\nFAILED tests/input/test_input_value_visibility.py::test_input_value_visible_on_instantiation\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_up[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_up[False]\nFAILED tests/workers/test_worker.py::test_run_success - TypeError: 'coroutine...\nFAILED tests/test_call_x_schedulers.py::test_call_after_refresh - TypeError: ...\nFAILED tests/test_widget.py::test_compose_order - TypeError: 'coroutine' obje...\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left[selection0-  012 345 6789-final_selection0]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left[selection1-  2 345 6789-final_selection1]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left[selection2-   345 6789-final_selection2]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left[selection3-  345 6789-final_selection3]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left[selection4-  012 345 -final_selection4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left[selection5-  01789-final_selection5]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_left[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_left[False]\nFAILED tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_full\nFAILED tests/test_tabbed_content.py::test_disabling_nested_tabs - TypeError: ...\nFAILED tests/text_area/test_messages.py::test_changed_message_edit_via_api - ...\nFAILED tests/text_area/test_languages.py::test_setting_builtin_language_via_constructor\nFAILED tests/css/test_css_reloading.py::test_css_reloading_applies_to_non_top_screen\nFAILED tests/test_tabbed_content.py::test_hiding_nested_tabs - TypeError: 'co...\nFAILED tests/test_pilot.py::test_pilot_target_widget_under_another_widget[click]\nFAILED tests/test_pilot.py::test_pilot_target_widget_under_another_widget[hover]\nFAILED tests/test_pilot.py::test_pilot_target_widget_under_another_widget[mouse_down]\nFAILED tests/test_pilot.py::test_pilot_target_widget_under_another_widget[mouse_up]\nFAILED tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value\nFAILED tests/test_query.py::test_query_set_styles_invalid_css_raises_error - ...\nFAILED tests/test_tabbed_content.py::test_reenabling_tab - TypeError: 'corout...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_right[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_right[False]\nFAILED tests/test_tabbed_content.py::test_show_unknown_tab - TypeError: 'coro...\nFAILED tests/select/test_blank_and_clear.py::test_clear_fails_if_allow_blank_is_false\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_priority - ...\nFAILED tests/select/test_value.py::test_value_assign_to_blank - TypeError: 'c...\nFAILED tests/test_data_table.py::test_get_row_at - TypeError: 'coroutine' obj...\nFAILED tests/test_keys.py::test_character_bindings - TypeError: 'coroutine' o...\nFAILED tests/select/test_prompt.py::test_reactive_prompt_change - TypeError: ...\nFAILED tests/test_data_table.py::test_update_cell_invalid_column_key - TypeEr...\nFAILED tests/input/test_input_validation.py::test_input_submitted_message_validation_failure\nFAILED tests/css/test_css_reloading.py::test_css_reloading_file_not_found - T...\nFAILED tests/text_area/test_setting_themes.py::test_setting_builtin_themes - ...\nFAILED tests/test_tabbed_content.py::test_tabbed_content_initial - TypeError:...\nFAILED tests/test_data_table.py::test_get_cell_coordinate_returns_coordinate\nFAILED tests/tree/test_directory_tree.py::test_directory_tree_reloading_preserves_state\nFAILED tests/test_lazy.py::test_lazy - TypeError: 'coroutine' object is not a...\nFAILED tests/test_data_table.py::test_remove_row - TypeError: 'coroutine' obj...\nFAILED tests/test_data_table.py::test_sort_reverse_coordinate_and_key_access\nFAILED tests/test_tabbed_content.py::test_hide_unknown_tab - TypeError: 'coro...\nFAILED tests/text_area/test_selection.py::test_selected_text_backward - TypeE...\nFAILED tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later\nFAILED tests/test_data_table.py::test_update_cell_at_column_width[A-BB-3] - T...\nFAILED tests/test_data_table.py::test_update_cell_at_column_width[1234567-1234-7]\nFAILED tests/test_data_table.py::test_update_cell_at_column_width[12345-123-5]\nFAILED tests/test_data_table.py::test_update_cell_at_column_width[12345-123456789-9]\nFAILED tests/text_area/test_edit_via_bindings.py::test_paste_read_only_does_nothing\nFAILED tests/test_widget.py::test_get_child_by_type - TypeError: 'coroutine' ...\nFAILED tests/test_data_table.py::test_click_column_cursor - TypeError: 'corou...\nFAILED tests/text_area/test_edit_via_api.py::test_delete_fully_within_selection\nFAILED tests/test_containers.py::test_horizontal_vs_horizontalscroll_scrolling\nFAILED tests/test_message_pump.py::test_prevent_with_call_next - TypeError: '...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[0-1]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[1-1]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[2-4]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[3-4]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[4-4]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[5-5]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[6-7]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[7-7]\nFAILED tests/listview/test_listview_initial_index.py::test_listview_initial_index[8-1]\nFAILED tests/input/test_input_validation.py::test_input_changed_message_validation_failure\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right_delete_to_end_of_line\nFAILED tests/text_area/test_edit_via_api.py::test_insert_newlines_end - TypeE...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping[False]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset[cursor_location0-insert_location0-cursor_destination0]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset[cursor_location1-insert_location1-cursor_destination1]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset[cursor_location2-insert_location2-cursor_destination2]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset[cursor_location3-insert_location3-cursor_destination3]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size0-offset0]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size1-offset1]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size2-offset2]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size3-offset3]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size4-offset4]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size5-offset5]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size6-offset6]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size7-offset7]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size8-offset8]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size9-offset9]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size10-offset10]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size11-offset11]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size12-offset12]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size13-offset13]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size14-offset14]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[click-screen_size15-offset15]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size16-offset16]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size17-offset17]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size18-offset18]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size19-offset19]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size20-offset20]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size21-offset21]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size22-offset22]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size23-offset23]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size24-offset24]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size25-offset25]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size26-offset26]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size27-offset27]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size28-offset28]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size29-offset29]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size30-offset30]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[hover-screen_size31-offset31]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size32-offset32]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size33-offset33]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size34-offset34]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size35-offset35]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size36-offset36]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size37-offset37]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size38-offset38]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size39-offset39]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size40-offset40]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size41-offset41]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size42-offset42]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size43-offset43]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size44-offset44]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size45-offset45]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size46-offset46]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_down-screen_size47-offset47]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size48-offset48]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size49-offset49]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size50-offset50]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size51-offset51]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size52-offset52]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size53-offset53]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size54-offset54]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size55-offset55]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size56-offset56]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size57-offset57]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size58-offset58]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size59-offset59]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size60-offset60]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size61-offset61]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size62-offset62]\nFAILED tests/test_pilot.py::test_pilot_target_outside_screen_errors[mouse_up-screen_size63-offset63]\nFAILED tests/input/test_input_validation.py::test_valid_empty - TypeError: 'c...\nFAILED tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified[validate_on0]\nFAILED tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified[validate_on1]\nFAILED tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified[validate_on2]\nFAILED tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified[validate_on3]\nFAILED tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified[validate_on4]\nFAILED tests/test_animation.py::test_wait_for_current_and_scheduled_animations\nFAILED tests/test_border_subtitle.py::test_border_subtitle - TypeError: 'coro...\nFAILED tests/test_pilot.py::test_pilot_target_visible_widget[click] - TypeErr...\nFAILED tests/test_pilot.py::test_pilot_target_visible_widget[hover] - TypeErr...\nFAILED tests/test_pilot.py::test_pilot_target_visible_widget[mouse_down] - Ty...\nFAILED tests/test_pilot.py::test_pilot_target_visible_widget[mouse_up] - Type...\nFAILED tests/text_area/test_selection.py::test_cursor_location_set_while_selecting\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line[selection0-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line[selection1-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line[selection2-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line[selection3-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line[selection4-]\nFAILED tests/test_data_table.py::test_get_row_invalid_row_key - TypeError: 'c...\nFAILED tests/select/test_empty_select.py::test_empty_set_options_raises_exception_if_allow_blank_is_false\nFAILED tests/test_reactive.py::test_reactive_compute_first_time_set - TypeErr...\nFAILED tests/test_reactive.py::test_validate_init_true - TypeError: 'coroutin...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_right_select[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_right_select[False]\nFAILED tests/tree/test_tree_availability.py::test_enabled_tree_node_selected_message\nFAILED tests/test_driver.py::test_driver_mouse_down_up_click - TypeError: 'co...\nFAILED tests/animations/test_switch_animation.py::test_switch_animates_on_basic\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour[True-home]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour[True-ctrl+a]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour[False-home]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour[False-ctrl+a]\nFAILED tests/test_focus.py::test_focus_pseudo_class - TypeError: 'coroutine' ...\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs[selection0-\\t012 \\t 345\\t6789-final_selection0]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs[selection1-\\t \\t 345\\t6789-final_selection1]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs[selection2-\\t\\t 345\\t6789-final_selection2]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs[selection3-\\t 345\\t6789-final_selection3]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs[selection4-\\t012 \\t 345\\t-final_selection4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs[selection5-\\t0126789-final_selection5]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location_dont_maintain_offset\nFAILED tests/test_widget_removing.py::test_widget_remove_children_with_type_selector\nFAILED tests/text_area/test_messages.py::test_selection_changed_via_typing - ...\nFAILED tests/test_widget_removing.py::test_widget_remove_children_container\nFAILED tests/test_data_table.py::test_sort_by_function_sum - TypeError: 'coro...\nFAILED tests/select/test_changed_message.py::test_message_control - TypeError...\nFAILED tests/input/test_input_validation.py::test_on_blur_triggers_validation\nFAILED tests/css/test_initial.py::test_initial_default - TypeError: 'coroutin...\nFAILED tests/test_data_table.py::test_update_cell_at_coordinate_doesnt_exist\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line[False]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_newlines_start - Typ...\nFAILED tests/test_widget_removing.py::test_widget_remove_children_no_children_match_selector\nFAILED tests/test_tabbed_content.py::test_hiding_tabs_moves_active_to_next_tab\nFAILED tests/test_data_table.py::test_get_cell_coordinate_invalid_row_key - T...\nFAILED tests/test_tabbed_content.py::test_unsetting_tabbed_content_active - T...\nFAILED tests/text_area/test_edit_via_api.py::test_insert_windows_newlines - T...\nFAILED tests/test_unmount.py::test_unmount - TypeError: 'coroutine' object is...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\nFAILED tests/toggles/test_radioset.py::test_keyboard_navigation_with_disabled_buttons\nFAILED tests/text_area/test_selection.py::test_get_cursor_right_location[start0-end0]\nFAILED tests/text_area/test_selection.py::test_get_cursor_right_location[start1-end1]\nFAILED tests/text_area/test_selection.py::test_get_cursor_right_location[start2-end2]\nFAILED tests/text_area/test_selection.py::test_get_cursor_right_location[start3-end3]\nFAILED tests/animations/test_switch_animation.py::test_switch_does_not_animate_on_none\nFAILED tests/test_mount.py::test_render_only_after_mount - TypeError: 'corout...\nFAILED tests/test_tabbed_content.py::test_reenabling_via_tabbed_content - Typ...\nFAILED tests/test_driver.py::test_driver_mouse_down_drag_inside_widget_up_click\nFAILED tests/text_area/test_edit_via_api.py::test_replace_multiline_text - Ty...\nFAILED tests/test_reactive.py::test_reactive_always_update - TypeError: 'coro...\nFAILED tests/test_data_table.py::test_click_row_cursor - TypeError: 'coroutin...\nFAILED tests/command_palette/test_events.py::test_command_palette_closed_event\nFAILED tests/test_data_table.py::test_coordinate_to_cell_key - TypeError: 'co...\nFAILED tests/test_data_table.py::test_row_cursor_highlight_events - TypeError...\nFAILED tests/test_header.py::test_screen_sub_title_none_is_ignored - TypeErro...\nFAILED tests/text_area/test_selection.py::test_select_all[123\\n456\\n789-expected_selection0]\nFAILED tests/text_area/test_selection.py::test_select_all[123\\n456\\n789\\n-expected_selection1]\nFAILED tests/text_area/test_selection.py::test_select_all[-expected_selection2]\nFAILED tests/workers/test_worker.py::test_run_cancel_immediately - TypeError:...\nFAILED tests/test_data_table.py::test_hover_coordinate - TypeError: 'coroutin...\nFAILED tests/workers/test_worker_manager.py::test_run_worker_thread_non_async\nFAILED tests/text_area/test_edit_via_api.py::test_text_setter - TypeError: 'c...\nFAILED tests/text_area/test_selection.py::test_get_cursor_left_location[start0-end0]\nFAILED tests/text_area/test_selection.py::test_get_cursor_left_location[start1-end1]\nFAILED tests/text_area/test_selection.py::test_get_cursor_left_location[start2-end2]\nFAILED tests/test_reactive.py::test_watch_async_init_false - TypeError: 'coro...\nFAILED tests/text_area/test_selection.py::test_cursor_location_get - TypeErro...\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_left_end - Type...\nFAILED tests/test_data_table.py::test_cell_padding_updates_virtual_size - Typ...\nFAILED tests/tree/test_tree_availability.py::test_disabled_tree_node_selected_message\nFAILED tests/workers/test_worker.py::test_progress_update - TypeError: 'corou...\nFAILED tests/test_data_table.py::test_update_cell_at_coordinate_exists - Type...\nFAILED tests/test_tabbed_content.py::test_enabling_unknown_tab - TypeError: '...\nFAILED tests/test_data_table.py::test_remove_row_and_update - TypeError: 'cor...\nFAILED tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets - T...\nFAILED tests/test_data_table.py::test_unset_hover_highlight_when_no_table_cell_under_mouse\nFAILED tests/test_message_handling.py::test_message_inheritance_namespace - T...\nFAILED tests/select/test_value.py::test_set_value_to_blank_with_allow_blank_false\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/input/test_input_terminal_cursor.py::test_terminal_cursor_position_update_on_cursor_move\nFAILED tests/test_reactive.py::test_compute - TypeError: 'coroutine' object i...\nFAILED tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc[True]\nFAILED tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc[False]\nFAILED tests/test_app.py::test_no_return_code_while_running - TypeError: 'cor...\nFAILED tests/test_data_table.py::test_move_cursor - TypeError: 'coroutine' ob...\nFAILED tests/test_data_table.py::test_datatable_click_cell_cursor - TypeError...\nFAILED tests/test_tabbed_content.py::test_reenabling_via_tab_pane - TypeError...\nFAILED tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right[True]\nFAILED tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right[False]\nFAILED tests/test_driver.py::test_driver_mouse_down_drag_outside_widget_up_click\nFAILED tests/test_animation.py::test_schedule_reverse_animations - TypeError:...\nFAILED tests/select/test_blank_and_clear.py::test_setting_and_checking_blank\nFAILED tests/test_loading.py::test_loading_disables_and_remove_scrollbars - T...\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[click-offset0]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[click-offset1]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[click-offset2]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[click-offset3]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[hover-offset4]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[hover-offset5]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[hover-offset6]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[hover-offset7]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_down-offset8]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_down-offset9]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_down-offset10]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_down-offset11]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_up-offset12]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_up-offset13]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_up-offset14]\nFAILED tests/test_pilot.py::test_pilot_target_screen_always_true[mouse_up-offset15]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_right[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_right[False]\nFAILED tests/test_on.py::test_on_arbitrary_attributes - TypeError: 'coroutine...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_down[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_down[False]\nFAILED tests/test_tabbed_content.py::test_disabled_tab_cannot_be_clicked - Ty...\nFAILED tests/test_reactive.py::test_watch_async_init_true - TypeError: 'corou...\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion - TypeError...\nFAILED tests/test_focus.py::test_focus_does_not_move_to_invisible_widgets - T...\nFAILED tests/test_data_table.py::test_get_cell_invalid_row_key - TypeError: '...\nFAILED tests/text_area/test_selection_bindings.py::test_select_all_binding[True]\nFAILED tests/text_area/test_selection_bindings.py::test_select_all_binding[False]\nFAILED tests/test_widget_removing.py::test_widget_remove_children_with_selector_does_not_leak\nFAILED tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_scrolling\nFAILED tests/test_widget.py::test__allow_scroll - TypeError: 'coroutine' obje...\nFAILED tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_update\nFAILED tests/text_area/test_edit_via_api.py::test_insert_empty_string - TypeE...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - T...\nFAILED tests/test_reactive.py::test_no_duplicate_external_watchers - TypeErro...\nFAILED tests/test_data_table.py::test_remove_column_and_update - TypeError: '...\nFAILED tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\nFAILED tests/test_data_table.py::test_update_cell_cell_doesnt_exist - TypeErr...\nFAILED tests/test_focus.py::test_mouse_up_does_not_give_focus - TypeError: 'c...\nFAILED tests/tree/test_tree_availability.py::test_creating_enabled_tree - Typ...\nFAILED tests/command_palette/test_events.py::test_command_palette_closed_event_value\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection0-0123456789]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection1-56789]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection2-9]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection3-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection4-9]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection5-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection6-56789]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line[selection7-23456789]\nFAILED tests/test_data_bind.py::test_data_binding - TypeError: 'coroutine' ob...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_page_up[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_page_up[False]\nFAILED tests/test_data_table.py::test_get_cell_coordinate_invalid_column_key\nFAILED tests/select/test_value.py::test_set_options_resets_value_if_allow_blank_is_false\nFAILED tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\nFAILED tests/test_data_table.py::test_get_column_index_returns_index - TypeEr...\nFAILED tests/text_area/test_selection.py::test_selected_text_forward - TypeEr...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word\nFAILED tests/select/test_blank_and_clear.py::test_value_is_blank_by_default\nFAILED tests/test_animation.py::test_reverse_animations - TypeError: 'corouti...\nFAILED tests/test_data_table.py::test_get_row_index_returns_index - TypeError...\nFAILED tests/select/test_prompt.py::test_reactive_prompt_change_when_allow_blank_is_false\nFAILED tests/text_area/test_messages.py::test_changed_message_via_typing - Ty...\nFAILED tests/css/test_initial.py::test_initial - TypeError: 'coroutine' objec...\nFAILED tests/animations/test_progress_bar_animation.py::test_progress_bar_does_not_animate_on_none\nFAILED tests/test_on.py::test_on_inheritance - TypeError: 'coroutine' object ...\nFAILED tests/test_data_table.py::test_initial_column_widths - TypeError: 'cor...\nFAILED tests/test_screens.py::test_default_custom_screen - TypeError: 'corout...\nFAILED tests/test_message_pump.py::test_prevent_default - TypeError: 'corouti...\nFAILED tests/text_area/test_languages.py::test_register_language - TypeError:...\nFAILED tests/test_widget.py::test_mount_error_bad_widget - TypeError: 'corout...\nFAILED tests/text_area/test_setting_themes.py::test_registering_and_setting_theme\nFAILED tests/text_area/test_languages.py::test_setting_unknown_language - Typ...\nFAILED tests/test_screens.py::test_screen_walk_children - TypeError: 'corouti...\nFAILED tests/test_call_x_schedulers.py::test_call_later - TypeError: 'corouti...\nFAILED tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_basic\nFAILED tests/test_screens.py::test_dismiss_action - TypeError: 'coroutine' ob...\nFAILED tests/test_data_table.py::test_row_label_selected - TypeError: 'corout...\nFAILED tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\nFAILED tests/test_data_table.py::test_cell_cursor_highlight_events - TypeErro...\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection0-]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection1-01234]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection2-012345678]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection3-0123456789]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection4-012345678]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection5-0123456789]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection6-01234]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line[selection7-01]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_to_start_of_line\nFAILED tests/text_area/test_messages.py::test_changed_message_edit_via_assignment\nFAILED tests/text_area/test_selection.py::test_selection_clamp - TypeError: '...\nFAILED tests/input/test_input_value_visibility.py::test_input_value_visible_after_value_assignment\nFAILED tests/test_query.py::test_query_refresh[args0] - TypeError: 'coroutine...\nFAILED tests/test_query.py::test_query_refresh[args1] - TypeError: 'coroutine...\nFAILED tests/test_query.py::test_query_refresh[args2] - TypeError: 'coroutine...\nFAILED tests/test_query.py::test_query_refresh[args3] - TypeError: 'coroutine...\nFAILED tests/select/test_value.py::test_initial_value_inside_compose_is_validated\nFAILED tests/select/test_empty_select.py::test_empty_select_is_ok_with_blanks\nFAILED tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp[True]\nFAILED tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp[False]\nFAILED tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_focused\nFAILED tests/test_data_table.py::test_get_column_index_invalid_column_key - T...\nFAILED tests/test_pilot.py::test_pilot_resize_terminal - TypeError: 'coroutin...\nFAILED tests/select/test_changed_message.py::test_same_selection_does_not_post_message\nFAILED tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_full\nFAILED tests/test_query.py::test_query_focus_blur - TypeError: 'coroutine' ob...\nFAILED tests/text_area/test_languages.py::test_setting_language_to_none - Typ...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_left_select[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_left_select[False]\nFAILED tests/test_data_table.py::test_header_selected - TypeError: 'coroutine...\nFAILED tests/test_paste.py::test_empty_paste - TypeError: 'coroutine' object ...\nFAILED tests/test_tabbed_content.py::test_disabling_tab_within_tabbed_content_stays_isolated\nFAILED tests/test_widget.py::test_sort_children - TypeError: 'coroutine' obje...\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset0]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset1]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset2]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset3]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset4]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset5]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset6]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset7]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[click-offset8]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset9]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset10]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset11]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset12]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset13]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset14]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset15]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset16]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[hover-offset17]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset18]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset19]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset20]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset21]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset22]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset23]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset24]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset25]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_down-offset26]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset27]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset28]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset29]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset30]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset31]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset32]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset33]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset34]\nFAILED tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system[mouse_up-offset35]\nFAILED tests/test_reactive.py::test_watch - TypeError: 'coroutine' object is ...\nFAILED tests/text_area/test_languages.py::test_language_binary_missing - Attr...\nFAILED tests/text_area/test_edit_via_bindings.py::test_single_keypress_enter\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_left - TypeErro...\nFAILED tests/test_issue_4248.py::test_issue_4248 - TypeError: 'coroutine' obj...\nFAILED tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_full\nFAILED tests/text_area/test_edit_via_api.py::test_replace_empty_string - Type...\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - Typ...\nFAILED tests/test_widget_removing.py::test_widget_remove_children_with_star_selector\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack0]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack1]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack2]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack3]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack4]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack5]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack6]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack7]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack8]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack9]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack10]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack11]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack12]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack13]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack14]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack15]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack16]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack17]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack18]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack19]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack20]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack21]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack22]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack23]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack24]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack25]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack26]\nFAILED tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers[call_stack27]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right_at_end_of_line\nFAILED tests/test_widget.py::test_remove - TypeError: 'coroutine' object is n...\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position[align_horizontal-right]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position[align_vertical-bottom]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position[align-value2]\nFAILED tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\nFAILED tests/animations/test_scrolling_animation.py::test_scrolling_does_not_animate_on_none\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_movement_basic\nFAILED tests/test_reactive.py::test_external_watch_init_does_not_propagate_to_externals\nFAILED tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_focus\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/animations/test_switch_animation.py::test_switch_animates_on_full\nFAILED tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\nFAILED tests/text_area/test_edit_via_api.py::test_replace_fully_within_selection\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/workers/test_worker.py::test_double_start - TypeError: 'coroutin...\nFAILED tests/listview/test_listview_navigation.py::test_keyboard_navigation_with_disabled_items\nFAILED tests/test_app.py::test_default_return_code_is_zero - TypeError: 'coro...\nFAILED tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\nFAILED tests/css/test_nested_css.py::test_nest_app - TypeError: 'coroutine' o...\nFAILED tests/test_style_inheritance.py::test_text_style_inheritance - TypeErr...\nFAILED tests/test_screens.py::test_switch_screen_no_op - TypeError: 'coroutin...\nFAILED tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen[validate_on0]\nFAILED tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen[validate_on1]\nFAILED tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen[validate_on2]\nFAILED tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen[validate_on3]\nFAILED tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen[validate_on4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[-0-4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[x-0-4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[x-1-4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[xxx-3-4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[xxxx-4-8]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[xxxxx-5-8]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[xxxxxx-6-8]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[\\U0001f4a9-1-3]\nFAILED tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop[\\U0001f4a9\\U0001f4a9-2-6]\nFAILED tests/test_tabbed_content.py::test_disabling_via_tabbed_content - Type...\nFAILED tests/test_data_table.py::test_add_column_with_width - TypeError: 'cor...\nFAILED tests/test_query.py::test_query_set_styles_kwds - TypeError: 'coroutin...\nFAILED tests/input/test_input_validation.py::test_none_validate_on_means_all_validations_happen\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom[select_from0-select_to0]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom[select_from1-select_to1]\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\nFAILED tests/workers/test_worker.py::test_run_cancel - TypeError: 'coroutine'...\nFAILED tests/test_data_table.py::test_empty_table_interactions - TypeError: '...\nFAILED tests/test_data_table.py::test_add_rows_user_defined_keys - TypeError:...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_end[True-end]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_end[True-ctrl+e]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_end[False-end]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_to_line_end[False-ctrl+e]\nFAILED tests/text_area/test_edit_via_api.py::test_clear - TypeError: 'corouti...\nFAILED tests/test_message_pump.py::test_message_queue_size - TypeError: 'coro...\nFAILED tests/test_tabbed_content.py::test_tabbed_content_messages - TypeError...\nFAILED tests/test_data_table.py::test_add_row_duplicate_key - TypeError: 'cor...\nFAILED tests/test_data_table.py::test_move_cursor_respects_animate_parameter\nFAILED tests/test_data_table.py::test_clicking_border_link_doesnt_crash - Typ...\nFAILED tests/select/test_value.py::test_initial_value_is_picked_if_allow_blank_is_false\nFAILED tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value_after_deleting\nFAILED tests/test_reactive.py::test_reactive_with_callable_default - TypeErro...\nFAILED tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_basic\nFAILED tests/test_widget.py::test_offset_getter_setter - TypeError: 'coroutin...\nFAILED tests/test_query.py::test_query_set_styles_css_and_kwds - TypeError: '...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/test_tabbed_content.py::test_creating_disabled_tab - TypeError: ...\nFAILED tests/test_reactive.py::test_external_watch_init_does_not_propagate - ...\nFAILED tests/test_containers.py::test_center_container - TypeError: 'coroutin...\nFAILED tests/text_area/test_selection.py::test_select_line[1-123\\n456\\n789\\n-expected_selection0]\nFAILED tests/text_area/test_selection.py::test_select_line[2-123\\n456\\n789\\n-expected_selection1]\nFAILED tests/text_area/test_selection.py::test_select_line[3-123\\n456\\n789\\n-expected_selection2]\nFAILED tests/text_area/test_selection.py::test_select_line[1000-123\\n456\\n789\\n-expected_selection3]\nFAILED tests/text_area/test_selection.py::test_select_line[0--expected_selection4]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection0-345\\n678\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection1-345\\n678\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection2-012\\n345\\n678\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection3-012\\n345\\n678\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection4-012\\n678\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection5-012\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection6-012\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection7-012\\n9\\n]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document[selection8-]\nFAILED tests/workers/test_worker_manager.py::test_run_worker_thread_async - T...\nFAILED tests/test_app.py::test_set_return_code - TypeError: 'coroutine' objec...\nFAILED tests/test_animation.py::test_animate_height - TypeError: 'coroutine' ...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line[False]\nFAILED tests/test_data_table.py::test_reuse_column_key_after_clear - TypeErro...\nFAILED tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\nFAILED tests/text_area/test_edit_via_api.py::test_insert_multiline_text_maintain_offset\nFAILED tests/test_focus.py::test_get_focusable_widget_at - TypeError: 'corout...\nFAILED tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_basic\nFAILED tests/test_data_table.py::test_sort_by_multiple_columns_no_key - TypeE...\nFAILED tests/test_paste.py::test_paste_app - TypeError: 'coroutine' object is...\nFAILED tests/test_reactive.py::test_premature_reactive_call - TypeError: 'cor...\nFAILED tests/test_data_table.py::test_get_cell_at_exception - TypeError: 'cor...\nFAILED tests/test_header.py::test_screen_sub_title_overrides_app_sub_title - ...\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[Button]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[Checkbox]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[DataTable]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[DirectoryTree]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[Input]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[ListView]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[OptionList]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[RadioSet]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[Select]\nFAILED tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled[Switch]\nFAILED tests/text_area/test_edit_via_bindings.py::test_single_keypress_printable_character\nFAILED tests/test_tabbed_content.py::test_hide_show_messages - TypeError: 'co...\nFAILED tests/test_header.py::test_screen_title_reactive_updates_title - TypeE...\nFAILED tests/test_data_table.py::test_get_cell_returns_value_at_cell - TypeEr...\nFAILED tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_static_on_none\nFAILED tests/suggester/test_input_suggestions.py::test_accept_suggestion - Ty...\nFAILED tests/test_driver.py::test_driver_mouse_down_up_click_widget - TypeErr...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_left[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_word_left[False]\nFAILED tests/workers/test_worker.py::test_initialize - TypeError: 'coroutine'...\nFAILED tests/test_containers.py::test_middle_container - TypeError: 'coroutin...\nFAILED tests/test_data_table.py::test_cell_padding_cannot_be_negative - TypeE...\nFAILED tests/test_signal.py::test_signal - TypeError: 'coroutine' object is n...\nFAILED tests/test_widget_removing.py::test_widget_remove_children_no_children\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[True-cursor_start0-cursor_destination0]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[True-cursor_start1-cursor_destination1]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[True-cursor_start2-cursor_destination2]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[True-cursor_start3-cursor_destination3]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[True-cursor_start4-cursor_destination4]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[True-cursor_start5-cursor_destination5]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[False-cursor_start0-cursor_destination0]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[False-cursor_start1-cursor_destination1]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[False-cursor_start2-cursor_destination2]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[False-cursor_start3-cursor_destination3]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[False-cursor_start4-cursor_destination4]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home[False-cursor_start5-cursor_destination5]\nFAILED tests/input/test_input_terminal_cursor.py::test_initial_terminal_cursor_position\nFAILED tests/test_tabbed_content.py::test_disabling_does_not_deactivate_tab\nFAILED tests/test_widget.py::test_sort_children_no_key - TypeError: 'coroutin...\nFAILED tests/test_message_pump.py::test_prevent - TypeError: 'coroutine' obje...\nFAILED tests/text_area/test_selection.py::test_move_cursor_relative - TypeErr...\nFAILED tests/text_area/test_edit_via_api.py::test_replace_multiline_text_maintain_selection\nFAILED tests/text_area/test_edit_via_api.py::test_edits_on_read_only_mode - T...\nFAILED tests/text_area/test_edit_via_api.py::test_delete_empty_document - Typ...\nFAILED tests/select/test_empty_select.py::test_empty_select_raises_exception_if_allow_blank_is_false\nFAILED tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\nFAILED tests/workers/test_worker.py::test_wait_without_start - TypeError: 'co...\nFAILED tests/test_tabbed_content.py::test_tabbed_content_switch_via_ui - Type...\nFAILED tests/text_area/test_edit_via_bindings.py::test_paste[selection0] - Ty...\nFAILED tests/text_area/test_edit_via_bindings.py::test_paste[selection1] - Ty...\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss - TypeError: ...\nFAILED tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_indent\nFAILED tests/test_tabbed_content.py::test_tabs_nested_in_tabbed_content_doesnt_crash\nFAILED tests/test_focus.py::test_focus_moves_to_visible_widgets_inside_invisible_containers\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars\nFAILED tests/test_data_table.py::test_sort_coordinate_and_key_access - TypeEr...\nFAILED tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_full\nFAILED tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_assigned_after\nFAILED tests/command_palette/test_events.py::test_command_palette_opened_event\nFAILED tests/test_data_table.py::test_add_row_expands_column_widths - TypeErr...\nFAILED tests/test_containers.py::test_vertical_vs_verticalscroll_scrolling - ...\nFAILED tests/test_reactive.py::test_watch_compute - TypeError: 'coroutine' ob...\nFAILED tests/test_data_table.py::test_get_row_at_invalid_index[-1] - TypeErro...\nFAILED tests/test_data_table.py::test_get_row_at_invalid_index[2] - TypeError...\nFAILED tests/suggester/test_input_suggestions.py::test_no_suggestions - TypeE...\nFAILED tests/text_area/test_setting_themes.py::test_default_theme - TypeError...\nFAILED tests/text_area/test_selection_bindings.py::test_select_line_binding[True]\nFAILED tests/text_area/test_selection_bindings.py::test_select_line_binding[False]\nFAILED tests/test_focus.py::test_mouse_down_gives_focus - TypeError: 'corouti...\nFAILED tests/text_area/test_messages.py::test_selection_changed_via_api - Typ...\nFAILED tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset[cursor_location0-insert_location0-cursor_destination0]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset[cursor_location1-insert_location1-cursor_destination1]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset[cursor_location2-insert_location2-cursor_destination2]\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/text_area/test_edit_via_api.py::test_clear_empty_document - Type...\nFAILED tests/test_data_table.py::test_coordinate_to_cell_key_invalid_coordinate\nFAILED tests/select/test_value.py::test_initial_value_is_validated - TypeErro...\nFAILED tests/test_animation.py::test_wait_for_current_animations - TypeError:...\nFAILED tests/test_data_table.py::test_get_column - TypeError: 'coroutine' obj...\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_right_end_of_line\nFAILED tests/command_palette/test_events.py::test_command_palette_option_highlighted_event\nFAILED tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\nFAILED tests/test_data_table.py::test_get_column_invalid_key - TypeError: 'co...\nFAILED tests/text_area/test_selection.py::test_cursor_location_set - TypeErro...\nFAILED tests/text_area/test_edit_via_api.py::test_delete_multiple_lines_selection_above\nFAILED tests/test_data_table.py::test_add_column_duplicate_key - TypeError: '...\nFAILED tests/select/test_empty_select.py::test_empty_set_options_is_ok_with_blanks\nFAILED tests/test_test_runner.py::test_run_test - TypeError: 'coroutine' obje...\nFAILED tests/input/test_input_restrict.py::test_bad_type - TypeError: 'corout...\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[click-#label0]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[click-#label90]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[click-Button]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[hover-#label0]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[hover-#label90]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[hover-Button]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[mouse_down-#label0]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[mouse_down-#label90]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[mouse_down-Button]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[mouse_up-#label0]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[mouse_up-#label90]\nFAILED tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors[mouse_up-Button]\nFAILED tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection[delete-selection0]\nFAILED tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection[delete-selection1]\nFAILED tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection[backspace-selection2]\nFAILED tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection[backspace-selection3]\nFAILED tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen[validate_on0]\nFAILED tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen[validate_on1]\nFAILED tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen[validate_on2]\nFAILED tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen[validate_on3]\nFAILED tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen[validate_on4]\nFAILED tests/input/test_input_validation.py::test_input_changed_message_validation_success\nFAILED tests/test_data_table.py::test_get_row_index_invalid_row_key - TypeErr...\nFAILED tests/select/test_changed_message.py::test_selecting_posts_message - T...\nFAILED tests/test_tabbed_content.py::test_disabling_via_tab_pane - TypeError:...\nFAILED tests/text_area/test_setting_themes.py::test_setting_unknown_theme_raises_exception\nFAILED tests/test_data_table.py::test_get_row - TypeError: 'coroutine' object...\nFAILED tests/test_reactive.py::test_validate_init_true_set_before_dom_ready\nFAILED tests/test_data_table.py::test_remove_column - TypeError: 'coroutine' ...\nFAILED tests/test_on.py::test_on_button_pressed - TypeError: 'coroutine' obje...\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker - T...\nFAILED tests/text_area/test_selection.py::test_default_selection - TypeError:...\nFAILED tests/test_tabbed_content.py::test_showing_tabs_does_not_change_active_tab\nFAILED tests/text_area/test_languages.py::test_setting_builtin_language_via_attribute\nFAILED tests/input/test_input_validation.py::test_input_submitted_message_validation_success\nFAILED tests/text_area/test_selection.py::test_get_cursor_up_location[start0-end0]\nFAILED tests/text_area/test_selection.py::test_get_cursor_up_location[start1-end1]\nFAILED tests/text_area/test_selection.py::test_get_cursor_up_location[start2-end2]\nFAILED tests/test_signal.py::test_signal_parameters - TypeError: 'coroutine' ...\nFAILED tests/select/test_value.py::test_value_unknown_option_raises_error - T...\nFAILED tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines[selection0]\nFAILED tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines[selection1]\nFAILED tests/test_screens.py::test_auto_focus_inheritance - TypeError: 'corou...\nFAILED tests/workers/test_worker.py::test_run_error - TypeError: 'coroutine' ...\nFAILED tests/test_screens.py::test_dismiss_non_top_screen - TypeError: 'corou...\nFAILED tests/test_data_table.py::test_add_columns - TypeError: 'coroutine' ob...\nFAILED tests/test_screens.py::test_installed_screens - TypeError: 'coroutine'...\nFAILED tests/test_tabbed_content.py::test_showing_first_tab_activates_tab[tab-1]\nFAILED tests/test_tabbed_content.py::test_showing_first_tab_activates_tab[tab-2]\nFAILED tests/test_app.py::test_ansi_theme - TypeError: 'coroutine' object is ...\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[enter]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[backspace]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[ctrl+u]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[ctrl+f]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[ctrl+w]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[ctrl+k]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[ctrl+x]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[space]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[1]\nFAILED tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing[tab]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right[selection0-012 345 6789-final_selection0]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right[selection1-  01 345 6789-final_selection1]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right[selection2-  012345 6789-final_selection2]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right[selection3-  012 345 6789-final_selection3]\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_right[selection4-  01789-final_selection4]\nFAILED tests/test_widget.py::test_remove_unmounted - TypeError: 'coroutine' o...\nFAILED tests/select/test_blank_and_clear.py::test_clear_with_allow_blanks - T...\nFAILED tests/test_widget_removing.py::test_widget_remove_children_with_string_selector\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top[select_from0-select_to0]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top[select_from1-select_to1]\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/test_shutdown.py::test_shutdown - TypeError: 'coroutine' object ...\nFAILED tests/workers/test_worker.py::test_self_referential_deadlock - TypeErr...\nFAILED tests/text_area/test_languages.py::test_register_language_existing_language\nFAILED tests/test_markdown.py::test_link_in_markdown_table_posts_message_when_clicked\nFAILED tests/test_data_table.py::test_add_columns_user_defined_keys - TypeErr...\nFAILED tests/test_data_table.py::test_add_row_auto_height[hey there-1] - Type...\nFAILED tests/test_data_table.py::test_add_row_auto_height[cell1-1] - TypeErro...\nFAILED tests/test_data_table.py::test_add_row_auto_height[cell2-2] - TypeErro...\nFAILED tests/test_data_table.py::test_add_row_auto_height[cell3-4] - TypeErro...\nFAILED tests/test_data_table.py::test_add_row_auto_height[1\\n2\\n3\\n4\\n5\\n6\\n7-7]\nFAILED tests/tree/test_node_refresh.py::test_initial_state - TypeError: 'coro...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[.......-3]\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[hey there-3]\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[Ol\\xe1, tudo bem?-3]\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[\\xe1\\xe0\\xf3\\xe3\\xf5\\xf1\\xe7-2]\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[!\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~-3]\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[~}|{`_^]\\\\[@?>=<;:/.-,+*)('&%$#\"!-5]\nFAILED tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters[!$'*-:=@]`}-5]\nFAILED tests/test_data_table.py::test_update_cell_cell_exists - TypeError: 'c...\nFAILED tests/test_widget.py::test_mount_error_not_widget - TypeError: 'corout...\nFAILED tests/test_focus.py::test_focus_chain_handles_inherited_visibility - T...\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_start_maintain_selection_offset\nFAILED tests/text_area/test_edit_via_api.py::test_insert_multiline_text - Typ...\nFAILED tests/tree/test_tree_availability.py::test_creating_disabled_tree - Ty...\nFAILED tests/test_reactive.py::test_watch_init_false_always_update_false - Ty...\nFAILED tests/test_data_table.py::test_get_cell_invalid_column_key - TypeError...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/workers/test_worker_manager.py::test_run_worker_async - TypeErro...\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/test_containers.py::test_scrollbar_zero_thickness - TypeError: '...\nFAILED tests/test_data_table.py::test_get_column_at - TypeError: 'coroutine' ...\nFAILED tests/test_data_table.py::test_scrolling_cursor_into_view - TypeError:...\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_left_start - Ty...\nFAILED tests/workers/test_worker.py::test_get_worker - TypeError: 'coroutine'...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line[False]\nFAILED tests/test_app.py::test_hover_update_styles - TypeError: 'coroutine' o...\nFAILED tests/test_tabbed_content.py::test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content\nFAILED tests/select/test_value.py::test_set_options_resets_value_to_blank - T...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\nFAILED tests/test_query.py::test_query_set_styles_css - TypeError: 'coroutine...\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children[grid_size_rows-3]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children[grid_size_columns-3]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children[grid_gutter_vertical-4]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children[grid_gutter_horizontal-4]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children[grid_rows-1fr 3fr]\nFAILED tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children[grid_columns-1fr 3fr]\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_start - TypeErr...\nFAILED tests/test_animation.py::test_scheduling_animation - TypeError: 'corou...\nFAILED tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_basic\nFAILED tests/test_data_table.py::test_get_cell_at_returns_value_at_cell - Typ...\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_page_down[True]\nFAILED tests/text_area/test_selection_bindings.py::test_cursor_page_down[False]\nFAILED tests/test_header.py::test_screen_title_overrides_app_title - TypeErro...\nFAILED tests/test_data_table.py::test_get_column_at_invalid_index[-1] - TypeE...\nFAILED tests/test_data_table.py::test_get_column_at_invalid_index[5] - TypeEr...\nFAILED tests/test_data_table.py::test_sort_by_all_columns_no_key - TypeError:...\nFAILED tests/text_area/test_edit_via_api.py::test_delete_within_line_dont_maintain_offset\nFAILED tests/test_data_table.py::test_column_labels - TypeError: 'coroutine' ...\nFAILED tests/test_data_table.py::test_column_cursor_highlight_events - TypeEr...\nFAILED tests/test_data_table.py::test_datatable_message_emission - TypeError:...\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start0-end0]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start1-end1]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start2-end2]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start3-end3]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start4-end4]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start5-end5]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start6-end6]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start7-end7]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start8-end8]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start9-end9]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start10-end10]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start11-end11]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start12-end12]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start13-end13]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start14-end14]\nFAILED tests/text_area/test_selection.py::test_cursor_word_left_location[start15-end15]\nFAILED tests/test_data_table.py::test_hover_mouse_leave - TypeError: 'corouti...\nFAILED tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location\nFAILED tests/option_list/test_option_list_movement.py::test_keyboard_navigation_with_disabled_options\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_word_left_at_line_start\nFAILED tests/test_data_table.py::test_add_rows - TypeError: 'coroutine' objec...\nFAILED tests/test_visible.py::test_visible_is_inherited - TypeError: 'corouti...\nFAILED tests/test_data_bind.py::test_data_binding_missing_reactive - TypeErro...\nFAILED tests/test_query.py::test_universal_selector_doesnt_select_self - Type...\nFAILED tests/test_tabbed_content.py::test_hide_last_tab_means_no_tab_active\nFAILED tests/text_area/test_edit_via_bindings.py::test_delete_right - TypeErr...\nFAILED tests/text_area/test_selection.py::test_move_cursor_select - TypeError...\nFAILED tests/text_area/test_selection.py::test_selected_text_multibyte - Type...\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start0-end0]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start1-end1]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start2-end2]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start3-end3]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start4-end4]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start5-end5]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start6-end6]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start7-end7]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start8-end8]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start9-end9]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start10-end10]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start11-end11]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start12-end12]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start13-end13]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start14-end14]\nFAILED tests/text_area/test_selection.py::test_cursor_word_right_location[start15-end15]\nFAILED tests/text_area/test_selection.py::test_get_cursor_down_location[start0-end0]\nFAILED tests/text_area/test_selection.py::test_get_cursor_down_location[start1-end1]\nFAILED tests/text_area/test_selection.py::test_get_cursor_down_location[start2-end2]\nFAILED tests/test_tabbed_content.py::test_disabling_unknown_tab - TypeError: ...\nFAILED tests/test_data_table.py::test_clear - TypeError: 'coroutine' object i...\nFAILED tests/test_tabbed_content.py::test_navigation_around_disabled_tabs - T...\nFAILED tests/text_area/test_edit_via_api.py::test_insert_old_mac_newlines - T...\n============ 831 failed, 1 passed, 1 xfailed, 839 warnings in 9.44s ============\n\nsys:1: RuntimeWarning: coroutine 'App.run_test' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"], "textual-src/textual/app.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_auto_refresh.py F                                             [ 33%]\ntests/test_concurrency.py F                                              [ 66%]\ntests/test_win_sleep.py s                                                [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_auto_refresh _______________________________\n\n    def test_auto_refresh():\n        app = RefreshApp()\n    \n        async def quit_after(pilot: Pilot) -> None:\n            await asyncio.sleep(1)\n    \n>       elapsed = app.run(auto_pilot=quit_after, headless=True)\nE       TypeError: App.run() got multiple values for argument 'headless'\n\ntests/test_auto_refresh.py:30: TypeError\n____________________________ test_call_from_thread _____________________________\n\n    def test_call_from_thread():\n        \"\"\"Test the call_from_thread method.\"\"\"\n    \n        class BackgroundThread(Thread):\n            \"\"\"A background thread which will modify app in some way.\"\"\"\n    \n            def __init__(self, app: App[object]) -> None:\n                self.app = app\n                super().__init__()\n    \n            def run(self) -> None:\n                def write_stuff(text: str) -> None:\n                    \"\"\"Write stuff to a widget.\"\"\"\n                    self.app.query_one(RichLog).write(text)\n    \n                self.app.call_from_thread(write_stuff, \"Hello\")\n                # Exit the app with a code we can assert\n                self.app.call_from_thread(self.app.exit, 123)\n    \n        class ThreadTestApp(App[object]):\n            \"\"\"Trivial app with a single widget.\"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield RichLog()\n    \n            def on_ready(self) -> None:\n                \"\"\"Launch a thread which will modify the app.\"\"\"\n                try:\n                    self.call_from_thread(print)\n                except RuntimeError as error:\n                    # Calling this from the same thread as the app is an error\n                    self._runtime_error = error\n                BackgroundThread(self).start()\n    \n        app = ThreadTestApp()\n>       result = app.run(headless=True, size=(80, 24))\nE       TypeError: App.run() got multiple values for argument 'headless'\n\ntests/test_concurrency.py:52: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_auto_refresh.py::test_auto_refresh - TypeError: App.run() g...\nFAILED tests/test_concurrency.py::test_call_from_thread - TypeError: App.run(...\n========================= 2 failed, 1 skipped in 0.15s =========================\n\n"], "textual-src/textual/app.py-switch_mode": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/css/test_screen_css.py FFF                                         [100%]\n\n=================================== FAILURES ===================================\n_________________ test_screen_css_switch_mode_screen_instance __________________\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3259: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:241: in key_o\n    self.switch_mode(\"base\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), mode = 'base'\n\n    def switch_mode(self, mode: str) -> AwaitMount:\n>       if mode not in self.modes:\nE       AttributeError: 'MyApp' object has no attribute 'modes'. Did you mean: '_nodes'?\n\nsrc/textual/app.py:1864: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:241 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   238 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   239 \u2502   \u2502                                                                  \u2502\n\u2502   240 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 241 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   242 \u2502                                                                      \u2502\n\u2502   243 \u2502   app = MyApp()                                                      \u2502\n\u2502   244 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1864 in switch_mode           \u2502\n\u2502                                                                              \u2502\n\u2502   1861 \u2502   \u2502   return await_mount                                            \u2502\n\u2502   1862 \u2502                                                                     \u2502\n\u2502   1863 \u2502   def switch_mode(self, mode: str) -> AwaitMount:                   \u2502\n\u2502 \u2771 1864 \u2502   \u2502   if mode not in self.modes:                                    \u2502\n\u2502   1865 \u2502   \u2502   \u2502   raise UnknownModeError(f\"Unknown mode: {mode}\")           \u2502\n\u2502   1866 \u2502   \u2502                                                                 \u2502\n\u2502   1867 \u2502   \u2502   self.current_mode = mode                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 mode = 'base'                                       \u2502                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'modes'\n_______________ test_screen_css_switch_mode_screen_type_by_name ________________\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3259: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:299: in key_o\n    self.switch_mode(\"base\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), mode = 'base'\n\n    def switch_mode(self, mode: str) -> AwaitMount:\n>       if mode not in self.modes:\nE       AttributeError: 'MyApp' object has no attribute 'modes'. Did you mean: '_nodes'?\n\nsrc/textual/app.py:1864: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:299 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   297 \u2502   \u2502                                                                  \u2502\n\u2502   298 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 299 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502   302 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1864 in switch_mode           \u2502\n\u2502                                                                              \u2502\n\u2502   1861 \u2502   \u2502   return await_mount                                            \u2502\n\u2502   1862 \u2502                                                                     \u2502\n\u2502   1863 \u2502   def switch_mode(self, mode: str) -> AwaitMount:                   \u2502\n\u2502 \u2771 1864 \u2502   \u2502   if mode not in self.modes:                                    \u2502\n\u2502   1865 \u2502   \u2502   \u2502   raise UnknownModeError(f\"Unknown mode: {mode}\")           \u2502\n\u2502   1866 \u2502   \u2502                                                                 \u2502\n\u2502   1867 \u2502   \u2502   self.current_mode = mode                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 mode = 'base'                                       \u2502                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'modes'\n_____________ test_screen_css_switch_mode_screen_instance_by_name ______________\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3259: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:270: in key_o\n    self.switch_mode(\"base\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), mode = 'base'\n\n    def switch_mode(self, mode: str) -> AwaitMount:\n>       if mode not in self.modes:\nE       AttributeError: 'MyApp' object has no attribute 'modes'. Did you mean: '_nodes'?\n\nsrc/textual/app.py:1864: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:270 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   267 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   268 \u2502   \u2502                                                                  \u2502\n\u2502   269 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 270 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   271 \u2502                                                                      \u2502\n\u2502   272 \u2502   app = MyApp()                                                      \u2502\n\u2502   273 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1864 in switch_mode           \u2502\n\u2502                                                                              \u2502\n\u2502   1861 \u2502   \u2502   return await_mount                                            \u2502\n\u2502   1862 \u2502                                                                     \u2502\n\u2502   1863 \u2502   def switch_mode(self, mode: str) -> AwaitMount:                   \u2502\n\u2502 \u2771 1864 \u2502   \u2502   if mode not in self.modes:                                    \u2502\n\u2502   1865 \u2502   \u2502   \u2502   raise UnknownModeError(f\"Unknown mode: {mode}\")           \u2502\n\u2502   1866 \u2502   \u2502                                                                 \u2502\n\u2502   1867 \u2502   \u2502   self.current_mode = mode                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 mode = 'base'                                       \u2502                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'modes'\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n======================== 3 failed, 4 warnings in 1.05s =========================\n\n"], "textual-src/textual/app.py-push_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/test_header.py F                                                   [  3%]\ntests/test_focus.py F                                                    [  6%]\ntests/css/test_screen_css.py F                                           [  9%]\ntests/test_focus.py F                                                    [ 12%]\ntests/test_header.py F                                                   [ 16%]\ntests/test_screens.py FF                                                 [ 22%]\ntests/test_header.py F                                                   [ 25%]\ntests/css/test_screen_css.py F                                           [ 29%]\ntests/test_screens.py F                                                  [ 32%]\ntests/test_widget.py F                                                   [ 35%]\ntests/test_header.py F                                                   [ 38%]\ntests/css/test_screen_css.py F                                           [ 41%]\ntests/test_screens.py FF                                                 [ 48%]\ntests/test_header.py F                                                   [ 51%]\ntests/test_screens.py FF                                                 [ 58%]\ntests/test_focus.py F                                                    [ 61%]\ntests/test_screens.py FF                                                 [ 67%]\ntests/test_unmount.py F                                                  [ 70%]\ntests/test_header.py F                                                   [ 74%]\ntests/test_screens.py F                                                  [ 77%]\ntests/test_header.py F                                                   [ 80%]\ntests/test_screens.py FF                                                 [ 87%]\ntests/css/test_screen_css.py F                                           [ 90%]\ntests/test_pilot.py F                                                    [ 93%]\ntests/test_screens.py F                                                  [ 96%]\ntests/test_header.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n______________________ test_screen_title_none_is_ignored _______________________\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"app title\"\n\ntests/test_header.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:15: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:15 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    12 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    13 \u2502   \u2502                                                                  \u2502\n\u2502    14 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  15 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    16 \u2502                                                                      \u2502\n\u2502    17 \u2502   app = MyApp()                                                      \u2502\n\u2502    18 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_none_is_ignored.<locals\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_______________________________ test_allow_focus _______________________________\n\n    def test_allow_focus():\n        \"\"\"Test allow_focus and allow_focus_children are called and the result used.\"\"\"\n        focusable_allow_focus_called = False\n        non_focusable_allow_focus_called = False\n    \n        class Focusable(Widget, can_focus=False):\n            def allow_focus(self) -> bool:\n                nonlocal focusable_allow_focus_called\n                focusable_allow_focus_called = True\n                return True\n    \n        class NonFocusable(Container, can_focus=True):\n            def allow_focus(self) -> bool:\n                nonlocal non_focusable_allow_focus_called\n                non_focusable_allow_focus_called = True\n                return False\n    \n        class FocusableContainer(Container, can_focus_children=False):\n            def allow_focus_children(self) -> bool:\n                return True\n    \n        class NonFocusableContainer(Container, can_focus_children=True):\n            def allow_focus_children(self) -> bool:\n                return False\n    \n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n____________________ test_screen_sub_title_none_is_ignored _____________________\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"app sub-title\"\n\ntests/test_header.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:89: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:89 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    86 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502    87 \u2502   \u2502                                                                  \u2502\n\u2502    88 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  89 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    90 \u2502                                                                      \u2502\n\u2502    91 \u2502   app = MyApp()                                                      \u2502\n\u2502    92 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_none_is_ignored.<lo\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_____________________________ test_dismiss_action ______________________________\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"y\")\n>           assert app.bingo\nE           AssertionError: assert False\nE            +  where False = MyApp(title='MyApp', classes={'-dark-mode'}).bingo\n\ntests/test_screens.py:324: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:316: in on_mount\n    self.push_screen(ConfirmScreen(), callback=self.callback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ConfirmScreen()\ncallback = <bound method test_dismiss_action.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>\nwait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:316 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   313 \u2502   \u2502   bingo = False                                                  \u2502\n\u2502   314 \u2502   \u2502                                                                  \u2502\n\u2502   315 \u2502   \u2502   def on_mount(self) -> None:                                    \u2502\n\u2502 \u2771 316 \u2502   \u2502   \u2502   self.push_screen(ConfirmScreen(), callback=self.callback)  \u2502\n\u2502   317 \u2502   \u2502                                                                  \u2502\n\u2502   318 \u2502   \u2502   def callback(self, result: bool) -> None:                      \u2502\n\u2502   319 \u2502   \u2502   \u2502   self.bingo = result                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 ConfirmScreen = <class                                                   \u2502 \u2502\n\u2502 \u2502                 'tests.test_screens.test_dismiss_action.<locals>.Confir\u2026 \u2502 \u2502\n\u2502 \u2502          self = MyApp(title='MyApp', classes={'-dark-mode'})             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = <bound method                                         \u2502 \u2502\n\u2502 \u2502                    test_dismiss_action.<locals>.MyApp.callback of        \u2502 \u2502\n\u2502 \u2502                    MyApp(title='MyApp', classes={'-dark-mode'})>         \u2502 \u2502\n\u2502 \u2502           screen = ConfirmScreen()                                       \u2502 \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'})          \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_________________ test_push_screen_wait_for_dismiss_no_worker __________________\n\n    async def test_push_screen_wait_for_dismiss_no_worker() -> None:\n        \"\"\"Test wait_for_dismiss raises NoActiveWorker when not using workers.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # using `wait_for_dismiss` outside of a worker should raise NoActiveWorker\n        with pytest.raises(NoActiveWorker):\n>           async with app.run_test() as pilot:\n\ntests/test_screens.py:498: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3258: in _on_key\n    if not (await self._check_bindings(event.key)):\nsrc/textual/app.py:3024: in _check_bindings\n    if await self.run_action(binding.action, namespace):\nsrc/textual/app.py:3160: in run_action\n    return await self._dispatch_action(action_target, action_name, params)\nsrc/textual/app.py:3193: in _dispatch_action\n    await invoke(public_method, *params)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:492: in action_exit\n    result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ScreensApp(title='ScreensApp', classes={'-dark-mode'})\nscreen = QuitScreen(), callback = None, wait_for_dismiss = True\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n>       if wait_for_dismiss and not self.worker:\nE       AttributeError: 'ScreensApp' object has no attribute 'worker'. Did you mean: 'workers'?\n\nsrc/textual/app.py:2103: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:492 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   489 \u2502   \u2502   BINDINGS = [(\"x\", \"exit\")]                                     \u2502\n\u2502   490 \u2502   \u2502                                                                  \u2502\n\u2502   491 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 492 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   493 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   494 \u2502                                                                      \u2502\n\u2502   495 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss_no_w\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2103 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2100 \u2502   \u2502   \u2502   screen = self.screen_registry.get_screen(screen)          \u2502\n\u2502   2101 \u2502   \u2502   assert isinstance(screen, Screen)                             \u2502\n\u2502   2102 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2103 \u2502   \u2502   if wait_for_dismiss and not self.worker:                      \u2502\n\u2502   2104 \u2502   \u2502   \u2502   raise NoActiveWorker(\"wait_for_dismiss requires an active \u2502\n\u2502   2105 \u2502   \u2502                                                                 \u2502\n\u2502   2106 \u2502   \u2502   screen._callback = callback                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'ScreensApp' object has no attribute 'worker'\n_______________ test_screen_sub_title_reactive_updates_sub_title _______________\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.sub_title = \"new screen sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"new screen sub-title\"\n\ntests/test_header.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:125: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:125 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   122 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   123 \u2502   \u2502                                                                  \u2502\n\u2502   124 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 125 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   126 \u2502                                                                      \u2502\n\u2502   127 \u2502   app = MyApp()                                                      \u2502\n\u2502   128 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_reactive_updates_su\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n        async with app.run_test() as pilot:\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n>           assert counter == 1\nE           assert 0 == 1\n\ntests/css/test_screen_css.py:103: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n______________________________ test_compose_order ______________________________\n\n    async def test_compose_order() -> None:\n        from textual.containers import Horizontal\n        from textual.screen import Screen\n        from textual.widgets import Select\n    \n        class MyScreen(Screen):\n            def on_mount(self) -> None:\n                self.query_one(Select).value = 1\n    \n            def compose(self) -> ComposeResult:\n                yield Horizontal(\n                    Select(((str(n), n) for n in range(10)), id=\"select\"),\n                    id=\"screen-horizontal\",\n                )\n    \n        class SelectBugApp(App[None]):\n            async def on_mount(self):\n                await self.push_screen(MyScreen(id=\"my-screen\"))\n                self.query_one(Select)\n    \n        app = SelectBugApp()\n        messages: list[Message] = []\n    \n>       async with app.run_test(message_hook=messages.append) as pilot:\n\ntests/test_widget.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:287: in on_mount\n    await self.push_screen(MyScreen(id=\"my-screen\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})\nscreen = MyScreen(id='my-screen'), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:287 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   284 \u2502                                                                      \u2502\n\u2502   285 \u2502   class SelectBugApp(App[None]):                                     \u2502\n\u2502   286 \u2502   \u2502   async def on_mount(self):                                      \u2502\n\u2502 \u2771 287 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"my-screen\"))           \u2502\n\u2502   288 \u2502   \u2502   \u2502   self.query_one(Select)                                     \u2502\n\u2502   289 \u2502                                                                      \u2502\n\u2502   290 \u2502   app = SelectBugApp()                                               \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_widget.test_compose_order.<locals>.MyScreen'>     \u2502 \u2502\n\u2502 \u2502   Select = <class 'textual.widgets._select.Select'>                      \u2502 \u2502\n\u2502 \u2502     self = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                            \u2502\n\u2502 \u2502         callback = None                       \u2502                            \u2502\n\u2502 \u2502           screen = MyScreen(id='my-screen')   \u2502                            \u2502\n\u2502 \u2502             self = SelectBugApp(              \u2502                            \u2502\n\u2502 \u2502                    \u2502   title='SelectBugApp',  \u2502                            \u2502\n\u2502 \u2502                    \u2502   classes={              \u2502                            \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'       \u2502                            \u2502\n\u2502 \u2502                    \u2502   }                      \u2502                            \u2502\n\u2502 \u2502                    )                          \u2502                            \u2502\n\u2502 \u2502 wait_for_dismiss = False                      \u2502                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n________________ test_screen_sub_title_overrides_app_sub_title _________________\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:107: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:107 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   104 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   105 \u2502   \u2502                                                                  \u2502\n\u2502   106 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 107 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   108 \u2502                                                                      \u2502\n\u2502   109 \u2502   app = MyApp()                                                      \u2502\n\u2502   110 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_overrides_app_sub_t\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert len(app.screen._result_callbacks) == 1\nE           AssertionError: assert 0 == 1\nE            +  where 0 = len([])\nE            +    where [] = Screen(id='_default')._result_callbacks\nE            +      where Screen(id='_default') = MyApp(title='MyApp', classes={'-dark-mode'}).screen\n\ntests/test_screens.py:371: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:367: in on_mount\n    self.push_screen(\"a\", self.callback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'a'\ncallback = <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>\nwait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n>           screen = self.screen_registry.get_screen(screen)\nE           AttributeError: 'MyApp' object has no attribute 'screen_registry'\n\nsrc/textual/app.py:2100: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:367 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   364 \u2502   \u2502   \u2502   return 42                                                  \u2502\n\u2502   365 \u2502   \u2502                                                                  \u2502\n\u2502   366 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 367 \u2502   \u2502   \u2502   self.push_screen(\"a\", self.callback)                       \u2502\n\u2502   368 \u2502                                                                      \u2502\n\u2502   369 \u2502   app = MyApp()                                                      \u2502\n\u2502   370 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2100 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2097 \u2502   \u2502   \u2502   \u2502   to await the result of the screen.                    \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2100 \u2502   \u2502   \u2502   screen = self.screen_registry.get_screen(screen)          \u2502\n\u2502   2101 \u2502   \u2502   assert isinstance(screen, Screen)                             \u2502\n\u2502   2102 \u2502   \u2502                                                                 \u2502\n\u2502   2103 \u2502   \u2502   if wait_for_dismiss and not self.worker:                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = <bound method                                         \u2502 \u2502\n\u2502 \u2502                    test_switch_screen_updates_results_callback_stack.<l\u2026 \u2502 \u2502\n\u2502 \u2502                    of MyApp(title='MyApp', classes={'-dark-mode'})>      \u2502 \u2502\n\u2502 \u2502           screen = 'a'                                                   \u2502 \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'})          \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'screen_registry'\n______________________ test_push_screen_wait_for_dismiss _______________________\n\n    async def test_push_screen_wait_for_dismiss() -> None:\n        \"\"\"Test push_screen returns result.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            @work\n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # Press X to exit, then Y to dismiss, expect True result\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ScreensApp(title='ScreensApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n            await pilot._wait_for_screen()\n            yield pilot\n        finally:\n            # Shutdown the app cleanly\n            await app._shutdown()\n            await app_task\n            # Re-raise the exception which caused panic so test frameworks are aware\n            if self._exception:\n>               raise self._exception\nE               textual.worker.WorkerFailed: Worker raised exception: AttributeError(\"'ScreensApp' object has no attribute 'worker'\")\n\nsrc/textual/app.py:1492: WorkerFailed\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:365 in _run                \u2502\n\u2502                                                                              \u2502\n\u2502   362 \u2502   \u2502   self.state = WorkerState.RUNNING                               \u2502\n\u2502   363 \u2502   \u2502   app.log.worker(self)                                           \u2502\n\u2502   364 \u2502   \u2502   try:                                                           \u2502\n\u2502 \u2771 365 \u2502   \u2502   \u2502   self._result = await self.run()                            \u2502\n\u2502   366 \u2502   \u2502   except asyncio.CancelledError as error:                        \u2502\n\u2502   367 \u2502   \u2502   \u2502   self.state = WorkerState.CANCELLED                         \u2502\n\u2502   368 \u2502   \u2502   \u2502   self._error = error                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502           app = ScreensApp(title='ScreensApp', classes={'-dark-mode'})   \u2502 \u2502\n\u2502 \u2502         error = AttributeError(\"'ScreensApp' object has no attribute     \u2502 \u2502\n\u2502 \u2502                 'worker'\")                                               \u2502 \u2502\n\u2502 \u2502          self = <Worker                                                  \u2502 \u2502\n\u2502 \u2502                 \u2502   ERROR                                                \u2502 \u2502\n\u2502 \u2502                 \u2502   name='action_exit'                                   \u2502 \u2502\n\u2502 \u2502                 \u2502   description='action_exit()'                          \u2502 \u2502\n\u2502 \u2502                 >                                                        \u2502 \u2502\n\u2502 \u2502     Traceback = <class 'rich.traceback.Traceback'>                       \u2502 \u2502\n\u2502 \u2502 worker_failed = WorkerFailed('Worker raised exception:                   \u2502 \u2502\n\u2502 \u2502                 AttributeError(\"\\'ScreensApp\\' object has no attribute   \u2502 \u2502\n\u2502 \u2502                 \\'worker\\'\")')                                           \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:349 in run                 \u2502\n\u2502                                                                              \u2502\n\u2502   346 \u2502   \u2502   Returns:                                                       \u2502\n\u2502   347 \u2502   \u2502   \u2502   Return value of the work.                                  \u2502\n\u2502   348 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502 \u2771 349 \u2502   \u2502   return await (                                                 \u2502\n\u2502   350 \u2502   \u2502   \u2502   self._run_threaded() if self._thread_worker else self._run \u2502\n\u2502   351 \u2502   \u2502   )                                                              \u2502\n\u2502   352                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:334 in _run_async          \u2502\n\u2502                                                                              \u2502\n\u2502   331 \u2502   \u2502   \u2502   or hasattr(self._work, \"func\")                             \u2502\n\u2502   332 \u2502   \u2502   \u2502   and inspect.iscoroutinefunction(self._work.func)           \u2502\n\u2502   333 \u2502   \u2502   ):                                                             \u2502\n\u2502 \u2771 334 \u2502   \u2502   \u2502   return await self._work()                                  \u2502\n\u2502   335 \u2502   \u2502   elif inspect.isawaitable(self._work):                          \u2502\n\u2502   336 \u2502   \u2502   \u2502   return await self._work                                    \u2502\n\u2502   337 \u2502   \u2502   elif callable(self._work):                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:457 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   454 \u2502   \u2502                                                                  \u2502\n\u2502   455 \u2502   \u2502   @work                                                          \u2502\n\u2502   456 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 457 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   458 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   459 \u2502                                                                      \u2502\n\u2502   460 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss.<loc\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2103 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2100 \u2502   \u2502   \u2502   screen = self.screen_registry.get_screen(screen)          \u2502\n\u2502   2101 \u2502   \u2502   assert isinstance(screen, Screen)                             \u2502\n\u2502   2102 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2103 \u2502   \u2502   if wait_for_dismiss and not self.worker:                      \u2502\n\u2502   2104 \u2502   \u2502   \u2502   raise NoActiveWorker(\"wait_for_dismiss requires an active \u2502\n\u2502   2105 \u2502   \u2502                                                                 \u2502\n\u2502   2106 \u2502   \u2502   screen._callback = callback                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'ScreensApp' object has no attribute 'worker'\n___________________ test_screen_title_reactive_updates_title ___________________\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.title = \"new screen title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"new screen title\"\n\ntests/test_header.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:51: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:51 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    48 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    49 \u2502   \u2502                                                                  \u2502\n\u2502    50 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  51 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    52 \u2502                                                                      \u2502\n\u2502    53 \u2502   app = MyApp()                                                      \u2502\n\u2502    54 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_reactive_updates_title.\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n        async with app.run_test():\n            MyApp.AUTO_FOCUS = \"Input\"\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n____________________ test_screen_receives_mouse_move_events ____________________\n\n    async def test_screen_receives_mouse_move_events():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        mouse_offset = Offset(1, 1)\n    \n>       async with SimpleApp().run_test() as pilot:\n\ntests/test_screens.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:390: in on_mount\n    self.push_screen(\"a\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SimpleApp(title='SimpleApp', classes={'-dark-mode'}), screen = 'a'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n>           screen = self.screen_registry.get_screen(screen)\nE           AttributeError: 'SimpleApp' object has no attribute 'screen_registry'\n\nsrc/textual/app.py:2100: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:390 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   387 \u2502   \u2502   SCREENS = {\"a\": MouseMoveRecordingScreen()}                    \u2502\n\u2502   388 \u2502   \u2502                                                                  \u2502\n\u2502   389 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 390 \u2502   \u2502   \u2502   self.push_screen(\"a\")                                      \u2502\n\u2502   391 \u2502                                                                      \u2502\n\u2502   392 \u2502   mouse_offset = Offset(1, 1)                                        \u2502\n\u2502   393                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2100 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2097 \u2502   \u2502   \u2502   \u2502   to await the result of the screen.                    \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2100 \u2502   \u2502   \u2502   screen = self.screen_registry.get_screen(screen)          \u2502\n\u2502   2101 \u2502   \u2502   assert isinstance(screen, Screen)                             \u2502\n\u2502   2102 \u2502   \u2502                                                                 \u2502\n\u2502   2103 \u2502   \u2502   if wait_for_dismiss and not self.worker:                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \u2502\n\u2502 \u2502         callback = None                                                 \u2502  \u2502\n\u2502 \u2502           screen = 'a'                                                  \u2502  \u2502\n\u2502 \u2502             self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502  \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                \u2502  \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'SimpleApp' object has no attribute 'screen_registry'\n_______________________________ test_focus_chain _______________________________\n\n    def test_focus_chain():\n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n>       await app.push_screen(\"screen1\")\n\ntests/test_screens.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = 'screen1'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n>           screen = self.screen_registry.get_screen(screen)\nE           AttributeError: 'App' object has no attribute 'screen_registry'\n\nsrc/textual/app.py:2100: AttributeError\n_________________________ test_dismiss_non_top_screen __________________________\n\n    async def test_dismiss_non_top_screen():\n        class MyApp(App[None]):\n            async def key_p(self) -> None:\n                self.bottom = Screen()\n                top = Screen()\n                await self.push_screen(self.bottom)\n                await self.push_screen(top)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3259: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:298: in key_p\n    await self.push_screen(self.bottom)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:298 in key_p               \u2502\n\u2502                                                                              \u2502\n\u2502   295 \u2502   \u2502   async def key_p(self) -> None:                                 \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.bottom = Screen()                                     \u2502\n\u2502   297 \u2502   \u2502   \u2502   top = Screen()                                             \u2502\n\u2502 \u2771 298 \u2502   \u2502   \u2502   await self.push_screen(self.bottom)                        \u2502\n\u2502   299 \u2502   \u2502   \u2502   await self.push_screen(top)                                \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2502  top = Screen()                                     \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = Screen()                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_________________________________ test_unmount _________________________________\n\n    async def test_unmount():\n        \"\"\"Test unmount events are received in reverse DOM order.\"\"\"\n        unmount_ids: list[str] = []\n    \n        class UnmountWidget(Container):\n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(\n                    f\"{self.__class__.__name__}#{self.id}-{self.parent is not None}-{len(self._nodes)}\"\n                )\n    \n        class MyScreen(Screen):\n            def compose(self) -> ComposeResult:\n                yield UnmountWidget(\n                    UnmountWidget(\n                        UnmountWidget(id=\"bar1\"), UnmountWidget(id=\"bar2\"), id=\"bar\"\n                    ),\n                    UnmountWidget(\n                        UnmountWidget(id=\"baz1\"), UnmountWidget(id=\"baz2\"), id=\"baz\"\n                    ),\n                    id=\"top\",\n                )\n    \n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(f\"{self.__class__.__name__}#{self.id}\")\n    \n        class UnmountApp(App):\n            async def on_mount(self) -> None:\n                await self.push_screen(MyScreen(id=\"main\"))\n    \n        app = UnmountApp()\n>       async with app.run_test() as pilot:\n\ntests/test_unmount.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_unmount.py:36: in on_mount\n    await self.push_screen(MyScreen(id=\"main\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = UnmountApp(title='UnmountApp', classes={'-dark-mode'})\nscreen = MyScreen(id='main'), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_unmount.py:36 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   33 \u2502                                                                       \u2502\n\u2502   34 \u2502   class UnmountApp(App):                                              \u2502\n\u2502   35 \u2502   \u2502   async def on_mount(self) -> None:                               \u2502\n\u2502 \u2771 36 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"main\"))                 \u2502\n\u2502   37 \u2502                                                                       \u2502\n\u2502   38 \u2502   app = UnmountApp()                                                  \u2502\n\u2502   39 \u2502   async with app.run_test() as pilot:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502 \u2502 MyScreen = <class 'tests.test_unmount.test_unmount.<locals>.MyScreen'> \u2502   \u2502\n\u2502 \u2502     self = UnmountApp(title='UnmountApp', classes={'-dark-mode'})      \u2502   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = MyScreen(id='main')                                   \u2502 \u2502\n\u2502 \u2502             self = UnmountApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='UnmountApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_ test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set _\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.sub_title = \"new app sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:145: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:145 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   142 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   143 \u2502   \u2502                                                                  \u2502\n\u2502   144 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 145 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   146 \u2502                                                                      \u2502\n\u2502   147 \u2502   app = MyApp()                                                      \u2502\n\u2502   148 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_app_sub_title_reactive_does_not_upda\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_____________ test_mouse_move_event_bubbles_to_screen_from_widget ______________\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n        async with SimpleApp().run_test() as pilot:\n>           await pilot.hover(Label, mouse_offset)\n\ntests/test_screens.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/pilot.py:271: in hover\n    return await self._post_mouse_events(\nsrc/textual/pilot.py:317: in _post_mouse_events\n    target_widget = app.query_one(selector)\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='Label'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='Label'> on SimpleApp(title='SimpleApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n>       async with SimpleApp().run_test() as pilot:\n\ntests/test_screens.py:427: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:422: in on_mount\n    self.push_screen(\"a\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SimpleApp(title='SimpleApp', classes={'-dark-mode'}), screen = 'a'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n>           screen = self.screen_registry.get_screen(screen)\nE           AttributeError: 'SimpleApp' object has no attribute 'screen_registry'\n\nsrc/textual/app.py:2100: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:422 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   419 \u2502   \u2502   SCREENS = {\"a\": MouseMoveRecordingScreen()}                    \u2502\n\u2502   420 \u2502   \u2502                                                                  \u2502\n\u2502   421 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 422 \u2502   \u2502   \u2502   self.push_screen(\"a\")                                      \u2502\n\u2502   423 \u2502                                                                      \u2502\n\u2502   424 \u2502   label_offset = Offset(10, 10)                                      \u2502\n\u2502   425 \u2502   mouse_offset = Offset(1, 1)                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2100 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2097 \u2502   \u2502   \u2502   \u2502   to await the result of the screen.                    \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2100 \u2502   \u2502   \u2502   screen = self.screen_registry.get_screen(screen)          \u2502\n\u2502   2101 \u2502   \u2502   assert isinstance(screen, Screen)                             \u2502\n\u2502   2102 \u2502   \u2502                                                                 \u2502\n\u2502   2103 \u2502   \u2502   if wait_for_dismiss and not self.worker:                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \u2502\n\u2502 \u2502         callback = None                                                 \u2502  \u2502\n\u2502 \u2502           screen = 'a'                                                  \u2502  \u2502\n\u2502 \u2502             self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502  \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                \u2502  \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'SimpleApp' object has no attribute 'screen_registry'\n____ test_app_title_reactive_does_not_update_title_when_screen_title_is_set ____\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.title = \"new app title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='new app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:71: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='new app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:71 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    68 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    69 \u2502   \u2502                                                                  \u2502\n\u2502    70 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  71 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    72 \u2502                                                                      \u2502\n\u2502    73 \u2502   app = MyApp()                                                      \u2502\n\u2502    74 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_app_title_reactive_does_not_update_t\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n        async with app.run_test():\n            screen_id = id(app.screen)\n>           app.switch_screen(\"screen\")\n\ntests/test_screens.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2162: in switch_screen\n    top_screen._pop_result_callback()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default')\n\n    def _pop_result_callback(self) -> None:\n        \"\"\"Remove the latest result callback from the stack.\"\"\"\n>       self._result_callbacks.pop()\nE       IndexError: pop from empty list\n\nsrc/textual/screen.py:899: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:337: in on_mount\n    self.push_screen(\"screen\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'screen'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n>           screen = self.screen_registry.get_screen(screen)\nE           AttributeError: 'MyApp' object has no attribute 'screen_registry'\n\nsrc/textual/app.py:2100: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:337 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   334 \u2502   \u2502   SCREENS = {\"screen\": MyScreen()}                               \u2502\n\u2502   335 \u2502   \u2502                                                                  \u2502\n\u2502   336 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 337 \u2502   \u2502   \u2502   self.push_screen(\"screen\")                                 \u2502\n\u2502   338 \u2502                                                                      \u2502\n\u2502   339 \u2502   app = MyApp()                                                      \u2502\n\u2502   340 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2100 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2097 \u2502   \u2502   \u2502   \u2502   to await the result of the screen.                    \u2502\n\u2502   2098 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2099 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502 \u2771 2100 \u2502   \u2502   \u2502   screen = self.screen_registry.get_screen(screen)          \u2502\n\u2502   2101 \u2502   \u2502   assert isinstance(screen, Screen)                             \u2502\n\u2502   2102 \u2502   \u2502                                                                 \u2502\n\u2502   2103 \u2502   \u2502   if wait_for_dismiss and not self.worker:                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = 'screen'                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'screen_registry'\n_________________ test_auto_focus_skips_non_focusable_widgets __________________\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.focused is not None\nE           AssertionError: assert None is not None\nE            +  where None = MyApp(title='MyApp', classes={'-dark-mode'}).focused\n\ntests/test_screens.py:289: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:285: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:285 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   282 \u2502                                                                      \u2502\n\u2502   283 \u2502   class MyApp(App[None]):                                            \u2502\n\u2502   284 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 285 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   286 \u2502                                                                      \u2502\n\u2502   287 \u2502   app = MyApp()                                                      \u2502\n\u2502   288 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_screens.test_auto_focus_skips_non_focusable_widg\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n_________________ test_pilot_exception_catching_widget_compose _________________\n\n    async def test_pilot_exception_catching_widget_compose():\n        class SomeScreen(Screen[None]):\n            def compose(self) -> ComposeResult:\n                1 / 0\n                yield Label(\"Beep\")\n    \n        class FailingApp(App[None]):\n            def on_mount(self) -> None:\n                self.push_screen(SomeScreen())\n    \n        with pytest.raises(ZeroDivisionError):\n>           async with FailingApp().run_test():\n\ntests/test_pilot.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_pilot.py:83: in on_mount\n    self.push_screen(SomeScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FailingApp(title='FailingApp', classes={'-dark-mode'})\nscreen = SomeScreen(), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_pilot.py:83 in on_mount               \u2502\n\u2502                                                                              \u2502\n\u2502    80 \u2502                                                                      \u2502\n\u2502    81 \u2502   class FailingApp(App[None]):                                       \u2502\n\u2502    82 \u2502   \u2502   def on_mount(self) -> None:                                    \u2502\n\u2502 \u2771  83 \u2502   \u2502   \u2502   self.push_screen(SomeScreen())                             \u2502\n\u2502    84 \u2502                                                                      \u2502\n\u2502    85 \u2502   with pytest.raises(ZeroDivisionError):                             \u2502\n\u2502    86 \u2502   \u2502   async with FailingApp().run_test():                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502       self = FailingApp(title='FailingApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2502 SomeScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_pilot.test_pilot_exception_catching_widget_com\u2026 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = SomeScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = FailingApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='FailingApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n____________________ test_screen_title_overrides_app_title _____________________\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2568: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2515: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3088: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:33: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Union[Screen, str],\n        callback: Callable[[object], None] = None,\n        wait_for_dismiss: bool = False,\n    ) -> Union[Awaitable[None], asyncio.Future]:\n        \"\"\"Push a new screen on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is dismissed with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        if isinstance(screen, str):\n            screen = self.screen_registry.get_screen(screen)\n        assert isinstance(screen, Screen)\n    \n        if wait_for_dismiss and not self.worker:\n            raise NoActiveWorker(\"wait_for_dismiss requires an active worker\")\n    \n        screen._callback = callback\n        self.screen_stack.append(screen)\n        self.refresh(layout=True)\n    \n        if wait_for_dismiss:\n            future: asyncio.Future = asyncio.Future()\n            screen._dismiss_future = future\n            return future\n        else:\n>           return self.post_message(ScreenMount(screen))\nE           NameError: name 'ScreenMount' is not defined\n\nsrc/textual/app.py:2115: NameError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:33 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    30 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    31 \u2502   \u2502                                                                  \u2502\n\u2502    32 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  33 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    34 \u2502                                                                      \u2502\n\u2502    35 \u2502   app = MyApp()                                                      \u2502\n\u2502    36 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_overrides_app_title.<lo\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2115 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2112 \u2502   \u2502   \u2502   screen._dismiss_future = future                           \u2502\n\u2502   2113 \u2502   \u2502   \u2502   return future                                             \u2502\n\u2502   2114 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771 2115 \u2502   \u2502   \u2502   return self.post_message(ScreenMount(screen))             \u2502\n\u2502   2116 \u2502                                                                     \u2502\n\u2502   2117 \u2502                                                                     \u2502\n\u2502   2118 \u2502   if TYPE_CHECKING:                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nNameError: name 'ScreenMount' is not defined\n=============================== warnings summary ===============================\ntests/test_header.py: 8 warnings\ntests/css/test_screen_css.py: 4 warnings\ntests/test_screens.py: 13 warnings\ntests/test_widget.py: 1 warning\ntests/test_unmount.py: 1 warning\ntests/test_pilot.py: 1 warning\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_header.py::test_screen_title_none_is_ignored\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_header.py::test_screen_title_none_is_ignored - NameError: n...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - N...\nFAILED tests/test_focus.py::test_allow_focus - NameError: name 'ScreenMount' ...\nFAILED tests/test_header.py::test_screen_sub_title_none_is_ignored - NameErro...\nFAILED tests/test_screens.py::test_dismiss_action - NameError: name 'ScreenMo...\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker - A...\nFAILED tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_widget.py::test_compose_order - NameError: name 'ScreenMoun...\nFAILED tests/test_header.py::test_screen_sub_title_overrides_app_sub_title - ...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss - textual.wor...\nFAILED tests/test_header.py::test_screen_title_reactive_updates_title - NameE...\nFAILED tests/test_screens.py::test_auto_focus_inheritance - NameError: name '...\nFAILED tests/test_screens.py::test_screen_receives_mouse_move_events - Attrib...\nFAILED tests/test_focus.py::test_focus_chain - NameError: name 'ScreenMount' ...\nFAILED tests/test_screens.py::test_screens - AttributeError: 'App' object has...\nFAILED tests/test_screens.py::test_dismiss_non_top_screen - NameError: name '...\nFAILED tests/test_unmount.py::test_unmount - NameError: name 'ScreenMount' is...\nFAILED tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\nFAILED tests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\nFAILED tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\nFAILED tests/test_screens.py::test_switch_screen_no_op - AttributeError: 'MyA...\nFAILED tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets - N...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/test_pilot.py::test_pilot_exception_catching_widget_compose - Na...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/test_header.py::test_screen_title_overrides_app_title - NameErro...\n======================= 31 failed, 29 warnings in 6.31s ========================\n\n"], "textual-src/textual/app.py-switch_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_screens.py FF                                                 [ 33%]\ntests/css/test_screen_css.py FF                                          [ 66%]\ntests/test_screens.py F                                                  [ 83%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n        async with app.run_test():\n            screen_id = id(app.screen)\n>           app.switch_screen(\"screen\")\n\ntests/test_screens.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'screen'\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        if isinstance(screen, str):\n            screen_name = screen\n>           screen = self.app.screens[screen_name]\nE           AttributeError: 'MyApp' object has no attribute 'screens'. Did you mean: 'screen'?\n\nsrc/textual/app.py:2167: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n>       await app.switch_screen(\"screen2\")\n\ntests/test_screens.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = 'screen2'\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        if isinstance(screen, str):\n            screen_name = screen\n>           screen = self.app.screens[screen_name]\nE           AttributeError: 'App' object has no attribute 'screens'. Did you mean: 'screen'?\n\nsrc/textual/app.py:2167: AttributeError\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3086: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3257: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:172: in key_p\n    self.switch_screen(ScreenWithCSS())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ScreenWithCSS()\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        if isinstance(screen, str):\n            screen_name = screen\n            screen = self.app.screens[screen_name]\n        else:\n            screen_name = screen.name\n    \n        self.screen_stack[-1] = screen\n>       return AwaitComplete(self._request_repaint(screen))\nE       AttributeError: 'MyApp' object has no attribute '_request_repaint'\n\nsrc/textual/app.py:2172: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:172 in key_p        \u2502\n\u2502                                                                              \u2502\n\u2502   169 \u2502                                                                      \u2502\n\u2502   170 \u2502   class MyApp(SwitchBaseApp):                                        \u2502\n\u2502   171 \u2502   \u2502   def key_p(self):                                               \u2502\n\u2502 \u2771 172 \u2502   \u2502   \u2502   self.switch_screen(ScreenWithCSS())                        \u2502\n\u2502   173 \u2502   \u2502                                                                  \u2502\n\u2502   174 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502   175 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2172 in switch_screen         \u2502\n\u2502                                                                              \u2502\n\u2502   2169 \u2502   \u2502   \u2502   screen_name = screen.name                                 \u2502\n\u2502   2170 \u2502   \u2502                                                                 \u2502\n\u2502   2171 \u2502   \u2502   self.screen_stack[-1] = screen                                \u2502\n\u2502 \u2771 2172 \u2502   \u2502   return AwaitComplete(self._request_repaint(screen))           \u2502\n\u2502   2173 \u2502                                                                     \u2502\n\u2502   2174 \u2502                                                                     \u2502\n\u2502   2175 \u2502   def install_screen(self, screen: Screen, name: str) -> None:      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e               \u2502\n\u2502 \u2502      screen = ScreenWithCSS()                              \u2502               \u2502\n\u2502 \u2502 screen_name = None                                         \u2502               \u2502\n\u2502 \u2502        self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502               \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_request_repaint'\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:202: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3086: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3257: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:193: in key_p\n    self.switch_screen(\"screenwithcss\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'screenwithcss'\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        if isinstance(screen, str):\n            screen_name = screen\n>           screen = self.app.screens[screen_name]\nE           AttributeError: 'MyApp' object has no attribute 'screens'. Did you mean: 'screen'?\n\nsrc/textual/app.py:2167: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:193 in key_p        \u2502\n\u2502                                                                              \u2502\n\u2502   190 \u2502   \u2502   SCREENS = {\"screenwithcss\": ScreenWithCSS()}                   \u2502\n\u2502   191 \u2502   \u2502                                                                  \u2502\n\u2502   192 \u2502   \u2502   def key_p(self):                                               \u2502\n\u2502 \u2771 193 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   194 \u2502   \u2502                                                                  \u2502\n\u2502   195 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502   196 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2167 in switch_screen         \u2502\n\u2502                                                                              \u2502\n\u2502   2164 \u2502   def switch_screen(self, screen: Screen | str) -> AwaitComplete:   \u2502\n\u2502   2165 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502   2166 \u2502   \u2502   \u2502   screen_name = screen                                      \u2502\n\u2502 \u2771 2167 \u2502   \u2502   \u2502   screen = self.app.screens[screen_name]                    \u2502\n\u2502   2168 \u2502   \u2502   else:                                                         \u2502\n\u2502   2169 \u2502   \u2502   \u2502   screen_name = screen.name                                 \u2502\n\u2502   2170                                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e               \u2502\n\u2502 \u2502      screen = 'screenwithcss'                              \u2502               \u2502\n\u2502 \u2502 screen_name = 'screenwithcss'                              \u2502               \u2502\n\u2502 \u2502        self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502               \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'screens'\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n            assert len(app.screen._result_callbacks) == 1\n            assert app.screen._result_callbacks[-1].callback(None) == 42\n    \n>           app.switch_screen(\"b\")\n\ntests/test_screens.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'b'\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        if isinstance(screen, str):\n            screen_name = screen\n>           screen = self.app.screens[screen_name]\nE           AttributeError: 'MyApp' object has no attribute 'screens'. Did you mean: 'screen'?\n\nsrc/textual/app.py:2167: AttributeError\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3086: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3257: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/css/test_screen_css.py:214: in key_p\n    self.switch_screen(\"screenwithcss\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'screenwithcss'\n\n    def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        if isinstance(screen, str):\n            screen_name = screen\n>           screen = self.app.screens[screen_name]\nE           AttributeError: 'MyApp' object has no attribute 'screens'. Did you mean: 'screen'?\n\nsrc/textual/app.py:2167: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:214 in key_p        \u2502\n\u2502                                                                              \u2502\n\u2502   211 \u2502   \u2502   SCREENS = {\"screenwithcss\": ScreenWithCSS}                     \u2502\n\u2502   212 \u2502   \u2502                                                                  \u2502\n\u2502   213 \u2502   \u2502   async def key_p(self):                                         \u2502\n\u2502 \u2771 214 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   215 \u2502   \u2502                                                                  \u2502\n\u2502   216 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502   217 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2167 in switch_screen         \u2502\n\u2502                                                                              \u2502\n\u2502   2164 \u2502   def switch_screen(self, screen: Screen | str) -> AwaitComplete:   \u2502\n\u2502   2165 \u2502   \u2502   if isinstance(screen, str):                                   \u2502\n\u2502   2166 \u2502   \u2502   \u2502   screen_name = screen                                      \u2502\n\u2502 \u2771 2167 \u2502   \u2502   \u2502   screen = self.app.screens[screen_name]                    \u2502\n\u2502   2168 \u2502   \u2502   else:                                                         \u2502\n\u2502   2169 \u2502   \u2502   \u2502   screen_name = screen.name                                 \u2502\n\u2502   2170                                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e               \u2502\n\u2502 \u2502      screen = 'screenwithcss'                              \u2502               \u2502\n\u2502 \u2502 screen_name = 'screenwithcss'                              \u2502               \u2502\n\u2502 \u2502        self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502               \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'screens'\n=============================== warnings summary ===============================\ntests/test_screens.py::test_switch_screen_no_op\ntests/test_screens.py::test_screens\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_screens.py::test_switch_screen_no_op\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_switch_screen_no_op - AttributeError: 'MyA...\nFAILED tests/test_screens.py::test_screens - AttributeError: 'App' object has...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n======================== 6 failed, 7 warnings in 1.12s =========================\n\n"], "textual-src/textual/app.py-pop_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/css/test_screen_css.py F                                           [  9%]\ntests/test_screens.py FFF                                                [ 36%]\ntests/css/test_screen_css.py FFFFF                                       [ 81%]\ntests/test_screens.py F                                                  [ 90%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:114: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:114 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   111 \u2502   \u2502   \u2502   self.push_screen(ScreenWithCSS())                          \u2502\n\u2502   112 \u2502   \u2502                                                                  \u2502\n\u2502   113 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 114 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   115 \u2502                                                                      \u2502\n\u2502   116 \u2502   app = MyApp()                                                      \u2502\n\u2502   117 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n        async with app.run_test():\n            MyApp.AUTO_FOCUS = \"Input\"\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n>           app.pop_screen()\n\ntests/test_screens.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n>           app.pop_screen()\n\ntests/test_screens.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n        await app.switch_screen(\"screen2\")\n        # Check it has changed the stack and that it is current\n        assert app.screen_stack == [screen2]\n        assert app.screen is screen2\n        assert app.children == (screen2,)\n    \n        # Push another screen\n        await app.push_screen(\"screen3\")\n        assert app.screen_stack == [screen2, screen3]\n        assert app.screen is screen3\n        # Only the current screen is in children\n        assert app.children == (screen3,)\n    \n        # Pop a screen\n>       await app.pop_screen()\n\ntests/test_screens.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'App' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:135: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:135 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   132 \u2502   \u2502   \u2502   self.push_screen(\"screenwithcss\")                          \u2502\n\u2502   133 \u2502   \u2502                                                                  \u2502\n\u2502   134 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 135 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   136 \u2502                                                                      \u2502\n\u2502   137 \u2502   app = MyApp()                                                      \u2502\n\u2502   138 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:156: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:156 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   153 \u2502   \u2502   \u2502   self.push_screen(\"screenwithcss\")                          \u2502\n\u2502   154 \u2502   \u2502                                                                  \u2502\n\u2502   155 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 156 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   157 \u2502                                                                      \u2502\n\u2502   158 \u2502   app = MyApp()                                                      \u2502\n\u2502   159 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:175: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:175 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   172 \u2502   \u2502   \u2502   self.switch_screen(ScreenWithCSS())                        \u2502\n\u2502   173 \u2502   \u2502                                                                  \u2502\n\u2502   174 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 175 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   176 \u2502                                                                      \u2502\n\u2502   177 \u2502   app = MyApp()                                                      \u2502\n\u2502   178 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:196: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:196 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   193 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   194 \u2502   \u2502                                                                  \u2502\n\u2502   195 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 196 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   197 \u2502                                                                      \u2502\n\u2502   198 \u2502   app = MyApp()                                                      \u2502\n\u2502   199 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:217: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:217 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   214 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   215 \u2502   \u2502                                                                  \u2502\n\u2502   216 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 217 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   218 \u2502                                                                      \u2502\n\u2502   219 \u2502   app = MyApp()                                                      \u2502\n\u2502   220 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n>           app.pop_screen()\n\ntests/test_screens.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3098: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3269: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:80: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n        previous_screen = self.screen_stack.pop()\n        if self.screen_stack:\n>           self.switch_to(self.screen_stack[-1])\nE           AttributeError: 'MyApp' object has no attribute 'switch_to'. Did you mean: 'switch_mode'?\n\nsrc/textual/app.py:2265: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:80 in key_o         \u2502\n\u2502                                                                              \u2502\n\u2502    77 \u2502   \u2502   \u2502   self.push_screen(ScreenWithCSS())                          \u2502\n\u2502    78 \u2502   \u2502                                                                  \u2502\n\u2502    79 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771  80 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502    81 \u2502                                                                      \u2502\n\u2502    82 \u2502   counter = 0                                                        \u2502\n\u2502    83                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2265 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2262 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502   2263 \u2502   \u2502   previous_screen = self.screen_stack.pop()                     \u2502\n\u2502   2264 \u2502   \u2502   if self.screen_stack:                                         \u2502\n\u2502 \u2771 2265 \u2502   \u2502   \u2502   self.switch_to(self.screen_stack[-1])                     \u2502\n\u2502   2266 \u2502   \u2502   else:                                                         \u2502\n\u2502   2267 \u2502   \u2502   \u2502   raise ValueError(\"No screens left on the stack.\")         \u2502\n\u2502   2268 \u2502   \u2502   return previous_screen                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u2502\n\u2502 \u2502 previous_screen = ScreenWithCSS()                              \u2502           \u2502\n\u2502 \u2502            self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_to'\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py: 7 warnings\ntests/test_screens.py: 4 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - A...\nFAILED tests/test_screens.py::test_auto_focus_inheritance - AttributeError: '...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_screens.py::test_screens - AttributeError: 'App' object has...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n======================= 11 failed, 12 warnings in 2.95s ========================\n\n"], "textual-src/textual/app.py-run_action": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_widget.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_remove __________________________________\n\n    async def test_remove():\n        class RemoveMeLabel(Label):\n            async def on_mount(self) -> None:\n                await self.run_action(\"app.remove_all\")\n    \n        class Container(Widget):\n            async def clear(self) -> None:\n                await self.query(\"*\").remove()\n    \n        class RemoveApp(App):\n            def compose(self) -> ComposeResult:\n                yield Container(RemoveMeLabel())\n    \n            async def action_remove_all(self) -> None:\n                await self.query_one(Container).clear()\n                self.exit(123)\n    \n        app = RemoveApp()\n>       async with app.run_test() as pilot:\n\ntests/test_widget.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:545: in _pre_process\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:223: in on_mount\n    await self.run_action(\"app.remove_all\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = RemoveMeLabel(), action = 'app.remove_all'\n\n    async def run_action(self, action: str) -> None:\n        \"\"\"Perform a given action, with this widget as the default namespace.\n    \n        Args:\n            action: Action encoded as a string.\n        \"\"\"\n>       await self.app.run_action(action, self)\nE       TypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/widget.py:3545: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:223 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   220 async def test_remove():                                               \u2502\n\u2502   221 \u2502   class RemoveMeLabel(Label):                                        \u2502\n\u2502   222 \u2502   \u2502   async def on_mount(self) -> None:                              \u2502\n\u2502 \u2771 223 \u2502   \u2502   \u2502   await self.run_action(\"app.remove_all\")                    \u2502\n\u2502   224 \u2502                                                                      \u2502\n\u2502   225 \u2502   class Container(Widget):                                           \u2502\n\u2502   226 \u2502   \u2502   async def clear(self) -> None:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = RemoveMeLabel() \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:3545 in run_action         \u2502\n\u2502                                                                              \u2502\n\u2502   3542 \u2502   \u2502   Args:                                                         \u2502\n\u2502   3543 \u2502   \u2502   \u2502   action: Action encoded as a string.                       \u2502\n\u2502   3544 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 3545 \u2502   \u2502   await self.app.run_action(action, self)                       \u2502\n\u2502   3546 \u2502                                                                     \u2502\n\u2502   3547 \u2502   def post_message(self, message: Message) -> bool:                 \u2502\n\u2502   3548 \u2502   \u2502   \"\"\"Post a message to this widget.                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                \u2502\n\u2502 \u2502 action = 'app.remove_all' \u2502                                                \u2502\n\u2502 \u2502   self = RemoveMeLabel()  \u2502                                                \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were \ngiven\n=============================== warnings summary ===============================\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget.py::test_remove - TypeError: App.run_action() takes ...\n======================== 1 failed, 2 warnings in 0.50s =========================\n\n"], "textual-src/textual/file_monitor.py-check": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_file_monitor.py F                                             [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_file_never_found _____________________________\n\n    def test_file_never_found():\n        path = \"doesnt_exist.tcss\"\n        file_monitor = FileMonitor([Path(path)], lambda: None)\n>       file_monitor.check()  # Ensuring no exceptions are raised.\n\ntests/test_file_monitor.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FileMonitor({PosixPath('doesnt_exist.tcss')})\n\n    def check(self) -> bool:\n        \"\"\"Check the monitored files. Return True if any were changed since the last modification time.\"\"\"\n>       for file_path in self.monitored_files:\nE       AttributeError: 'FileMonitor' object has no attribute 'monitored_files'\n\nsrc/textual/file_monitor.py:45: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_file_monitor.py::test_file_never_found - AttributeError: 'F...\n============================== 1 failed in 0.10s ===============================\n\n"], "textual-src/textual/expand_tabs.py-expand_tabs_inline": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 13 items\n\ntests/test_expand_tabs.py .............                                  [100%]\n\n============================== 13 passed in 0.09s ==============================\n\n"], "textual-src/textual/_resolve.py-resolve": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_resolve.py FFFFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_resolve_empty ______________________________\n\n    def test_resolve_empty():\n>       assert resolve([], 10, 1, Size(20, 10), Size(80, 24)) == []\n\ntests/test_resolve.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [], total = 10, gutter = 1, size = Size(width=20, height=10)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n        total_dimensions = sum(dimensions)\n        total_gutters = gutter * (len(dimensions) - 1)\n>       available_space = min(size, viewport) - total_gutters\nE       TypeError: unsupported operand type(s) for -: 'Size' and 'int'\n\nsrc/textual/_resolve.py:22: TypeError\n_____________________ test_resolve[scalars0-100-0-result0] _____________________\n\nscalars = ['10'], total = 100, gutter = 0, result = [(0, 10)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n>       total_dimensions = sum(dimensions)\nE       TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:20: TypeError\n_____________________ test_resolve[scalars1-100-0-result1] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 0, result = [(0, 10), (10, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=20.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n>       total_dimensions = sum(dimensions)\nE       TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:20: TypeError\n_____________________ test_resolve[scalars2-100-1-result2] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 1, result = [(0, 10), (11, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=20.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n>       total_dimensions = sum(dimensions)\nE       TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:20: TypeError\n_____________________ test_resolve[scalars3-100-1-result3] _____________________\n\nscalars = ['10', '1fr'], total = 100, gutter = 1, result = [(0, 10), (11, 89)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n>       total_dimensions = sum(dimensions)\nE       TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:20: TypeError\n_____________________ test_resolve[scalars4-100-0-result4] _____________________\n\nscalars = ['1fr', '1fr'], total = 100, gutter = 0, result = [(0, 50), (50, 50)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n>       total_dimensions = sum(dimensions)\nE       TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:20: TypeError\n_____________________ test_resolve[scalars5-100-1-result5] _____________________\n\nscalars = ['3', '1fr', '1fr', '1'], total = 100, gutter = 1\nresult = [(0, 3), (4, 46), (51, 47), (99, 1)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=3.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, per...nit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        result = []\n>       total_dimensions = sum(dimensions)\nE       TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:20: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_resolve.py::test_resolve_empty - TypeError: unsupported ope...\nFAILED tests/test_resolve.py::test_resolve[scalars0-100-0-result0] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars1-100-0-result1] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars2-100-1-result2] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars3-100-1-result3] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars4-100-0-result4] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars5-100-1-result5] - TypeErro...\n============================== 7 failed in 0.14s ===============================\n\n"], "textual-src/textual/widget.py-mount": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_mount.py .                                                    [100%]\n\n=============================== warnings summary ===============================\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/test_mount.py::test_render_only_after_mount\n  /root/repos/py_data/textual/tests/test_mount.py:25: RuntimeWarning: coroutine 'Widget.mount.<locals>._mount' was never awaited\n    app.mount(W())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_mount.py::test_render_only_after_mount\n  /root/repos/py_data/textual/tests/test_mount.py:26: RuntimeWarning: coroutine 'Widget.mount.<locals>._mount' was never awaited\n    app.mount(W())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 4 warnings in 0.18s =========================\n\n"], "textual-src/textual/widget.py-move_child": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_widget_child_moving.py FFFFFF                                 [100%]\n\n=================================== FAILURES ===================================\n________________________ test_move_before_permutations _________________________\n\n    async def test_move_before_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget before another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((1, 0), (widgets[1], 0), (1, widgets[0]), (widgets[1], widgets[0]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, before=target)\nE               TypeError: Widget.move_child() got multiple values for argument 'before'\n\ntests/test_widget_child_moving.py:145: TypeError\n_______________________ test_move_child_after_last_child _______________________\n\n    async def test_move_child_after_last_child() -> None:\n        \"\"\"Test moving after a child after the last child.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[-1])\n\ntests/test_widget_child_moving.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nchild = Widget(), before = Widget(id='widget-0'), after = Widget(id='widget-9')\n\n    def move_child(child, before=None, after=None):\n        if before is None and after is None:\n            raise WidgetError(\"Either 'before' or 'after' must be provided.\")\n        if before is not None and after is not None:\n>           raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\nE           textual.widget.WidgetError: Only one of 'before' or 'after' can be provided.\n\nsrc/textual/widget.py:1043: WidgetError\n_______________________ test_move_past_end_of_child_list _______________________\n\n    async def test_move_past_end_of_child_list() -> None:\n        \"\"\"Test attempting to move past the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=len(widgets) + 10)\nE               TypeError: Widget.move_child() got multiple values for argument 'before'\n\ntests/test_widget_child_moving.py:124: TypeError\n_________________ test_move_child_after_last_numeric_location __________________\n\n    async def test_move_child_after_last_numeric_location() -> None:\n        \"\"\"Test moving after a child after the last child's numeric position.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[9])\n\ntests/test_widget_child_moving.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nchild = Widget(), before = Widget(id='widget-0'), after = Widget(id='widget-9')\n\n    def move_child(child, before=None, after=None):\n        if before is None and after is None:\n            raise WidgetError(\"Either 'before' or 'after' must be provided.\")\n        if before is not None and after is not None:\n>           raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\nE           textual.widget.WidgetError: Only one of 'before' or 'after' can be provided.\n\nsrc/textual/widget.py:1043: WidgetError\n_________________________ test_move_after_permutations _________________________\n\n    async def test_move_after_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget after another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((0, 1), (widgets[0], 1), (0, widgets[1]), (widgets[0], widgets[1]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, after=target)\n\ntests/test_widget_child_moving.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nchild = Widget(), before = 0, after = 1\n\n    def move_child(child, before=None, after=None):\n        if before is None and after is None:\n            raise WidgetError(\"Either 'before' or 'after' must be provided.\")\n        if before is not None and after is not None:\n>           raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\nE           textual.widget.WidgetError: Only one of 'before' or 'after' can be provided.\n\nsrc/textual/widget.py:1043: WidgetError\n______________________ test_move_before_end_of_child_list ______________________\n\n    async def test_move_before_end_of_child_list() -> None:\n        \"\"\"Test attempting to move before the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=-(len(widgets) + 10))\nE               TypeError: Widget.move_child() got multiple values for argument 'before'\n\ntests/test_widget_child_moving.py:134: TypeError\n=============================== warnings summary ===============================\ntests/test_widget_child_moving.py::test_move_before_permutations\ntests/test_widget_child_moving.py::test_move_child_after_last_child\ntests/test_widget_child_moving.py::test_move_past_end_of_child_list\ntests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\ntests/test_widget_child_moving.py::test_move_after_permutations\ntests/test_widget_child_moving.py::test_move_before_end_of_child_list\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget_child_moving.py::test_move_before_permutations\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget_child_moving.py::test_move_before_permutations - Typ...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_child - ...\nFAILED tests/test_widget_child_moving.py::test_move_past_end_of_child_list - ...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\nFAILED tests/test_widget_child_moving.py::test_move_after_permutations - text...\nFAILED tests/test_widget_child_moving.py::test_move_before_end_of_child_list\n======================== 6 failed, 7 warnings in 0.28s =========================\n\n"], "textual-src/textual/widget.py-_get_box_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/test_box_model.py FFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_max ___________________________________\n\n    def test_max():\n        \"\"\"Check that max_width and max_height are respected.\"\"\"\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n        styles.width = 100\n        styles.height = 80\n        styles.max_width = 40\n        styles.max_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\n\ntests/test_box_model.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=40, height=30)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(self, container: Size, viewport: Size, width_fraction: float, height_fraction: float) -> Tuple[Size, Thickness]:\n>       width = self.styles.width.calculate(container.width, viewport.width, width_fraction)\nE       AttributeError: 'Scalar' object has no attribute 'calculate'\n\nsrc/textual/widget.py:1163: AttributeError\n__________________________________ test_width __________________________________\n\n    def test_width():\n        \"\"\"Test width settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\n\ntests/test_box_model.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(self, container: Size, viewport: Size, width_fraction: float, height_fraction: float) -> Tuple[Size, Thickness]:\n>       width = self.styles.width.calculate(container.width, viewport.width, width_fraction)\nE       AttributeError: 'NoneType' object has no attribute 'calculate'\n\nsrc/textual/widget.py:1163: AttributeError\n_________________________________ test_height __________________________________\n\n    def test_height():\n        \"\"\"Test height settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\n\ntests/test_box_model.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(self, container: Size, viewport: Size, width_fraction: float, height_fraction: float) -> Tuple[Size, Thickness]:\n>       width = self.styles.width.calculate(container.width, viewport.width, width_fraction)\nE       AttributeError: 'NoneType' object has no attribute 'calculate'\n\nsrc/textual/widget.py:1163: AttributeError\n___________________________________ test_min ___________________________________\n\n    def test_min():\n        \"\"\"Check that min_width and min_height are respected.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n        styles.width = 10\n        styles.height = 5\n        styles.min_width = 40\n        styles.min_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\n\ntests/test_box_model.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=40, height=30)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(self, container: Size, viewport: Size, width_fraction: float, height_fraction: float) -> Tuple[Size, Thickness]:\n>       width = self.styles.width.calculate(container.width, viewport.width, width_fraction)\nE       AttributeError: 'Scalar' object has no attribute 'calculate'\n\nsrc/textual/widget.py:1163: AttributeError\n_______________________________ test_content_box _______________________________\n\n    def test_content_box():\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n    \n        # border-box is default\n        assert widget.styles.box_sizing == \"border-box\"\n    \n        widget.styles.width = 10\n        widget.styles.height = 8\n        widget.styles.padding = 1\n        widget.styles.border = (\"solid\", \"red\")\n    \n>       box_model = widget._get_box_model(\n            Size(60, 20),\n            Size(80, 24),\n            one,\n            one,\n        )\n\ntests/test_box_model.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(self, container: Size, viewport: Size, width_fraction: float, height_fraction: float) -> Tuple[Size, Thickness]:\n>       width = self.styles.width.calculate(container.width, viewport.width, width_fraction)\nE       AttributeError: 'Scalar' object has no attribute 'calculate'\n\nsrc/textual/widget.py:1163: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_box_model.py::test_max - AttributeError: 'Scalar' object ha...\nFAILED tests/test_box_model.py::test_width - AttributeError: 'NoneType' objec...\nFAILED tests/test_box_model.py::test_height - AttributeError: 'NoneType' obje...\nFAILED tests/test_box_model.py::test_min - AttributeError: 'Scalar' object ha...\nFAILED tests/test_box_model.py::test_content_box - AttributeError: 'Scalar' o...\n============================== 5 failed in 0.25s ===============================\n\n"], "textual-src/textual/widget.py-get_content_width": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n"], "textual-src/textual/widget.py-get_content_height": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n"], "textual-src/textual/suggester.py-_get_suggestion": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/suggester/test_suggester.py FFFFFFFFFFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_case_insensitive_cache_hits _______________________\n\n    async def test_case_insensitive_cache_hits():\n        count = 0\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                nonlocal count\n                count += 1\n                return value + \"abc\"\n    \n        suggester = MySuggester(use_cache=True, case_sensitive=False)\n        hellos = [\"hello\", \"HELLO\", \"HeLlO\", \"Hello\", \"hELLO\"]\n        for hello in hellos:\n>           await suggester._get_suggestion(DOMNode(), hello)\n\ntests/suggester/test_suggester.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_cache_hits.<locals>.MySuggester object at 0x7f17290b92a0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n_______________________ test_no_message_if_no_suggestion _______________________\n\n    async def test_no_message_if_no_suggestion():\n        log = []\n        suggester = FillSuggester()\n>       await suggester._get_suggestion(LogListNode(log), \"this is a longer string\")\n\ntests/suggester/test_suggester.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.FillSuggester object at 0x7f17290bba00>\nrequester = LogListNode(), value = 'this is a longer string'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n___________________ test_case_insensitive_suggestions[hello] ___________________\n\nvalue = 'hello'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7f1728fbee90>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n___________________ test_case_insensitive_suggestions[HELLO] ___________________\n\nvalue = 'HELLO'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/suggester.py:62: in _get_suggestion\n    suggestions = await self.get_suggestion(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7f1728fbd6c0>\nvalue = 'HELLO'\n\n    async def get_suggestion(self, value: str):\n>       assert \"hello\" == value\nE       AssertionError: assert 'hello' == 'HELLO'\nE         \nE         - HELLO\nE         + hello\n\ntests/suggester/test_suggester.py:92: AssertionError\n___________________ test_case_insensitive_suggestions[HeLlO] ___________________\n\nvalue = 'HeLlO'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/suggester.py:62: in _get_suggestion\n    suggestions = await self.get_suggestion(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7f1728fc3970>\nvalue = 'HeLlO'\n\n    async def get_suggestion(self, value: str):\n>       assert \"hello\" == value\nE       AssertionError: assert 'hello' == 'HeLlO'\nE         \nE         - HeLlO\nE         + hello\n\ntests/suggester/test_suggester.py:92: AssertionError\n___________________ test_case_insensitive_suggestions[Hello] ___________________\n\nvalue = 'Hello'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/suggester.py:62: in _get_suggestion\n    suggestions = await self.get_suggestion(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7f1728fbdf00>\nvalue = 'Hello'\n\n    async def get_suggestion(self, value: str):\n>       assert \"hello\" == value\nE       AssertionError: assert 'hello' == 'Hello'\nE         \nE         - Hello\nE         ? ^\nE         + hello\nE         ? ^\n\ntests/suggester/test_suggester.py:92: AssertionError\n___________________ test_case_insensitive_suggestions[hELLO] ___________________\n\nvalue = 'hELLO'\n\n    @pytest.mark.parametrize(\n        \"value\",\n        [\n            \"hello\",\n            \"HELLO\",\n            \"HeLlO\",\n            \"Hello\",\n            \"hELLO\",\n        ],\n    )\n    async def test_case_insensitive_suggestions(value):\n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                assert \"hello\" == value\n    \n        suggester = MySuggester(use_cache=False, case_sensitive=False)\n>       await suggester._get_suggestion(DOMNode(), value)\n\ntests/suggester/test_suggester.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/suggester.py:62: in _get_suggestion\n    suggestions = await self.get_suggestion(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_case_insensitive_suggestions.<locals>.MySuggester object at 0x7f1728fc02e0>\nvalue = 'hELLO'\n\n    async def get_suggestion(self, value: str):\n>       assert \"hello\" == value\nE       AssertionError: assert 'hello' == 'hELLO'\nE         \nE         - hELLO\nE         + hello\n\ntests/suggester/test_suggester.py:92: AssertionError\n________________________________ test_cache_on _________________________________\n\n    async def test_cache_on():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=True)\n>       await suggester._get_suggestion(DOMNode(), \"hello\")\n\ntests/suggester/test_suggester.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_cache_on.<locals>.MySuggester object at 0x7f1728fbc8e0>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n__________________ test_suggestion_ready_message_on_cache_hit __________________\n\n    async def test_suggestion_ready_message_on_cache_hit():\n        log = []\n        suggester = FillSuggester(use_cache=True)\n>       await suggester._get_suggestion(LogListNode(log), \"hello\")\n\ntests/suggester/test_suggester.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.FillSuggester object at 0x7f1728fc06a0>\nrequester = LogListNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n________________________________ test_cache_off ________________________________\n\n    async def test_cache_off():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=False)\n>       await suggester._get_suggestion(DOMNode(), \"hello\")\n\ntests/suggester/test_suggester.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.test_cache_off.<locals>.MySuggester object at 0x7f1728fbee60>\nrequester = DOMNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n________________________ test_suggestion_ready_message _________________________\n\n    async def test_suggestion_ready_message():\n        log = []\n        suggester = FillSuggester()\n>       await suggester._get_suggestion(LogListNode(log), \"hello\")\n\ntests/suggester/test_suggester.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_suggester.FillSuggester object at 0x7f17290935e0>\nrequester = LogListNode(), value = 'hello'\n\n    async def _get_suggestion(self, requester: DOMNode, value: str) -> None:\n        \"\"\"Used by widgets to get completion suggestions.\n    \n        Note:\n            When implementing custom suggesters, this method does not need to be\n            overridden.\n    \n        Args:\n            requester: The message target that requested a suggestion.\n            value: The current value to complete.\n        \"\"\"\n        suggestions = await self.get_suggestion(value)\n        await requester.post_message(\n>           SuggestionMessage(self, suggestions),\n            requester\n        )\nE       NameError: name 'SuggestionMessage' is not defined\n\nsrc/textual/suggester.py:64: NameError\n=============================== warnings summary ===============================\ntests/suggester/test_suggester.py: 11 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/suggester/test_suggester.py::test_case_insensitive_cache_hits\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_cache_hits - ...\nFAILED tests/suggester/test_suggester.py::test_no_message_if_no_suggestion - ...\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[hello]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[HELLO]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[HeLlO]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[Hello]\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_suggestions[hELLO]\nFAILED tests/suggester/test_suggester.py::test_cache_on - NameError: name 'Su...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message_on_cache_hit\nFAILED tests/suggester/test_suggester.py::test_cache_off - NameError: name 'S...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message - Nam...\n======================= 11 failed, 12 warnings in 0.14s ========================\n\n"], "textual-src/textual/dom.py-add_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/css/test_stylesheet.py F                                           [100%]\n\n=================================== FAILURES ===================================\n________________ test_stylesheet_apply_user_css_over_widget_css ________________\n\n    def test_stylesheet_apply_user_css_over_widget_css():\n        user_css = \".a {color: red; tint: yellow;}\"\n    \n        class MyWidget(Widget):\n            DEFAULT_CSS = \".a {color: blue !important; background: lime;}\"\n    \n        node = MyWidget()\n>       node.add_class(\"a\")\n\ntests/css/test_stylesheet.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyWidget(), update = True, class_names = ('a',), class_name = 'a'\n\n    def add_class(self, *class_names: str, update: bool = True) -> Self:\n        \"\"\"Add class names to this Node.\n    \n        Args:\n            *class_names: CSS class names to add.\n            update: Also update styles.\n    \n        Returns:\n            Self.\n        \"\"\"\n        for class_name in class_names:\n>           self.classes.append(class_name)\nE           AttributeError: 'frozenset' object has no attribute 'append'\n\nsrc/textual/dom.py:1434: AttributeError\n=========================== short test summary info ============================\nFAILED tests/css/test_stylesheet.py::test_stylesheet_apply_user_css_over_widget_css\n============================== 1 failed in 0.14s ===============================\n\n"], "textual-src/textual/reactive.py-_initialize_object": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_reactive.py F                                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_reactive_inheritance ___________________________\n\n    async def test_reactive_inheritance():\n        \"\"\"Check that inheritance works as expected for reactives.\"\"\"\n    \n        class Primary(App):\n            foo = reactive(1)\n            bar = reactive(\"bar\")\n    \n        class Secondary(Primary):\n            foo = reactive(2)\n            egg = reactive(\"egg\")\n    \n        class Tertiary(Secondary):\n            baz = reactive(\"baz\")\n    \n        primary = Primary()\n        secondary = Secondary()\n        tertiary = Tertiary()\n    \n        primary_reactive_count = len(primary._reactives)\n    \n        # Secondary adds one new reactive\n        assert len(secondary._reactives) == primary_reactive_count + 1\n    \n>       Reactive._initialize_object(primary)\n\ntests/test_reactive.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'textual.reactive.Reactive'>\nobj = Primary(title='Primary', classes={'-dark-mode'})\n\n    @classmethod\n    def _initialize_object(cls, obj: Reactable) -> None:\n        \"\"\"Set defaults and call any watchers / computes for the first time.\n    \n        Args:\n            obj: An object with Reactive descriptors\n        \"\"\"\n>       for name, descriptor in cls.__reactive_attributes__.items():\nE       AttributeError: type object 'Reactive' has no attribute '__reactive_attributes__'\n\nsrc/textual/reactive.py:185: AttributeError\n=============================== warnings summary ===============================\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_reactive.py::test_reactive_inheritance - AttributeError: ty...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n"], "textual-src/textual/message_pump.py-call_after_refresh": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_call_after_refresh ____________________________\n\n    async def test_call_after_refresh() -> None:\n        \"\"\"Check that call later makes a call after a refresh.\"\"\"\n        app = CallLaterApp()\n    \n        display_count = -1\n    \n        called_event = asyncio.Event()\n    \n        callback_message_pump: MessagePump | None = None\n    \n        def callback() -> None:\n            nonlocal display_count\n            nonlocal callback_message_pump\n            called_event.set()\n            display_count = app.display_count\n            callback_message_pump = active_message_pump.get()\n    \n        async with app.run_test():\n>           app.call_after_refresh(callback)\n\ntests/test_call_x_schedulers.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <function test_call_after_refresh.<locals>.callback at 0x7fa69b497d90>\nargs = (), kwargs = {}\n\n    def call_after_refresh(self, callback: Callable, *args: Any, **kwargs: Any) -> bool:\n        \"\"\"Schedule a callback to run after all messages are processed and the screen\n        has been refreshed. Positional and keyword arguments are passed to the callable.\n    \n        Args:\n            callback: A callable.\n    \n        Returns:\n            `True` if the callback was scheduled, or `False` if the callback could not be\n                scheduled (may occur if the message pump was closed or closing).\n    \n        \"\"\"\n>       if self._message_pump.is_running():\nE       AttributeError: 'CallLaterApp' object has no attribute '_message_pump'. Did you mean: '_message_queue'?\n\nsrc/textual/message_pump.py:429: AttributeError\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_after_refresh - AttributeEr...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n"], "textual-src/textual/message_pump.py-call_later": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_call_later ________________________________\n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n>           await pilot._wait_for_screen()\n\nsrc/textual/app.py:1484: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/pilot.py:383: in _wait_for_screen\n    if child.call_later(decrement_counter):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <function Pilot._wait_for_screen.<locals>.decrement_counter at 0x7f52050cff40>\nargs = (), kwargs = {}\n\n    def call_later(self, callback: Callback, *args: Any, **kwargs: Any) -> bool:\n        if self._closing or self._closed:\n            return False\n    \n>       self._pending_callbacks.append((callback, args, kwargs))\nE       AttributeError: 'CallLaterApp' object has no attribute '_pending_callbacks'. Did you mean: '_next_callbacks'?\n\nsrc/textual/message_pump.py:439: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_call_later() -> None:\n        \"\"\"Check that call later makes a call.\"\"\"\n        app = CallLaterApp()\n        called_event = asyncio.Event()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:606: in _process_messages_loop\n    await invoke(method, event)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/screen.py:778: in _on_idle\n    self.app.call_later(self.bindings_updated_signal.publish, self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <bound method Signal.publish of <Signal owner=Screen(id='_default') name='bindings_updated' subscriptions=[]>>\nargs = (Screen(id='_default'),), kwargs = {}\n\n    def call_later(self, callback: Callback, *args: Any, **kwargs: Any) -> bool:\n        if self._closing or self._closed:\n            return False\n    \n>       self._pending_callbacks.append((callback, args, kwargs))\nE       AttributeError: 'CallLaterApp' object has no attribute '_pending_callbacks'. Did you mean: '_next_callbacks'?\n\nsrc/textual/message_pump.py:439: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/screen.py:778 in _on_idle            \u2502\n\u2502                                                                              \u2502\n\u2502    775 \u2502   \u2502   finally:                                                      \u2502\n\u2502    776 \u2502   \u2502   \u2502   if self._bindings_updated:                                \u2502\n\u2502    777 \u2502   \u2502   \u2502   \u2502   self._bindings_updated = False                        \u2502\n\u2502 \u2771  778 \u2502   \u2502   \u2502   \u2502   self.app.call_later(self.bindings_updated_signal.publ \u2502\n\u2502    779 \u2502                                                                     \u2502\n\u2502    780 \u2502   def _compositor_refresh(self) -> None:                            \u2502\n\u2502    781 \u2502   \u2502   \"\"\"Perform a compositor refresh.\"\"\"                           \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                            \u2502\n\u2502 \u2502 event = Idle()                \u2502                                            \u2502\n\u2502 \u2502  self = Screen(id='_default') \u2502                                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/message_pump.py:439 in call_later    \u2502\n\u2502                                                                              \u2502\n\u2502   436 \u2502   \u2502   if self._closing or self._closed:                              \u2502\n\u2502   437 \u2502   \u2502   \u2502   return False                                               \u2502\n\u2502   438 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 439 \u2502   \u2502   self._pending_callbacks.append((callback, args, kwargs))       \u2502\n\u2502   440 \u2502   \u2502   return True                                                    \u2502\n\u2502   441                                                                        \u2502\n\u2502   442                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502     args = (Screen(id='_default'),)                                      \u2502 \u2502\n\u2502 \u2502 callback = <bound method Signal.publish of <Signal                       \u2502 \u2502\n\u2502 \u2502            owner=Screen(id='_default') name='bindings_updated'           \u2502 \u2502\n\u2502 \u2502            subscriptions=[]>>                                            \u2502 \u2502\n\u2502 \u2502   kwargs = {}                                                            \u2502 \u2502\n\u2502 \u2502     self = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'CallLaterApp' object has no attribute '_pending_callbacks'\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_later - AttributeError: 'Ca...\n======================== 1 failed, 2 warnings in 0.36s =========================\n\n"], "textual-src/textual/message_pump.py-post_message": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\n============================ no tests ran in 0.10s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_reactive.py::watch_test_var\n(no match in any of [<Module test_reactive.py>])\n\n"], "textual-src/textual/_spatial_map.py-get_values_in_region": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_spatial_map.py F                                              [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_values_in_region ___________________________\n\n    def test_get_values_in_region() -> None:\n        spatial_map: SpatialMap[str] = SpatialMap(20, 10)\n    \n        spatial_map.insert(\n            [\n                (Region(10, 5, 5, 5), False, False, \"foo\"),\n                (Region(5, 20, 5, 5), False, False, \"bar\"),\n                (Region(0, 0, 40, 1), True, False, \"title\"),\n            ]\n        )\n    \n>       assert spatial_map.get_values_in_region(Region(0, 0, 10, 5)) == [\n            \"title\",\n            \"foo\",\n        ]\n\ntests/test_spatial_map.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._spatial_map.SpatialMap object at 0x7f134c019360>\nregion = Region(x=0, y=0, width=10, height=5)\n\n    def get_values_in_region(self, region: Region) -> list[ValueType]:\n        result = []\n>       for value in self.values:\nE       AttributeError: 'SpatialMap' object has no attribute 'values'\n\nsrc/textual/_spatial_map.py:86: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_spatial_map.py::test_get_values_in_region - AttributeError:...\n============================== 1 failed in 0.10s ===============================\n\n"], "textual-src/textual/validation.py-validate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 45 items\n\ntests/test_validation.py ...................................FFFFFFF...   [100%]\n\n=================================== FAILURES ===================================\n__________________ test_URL_validate[http://example.com-True] __________________\n\nvalue = 'http://example.com', expected_result = True\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d867c39a0>\nvalue = 'http://example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n>               return ValidationResult(success=True)\nE               TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:491: TypeError\n_________________ test_URL_validate[https://example.com-True] __________________\n\nvalue = 'https://example.com', expected_result = True\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d867c0b20>\nvalue = 'https://example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n>               return ValidationResult(success=True)\nE               TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:491: TypeError\n___________________ test_URL_validate[www.example.com-False] ___________________\n\nvalue = 'www.example.com', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d8697f220>\nvalue = 'www.example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n                return ValidationResult(success=True)\n            else:\n>               return ValidationResult(\n                    success=False,\n                    error=f\"Invalid URL: {value}. URL must contain a scheme (e.g., http, https).\"\n                )\nE               TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:493: TypeError\n___________________ test_URL_validate[://example.com-False] ____________________\n\nvalue = '://example.com', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d8697df30>\nvalue = '://example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n                return ValidationResult(success=True)\n            else:\n>               return ValidationResult(\n                    success=False,\n                    error=f\"Invalid URL: {value}. URL must contain a scheme (e.g., http, https).\"\n                )\nE               TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:493: TypeError\n____________________ test_URL_validate[https:///path-False] ____________________\n\nvalue = 'https:///path', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d866f12a0>\nvalue = 'https:///path'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n>               return ValidationResult(success=True)\nE               TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:491: TypeError\n_____ test_URL_validate[redis://username:pass[word@localhost:6379/0-False] _____\n\nself = <textual.validation.URL object at 0x7f2d8697e410>\nvalue = 'redis://username:pass[word@localhost:6379/0'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n>           result = urlparse(value)\n\nsrc/textual/validation.py:489: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/urllib/parse.py:393: in urlparse\n    splitresult = urlsplit(url, scheme, allow_fragments)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = '/0', scheme = 'redis', allow_fragments = True\n\n    def urlsplit(url, scheme='', allow_fragments=True):\n        \"\"\"Parse a URL into 5 components:\n        <scheme>://<netloc>/<path>?<query>#<fragment>\n    \n        The result is a named 5-tuple with fields corresponding to the\n        above. It is either a SplitResult or SplitResultBytes object,\n        depending on the type of the url parameter.\n    \n        The username, password, hostname, and port sub-components of netloc\n        can also be accessed as attributes of the returned object.\n    \n        The scheme argument provides the default value of the scheme\n        component when no scheme is found in url.\n    \n        If allow_fragments is False, no attempt is made to separate the\n        fragment component from the previous component, which can be either\n        path or query.\n    \n        Note that % escapes are not expanded.\n        \"\"\"\n    \n        url, scheme, _coerce_result = _coerce_args(url, scheme)\n    \n        for b in _UNSAFE_URL_BYTES_TO_REMOVE:\n            url = url.replace(b, \"\")\n            scheme = scheme.replace(b, \"\")\n    \n        allow_fragments = bool(allow_fragments)\n        key = url, scheme, allow_fragments, type(url), type(scheme)\n        cached = _parse_cache.get(key, None)\n        if cached:\n            return _coerce_result(cached)\n        if len(_parse_cache) >= MAX_CACHE_SIZE: # avoid runaway growth\n            clear_cache()\n        netloc = query = fragment = ''\n        i = url.find(':')\n        if i > 0:\n            for c in url[:i]:\n                if c not in scheme_chars:\n                    break\n            else:\n                scheme, url = url[:i].lower(), url[i+1:]\n    \n        if url[:2] == '//':\n            netloc, url = _splitnetloc(url, 2)\n            if (('[' in netloc and ']' not in netloc) or\n                    (']' in netloc and '[' not in netloc)):\n>               raise ValueError(\"Invalid IPv6 URL\")\nE               ValueError: Invalid IPv6 URL\n\n/usr/local/lib/python3.10/urllib/parse.py:484: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nvalue = 'redis://username:pass[word@localhost:6379/0', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d8697e410>\nvalue = 'redis://username:pass[word@localhost:6379/0'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n                return ValidationResult(success=True)\n            else:\n                return ValidationResult(\n                    success=False,\n                    error=f\"Invalid URL: {value}. URL must contain a scheme (e.g., http, https).\"\n                )\n        except ValueError:\n>           return ValidationResult(success=False, error=f\"Invalid URL: {value}\")\nE           TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:498: TypeError\n__________________________ test_URL_validate[-False] ___________________________\n\nvalue = '', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7f2d866f4b20>, value = ''\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        try:\n            result = urlparse(value)\n            if result.scheme:\n                return ValidationResult(success=True)\n            else:\n>               return ValidationResult(\n                    success=False,\n                    error=f\"Invalid URL: {value}. URL must contain a scheme (e.g., http, https).\"\n                )\nE               TypeError: ValidationResult.__init__() got an unexpected keyword argument 'success'\n\nsrc/textual/validation.py:493: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_validation.py::test_URL_validate[http://example.com-True]\nFAILED tests/test_validation.py::test_URL_validate[https://example.com-True]\nFAILED tests/test_validation.py::test_URL_validate[www.example.com-False] - T...\nFAILED tests/test_validation.py::test_URL_validate[://example.com-False] - Ty...\nFAILED tests/test_validation.py::test_URL_validate[https:///path-False] - Typ...\nFAILED tests/test_validation.py::test_URL_validate[redis://username:pass[word@localhost:6379/0-False]\nFAILED tests/test_validation.py::test_URL_validate[-False] - TypeError: Valid...\n========================= 7 failed, 38 passed in 0.18s =========================\n\n"], "textual-src/textual/geometry.py-clamp": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_geometry.py .                                                 [100%]\n\n============================== 1 passed in 0.10s ===============================\n\n"], "textual-src/textual/constants.py-_get_textual_animations": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/animations/test_environment_variable.py ________\ntests/animations/test_environment_variable.py:3: in <module>\n    from textual import constants\nsrc/textual/__init__.py:9: in <module>\n    from . import constants\nsrc/textual/constants.py:110: in <module>\n    TEXTUAL_ANIMATIONS: AnimationLevel = _get_textual_animations()\nsrc/textual/constants.py:65: in _get_textual_animations\n    return AnimationLevel(animation_level.lower())\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n/usr/local/lib/python3.10/typing.py:386: in __call__\n    raise TypeError(f\"Cannot instantiate {self!r}\")\nE   TypeError: Cannot instantiate typing.Literal\n=========================== short test summary info ============================\nERROR tests/animations/test_environment_variable.py - TypeError: Cannot insta...\n=============================== 1 error in 0.09s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_environment_variable.py::test__get_textual_animations\n\n"], "textual-src/textual/color.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 14 errors\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_color.py _____________________\ntests/test_color.py:4: in <module>\n    from textual.color import Color, Gradient, Lab, lab_to_rgb, rgb_to_lab\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n_______________ ERROR collecting tests/test_style_importance.py ________________\ntests/test_style_importance.py:1: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n________________ ERROR collecting tests/css/test_nested_css.py _________________\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n___________________ ERROR collecting tests/css/test_parse.py ___________________\ntests/css/test_parse.py:5: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n__________________ ERROR collecting tests/css/test_styles.py ___________________\ntests/css/test_styles.py:6: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n___________ ERROR collecting docs/examples/guide/testing/test_rgb.py ___________\ndocs/examples/guide/testing/test_rgb.py:1: in <module>\n    from rgb import RGBApp\ndocs/examples/guide/testing/rgb.py:1: in <module>\n    from textual import on\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n__________________ ERROR collecting tests/css/test_initial.py __________________\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n________________ ERROR collecting tests/css/test_inheritance.py ________________\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n__________________ ERROR collecting tests/test_line_filter.py __________________\ntests/test_line_filter.py:4: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n_________________ ERROR collecting tests/test_styles_cache.py __________________\ntests/test_styles_cache.py:7: in <module>\n    from textual._styles_cache import StylesCache\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n________________ ERROR collecting tests/css/test_stylesheet.py _________________\ntests/css/test_stylesheet.py:5: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n_____________________ ERROR collecting tests/test_strip.py _____________________\ntests/test_strip.py:5: in <module>\n    from textual._segment_tools import NoCellPositionForIndex\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n_______________ ERROR collecting tests/test_style_properties.py ________________\ntests/test_style_properties.py:4: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nsrc/textual/color.py:137: in <module>\n    class Color(NamedTuple):\nsrc/textual/color.py:396: in Color\n    def parse(cls, color_text: str | Color) -> Color:\n/usr/local/lib/python3.10/functools.py:519: in decorating_function\n    wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\nE   TypeError: the first argument must be callable\n=========================== short test summary info ============================\nERROR tests/test_color.py - TypeError: the first argument must be callable\nERROR tests/test_style_importance.py - TypeError: the first argument must be ...\nERROR tests/animations/test_disabling_animations.py - TypeError: the first ar...\nERROR tests/css/test_nested_css.py - TypeError: the first argument must be ca...\nERROR tests/css/test_parse.py - TypeError: the first argument must be callable\nERROR tests/css/test_styles.py - TypeError: the first argument must be callable\nERROR docs/examples/guide/testing/test_rgb.py - TypeError: the first argument...\nERROR tests/css/test_initial.py - TypeError: the first argument must be callable\nERROR tests/css/test_inheritance.py - TypeError: the first argument must be c...\nERROR tests/test_line_filter.py - TypeError: the first argument must be callable\nERROR tests/test_styles_cache.py - TypeError: the first argument must be call...\nERROR tests/css/test_stylesheet.py - TypeError: the first argument must be ca...\nERROR tests/test_strip.py - TypeError: the first argument must be callable\nERROR tests/test_style_properties.py - TypeError: the first argument must be ...\n============================== 14 errors in 0.57s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_input_has_spaces\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_importance.py::test_outline_importance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_render_styles_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_hsla_negative_degrees\n\nERROR: found no collectors for /root/repos/py_data/textual/docs/examples/guide/testing/test_rgb.py::test_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_merge\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_line_filter.py::test_dim_apply\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_crop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_outline\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_css_property_names\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_hsl_negative_degrees\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_color_names\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_set_rule\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_dirty_cache\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_merge_rules\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_color\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_get_rules\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_color_property_parsing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_strip.py::test_apply_filter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_padding_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_parse_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_importance.py::test_border_importance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_gradient_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/docs/examples/guide/testing/test_rgb.py::test_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_no_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_padding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_reset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_property_names_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector_with_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_properties.py::test_box_normalization\n\n"], "textual-src/textual/_slug.py-slug": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 34 items\n\ntests/test_slug.py ..................FFFFFFFFFFFFFFFF                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_tracked_slugs[test-test] _________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\nexpected = 'test'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_______________________ test_tracked_slugs[test-test-1] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\nexpected = 'test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_______________________ test_tracked_slugs[test-test-2] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\nexpected = 'test-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n______________________ test_tracked_slugs[-test---test-] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = '-test-'\nexpected = '-test-'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = '-test-'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_____________________ test_tracked_slugs[-test---test--1] ______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = '-test-'\nexpected = '-test--1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = '-test-'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n____ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test] ____\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n___ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1] ___\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n____________________ test_tracked_slugs[t\\xebst-t%C3%ABst] _____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 't\u00ebst'\nexpected = 't%C3%ABst'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 't\u00ebst'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-1] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 't\u00ebst'\nexpected = 't%C3%ABst-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 't\u00ebst'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-2] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 't\u00ebst'\nexpected = 't%C3%ABst-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 't\u00ebst'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_______________ test_tracked_slugs[test\\U0001f642test-testtest] ________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test\ud83d\ude42test', expected = 'testtest'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test\ud83d\ude42test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n______________ test_tracked_slugs[test\\U0001f937test-testtest-1] _______________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test\ud83e\udd37test', expected = 'testtest-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test\ud83e\udd37test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_ test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2] _\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0ftest', expected = 'testtest-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>\ntext = 'test\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0ftest'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_______________________ test_tracked_slugs[test-test-3] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\nexpected = 'test-3'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n_______________________ test_tracked_slugs[test-test-4] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\nexpected = 'test-4'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = 'test'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n______________________ test_tracked_slugs[ test -test-5] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = ' test '\nexpected = 'test-5'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\n\ntests/test_slug.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._slug.TrackedSlugs object at 0x7f0c99dbf9a0>, text = '-test-'\n\n    def slug(self, text: str) -> str:\n        \"\"\"Create a Markdown-friendly unique slug from the given text.\n    \n        Args:\n            text: The text to generate a slug from.\n    \n        Returns:\n            A slug for the given text.\n        \"\"\"\n        # Convert the text to lowercase\n        text = text.lower()\n    \n        # Replace spaces with hyphens\n        text = text.replace(\" \", \"-\")\n    \n        # Remove any characters that are not alphanumeric or hyphens\n>       text = re.sub(r\"[^a-z0-9-]\", \"\", text)\nE       NameError: name 're' is not defined\n\nsrc/textual/_slug.py:118: NameError\n=========================== short test summary info ============================\nFAILED tests/test_slug.py::test_tracked_slugs[test-test] - NameError: name 'r...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-1] - NameError: name ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-2] - NameError: name ...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test-] - NameError: nam...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test--1] - NameError: n...\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test]\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1]\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst] - NameError:...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-1] - NameErro...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-2] - NameErro...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f642test-testtest] - ...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937test-testtest-1]\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2]\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-3] - NameError: name ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-4] - NameError: name ...\nFAILED tests/test_slug.py::test_tracked_slugs[ test -test-5] - NameError: nam...\n======================== 16 failed, 18 passed in 0.15s =========================\n\n"], "textual-src/textual/_styles_cache.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py FFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_no_styles ________________________________\n\n    def test_no_styles():\n        \"\"\"Test that empty style returns the content un-altered\"\"\"\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            \"\",\n            \"\",\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:38: TypeError\n_________________________________ test_padding _________________________________\n\n    def test_padding():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:102: TypeError\n_________________________________ test_border __________________________________\n\n    def test_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:68: TypeError\n_____________________________ test_padding_border ______________________________\n\n    def test_padding_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:137: TypeError\n__________________________________ test_crop ___________________________________\n\n    def test_crop():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n            crop=Region(2, 2, 3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:204: TypeError\n_________________________________ test_outline _________________________________\n\n    def test_outline():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.outline = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:173: TypeError\n_______________________________ test_dirty_cache _______________________________\n\n    def test_dirty_cache() -> None:\n        \"\"\"Check that we only render content once or if it has been marked as dirty.\"\"\"\n    \n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        rendered_lines: list[int] = []\n    \n        def get_content_line(y: int) -> Strip:\n            rendered_lines.append(y)\n            return content[y]\n    \n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            get_content_line,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       TypeError: StylesCache.render() got multiple values for argument 'content_size'\n\ntests/test_styles_cache.py:243: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_styles_cache.py::test_no_styles - TypeError: StylesCache.re...\nFAILED tests/test_styles_cache.py::test_padding - TypeError: StylesCache.rend...\nFAILED tests/test_styles_cache.py::test_border - TypeError: StylesCache.rende...\nFAILED tests/test_styles_cache.py::test_padding_border - TypeError: StylesCac...\nFAILED tests/test_styles_cache.py::test_crop - TypeError: StylesCache.render(...\nFAILED tests/test_styles_cache.py::test_outline - TypeError: StylesCache.rend...\nFAILED tests/test_styles_cache.py::test_dirty_cache - TypeError: StylesCache....\n============================== 7 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_document.py-replace_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n\ntests/document/test_wrapped_document.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f08799372b0>\nstart = (1, 0), end = (3, 0), text = '12 34567 8901'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        # Validate the start and end locations\n        if not isinstance(start, tuple) or len(start) != 2:\n            raise ValueError(\"Invalid start location\")\n        if not isinstance(end, tuple) or len(end) != 2:\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the row and column values from the start and end locations\n        start_row, start_col = start\n        end_row, end_col = end\n    \n        # Split the document into lines\n        lines = self.text.split('\\n')\n    \n        # Validate the start and end locations against the document\n        if start_row < 0 or start_row >= len(lines) or start_col < 0 or start_col > len(lines[start_row]):\n            raise ValueError(\"Invalid start location\")\n        if end_row < 0 or end_row >= len(lines) or end_col < 0 or end_col > len(lines[end_row]):\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the lines affected by the edit\n        affected_lines = lines[start_row:end_row+1]\n    \n        # Replace the text within the affected lines\n        affected_lines[0] = affected_lines[0][:start_col] + text + affected_lines[-1][end_col:]\n        affected_lines = affected_lines[:1] + [text] * (len(affected_lines) - 2) + affected_lines[-1:]\n    \n        # Update the lines in the document\n        lines[start_row:end_row+1] = affected_lines\n    \n        # Join the lines back into a single string\n>       self.text = '\\n'.join(lines)\nE       AttributeError: can't set attribute 'text'\n\nsrc/textual/document/_document.py:285: AttributeError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0874a81210>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        # Validate the start and end locations\n        if not isinstance(start, tuple) or len(start) != 2:\n            raise ValueError(\"Invalid start location\")\n        if not isinstance(end, tuple) or len(end) != 2:\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the row and column values from the start and end locations\n        start_row, start_col = start\n        end_row, end_col = end\n    \n        # Split the document into lines\n        lines = self.text.split('\\n')\n    \n        # Validate the start and end locations against the document\n        if start_row < 0 or start_row >= len(lines) or start_col < 0 or start_col > len(lines[start_row]):\n            raise ValueError(\"Invalid start location\")\n        if end_row < 0 or end_row >= len(lines) or end_col < 0 or end_col > len(lines[end_row]):\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the lines affected by the edit\n        affected_lines = lines[start_row:end_row+1]\n    \n        # Replace the text within the affected lines\n        affected_lines[0] = affected_lines[0][:start_col] + text + affected_lines[-1][end_col:]\n        affected_lines = affected_lines[:1] + [text] * (len(affected_lines) - 2) + affected_lines[-1:]\n    \n        # Update the lines in the document\n        lines[start_row:end_row+1] = affected_lines\n    \n        # Join the lines back into a single string\n>       self.text = '\\n'.join(lines)\nE       AttributeError: can't set attribute 'text'\n\nsrc/textual/document/_document.py:285: AttributeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0874a768c0>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        # Validate the start and end locations\n        if not isinstance(start, tuple) or len(start) != 2:\n            raise ValueError(\"Invalid start location\")\n        if not isinstance(end, tuple) or len(end) != 2:\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the row and column values from the start and end locations\n        start_row, start_col = start\n        end_row, end_col = end\n    \n        # Split the document into lines\n        lines = self.text.split('\\n')\n    \n        # Validate the start and end locations against the document\n        if start_row < 0 or start_row >= len(lines) or start_col < 0 or start_col > len(lines[start_row]):\n            raise ValueError(\"Invalid start location\")\n        if end_row < 0 or end_row >= len(lines) or end_col < 0 or end_col > len(lines[end_row]):\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the lines affected by the edit\n        affected_lines = lines[start_row:end_row+1]\n    \n        # Replace the text within the affected lines\n        affected_lines[0] = affected_lines[0][:start_col] + text + affected_lines[-1][end_col:]\n        affected_lines = affected_lines[:1] + [text] * (len(affected_lines) - 2) + affected_lines[-1:]\n    \n        # Update the lines in the document\n        lines[start_row:end_row+1] = affected_lines\n    \n        # Join the lines back into a single string\n>       self.text = '\\n'.join(lines)\nE       AttributeError: can't set attribute 'text'\n\nsrc/textual/document/_document.py:285: AttributeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(start_location, old_end_location, \"123\")\n\ntests/document/test_wrapped_document.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0874a815d0>\nstart = (1, 0), end = (3, 0), text = '123'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        # Validate the start and end locations\n        if not isinstance(start, tuple) or len(start) != 2:\n            raise ValueError(\"Invalid start location\")\n        if not isinstance(end, tuple) or len(end) != 2:\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the row and column values from the start and end locations\n        start_row, start_col = start\n        end_row, end_col = end\n    \n        # Split the document into lines\n        lines = self.text.split('\\n')\n    \n        # Validate the start and end locations against the document\n        if start_row < 0 or start_row >= len(lines) or start_col < 0 or start_col > len(lines[start_row]):\n            raise ValueError(\"Invalid start location\")\n        if end_row < 0 or end_row >= len(lines) or end_col < 0 or end_col > len(lines[end_row]):\n            raise ValueError(\"Invalid end location\")\n    \n        # Extract the lines affected by the edit\n        affected_lines = lines[start_row:end_row+1]\n    \n        # Replace the text within the affected lines\n        affected_lines[0] = affected_lines[0][:start_col] + text + affected_lines[-1][end_col:]\n        affected_lines = affected_lines[:1] + [text] * (len(affected_lines) - 2) + affected_lines[-1:]\n    \n        # Update the lines in the document\n        lines[start_row:end_row+1] = affected_lines\n    \n        # Join the lines back into a single string\n>       self.text = '\\n'.join(lines)\nE       AttributeError: can't set attribute 'text'\n\nsrc/textual/document/_document.py:285: AttributeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - Attribut...\n============================== 4 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-wrap_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location, old_end_location, edit_result.end_location\n        )\n\ntests/document/test_wrapped_document.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7fba184dae60>\nstart = (1, 0), old_end = (3, 0), new_end = (1, 13)\n\n    def wrap_range(self, start, old_end, new_end):\n        if start > old_end or start > new_end or old_end > new_end:\n>           raise ValueError(\"Invalid range\")\nE           ValueError: Invalid range\n\nsrc/textual/document/_wrapped_document.py:158: ValueError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n        edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n>       wrapped_document.wrap_range((3, 0), (3, 0), edit_result.end_location)\n\ntests/document/test_wrapped_document.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7fba17e1de70>\nstart = (3, 0), old_end = (3, 0), new_end = (5, 2)\n\n    def wrap_range(self, start, old_end, new_end):\n        if start > old_end or start > new_end or old_end > new_end:\n            raise ValueError(\"Invalid range\")\n    \n        # Find the line numbers corresponding to the start and end locations\n>       start_line = self.source.coord_to_line(start)\nE       AttributeError: 'WrappedDocument' object has no attribute 'source'\n\nsrc/textual/document/_wrapped_document.py:161: AttributeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n>       wrapped_document.wrap_range((3, 0), (3, 0), edit_result.end_location)\n\ntests/document/test_wrapped_document.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7fba17e30700>\nstart = (3, 0), old_end = (3, 0), new_end = (5, 2)\n\n    def wrap_range(self, start, old_end, new_end):\n        if start > old_end or start > new_end or old_end > new_end:\n            raise ValueError(\"Invalid range\")\n    \n        # Find the line numbers corresponding to the start and end locations\n>       start_line = self.source.coord_to_line(start)\nE       AttributeError: 'WrappedDocument' object has no attribute 'source'\n\nsrc/textual/document/_wrapped_document.py:161: AttributeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(start_location, old_end_location, \"123\")\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location,\n            old_end_location,\n            edit_result.end_location,\n        )\n\ntests/document/test_wrapped_document.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7fba17e22aa0>\nstart = (1, 0), old_end = (3, 0), new_end = (1, 3)\n\n    def wrap_range(self, start, old_end, new_end):\n        if start > old_end or start > new_end or old_end > new_end:\n>           raise ValueError(\"Invalid range\")\nE           ValueError: Invalid range\n\nsrc/textual/document/_wrapped_document.py:158: ValueError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - ValueErr...\n============================== 4 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-offset_to_location": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/document/test_wrapped_document.py FFFFFFFFFFFFFFFFFF               [100%]\n\n=================================== FAILURES ===================================\n_________ test_offset_to_location_wrapping_enabled[offset0-location0] __________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9dea0ca0>\noffset = Offset(x=0, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset1-location1] __________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9de87e50>\noffset = Offset(x=1, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset2-location2] __________\n\noffset = Offset(x=2, y=1), location = (0, 6)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9dea2830>\noffset = Offset(x=2, y=1)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset3-location3] __________\n\noffset = Offset(x=0, y=3), location = (1, 4)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04b430>\noffset = Offset(x=0, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset4-location4] __________\n\noffset = Offset(x=1, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9ddd3d00>\noffset = Offset(x=1, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset5-location5] __________\n\noffset = Offset(x=200, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04b790>\noffset = Offset(x=200, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset6-location6] __________\n\noffset = Offset(x=0, y=6), location = (2, 8)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9ddd12a0>\noffset = Offset(x=0, y=6)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset7-location7] __________\n\noffset = Offset(x=0, y=7), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04a890>\noffset = Offset(x=0, y=7)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset8-location8] __________\n\noffset = Offset(x=0, y=1000), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9ddd0e20>\noffset = Offset(x=0, y=1000)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0] _\n\noffset = Offset(x=-3, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04b070>\noffset = Offset(x=-3, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1] _\n\noffset = Offset(x=0, y=-10), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9dd8bf10>\noffset = Offset(x=0, y=-10)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset0-location0] _________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04b910>\noffset = Offset(x=0, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset1-location1] _________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e54f940>\noffset = Offset(x=1, y=0)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset2-location2] _________\n\noffset = Offset(x=2, y=1), location = (1, 2)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04b3a0>\noffset = Offset(x=2, y=1)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset3-location3] _________\n\noffset = Offset(x=0, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9dea3be0>\noffset = Offset(x=0, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset4-location4] _________\n\noffset = Offset(x=1, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04a5c0>\noffset = Offset(x=1, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset5-location5] _________\n\noffset = Offset(x=200, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e466800>\noffset = Offset(x=200, y=3)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset6-location6] _________\n\noffset = Offset(x=200, y=200), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f5f9e04b130>\noffset = Offset(x=200, y=200)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        line_index = 0\n        for line_index, line in enumerate(self.lines):\n>           if offset < line.display_offset:\nE           AttributeError: 'list' object has no attribute 'display_offset'\n\nsrc/textual/document/_wrapped_document.py:293: AttributeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset6-location6]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset7-location7]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset8-location8]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset6-location6]\n============================== 18 failed in 0.23s ==============================\n\n"], "textual-src/textual/css/parse.py-substitute_references": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_multi_value_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_reference_whitespace_trimming\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_transitive_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference_no_whitespace\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_definition_eof\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_empty_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_used_inside_property_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_undefined_variable\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/parse.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/css/test_nested_css.py FFFFFFFFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502  event = Compose()                                            \u2502            \u2502\n\u2502 \u2502 screen = Screen(id='_default')                                \u2502            \u2502\n\u2502 \u2502   self = NestedApp(title='NestedApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'NestedApp.CSS'),                                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502             self = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'NestedApp.CSS'                            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'NestedApp.CSS'                                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'NestedApp.CSS'                                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fdc3af11f80>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = PseudoClassesInNestedApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='PseudoClassesInNestedApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'PseudoClassesInNestedApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fdc3a8f2800>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                          \u2502\n\u2502 \u2502  event = Compose()                              \u2502                          \u2502\n\u2502 \u2502 screen = Screen(id='_default')                  \u2502                          \u2502\n\u2502 \u2502   self = DeclarationAfterNestedApp(             \u2502                          \u2502\n\u2502 \u2502          \u2502   title='DeclarationAfterNestedApp', \u2502                          \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}             \u2502                          \u2502\n\u2502 \u2502          )                                      \u2502                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'DeclarationAfterNestedApp.CSS'),                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fdc3ad7a240>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = ListOfNestedSelectorsApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='ListOfNestedSelectorsApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'ListOfNestedSelectorsApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fdc3b0aeb80>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_parse_errors[Selector {-EOFError] ____________________\n\ncss = 'Selector {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {-EOFError] __________________\n\ncss = 'Selector{ Foo {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {}-EOFError] _________________\n\ncss = 'Selector{ Foo {}', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n______________________ test_parse_errors[> {}-TokenError] ______________________\n\ncss = '> {}', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&-TokenError] ________________________\n\ncss = '&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&&-TokenError] _______________________\n\ncss = '&&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[&.foo-TokenError] ______________________\n\ncss = '&.foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[& .foo-TokenError] _____________________\n\ncss = '& .foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[{-TokenError] ________________________\n\ncss = '{', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n________________________ test_parse_errors[*{-EOFError] ________________________\n\ncss = '*{', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n=============================== warnings summary ===============================\ntests/css/test_nested_css.py::test_nest_app\ntests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\ntests/css/test_nested_css.py::test_rule_declaration_after_nested\ntests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_nested_css.py::test_nest_app\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_nested_css.py::test_nest_app - textual.css.errors.Style...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - tex...\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {}-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[> {}-TokenError] - Typ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&&-TokenError] - TypeE...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&.foo-TokenError] - Ty...\nFAILED tests/css/test_nested_css.py::test_parse_errors[& .foo-TokenError] - T...\nFAILED tests/css/test_nested_css.py::test_parse_errors[{-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[*{-EOFError] - TypeErr...\n======================== 14 failed, 5 warnings in 1.87s ========================\n\n"], "textual-src/textual/css/stylesheet.py-_parse_rules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/stylesheet.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n(no match in any of [<Module test_parse.py>])\n\n"], "gpt-engineer-gpt_engineer/core/chat_to_files.py-parse_diffs": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/core/test_chat_to_files.py FFFFFFFF                                [100%]\n\n=================================== FAILURES ===================================\n_______________ test_correct_skipped_lines_and_number_correction _______________\n\n    def test_correct_skipped_lines_and_number_correction():\n        distorted_example = insert_string_in_lined_string(\n            file_example, \"#\\n#comment\\n#\\n#\", 14\n        )\n>       diffs = parse_diffs(example_line_dist_diff)\n\ntests/core/test_chat_to_files.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ondition\\n         evaluating next step:\\n-            execute step Y\\n+            revised execution of step Y\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n__________________________ test_diff_adding_one_file ___________________________\n\n    def test_diff_adding_one_file():\n>       add_diff = parse_diffs(add_example)\n\ntests/core/test_chat_to_files.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nUninteresting stuff\\n```diff\\n--- /dev/null\\n+++ new_file.txt\\n@@ -0,0 +1,3 @@\\n+First example line\\n+\\n+Last example line\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n_________________________ test_diff_changing_two_files _________________________\n\n    def test_diff_changing_two_files():\n>       merged_diff = parse_diffs(example_diff + add_example)\n\ntests/core/test_chat_to_files.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ng stuff\\n```diff\\n--- /dev/null\\n+++ new_file.txt\\n@@ -0,0 +1,3 @@\\n+First example line\\n+\\n+Last example line\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n________________________ test_correct_distorted_numbers ________________________\n\n    def test_correct_distorted_numbers():\n        lines_dict = file_to_lines_dict(file_example)\n>       diffs = parse_diffs(example_line_dist_diff)\n\ntests/core/test_chat_to_files.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ondition\\n         evaluating next step:\\n-            execute step Y\\n+            revised execution of step Y\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n_______________________________ test_diff_regex ________________________________\n\n    def test_diff_regex():\n>       diff = parse_diffs(example_diff)\n\ntests/core/test_chat_to_files.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ondition\\n         evaluating next step:\\n-            execute step Y\\n+            revised execution of step Y\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n__________________________ test_correct_skipped_lines __________________________\n\n    def test_correct_skipped_lines():\n        distorted_example = insert_string_in_lined_string(\n            file_example, \"#\\n#comment\\n#\\n#\", 14\n        )\n>       diffs = parse_diffs(example_diff)\n\ntests/core/test_chat_to_files.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ondition\\n         evaluating next step:\\n-            execute step Y\\n+            revised execution of step Y\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n__________________________ test_validate_diff_correct __________________________\n\n    def test_validate_diff_correct():\n        lines_dict = file_to_lines_dict(file_example)\n>       diffs = parse_diffs(example_diff)\n\ntests/core/test_chat_to_files.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ondition\\n         evaluating next step:\\n-            execute step Y\\n+            revised execution of step Y\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n_________________________ test_diff_changing_one_file __________________________\n\n    def test_diff_changing_one_file():\n>       diffs = parse_diffs(example_diff)\n\ntests/core/test_chat_to_files.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndiff_string = '\\nIrrelevant line to be ignored\\n\\nanother irrelevant line to be ignored\\n```diff\\n--- example.txt\\n+++ example.txt\\n...ondition\\n         evaluating next step:\\n-            execute step Y\\n+            revised execution of step Y\\n```\\n'\n\n    def parse_diffs(diff_string: str) -> dict:\n        diff_dict = defaultdict(Diff)\n        current_diff = None\n    \n        lines = diff_string.split('\\n')\n        for line in lines:\n            if line.startswith('diff --git'):\n                if current_diff:\n                    diff_dict[current_diff.filename] = current_diff\n                filename = re.findall(r'b/(.+?)$', line)[0]\n                current_diff = Diff(filename)\n            elif line.startswith('@@'):\n                continue\n            elif line.startswith('+'):\n                current_diff.added_lines.append(line[1:])\n            elif line.startswith('-'):\n>               current_diff.removed_lines.append(line[1:])\nE               AttributeError: 'NoneType' object has no attribute 'removed_lines'\n\ngpt_engineer/core/chat_to_files.py:148: AttributeError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_correct_skipped_lines_and_number_correction\nFAILED tests/core/test_chat_to_files.py::test_diff_adding_one_file - Attribut...\nFAILED tests/core/test_chat_to_files.py::test_diff_changing_two_files - Attri...\nFAILED tests/core/test_chat_to_files.py::test_correct_distorted_numbers - Att...\nFAILED tests/core/test_chat_to_files.py::test_diff_regex - AttributeError: 'N...\nFAILED tests/core/test_chat_to_files.py::test_correct_skipped_lines - Attribu...\nFAILED tests/core/test_chat_to_files.py::test_validate_diff_correct - Attribu...\nFAILED tests/core/test_chat_to_files.py::test_diff_changing_one_file - Attrib...\n============================== 8 failed in 0.10s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-start": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/core/test_ai.py FFF                                                [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_start __________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f5993598670>\n\n    def test_start(monkeypatch):\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7f59d326ef20>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n>       self.reset()\nE       AttributeError: 'AI' object has no attribute 'reset'\n\ngpt_engineer/core/ai.py:121: AttributeError\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f5993676080>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7f5993676020>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n>       self.reset()\nE       AttributeError: 'AI' object has no attribute 'reset'\n\ngpt_engineer/core/ai.py:121: AttributeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f599359b9d0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7f599359b430>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n>       self.reset()\nE       AttributeError: 'AI' object has no attribute 'reset'\n\ngpt_engineer/core/ai.py:121: AttributeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_start - AttributeError: 'AI' object has no...\nFAILED tests/core/test_ai.py::test_token_logging - AttributeError: 'AI' objec...\nFAILED tests/core/test_ai.py::test_next - AttributeError: 'AI' object has no ...\n============================== 3 failed in 0.87s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/core/test_ai.py FF                                                 [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5ddadc4f0>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:143: in start\n    return self.next(messages, step_name=step_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmessages = <gpt_engineer.core.ai.AI object at 0x7fd5ddadc400>\nprompt = [SystemMessage(content='system prompt'), HumanMessage(content='user prompt')]\nstep_name = 'step name'\n\n    def next(messages: List[Message], prompt: Optional[str] = None, step_name: str = \"\") -> List[Message]:\n        # Prepare the conversation history for the LLM\n>       conversation_history = [{\"role\": message.role, \"content\": message.content} for message in messages]\nE       TypeError: 'AI' object is not iterable\n\ngpt_engineer/core/ai.py:208: TypeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5dd2f9cc0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:143: in start\n    return self.next(messages, step_name=step_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmessages = <gpt_engineer.core.ai.AI object at 0x7fd5dd2f9c60>\nprompt = [SystemMessage(content='system prompt'), HumanMessage(content='user prompt')]\nstep_name = 'step name'\n\n    def next(messages: List[Message], prompt: Optional[str] = None, step_name: str = \"\") -> List[Message]:\n        # Prepare the conversation history for the LLM\n>       conversation_history = [{\"role\": message.role, \"content\": message.content} for message in messages]\nE       TypeError: 'AI' object is not iterable\n\ngpt_engineer/core/ai.py:208: TypeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_token_logging - TypeError: 'AI' object is ...\nFAILED tests/core/test_ai.py::test_next - TypeError: 'AI' object is not iterable\n============================== 2 failed in 0.87s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/project_config.py-to_toml": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/test_project_config.py FFFF                                        [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_config_defaults _____________________________\n\n    def test_config_defaults():\n        config = Config()\n        assert config.paths.base is None\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n>           config.to_toml(f.name)\n\ntests/test_project_config.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Config(paths=_PathsConfig(base=None, src=None), run=_RunConfig(build=None, test=None, lint=None, format=None), gptengineer_app=None)\nconfig_file = '/tmp/tmpffxujjf_', save = True\n\n    def to_toml(self, config_file: Path | str, save=True) -> str:\n        \"\"\"Write the configuration to a TOML file.\"\"\"\n>       config = self._config.copy()\nE       AttributeError: 'Config' object has no attribute '_config'\n\ngpt_engineer/core/project_config.py:124: AttributeError\n___________________________ test_config_load_partial ___________________________\n\n    def test_config_load_partial():\n        # Loads a partial config, and checks that the rest is not set (i.e. None)\n        example_config = \"\"\"\n    [gptengineer-app]\n    project_id = \"...\"\n    \"\"\".strip()\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n            f.write(example_config)\n    \n        config = Config.from_toml(f.name)\n        assert config.gptengineer_app\n        assert config.gptengineer_app.project_id == \"...\"\n        assert config.to_dict()\n>       toml_str = config.to_toml(f.name, save=False)\n\ntests/test_project_config.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Config(paths=_PathsConfig(base=None, src=None), run=_RunConfig(build=None, test=None, lint=None, format=None), gptengineer_app=_GptEngineerAppConfig(project_id='...', openapi=None))\nconfig_file = '/tmp/tmp3opvzqpk', save = False\n\n    def to_toml(self, config_file: Path | str, save=True) -> str:\n        \"\"\"Write the configuration to a TOML file.\"\"\"\n>       config = self._config.copy()\nE       AttributeError: 'Config' object has no attribute '_config'\n\ngpt_engineer/core/project_config.py:124: AttributeError\n______________________________ test_config_update ______________________________\n\n    def test_config_update():\n        example_config = \"\"\"\n    [gptengineer-app]\n    project_id = \"...\"\n    \"\"\".strip()\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n            f.write(example_config)\n        config = Config.from_toml(f.name)\n        config.gptengineer_app = _GptEngineerAppConfig(\n            project_id=\"...\",\n            openapi=[_OpenApiConfig(url=\"https://api.gptengineer.app/openapi.json\")],\n        )\n>       config.to_toml(f.name)\n\ntests/test_project_config.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Config(paths=_PathsConfig(base=None, src=None), run=_RunConfig(build=None, test=None, lint=None, format=None), gptengi..._app=_GptEngineerAppConfig(project_id='...', openapi=[_OpenApiConfig(url='https://api.gptengineer.app/openapi.json')]))\nconfig_file = '/tmp/tmpfukwgjjx', save = True\n\n    def to_toml(self, config_file: Path | str, save=True) -> str:\n        \"\"\"Write the configuration to a TOML file.\"\"\"\n>       config = self._config.copy()\nE       AttributeError: 'Config' object has no attribute '_config'\n\ngpt_engineer/core/project_config.py:124: AttributeError\n_______________________________ test_config_load _______________________________\n\n    def test_config_load():\n        # write example config to a file\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n            f.write(example_config)\n    \n        # load the config from the file\n        config = Config.from_toml(f.name)\n    \n        assert config.paths.base == \"./frontend\"\n        assert config.paths.src == \"./src\"\n        assert config.run.build == \"npm run build\"\n        assert config.run.test == \"npm run test\"\n        assert config.run.lint == \"quick-lint-js\"\n        assert config.gptengineer_app\n        assert config.gptengineer_app.project_id == \"...\"\n        assert config.gptengineer_app.openapi\n        assert (\n            config.gptengineer_app.openapi[0].url\n            == \"https://api.gptengineer.app/openapi.json\"\n        )\n        assert (\n            config.gptengineer_app.openapi[1].url\n            == \"https://some-color-translating-api/openapi.json\"\n        )\n        assert config.to_dict()\n>       assert config.to_toml(f.name, save=False)\n\ntests/test_project_config.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Config(paths=_PathsConfig(base='./frontend', src='./src'), run=_RunConfig(build='npm run build', test='npm run test', ...l='https://api.gptengineer.app/openapi.json'), _OpenApiConfig(url='https://some-color-translating-api/openapi.json')]))\nconfig_file = '/tmp/tmphasi2cb3', save = False\n\n    def to_toml(self, config_file: Path | str, save=True) -> str:\n        \"\"\"Write the configuration to a TOML file.\"\"\"\n>       config = self._config.copy()\nE       AttributeError: 'Config' object has no attribute '_config'\n\ngpt_engineer/core/project_config.py:124: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_project_config.py::test_config_defaults - AttributeError: '...\nFAILED tests/test_project_config.py::test_config_load_partial - AttributeErro...\nFAILED tests/test_project_config.py::test_config_update - AttributeError: 'Co...\nFAILED tests/test_project_config.py::test_config_load - AttributeError: 'Conf...\n============================== 4 failed in 0.07s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/diff.py-is_similar": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/core/test_chat_to_files.py F.FF                                    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_length_and_character_frequency ______________________\n\n    def test_length_and_character_frequency():\n>       assert is_similar(\"aabbc\", \"bacba\")\nE       AssertionError: assert False\nE        +  where False = is_similar('aabbc', 'bacba')\n\ntests/core/test_chat_to_files.py:163: AssertionError\n____________________________ test_basic_similarity _____________________________\n\n    def test_basic_similarity():\n>       assert is_similar(\"abc\", \"cab\")\nE       AssertionError: assert False\nE        +  where False = is_similar('abc', 'cab')\n\ntests/core/test_chat_to_files.py:153: AssertionError\n____________________ test_case_insensitivity_and_whitespace ____________________\n\n    def test_case_insensitivity_and_whitespace():\n>       assert is_similar(\"A b C\", \"c a b\")\nE       AssertionError: assert False\nE        +  where False = is_similar('A b C', 'c a b')\n\ntests/core/test_chat_to_files.py:158: AssertionError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_length_and_character_frequency\nFAILED tests/core/test_chat_to_files.py::test_basic_similarity - AssertionErr...\nFAILED tests/core/test_chat_to_files.py::test_case_insensitivity_and_whitespace\n========================= 3 failed, 1 passed in 0.06s ==========================\n\n"]}