{"litestar-litestar/file_system.py-info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 8 items\n\ntests/unit/test_file_system.py FF                                        [ 25%]\ntests/unit/test_response/test_file_response.py F                         [ 37%]\ntests/unit/test_file_system.py F.                                        [ 62%]\ntests/unit/test_response/test_file_response.py .                         [ 75%]\ntests/unit/test_file_system.py F.                                        [100%]\n\n=================================== FAILURES ===================================\n______ test_file_adapter_info_handles_permission_exception[file_system0] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2037/test_file_adapter_info_handles0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7fc52398a770>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n______ test_file_adapter_info_handles_permission_exception[file_system1] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2037/test_file_adapter_info_handles1')\nfile_system = <fsspec.implementations.local.LocalFileSystem object at 0x7fc52398a200>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n_________________________ test_file_with_symbolic_link _________________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2037/test_file_with_symbolic_link0')\n\n    async def test_file_with_symbolic_link(tmpdir: \"Path\") -> None:\n        path = tmpdir / \"text.txt\"\n        path.write_text(\"content\", \"utf-8\")\n    \n        linked = tmpdir / \"alt.txt\"\n        os.symlink(path, linked, target_is_directory=False)\n    \n        fs = BaseLocalFileSystem()\n>       file_info = await fs.info(linked)\nE       TypeError: object NoneType can't be used in 'await' expression\n\ntests/unit/test_response/test_file_response.py:203: TypeError\n____ test_file_adapter_info_handles_file_not_found_exception[file_system0] _____\n\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7fc523989f60>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    async def test_file_adapter_info_handles_file_not_found_exception(file_system: \"FileSystemProtocol\") -> None:\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(FileNotFoundError):\nE       Failed: DID NOT RAISE <class 'FileNotFoundError'>\n\ntests/unit/test_file_system.py:80: Failed\n_____________________ test_file_adapter_info[file_system0] _____________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2037/test_file_adapter_info_file_sy0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7fc52398ab30>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"Suspected fsspec issue\", strict=False)\n    async def test_file_adapter_info(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        result = file.stat()\n    \n>       assert await adapter.info(file) == {\n            \"gid\": result.st_gid,\n            \"ino\": result.st_ino,\n            \"islink\": False,\n            \"mode\": result.st_mode,\n            \"mtime\": result.st_mtime,\n            \"name\": str(file),\n            \"nlink\": 1,\n            \"created\": result.st_ctime,\n            \"size\": result.st_size,\n            \"type\": \"file\",\n            \"uid\": result.st_uid,\n        }\nE       AssertionError: assert None == {'created': 1725808518.3073907, 'gid': 0, 'ino': 60720543, 'islink': False, ...}\n\ntests/unit/test_file_system.py:61: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system1]\nFAILED tests/unit/test_response/test_file_response.py::test_file_with_symbolic_link\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_file_not_found_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info[file_system0]\n========================= 5 failed, 3 passed in 0.20s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 8 items\n\ntests/unit/test_file_system.py FF                                        [ 25%]\ntests/unit/test_response/test_file_response.py F                         [ 37%]\ntests/unit/test_file_system.py F.                                        [ 62%]\ntests/unit/test_response/test_file_response.py .                         [ 75%]\ntests/unit/test_file_system.py F.                                        [100%]\n\n=================================== FAILURES ===================================\n______ test_file_adapter_info_handles_permission_exception[file_system0] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2038/test_file_adapter_info_handles0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f052e393850>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n______ test_file_adapter_info_handles_permission_exception[file_system1] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2038/test_file_adapter_info_handles1')\nfile_system = <fsspec.implementations.local.LocalFileSystem object at 0x7f052e3912a0>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n_________________________ test_file_with_symbolic_link _________________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2038/test_file_with_symbolic_link0')\n\n    async def test_file_with_symbolic_link(tmpdir: \"Path\") -> None:\n        path = tmpdir / \"text.txt\"\n        path.write_text(\"content\", \"utf-8\")\n    \n        linked = tmpdir / \"alt.txt\"\n        os.symlink(path, linked, target_is_directory=False)\n    \n        fs = BaseLocalFileSystem()\n>       file_info = await fs.info(linked)\nE       TypeError: object NoneType can't be used in 'await' expression\n\ntests/unit/test_response/test_file_response.py:203: TypeError\n____ test_file_adapter_info_handles_file_not_found_exception[file_system0] _____\n\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f052e390880>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    async def test_file_adapter_info_handles_file_not_found_exception(file_system: \"FileSystemProtocol\") -> None:\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(FileNotFoundError):\nE       Failed: DID NOT RAISE <class 'FileNotFoundError'>\n\ntests/unit/test_file_system.py:80: Failed\n_____________________ test_file_adapter_info[file_system0] _____________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2038/test_file_adapter_info_file_sy0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f052e392950>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"Suspected fsspec issue\", strict=False)\n    async def test_file_adapter_info(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        result = file.stat()\n    \n>       assert await adapter.info(file) == {\n            \"gid\": result.st_gid,\n            \"ino\": result.st_ino,\n            \"islink\": False,\n            \"mode\": result.st_mode,\n            \"mtime\": result.st_mtime,\n            \"name\": str(file),\n            \"nlink\": 1,\n            \"created\": result.st_ctime,\n            \"size\": result.st_size,\n            \"type\": \"file\",\n            \"uid\": result.st_uid,\n        }\nE       AssertionError: assert None == {'created': 1725808519.3113961, 'gid': 0, 'ino': 59429991, 'islink': False, ...}\n\ntests/unit/test_file_system.py:61: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system1]\nFAILED tests/unit/test_response/test_file_response.py::test_file_with_symbolic_link\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_file_not_found_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info[file_system0]\n========================= 5 failed, 3 passed in 0.17s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 3, in <module>\n    from .http_handlers import HTTPRouteHandler, delete, get, head, patch, post, put, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/__init__.py\", line 3, in <module>\n    from .base import HTTPRouteHandler, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/base.py\", line 16, in <module>\n    from litestar.handlers.http_handlers._utils import (\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/_utils.py\", line 9, in <module>\n    from litestar.response import Response\n  File \"/root/repos/py_data/litestar/litestar/response/__init__.py\", line 2, in <module>\n    from .file import File\n  File \"/root/repos/py_data/litestar/litestar/response/file.py\", line 13, in <module>\n    from litestar.file_system import BaseLocalFileSystem, FileSystemAdapter\n  File \"/root/repos/py_data/litestar/litestar/file_system.py\", line 25, in <module>\n    class BaseLocalFileSystem(FileSystemProtocol):\n  File \"/root/repos/py_data/litestar/litestar/file_system.py\", line 28, in BaseLocalFileSystem\n    from typing import Any, Dict, PathType\nImportError: cannot import name 'PathType' from 'typing' (/usr/local/lib/python3.10/typing.py)\n\n\n"], "litestar-litestar/typing.py-has_inner_subclass_of": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 169, in <module>\n    class FieldDefinition:\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 461, in FieldDefinition\n    from typing import Any, get_origin, get_args, issubclass\nImportError: cannot import name 'issubclass' from 'typing' (/usr/local/lib/python3.10/typing.py)\n\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n____________ test_backend_iterable_annotation[experimental_backend] ____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_iterable_annotation(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n        backend = DTOBackend(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        field_definition = FieldDefinition.from_annotation(backend.annotation)\n        assert field_definition.origin is list\n>       assert field_definition.has_inner_subclass_of(Struct)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FieldDefinition(raw=typing.List[litestar.dto._backend.TestDCRequestBody], annotation=typing.List[litestar.dto._backend..., extra={}, kwarg_definition=None, name=''),), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\ncl = <class 'msgspec.Struct'>\n\n    def has_inner_subclass_of(self, cl: type[Any] | tuple[type[Any], ...]) -> bool:\n        \"\"\"\n        Whether any generic args are a subclass of the given type.\n    \n        Args:\n            cl: The type to check, or tuple of types. Passed as 2nd argument to ``issubclass()``.\n    \n        Returns:\n            Whether any of the type's generic args are a subclass of the given type.\n        \"\"\"\n>       return any(issubclass(arg, cl) for arg in self.__args__)\nE       AttributeError: 'FieldDefinition' object has no attribute '__args__'\n\nlitestar/typing.py:471: AttributeError\n______________ test_backend_iterable_annotation[default_backend] _______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_iterable_annotation(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n        backend = DTOBackend(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        field_definition = FieldDefinition.from_annotation(backend.annotation)\n        assert field_definition.origin is list\n>       assert field_definition.has_inner_subclass_of(Struct)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FieldDefinition(raw=typing.List[litestar.dto._backend.TestDCRequestBody], annotation=typing.List[litestar.dto._backend..., extra={}, kwarg_definition=None, name=''),), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\ncl = <class 'msgspec.Struct'>\n\n    def has_inner_subclass_of(self, cl: type[Any] | tuple[type[Any], ...]) -> bool:\n        \"\"\"\n        Whether any generic args are a subclass of the given type.\n    \n        Args:\n            cl: The type to check, or tuple of types. Passed as 2nd argument to ``issubclass()``.\n    \n        Returns:\n            Whether any of the type's generic args are a subclass of the given type.\n        \"\"\"\n>       return any(issubclass(arg, cl) for arg in self.__args__)\nE       AttributeError: 'FieldDefinition' object has no attribute '__args__'\n\nlitestar/typing.py:471: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_iterable_annotation[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_iterable_annotation[default_backend]\n============================== 2 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n____________ test_backend_iterable_annotation[experimental_backend] ____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_iterable_annotation(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n        backend = DTOBackend(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        field_definition = FieldDefinition.from_annotation(backend.annotation)\n        assert field_definition.origin is list\n>       assert field_definition.has_inner_subclass_of(Struct)\nE       AttributeError: 'FieldDefinition' object has no attribute 'has_inner_subclass_of'\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:164: AttributeError\n______________ test_backend_iterable_annotation[default_backend] _______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_iterable_annotation(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n        backend = DTOBackend(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        field_definition = FieldDefinition.from_annotation(backend.annotation)\n        assert field_definition.origin is list\n>       assert field_definition.has_inner_subclass_of(Struct)\nE       AttributeError: 'FieldDefinition' object has no attribute 'has_inner_subclass_of'\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:164: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_iterable_annotation[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_iterable_annotation[default_backend]\n============================== 2 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-get_type_hints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_typing.py .                                              [100%]\n\n============================== 1 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_typing.py .                                              [100%]\n\n============================== 1 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_typing.py .                                              [100%]\n\n============================== 1 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-from_kwarg": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 569\n    from typing import Any, Tuple\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 569\n    from typing import Any, Tuple\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 569\n    from typing import Any, Tuple\n    ^^^^\nSyntaxError: invalid syntax\n\n\n"], "litestar-litestar/typing.py-from_parameter": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 608\n    from inspect import Parameter\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 608\n    from typing import Any, Dict\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 25, in <module>\n    from litestar.dto._types import (\n  File \"/root/repos/py_data/litestar/litestar/dto/_types.py\", line 6, in <module>\n    from litestar.dto.data_structures import DTOFieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/dto/data_structures.py\", line 6, in <module>\n    from litestar.typing import FieldDefinition\n  File \"/root/repos/py_data/litestar/litestar/typing.py\", line 608\n    from typing import Any\n    ^^^^\nSyntaxError: invalid syntax\n\n\n"], "litestar-litestar/_openapi/responses.py-create_success_response": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 9, in <module>\n    from litestar._openapi.responses import create_responses_for_handler\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 66, in <module>\n    class ResponseFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 119, in ResponseFactory\n    from litestar import OpenAPIResponse\nImportError: cannot import name 'OpenAPIResponse' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 9, in <module>\n    from litestar._openapi.responses import create_responses_for_handler\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 66, in <module>\n    class ResponseFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 119, in ResponseFactory\n    from litestar import OpenAPIResponse\nImportError: cannot import name 'OpenAPIResponse' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n__________________ test_create_response_for_response_subclass __________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f9d62f01cf0>\n\n    def test_create_response_for_response_subclass(create_factory: CreateFactoryFixture) -> None:\n        class CustomResponse(Response[T]):\n            pass\n    \n        @get(path=\"/test\", name=\"test\", signature_types=[CustomResponse])\n        def handler() -> CustomResponse[DataclassPerson]:\n            return CustomResponse(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n>       response = factory.create_success_response()\n\ntests/unit/test_openapi/test_responses.py:475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f9d62f1ff70>\n\n    def create_success_response(self) -> OpenAPIResponse:\n        \"\"\"\n        Create the schema for a success response.\n    \n        Returns:\n            OpenAPIResponse: The schema for a success response.\n        \"\"\"\n        # The implementation of this function is not provided in the given information.\n        # It is assumed that the implementation will be similar to the existing functions in the same file.\n        # For example, it might involve creating a new OpenAPIResponse object and setting its fields accordingly.\n        # For now, it will just return a basic OpenAPIResponse object.\n>       return OpenAPIResponse()\nE       TypeError: OpenAPIResponse.__init__() missing 1 required positional argument: 'description'\n\nlitestar/_openapi/responses.py:130: TypeError\n______________________ test_response_generation_with_dto _______________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f9d62f029e0>\n\n    def test_response_generation_with_dto(create_factory: CreateFactoryFixture) -> None:\n        mock_dto = MagicMock(spec=AbstractDTO)\n        mock_dto.create_openapi_schema.return_value = Schema()\n    \n        @post(path=\"/form-upload\", return_dto=mock_dto)  # pyright: ignore\n        async def handler(data: Dict[str, Any]) -> Dict[str, Any]:\n            return data\n    \n        Litestar(route_handlers=[handler])\n    \n        factory = create_factory(handler)\n        field_definition = FieldDefinition.from_annotation(Dict[str, Any])\n>       factory.create_success_response()\n\ntests/unit/test_openapi/test_responses.py:515: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f9d62599a50>\n\n    def create_success_response(self) -> OpenAPIResponse:\n        \"\"\"\n        Create the schema for a success response.\n    \n        Returns:\n            OpenAPIResponse: The schema for a success response.\n        \"\"\"\n        # The implementation of this function is not provided in the given information.\n        # It is assumed that the implementation will be similar to the existing functions in the same file.\n        # For example, it might involve creating a new OpenAPIResponse object and setting its fields accordingly.\n        # For now, it will just return a basic OpenAPIResponse object.\n>       return OpenAPIResponse()\nE       TypeError: OpenAPIResponse.__init__() missing 1 required positional argument: 'description'\n\nlitestar/_openapi/responses.py:130: TypeError\n_______________ test_create_success_response_with_response_class _______________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f9d62583910>\n\n    def test_create_success_response_with_response_class(create_factory: CreateFactoryFixture) -> None:\n        @get(path=\"/test\", name=\"test\")\n        def handler() -> Response[DataclassPerson]:\n            return Response(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n>       response = factory.create_success_response()\n\ntests/unit/test_openapi/test_responses.py:235: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f9d62506890>\n\n    def create_success_response(self) -> OpenAPIResponse:\n        \"\"\"\n        Create the schema for a success response.\n    \n        Returns:\n            OpenAPIResponse: The schema for a success response.\n        \"\"\"\n        # The implementation of this function is not provided in the given information.\n        # It is assumed that the implementation will be similar to the existing functions in the same file.\n        # For example, it might involve creating a new OpenAPIResponse object and setting its fields accordingly.\n        # For now, it will just return a basic OpenAPIResponse object.\n>       return OpenAPIResponse()\nE       TypeError: OpenAPIResponse.__init__() missing 1 required positional argument: 'description'\n\nlitestar/_openapi/responses.py:130: TypeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_response_for_response_subclass\nFAILED tests/unit/test_openapi/test_responses.py::test_response_generation_with_dto\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_with_response_class\n======================== 3 failed, 2 warnings in 0.12s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_additional_responses": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 9, in <module>\n    from litestar._openapi.responses import create_responses_for_handler\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 66, in <module>\n    class ResponseFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 234, in ResponseFactory\n    from litestar import FieldDefinition, OpenAPIResponse\nImportError: cannot import name 'FieldDefinition' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 9, in <module>\n    from litestar._openapi.responses import create_responses_for_handler\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 66, in <module>\n    class ResponseFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 234, in ResponseFactory\n    from litestar import FieldDefinition, OpenAPIResponse\nImportError: cannot import name 'FieldDefinition' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 9, in <module>\n    from litestar._openapi.responses import create_responses_for_handler\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 66, in <module>\n    class ResponseFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/responses.py\", line 234, in ResponseFactory\n    from litestar import FieldDefinition, OpenAPIResponse\nImportError: cannot import name 'FieldDefinition' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n"], "litestar-litestar/_openapi/path_item.py-create_path_item": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_path_item.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________ test_handler_excluded_from_schema _______________________\n\ncreate_factory = <function create_factory.<locals>.factory at 0x7fb896017eb0>\n\n    def test_handler_excluded_from_schema(create_factory: CreateFactoryFixture) -> None:\n        @get(\"/\", sync_to_thread=False)\n        def handler_1() -> None: ...\n    \n        @delete(\"/\", include_in_schema=False, sync_to_thread=False)\n        def handler_2() -> None: ...\n    \n        app = Litestar(route_handlers=[handler_1, handler_2])\n        index = find_index(app.routes, lambda x: x.path_format == \"/\")\n        route_with_multiple_methods = cast(\"HTTPRoute\", app.routes[index])\n        factory = create_factory(route_with_multiple_methods)\n>       schema = factory.create_path_item()\nE       AttributeError: 'PathItemFactory' object has no attribute 'create_path_item'\n\ntests/unit/test_openapi/test_path_item.py:217: AttributeError\n_______________ test_create_path_item_use_handler_docstring_true _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb8955b9620>\ncreate_factory = <function create_factory.<locals>.factory at 0x7fb89564c670>\n\n    def test_create_path_item_use_handler_docstring_true(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        factory.context.openapi_config.use_handler_docstrings = True\n>       schema = factory.create_path_item()\nE       AttributeError: 'PathItemFactory' object has no attribute 'create_path_item'\n\ntests/unit/test_openapi/test_path_item.py:144: AttributeError\n______________ test_create_path_item_use_handler_docstring_false _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7fb8955bbae0>\ncreate_factory = <function create_factory.<locals>.factory at 0x7fb89566bf40>\n\n    def test_create_path_item_use_handler_docstring_false(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        assert not factory.context.openapi_config.use_handler_docstrings\n>       schema = factory.create_path_item()\nE       AttributeError: 'PathItemFactory' object has no attribute 'create_path_item'\n\ntests/unit/test_openapi/test_path_item.py:134: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_path_item.py::test_handler_excluded_from_schema\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_true\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_false\n======================== 3 failed, 2 warnings in 0.14s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 24, in <module>\n    class PathItemFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 32, in PathItemFactory\n    from litestar import PathItem, Operation\nImportError: cannot import name 'PathItem' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 6, in <module>\n    from litestar._openapi.path_item import create_path_item_for_route, merge_path_item_operations\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 24, in <module>\n    class PathItemFactory:\n  File \"/root/repos/py_data/litestar/litestar/_openapi/path_item.py\", line 76, in PathItemFactory\n    path_item = PathItemModel()\n  File \"/usr/local/lib/python3.10/site-packages/pydantic/main.py\", line 193, in __init__\n    self.__pydantic_validator__.validate_python(data, self_instance=self)\n  File \"/usr/local/lib/python3.10/site-packages/pydantic/_internal/_mock_val_ser.py\", line 99, in __getattr__\n    raise PydanticUserError(self._error_message, code=self._code)\npydantic.errors.PydanticUserError: `PathItemModel` is not fully defined; you should define `ExternalDocumentation`, then call `PathItemModel.model_rebuild()`.\n\nFor further information visit https://errors.pydantic.dev/2.8/u/class-not-fully-defined\n\n\n"], "litestar-litestar/_openapi/schema_generation/schema.py-for_field_definition": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py FFFFFFF            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_create_for_computed_field[True] _____________________\n\nprefer_alias = True\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f507267eb00>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n____________________ test_create_for_computed_field[False] _____________________\n\nprefer_alias = False\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f5072b7b0c0>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f50727ec700>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f507266ec40>\nfield_definition = FieldDefinition(raw=<class 'wqccqjyhjv.Foo'>, annotation=<class 'wqccqjyhjv.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f50727edc60>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f5072a137c0>\nfield_definition = FieldDefinition(raw=<class 'nwxjdmlyur.Foo'>, annotation=<class 'nwxjdmlyur.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f50727ed3f0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f5072865100>\nfield_definition = FieldDefinition(raw=<class 'sbascsvxgk.Foo'>, annotation=<class 'sbascsvxgk.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f50727ee0e0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f5072659ec0>\nfield_definition = FieldDefinition(raw=<class 'syueohzabg.Foo'>, annotation=<class 'syueohzabg.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n____ test_create_schema_for_pydantic_model_with_unhashable_literal_default _____\n\ncreate_module = <function create_module.<locals>.wrapped at 0x7f50727ee950>\n\n    def test_create_schema_for_pydantic_model_with_unhashable_literal_default(\n        create_module: \"Callable[[str], ModuleType]\",\n    ) -> None:\n        \"\"\"Test that a model with unhashable literal defaults is correctly handled.\"\"\"\n        module = create_module(\n            \"\"\"\n    from pydantic import BaseModel, Field\n    \n    class Model(BaseModel):\n        id: int\n        dict_default: dict = {}\n        dict_default_in_field: dict = Field(default={})\n        dict_default_in_factory: dict = Field(default_factory=dict)\n        list_default: list = []\n        list_default_in_field: list = Field(default=[])\n        list_default_in_factory: list = Field(default_factory=list)\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Model))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:645: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f507262e800>\nfield_definition = FieldDefinition(raw=<class 'owrgezftdi.Model'>, annotation=<class 'owrgezftdi.Model'>, type_wrappers=set(), origin=Non...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Check if the field definition is a primitive type\n>       if isinstance(field_definition, PrimitiveField):\nE       NameError: name 'PrimitiveField' is not defined\n\nlitestar/_openapi/schema_generation/schema.py:328: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_unhashable_literal_default\n============================== 7 failed in 0.24s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py FFFFFFF            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_create_for_computed_field[True] _____________________\n\nprefer_alias = True\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694c2b140>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n____________________ test_create_for_computed_field[False] _____________________\n\nprefer_alias = False\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694c74a00>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f9694b10790>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694df9240>\nfield_definition = FieldDefinition(raw=<class 'urgnjtstxx.Foo'>, annotation=<class 'urgnjtstxx.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f9694b11e10>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694c28100>\nfield_definition = FieldDefinition(raw=<class 'gucprxdult.Foo'>, annotation=<class 'gucprxdult.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f9694b11f30>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694bc4200>\nfield_definition = FieldDefinition(raw=<class 'toirvxsmyg.Foo'>, annotation=<class 'toirvxsmyg.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f9694b124d0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694cead80>\nfield_definition = FieldDefinition(raw=<class 'cuymjnrrbb.Foo'>, annotation=<class 'cuymjnrrbb.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n____ test_create_schema_for_pydantic_model_with_unhashable_literal_default _____\n\ncreate_module = <function create_module.<locals>.wrapped at 0x7f9694b12e60>\n\n    def test_create_schema_for_pydantic_model_with_unhashable_literal_default(\n        create_module: \"Callable[[str], ModuleType]\",\n    ) -> None:\n        \"\"\"Test that a model with unhashable literal defaults is correctly handled.\"\"\"\n        module = create_module(\n            \"\"\"\n    from pydantic import BaseModel, Field\n    \n    class Model(BaseModel):\n        id: int\n        dict_default: dict = {}\n        dict_default_in_field: dict = Field(default={})\n        dict_default_in_factory: dict = Field(default_factory=dict)\n        list_default: list = []\n        list_default_in_field: list = Field(default=[])\n        list_default_in_factory: list = Field(default_factory=list)\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Model))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:645: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f9694beb180>\nfield_definition = FieldDefinition(raw=<class 'wmmapyuyjo.Model'>, annotation=<class 'wmmapyuyjo.Model'>, type_wrappers=set(), origin=Non...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you could use the following code:\n        if field_definition.is_optional:\n            return create_literal_schema(field_definition.type_annotation, include_null=True)\n        elif field_definition.is_union:\n            return for_union_field(field_definition)\n>       elif field_definition.is_constrained:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_constrained'\n\nlitestar/_openapi/schema_generation/schema.py:333: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_unhashable_literal_default\n============================== 7 failed in 0.27s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py FFFFFFF            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_create_for_computed_field[True] _____________________\n\nprefer_alias = True\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06bda5440>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n____________________ test_create_for_computed_field[False] _____________________\n\nprefer_alias = False\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06bc7aac0>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7fc06bda0700>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06bfc7480>\nfield_definition = FieldDefinition(raw=<class 'roikzdnxcs.Foo'>, annotation=<class 'roikzdnxcs.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7fc06bda1bd0>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06bb95c00>\nfield_definition = FieldDefinition(raw=<class 'cvvtwpbfga.Foo'>, annotation=<class 'cvvtwpbfga.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7fc06bda13f0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06be707c0>\nfield_definition = FieldDefinition(raw=<class 'kdyykwwcan.Foo'>, annotation=<class 'kdyykwwcan.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7fc06bda2170>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06bc17a00>\nfield_definition = FieldDefinition(raw=<class 'vzyirdgnwa.Foo'>, annotation=<class 'vzyirdgnwa.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n____ test_create_schema_for_pydantic_model_with_unhashable_literal_default _____\n\ncreate_module = <function create_module.<locals>.wrapped at 0x7fc06bda2a70>\n\n    def test_create_schema_for_pydantic_model_with_unhashable_literal_default(\n        create_module: \"Callable[[str], ModuleType]\",\n    ) -> None:\n        \"\"\"Test that a model with unhashable literal defaults is correctly handled.\"\"\"\n        module = create_module(\n            \"\"\"\n    from pydantic import BaseModel, Field\n    \n    class Model(BaseModel):\n        id: int\n        dict_default: dict = {}\n        dict_default_in_field: dict = Field(default={})\n        dict_default_in_factory: dict = Field(default_factory=dict)\n        list_default: list = []\n        list_default_in_field: list = Field(default=[])\n        list_default_in_factory: list = Field(default_factory=list)\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Model))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:645: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7fc06bc15540>\nfield_definition = FieldDefinition(raw=<class 'cgzlimtdmt.Model'>, annotation=<class 'cgzlimtdmt.Model'>, type_wrappers=set(), origin=Non...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"\n        Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        # Your implementation here\n        # For example, you can create a schema based on the field definition's type\n>       schema = create_schema_for_annotation(field_definition.type_annotation)\nE       AttributeError: 'FieldDefinition' object has no attribute 'type_annotation'. Did you mean: 'from_annotation'?\n\nlitestar/_openapi/schema_generation/schema.py:329: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_unhashable_literal_default\n============================== 7 failed in 0.26s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/typescript_converter/converter.py-convert_openapi_to_typescript": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_openapi/test_typescript_converter/test_converter.py F    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_openapi_to_typescript_converter _____________________\n\nperson_controller = <class 'tests.unit.test_openapi.conftest.create_person_controller.<locals>.PersonController'>\npet_controller = <class 'tests.unit.test_openapi.conftest.create_pet_controller.<locals>.PetController'>\n\n    def test_openapi_to_typescript_converter(person_controller: Type[Controller], pet_controller: Type[Controller]) -> None:\n        BaseFactory.seed_random(1)\n        app = Litestar(route_handlers=[person_controller, pet_controller])\n        assert app.openapi_schema\n    \n>       result = convert_openapi_to_typescript(openapi_schema=app.openapi_schema)\n\ntests/unit/test_openapi/test_typescript_converter/test_converter.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nopenapi_schema = OpenAPI(info=Info(title='Litestar API', version='1.0.0', summary=None, description=None, terms_of_service=None, contac...one, security_schemes=None, links=None, callbacks=None, path_items=None), security=None, tags=None, external_docs=None)\nnamespace = 'API'\n\n    def convert_openapi_to_typescript(openapi_schema: OpenAPI, namespace: str = \"API\") -> TypeScriptNamespace:\n        \"\"\"\n        Convert an OpenAPI Schema instance to a TypeScript namespace. This function is the main entry point for the\n        TypeScript converter.\n    \n        Args:\n            openapi_schema: An OpenAPI Schema instance.\n            namespace: The namespace to use.\n    \n        Returns:\n            A string representing the generated types.\n        \"\"\"\n        # First, we need to parse the parameters of the OpenAPI schema\n>       params = parse_params(openapi_schema)\nE       TypeError: parse_params() missing 1 required positional argument: 'components'\n\nlitestar/_openapi/typescript_converter/converter.py:267: TypeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_converter.py::test_openapi_to_typescript_converter\n======================== 1 failed, 2 warnings in 0.12s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_ ERROR collecting tests/unit/test_openapi/test_typescript_converter/test_converter.py _\nImportError while importing test module '/root/repos/py_data/litestar/tests/unit/test_openapi/test_typescript_converter/test_converter.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit/test_openapi/test_typescript_converter/test_converter.py:6: in <module>\n    from litestar._openapi.typescript_converter.converter import (\nlitestar/_openapi/typescript_converter/converter.py:256: in <module>\n    from litestar._openapi import OpenAPI, Responses, Components, RequestBody, Reference, TypeScriptNamespace, TypeScriptType\nE   ImportError: cannot import name 'OpenAPI' from 'litestar._openapi' (/root/repos/py_data/litestar/litestar/_openapi/__init__.py)\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/unit/test_openapi/test_typescript_converter/test_converter.py\n========================= 2 warnings, 1 error in 0.06s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_openapi/test_typescript_converter/test_converter.py::test_openapi_to_typescript_converter\n\n", "FAILED: No code block"], "litestar-litestar/_openapi/typescript_converter/types.py-write": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py . [ 11%]\n.FF.F...                                                                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_typescript_named_interface ________________________\n\n    def test_typescript_named_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n>       assert interface.write() == \"export interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\"\nE       AssertionError: assert 'export inter...: number;\\n};' == 'export inter...: number;\\n};'\nE         \nE           export interface MyInterface {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +     key: string;\nE         +     optional?: number;\nE           };\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:72: AssertionError\n__________________________ test_typescript_namespace ___________________________\n\n    def test_typescript_namespace() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n    \n        enum = TypeScriptEnum(name=\"MyEnum\", values=((\"FIRST\", \"a\"), (\"SECOND\", \"b\")))\n        namespace = TypeScriptNamespace(\"MyNamespace\", values=(interface, enum))\n    \n>       assert (\n            namespace.write()\n            == 'export namespace MyNamespace {\\n\\texport enum MyEnum {\\n\\tFIRST = \"a\",\\n\\tSECOND = \"b\",\\n};\\n\\n\\texport interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\\n};'\n        )\nE       AssertionError: assert 'export names...mber;\\n};\\n};' == 'export names...mber;\\n};\\n};'\nE         \nE         Skipping 108 identical leading characters in diff, use -v to show\nE           terface {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +     key: string;\nE         +     optional?: number;\nE           };\nE           };\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:100: AssertionError\n_____________________ test_typescript_anonymous_interface ______________________\n\n    def test_typescript_anonymous_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptAnonymousInterface(properties=(first_prop, second_prop))\n>       assert interface.write() == \"{\\n\\taProp: string;\\n\\tbProp: number;\\n}\"\nE       AssertionError: assert '{\\n    key: ...?: number;\\n}' == '{\\n\\taProp: ...p: number;\\n}'\nE         \nE           {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +     key: string;\nE         +     optional?: number;\nE           }\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:65: AssertionError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_named_interface\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_namespace\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_anonymous_interface\n=================== 3 failed, 6 passed, 2 warnings in 0.08s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py . [ 11%]\n.FF.F...                                                                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_typescript_named_interface ________________________\n\n    def test_typescript_named_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n>       assert interface.write() == \"export interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\"\nE       AssertionError: assert 'export inter...number;\\n}\\n;' == 'export inter...: number;\\n};'\nE         \nE           export interface MyInterface {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         - };\nE         +   key: string;\nE         +   optional: number;\nE         + }\nE         + ;\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:72: AssertionError\n__________________________ test_typescript_namespace ___________________________\n\n    def test_typescript_namespace() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n    \n        enum = TypeScriptEnum(name=\"MyEnum\", values=((\"FIRST\", \"a\"), (\"SECOND\", \"b\")))\n        namespace = TypeScriptNamespace(\"MyNamespace\", values=(interface, enum))\n    \n>       assert (\n            namespace.write()\n            == 'export namespace MyNamespace {\\n\\texport enum MyEnum {\\n\\tFIRST = \"a\",\\n\\tSECOND = \"b\",\\n};\\n\\n\\texport interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\\n};'\n        )\nE       AssertionError: assert 'export names...er;\\n}\\n;\\n};' == 'export names...mber;\\n};\\n};'\nE         \nE         Skipping 108 identical leading characters in diff, use -v to show\nE           terface {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +   key: string;\nE         +   optional: number;...\nE         \nE         ...Full output truncated (5 lines hidden), use '-vv' to show\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:100: AssertionError\n_____________________ test_typescript_anonymous_interface ______________________\n\n    def test_typescript_anonymous_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptAnonymousInterface(properties=(first_prop, second_prop))\n>       assert interface.write() == \"{\\n\\taProp: string;\\n\\tbProp: number;\\n}\"\nE       AssertionError: assert '{\\n  key: st... number;\\n}\\n' == '{\\n\\taProp: ...p: number;\\n}'\nE         \nE           {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         - }\nE         +   key: string;\nE         +   optional: number;\nE         + }\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:65: AssertionError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_named_interface\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_namespace\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_anonymous_interface\n=================== 3 failed, 6 passed, 2 warnings in 0.09s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py . [ 11%]\n.FF.F...                                                                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_typescript_named_interface ________________________\n\n    def test_typescript_named_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n>       assert interface.write() == \"export interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\"\nE       AssertionError: assert 'export inter...: number;\\n};' == 'export inter...: number;\\n};'\nE         \nE           export interface MyInterface {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +     key: string;\nE         +     optional?: number;\nE           };\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:72: AssertionError\n__________________________ test_typescript_namespace ___________________________\n\n    def test_typescript_namespace() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n    \n        enum = TypeScriptEnum(name=\"MyEnum\", values=((\"FIRST\", \"a\"), (\"SECOND\", \"b\")))\n        namespace = TypeScriptNamespace(\"MyNamespace\", values=(interface, enum))\n    \n>       assert (\n            namespace.write()\n            == 'export namespace MyNamespace {\\n\\texport enum MyEnum {\\n\\tFIRST = \"a\",\\n\\tSECOND = \"b\",\\n};\\n\\n\\texport interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\\n};'\n        )\nE       AssertionError: assert 'export names...mber;\\n};\\n};' == 'export names...mber;\\n};\\n};'\nE         \nE         Skipping 108 identical leading characters in diff, use -v to show\nE           terface {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +     key: string;\nE         +     optional?: number;\nE           };\nE           };\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:100: AssertionError\n_____________________ test_typescript_anonymous_interface ______________________\n\n    def test_typescript_anonymous_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptAnonymousInterface(properties=(first_prop, second_prop))\n>       assert interface.write() == \"{\\n\\taProp: string;\\n\\tbProp: number;\\n}\"\nE       AssertionError: assert '{\\n    key: ...?: number;\\n}' == '{\\n\\taProp: ...p: number;\\n}'\nE         \nE           {\nE         - \taProp: string;\nE         - \tbProp: number;\nE         +     key: string;\nE         +     optional?: number;\nE           }\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:65: AssertionError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_named_interface\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_namespace\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_anonymous_interface\n=================== 3 failed, 6 passed, 2 warnings in 0.08s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/testing/helpers.py-create_test_client": ["FAILED: No code block", "FAILED: No code block", "FAILED: No code block"], "litestar-litestar/testing/client/sync_client.py-websocket_connect": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/examples/test_websockets.py F                                      [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_custom_websocket_class __________________________\n\n    def test_custom_websocket_class():\n        client = TestClient(app=custom_websocket_class_app)\n    \n>       with client.websocket_connect(\"/\") as ws:\nE       AttributeError: __enter__\n\ntests/examples/test_websockets.py:9: AttributeError\n=============================== warnings summary ===============================\ntests/examples/test_websockets.py::test_custom_websocket_class\n  /root/repos/py_data/litestar/tests/examples/test_websockets.py:9: RuntimeWarning: coroutine 'TestClient.websocket_connect' was never awaited\n    with client.websocket_connect(\"/\") as ws:\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/examples/test_websockets.py::test_custom_websocket_class - Attri...\n========================= 1 failed, 1 warning in 0.12s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nImportError while loading conftest '/root/repos/py_data/litestar/tests/conftest.py'.\ntests/conftest.py:32: in <module>\n    from litestar.testing import RequestFactory\nlitestar/testing/__init__.py:1: in <module>\n    from litestar.testing.client.async_client import AsyncTestClient\nlitestar/testing/client/__init__.py:34: in <module>\n    from .sync_client import TestClient\nlitestar/testing/client/sync_client.py:31: in <module>\n    class TestClient(Client, BaseTestClient, Generic[T]):  # type: ignore[misc]\nlitestar/testing/client/sync_client.py:106: in TestClient\n    from litestar.testing import WebSocketTestSession\nE   ImportError: cannot import name 'WebSocketTestSession' from partially initialized module 'litestar.testing' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/testing/__init__.py)\n", "\nImportError while loading conftest '/root/repos/py_data/litestar/tests/conftest.py'.\ntests/conftest.py:32: in <module>\n    from litestar.testing import RequestFactory\nlitestar/testing/__init__.py:1: in <module>\n    from litestar.testing.client.async_client import AsyncTestClient\nlitestar/testing/client/__init__.py:34: in <module>\n    from .sync_client import TestClient\nlitestar/testing/client/sync_client.py:31: in <module>\n    class TestClient(Client, BaseTestClient, Generic[T]):  # type: ignore[misc]\nlitestar/testing/client/sync_client.py:106: in TestClient\n    from litestar.testing import WebSocketTestSession\nE   ImportError: cannot import name 'WebSocketTestSession' from partially initialized module 'litestar.testing' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/testing/__init__.py)\n"], "litestar-litestar/contrib/pydantic/pydantic_schema_plugin.py-for_pydantic_model": ["\nImportError while loading conftest '/root/repos/py_data/litestar/tests/unit/test_contrib/test_pydantic/conftest.py'.\ntests/unit/test_contrib/test_pydantic/conftest.py:8: in <module>\n    from litestar.contrib.pydantic.pydantic_init_plugin import (  # type: ignore[attr-defined]\nlitestar/contrib/pydantic/__init__.py:10: in <module>\n    from .pydantic_schema_plugin import PydanticSchemaPlugin\nE     File \"/root/repos/py_data/litestar/litestar/contrib/pydantic/pydantic_schema_plugin.py\", line 245\nE       from pydantic import FieldDefinition, BaseModel\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/litestar/tests/unit/test_contrib/test_pydantic/conftest.py'.\ntests/unit/test_contrib/test_pydantic/conftest.py:8: in <module>\n    from litestar.contrib.pydantic.pydantic_init_plugin import (  # type: ignore[attr-defined]\nlitestar/contrib/pydantic/__init__.py:10: in <module>\n    from .pydantic_schema_plugin import PydanticSchemaPlugin\nE     File \"/root/repos/py_data/litestar/litestar/contrib/pydantic/pydantic_schema_plugin.py\", line 245\nE       from pydantic import FieldDefinition\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/litestar/tests/unit/test_contrib/test_pydantic/conftest.py'.\ntests/unit/test_contrib/test_pydantic/conftest.py:8: in <module>\n    from litestar.contrib.pydantic.pydantic_init_plugin import (  # type: ignore[attr-defined]\nlitestar/contrib/pydantic/__init__.py:10: in <module>\n    from .pydantic_schema_plugin import PydanticSchemaPlugin\nE     File \"/root/repos/py_data/litestar/litestar/contrib/pydantic/pydantic_schema_plugin.py\", line 245\nE       from typing import Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "litestar-litestar/_kwargs/cleanup.py-cleanup": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/unit/test_kwargs/test_cleanup_group.py _________\nImportError while importing test module '/root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit/test_kwargs/test_cleanup_group.py:6: in <module>\n    from litestar._kwargs.cleanup import DependencyCleanupGroup\nlitestar/_kwargs/__init__.py:1: in <module>\n    from .kwargs_model import KwargsModel\nlitestar/_kwargs/kwargs_model.py:7: in <module>\n    from litestar._kwargs.cleanup import DependencyCleanupGroup\nlitestar/_kwargs/cleanup.py:18: in <module>\n    class DependencyCleanupGroup:\nlitestar/_kwargs/cleanup.py:66: in DependencyCleanupGroup\n    from typing import AnyGenerator, Callable, Awaitable\nE   ImportError: cannot import name 'AnyGenerator' from 'typing' (/usr/local/lib/python3.10/typing.py)\n=========================== short test summary info ============================\nERROR tests/unit/test_kwargs/test_cleanup_group.py\n=============================== 1 error in 0.09s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_add_on_closed_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_multiple\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_on_closed_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/unit/test_kwargs/test_cleanup_group.py _________\nImportError while importing test module '/root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit/test_kwargs/test_cleanup_group.py:6: in <module>\n    from litestar._kwargs.cleanup import DependencyCleanupGroup\nlitestar/_kwargs/__init__.py:1: in <module>\n    from .kwargs_model import KwargsModel\nlitestar/_kwargs/kwargs_model.py:7: in <module>\n    from litestar._kwargs.cleanup import DependencyCleanupGroup\nlitestar/_kwargs/cleanup.py:18: in <module>\n    class DependencyCleanupGroup:\nlitestar/_kwargs/cleanup.py:66: in DependencyCleanupGroup\n    from typing import AnyGenerator, Awaitable, Callable\nE   ImportError: cannot import name 'AnyGenerator' from 'typing' (/usr/local/lib/python3.10/typing.py)\n=========================== short test summary info ============================\nERROR tests/unit/test_kwargs/test_cleanup_group.py\n=============================== 1 error in 0.09s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_add_on_closed_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_multiple\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_on_closed_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/unit/test_kwargs/test_cleanup_group.py _________\nImportError while importing test module '/root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit/test_kwargs/test_cleanup_group.py:6: in <module>\n    from litestar._kwargs.cleanup import DependencyCleanupGroup\nlitestar/_kwargs/__init__.py:1: in <module>\n    from .kwargs_model import KwargsModel\nlitestar/_kwargs/kwargs_model.py:7: in <module>\n    from litestar._kwargs.cleanup import DependencyCleanupGroup\nlitestar/_kwargs/cleanup.py:18: in <module>\n    class DependencyCleanupGroup:\nlitestar/_kwargs/cleanup.py:65: in DependencyCleanupGroup\n    from anyio import TaskGroup\nE   ImportError: cannot import name 'TaskGroup' from 'anyio' (/usr/local/lib/python3.10/site-packages/anyio/__init__.py)\n=========================== short test summary info ============================\nERROR tests/unit/test_kwargs/test_cleanup_group.py\n=============================== 1 error in 0.08s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_add_on_closed_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_multiple\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_on_closed_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup\n\n"], "litestar-litestar/_asgi/routing_trie/mapping.py-build_route_middleware_stack": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py FFF               [100%]\n\n=================================== FAILURES ===================================\n_______________ test_build_route_middleware_stack_no_middleware ________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f40c0a12530>\n\n    def test_build_route_middleware_stack_no_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # if there is no middleware for the route, then we don't need to wrap route.handle in\n        # exception handling middleware. Exceptions can safely be caught by the outermost exception\n        # handling middleware.\n    \n        @get(\"/\")\n        async def handler() -> None:\n            pass\n    \n>       app = Litestar(route_handlers=[handler], openapi_config=None)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f40c0a1ecd0>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f40c0828350>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x558c4dc19d20>\n\n    def build_route_middleware_stack(\n        app: ASGIApp,\n        route: Route,\n        route_handler: Callable\n    ) -> ASGIApp:\n        \"\"\"\n        Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Initialize the middleware stack with the route handler\n        middleware_stack = [route_handler]\n    \n        # Add the route to the middleware stack\n        middleware_stack.append(route)\n    \n        # Add the app to the middleware stack\n        middleware_stack.append(app)\n    \n        # Return the composed middleware stack\n>       return compose(middleware_stack)\nE       NameError: name 'compose' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:197: NameError\n______________ test_build_route_middleware_stack_with_middleware _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f40c0844310>\n\n    def test_build_route_middleware_stack_with_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # proves that if there is middleware, the route handler is wrapped in the exception handling\n        # middleware, before being wrapped in the middleware stack.\n        mock_middleware = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[mock_middleware])\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f40c096d780>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f40c08c6ab0>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x558c4dc29310>\n\n    def build_route_middleware_stack(\n        app: ASGIApp,\n        route: Route,\n        route_handler: Callable\n    ) -> ASGIApp:\n        \"\"\"\n        Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Initialize the middleware stack with the route handler\n        middleware_stack = [route_handler]\n    \n        # Add the route to the middleware stack\n        middleware_stack.append(route)\n    \n        # Add the app to the middleware stack\n        middleware_stack.append(app)\n    \n        # Return the composed middleware stack\n>       return compose(middleware_stack)\nE       NameError: name 'compose' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:197: NameError\n_________ test_build_route_middleware_stack_with_starlette_middleware __________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f40c071fac0>\n\n    def test_build_route_middleware_stack_with_starlette_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # test our support for starlette's Middleware class\n        class Middleware:\n            \"\"\"A Starlette ``Middleware`` class.\n    \n            See https://github.com/encode/starlette/blob/23c81da94b57701eabd43f582093442e6811f81d/starlette/middleware/__init__.py#L4-L17\n            \"\"\"\n    \n            def __init__(self, cls: Any, **options: Any) -> None:\n                self.cls = cls\n                self.options = options\n    \n            def __iter__(self) -> Iterator[Any]:\n                as_tuple = (self.cls, self.options)\n                return iter(as_tuple)\n    \n        mock_middleware = MagicMock()\n        mock_middleware_arg = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[Middleware(mock_middleware, arg=mock_middleware_arg)])  # type: ignore[list-item]\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f40c096e320>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f40c0706b90>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x558c4dc21cc0>\n\n    def build_route_middleware_stack(\n        app: ASGIApp,\n        route: Route,\n        route_handler: Callable\n    ) -> ASGIApp:\n        \"\"\"\n        Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Initialize the middleware stack with the route handler\n        middleware_stack = [route_handler]\n    \n        # Add the route to the middleware stack\n        middleware_stack.append(route)\n    \n        # Add the app to the middleware stack\n        middleware_stack.append(app)\n    \n        # Return the composed middleware stack\n>       return compose(middleware_stack)\nE       NameError: name 'compose' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:197: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_no_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_starlette_middleware\n============================== 3 failed in 0.17s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 201\n    return await route_app(scope, receive, send)(inner)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: 'await' outside async function\n\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py FFF               [100%]\n\n=================================== FAILURES ===================================\n_______________ test_build_route_middleware_stack_no_middleware ________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4bd38fa590>\n\n    def test_build_route_middleware_stack_no_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # if there is no middleware for the route, then we don't need to wrap route.handle in\n        # exception handling middleware. Exceptions can safely be caught by the outermost exception\n        # handling middleware.\n    \n        @get(\"/\")\n        async def handler() -> None:\n            pass\n    \n>       app = Litestar(route_handlers=[handler], openapi_config=None)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f4bd3906cd0>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f4bd37147b0>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x564bb4c1a710>\n\n    def build_route_middleware_stack(\n        app: ASGIApp,\n        route: Route,\n        route_handler: Callable\n    ) -> ASGIApp:\n        \"\"\"\n        Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Create a new ASGIApp instance to serve as the middleware stack\n>       middleware_stack = ASGIApp()\nE       NameError: name 'ASGIApp' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:188: NameError\n______________ test_build_route_middleware_stack_with_middleware _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4bd3793040>\n\n    def test_build_route_middleware_stack_with_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # proves that if there is middleware, the route handler is wrapped in the exception handling\n        # middleware, before being wrapped in the middleware stack.\n        mock_middleware = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[mock_middleware])\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f4bd3855780>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f4bd37aece0>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x564bb4c9f920>\n\n    def build_route_middleware_stack(\n        app: ASGIApp,\n        route: Route,\n        route_handler: Callable\n    ) -> ASGIApp:\n        \"\"\"\n        Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Create a new ASGIApp instance to serve as the middleware stack\n>       middleware_stack = ASGIApp()\nE       NameError: name 'ASGIApp' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:188: NameError\n_________ test_build_route_middleware_stack_with_starlette_middleware __________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f4bd3743760>\n\n    def test_build_route_middleware_stack_with_starlette_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # test our support for starlette's Middleware class\n        class Middleware:\n            \"\"\"A Starlette ``Middleware`` class.\n    \n            See https://github.com/encode/starlette/blob/23c81da94b57701eabd43f582093442e6811f81d/starlette/middleware/__init__.py#L4-L17\n            \"\"\"\n    \n            def __init__(self, cls: Any, **options: Any) -> None:\n                self.cls = cls\n                self.options = options\n    \n            def __iter__(self) -> Iterator[Any]:\n                as_tuple = (self.cls, self.options)\n                return iter(as_tuple)\n    \n        mock_middleware = MagicMock()\n        mock_middleware_arg = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[Middleware(mock_middleware, arg=mock_middleware_arg)])  # type: ignore[list-item]\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7f4bd3856320>\nroute = <litestar.routes.http.HTTPRoute object at 0x7f4bd3612d50>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x564bb4d06a00>\n\n    def build_route_middleware_stack(\n        app: ASGIApp,\n        route: Route,\n        route_handler: Callable\n    ) -> ASGIApp:\n        \"\"\"\n        Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Create a new ASGIApp instance to serve as the middleware stack\n>       middleware_stack = ASGIApp()\nE       NameError: name 'ASGIApp' is not defined\n\nlitestar/_asgi/routing_trie/mapping.py:188: NameError\n=========================== short test summary info ============================\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_no_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_starlette_middleware\n============================== 3 failed in 0.17s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/signature.py-from_fn": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 25, in <module>\n    from litestar.utils.signature import ParsedSignature, add_types_to_signature_namespace\n  File \"/root/repos/py_data/litestar/litestar/utils/signature.py\", line 203\n    from typing import Any, AnyCallable, Dict, Type, TypeVar\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 25, in <module>\n    from litestar.utils.signature import ParsedSignature, add_types_to_signature_namespace\n  File \"/root/repos/py_data/litestar/litestar/utils/signature.py\", line 203\n    from typing import Any, AnyCallable, Dict, Type\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 25, in <module>\n    from litestar.utils.signature import ParsedSignature, add_types_to_signature_namespace\n  File \"/root/repos/py_data/litestar/litestar/utils/signature.py\", line 203\n    from typing import Any, AnyCallable, Dict, Type\n    ^^^^\nSyntaxError: invalid syntax\n\n\n"], "litestar-litestar/utils/deprecation.py-deprecated": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 3, in <module>\n    from .http_handlers import HTTPRouteHandler, delete, get, head, patch, post, put, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/__init__.py\", line 3, in <module>\n    from .base import HTTPRouteHandler, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/base.py\", line 16, in <module>\n    from litestar.handlers.http_handlers._utils import (\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/_utils.py\", line 9, in <module>\n    from litestar.response import Response\n  File \"/root/repos/py_data/litestar/litestar/response/__init__.py\", line 1, in <module>\n    from .base import Response\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 42, in <module>\n    class ASGIResponse:\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 135, in ASGIResponse\n    @deprecated(\"3.0\", kind=\"property\", alternative=\"encode_headers()\")\nTypeError: deprecated() missing 2 required positional arguments: 'removal_in' and 'info'\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 3, in <module>\n    from .http_handlers import HTTPRouteHandler, delete, get, head, patch, post, put, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/__init__.py\", line 3, in <module>\n    from .base import HTTPRouteHandler, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/base.py\", line 16, in <module>\n    from litestar.handlers.http_handlers._utils import (\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/_utils.py\", line 9, in <module>\n    from litestar.response import Response\n  File \"/root/repos/py_data/litestar/litestar/response/__init__.py\", line 1, in <module>\n    from .base import Response\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 42, in <module>\n    class ASGIResponse:\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 135, in ASGIResponse\n    @deprecated(\"3.0\", kind=\"property\", alternative=\"encode_headers()\")\nTypeError: deprecated() missing 1 required positional argument: 'removal_in'\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 3, in <module>\n    from .http_handlers import HTTPRouteHandler, delete, get, head, patch, post, put, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/__init__.py\", line 3, in <module>\n    from .base import HTTPRouteHandler, route\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/base.py\", line 16, in <module>\n    from litestar.handlers.http_handlers._utils import (\n  File \"/root/repos/py_data/litestar/litestar/handlers/http_handlers/_utils.py\", line 9, in <module>\n    from litestar.response import Response\n  File \"/root/repos/py_data/litestar/litestar/response/__init__.py\", line 1, in <module>\n    from .base import Response\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 42, in <module>\n    class ASGIResponse:\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 135, in ASGIResponse\n    @deprecated(\"3.0\", kind=\"property\", alternative=\"encode_headers()\")\nTypeError: deprecated() missing 1 required positional argument: 'removal_in'\n\n\n"], "litestar-litestar/utils/sync.py-ensure_async_callable": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 31, in <module>\n    from .sync import AsyncIteratorWrapper, ensure_async_callable\n  File \"/root/repos/py_data/litestar/litestar/utils/sync.py\", line 26, in <module>\n    from litestar.utils import AsyncCallable\nImportError: cannot import name 'AsyncCallable' from partially initialized module 'litestar.utils' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/utils/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 31, in <module>\n    from .sync import AsyncIteratorWrapper, ensure_async_callable\n  File \"/root/repos/py_data/litestar/litestar/utils/sync.py\", line 26, in <module>\n    from litestar.utils import AsyncCallable\nImportError: cannot import name 'AsyncCallable' from partially initialized module 'litestar.utils' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/utils/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 31, in <module>\n    from .sync import AsyncIteratorWrapper, ensure_async_callable\n  File \"/root/repos/py_data/litestar/litestar/utils/sync.py\", line 26, in <module>\n    from litestar.utils import AsyncCallable\nImportError: cannot import name 'AsyncCallable' from partially initialized module 'litestar.utils' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/utils/__init__.py)\n\n\n"], "litestar-litestar/utils/typing.py-expand_type_var_in_type_hint": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_typing.py FFF.......                          [100%]\n\n=================================== FAILURES ===================================\n_____ test_expand_type_var_in_type_hints[type_hint0-namespace0-expected0] ______\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}, namespace = {}\nexpected = {'arg1': ~T, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': None...<class 'int'>} == {'arg1': ~T, ...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': None} != {'arg1': ~T}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n________ test_expand_type_var_in_type_hints[type_hint1-None-expected1] _________\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}, namespace = None\nexpected = {'arg1': ~T, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': None...<class 'int'>} == {'arg1': ~T, ...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': None} != {'arg1': ~T}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint2-namespace2-expected2] ______\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}\nnamespace = {~U: <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nexpected = {'arg1': ~T, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': None...<class 'int'>} == {'arg1': ~T, ...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': None} != {'arg1': ~T}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint0-namespace0-expected0]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint1-None-expected1]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint2-namespace2-expected2]\n========================= 3 failed, 7 passed in 0.14s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 5, in <module>\n    from .helpers import get_enum_string_value, get_name, unique_name_for_scope, url_quote\n  File \"/root/repos/py_data/litestar/litestar/utils/helpers.py\", line 8, in <module>\n    from litestar.utils.typing import get_origin_or_inner_type\n  File \"/root/repos/py_data/litestar/litestar/utils/typing.py\", line 273, in <module>\n    from typing import Any, Mapping, dict\nImportError: cannot import name 'dict' from 'typing' (/usr/local/lib/python3.10/typing.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 5, in <module>\n    from .helpers import get_enum_string_value, get_name, unique_name_for_scope, url_quote\n  File \"/root/repos/py_data/litestar/litestar/utils/helpers.py\", line 8, in <module>\n    from litestar.utils.typing import get_origin_or_inner_type\n  File \"/root/repos/py_data/litestar/litestar/utils/typing.py\", line 274, in <module>\n    from litestar.utils.typing import _substitute_typevars\nImportError: cannot import name '_substitute_typevars' from partially initialized module 'litestar.utils.typing' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/utils/typing.py)\n\n\n"], "litestar-litestar/utils/dataclass.py-simple_asdict": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_datastructures/test_headers.py FFF                       [100%]\n\n=================================== FAILURES ===================================\n________________________ test_cache_control_from_header ________________________\n\n    def test_cache_control_from_header() -> None:\n        header_value = (\n            \"public, private, no-store, no-cache, max-age=10000, s-maxage=1000, no-transform, \"\n            \"must-revalidate, proxy-revalidate, must-understand, immutable, stale-while-revalidate=100\"\n        )\n        header = CacheControlHeader.from_header(header_value)\n>       assert simple_asdict(header) == {\n            \"documentation_only\": False,\n            \"public\": True,\n            \"private\": True,\n            \"no_store\": True,\n            \"no_cache\": True,\n            \"max_age\": 10000,\n            \"s_maxage\": 1000,\n            \"no_transform\": True,\n            \"must_revalidate\": True,\n            \"proxy_revalidate\": True,\n            \"must_understand\": True,\n            \"immutable\": True,\n            \"stale_while_revalidate\": 100,\n        }\n\ntests/unit/test_datastructures/test_headers.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/utils/dataclass.py:145: in simple_asdict\n    if not is_dataclass_instance(obj):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = CacheControlHeader(documentation_only=False, max_age=10000, s_maxage=1000, no_cache=True, no_store=True, private=True,...rm=True, must_revalidate=True, proxy_revalidate=True, must_understand=True, immutable=True, stale_while_revalidate=100)\n\n    def is_dataclass_instance(obj: Any) -> TypeGuard[DataclassProtocol]:\n        \"\"\"\n        Check if an object is an instance of a dataclass.\n    \n        Args:\n            obj: The object to check.\n    \n        Returns:\n            True if the object is a dataclass instance, False otherwise.\n        \"\"\"\n>       return isinstance(obj, dataclass)\nE       TypeError: isinstance() arg 2 must be a type, a tuple of types, or a union\n\nlitestar/utils/dataclass.py:104: TypeError\n_________________ test_cache_control_from_header_single_value __________________\n\n    def test_cache_control_from_header_single_value() -> None:\n        header_value = \"no-cache\"\n        header = CacheControlHeader.from_header(header_value)\n>       header_dict = simple_asdict(header, exclude_none=True)\n\ntests/unit/test_datastructures/test_headers.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/utils/dataclass.py:145: in simple_asdict\n    if not is_dataclass_instance(obj):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=True, no_store=None, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\n\n    def is_dataclass_instance(obj: Any) -> TypeGuard[DataclassProtocol]:\n        \"\"\"\n        Check if an object is an instance of a dataclass.\n    \n        Args:\n            obj: The object to check.\n    \n        Returns:\n            True if the object is a dataclass instance, False otherwise.\n        \"\"\"\n>       return isinstance(obj, dataclass)\nE       TypeError: isinstance() arg 2 must be a type, a tuple of types, or a union\n\nlitestar/utils/dataclass.py:104: TypeError\n__________________ test_cache_control_header_prevent_storing ___________________\n\n    def test_cache_control_header_prevent_storing() -> None:\n        header = CacheControlHeader.prevent_storing()\n>       header_dict = simple_asdict(header, exclude_none=True)\n\ntests/unit/test_datastructures/test_headers.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/utils/dataclass.py:145: in simple_asdict\n    if not is_dataclass_instance(obj):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=None, no_store=True, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\n\n    def is_dataclass_instance(obj: Any) -> TypeGuard[DataclassProtocol]:\n        \"\"\"\n        Check if an object is an instance of a dataclass.\n    \n        Args:\n            obj: The object to check.\n    \n        Returns:\n            True if the object is a dataclass instance, False otherwise.\n        \"\"\"\n>       return isinstance(obj, dataclass)\nE       TypeError: isinstance() arg 2 must be a type, a tuple of types, or a union\n\nlitestar/utils/dataclass.py:104: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_from_header\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_from_header_single_value\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_header_prevent_storing\n============================== 3 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 24, in <module>\n    from .scope import (  # type: ignore[attr-defined]\n  File \"/root/repos/py_data/litestar/litestar/utils/scope/__init__.py\", line 5, in <module>\n    from litestar.serialization import get_serializer\n  File \"/root/repos/py_data/litestar/litestar/serialization/__init__.py\", line 1, in <module>\n    from .msgspec_hooks import (\n  File \"/root/repos/py_data/litestar/litestar/serialization/msgspec_hooks.py\", line 22, in <module>\n    from litestar.datastructures.secret_values import SecretBytes, SecretString\n  File \"/root/repos/py_data/litestar/litestar/datastructures/__init__.py\", line 2, in <module>\n    from litestar.datastructures.headers import (\n  File \"/root/repos/py_data/litestar/litestar/datastructures/headers.py\", line 30, in <module>\n    from litestar.utils.dataclass import simple_asdict\n  File \"/root/repos/py_data/litestar/litestar/utils/dataclass.py\", line 91, in <module>\n    class DataclassProtocol(DataclassProtocol):\nTypeError: Protocol() takes no arguments\n\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_datastructures/test_headers.py FFF                       [100%]\n\n=================================== FAILURES ===================================\n________________________ test_cache_control_from_header ________________________\n\n    def test_cache_control_from_header() -> None:\n        header_value = (\n            \"public, private, no-store, no-cache, max-age=10000, s-maxage=1000, no-transform, \"\n            \"must-revalidate, proxy-revalidate, must-understand, immutable, stale-while-revalidate=100\"\n        )\n        header = CacheControlHeader.from_header(header_value)\n>       assert simple_asdict(header) == {\n            \"documentation_only\": False,\n            \"public\": True,\n            \"private\": True,\n            \"no_store\": True,\n            \"no_cache\": True,\n            \"max_age\": 10000,\n            \"s_maxage\": 1000,\n            \"no_transform\": True,\n            \"must_revalidate\": True,\n            \"proxy_revalidate\": True,\n            \"must_understand\": True,\n            \"immutable\": True,\n            \"stale_while_revalidate\": 100,\n        }\n\ntests/unit/test_datastructures/test_headers.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = CacheControlHeader(documentation_only=False, max_age=10000, s_maxage=1000, no_cache=True, no_store=True, private=True,...rm=True, must_revalidate=True, proxy_revalidate=True, must_understand=True, immutable=True, stale_while_revalidate=100)\nexclude_none = False, exclude_empty = False, convert_nested = False\nexclude = ()\n\n    def simple_asdict(\n        obj: Any,\n        exclude_none: bool = False,\n        exclude_empty: bool = False,\n        convert_nested: bool = False,\n        exclude: Iterable[str] = (),\n    ) -> dict:\n        \"\"\"\n        Convert a dataclass to a dictionary.\n    \n        This method has important differences to the standard library version:\n        - it does not deepcopy values\n        - it does not recurse into collections\n    \n        Args:\n            obj: A dataclass instance.\n            exclude_none: Whether to exclude None values.\n            exclude_empty: Whether to exclude Empty values.\n            convert_nested: Whether to recursively convert nested dataclasses.\n            exclude: An iterable of fields to exclude.\n    \n        Returns:\n            A dictionary of key/value pairs.\n        \"\"\"\n        if not is_dataclass_instance(obj):\n            return asdict(obj)\n    \n        fields = extract_dataclass_fields(obj)\n        result = {}\n    \n        for field in fields:\n>           value = getattr(obj, field)\nE           TypeError: getattr(): attribute name must be string\n\nlitestar/utils/dataclass.py:124: TypeError\n_________________ test_cache_control_from_header_single_value __________________\n\n    def test_cache_control_from_header_single_value() -> None:\n        header_value = \"no-cache\"\n        header = CacheControlHeader.from_header(header_value)\n>       header_dict = simple_asdict(header, exclude_none=True)\n\ntests/unit/test_datastructures/test_headers.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=True, no_store=None, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\nexclude_none = True, exclude_empty = False, convert_nested = False, exclude = ()\n\n    def simple_asdict(\n        obj: Any,\n        exclude_none: bool = False,\n        exclude_empty: bool = False,\n        convert_nested: bool = False,\n        exclude: Iterable[str] = (),\n    ) -> dict:\n        \"\"\"\n        Convert a dataclass to a dictionary.\n    \n        This method has important differences to the standard library version:\n        - it does not deepcopy values\n        - it does not recurse into collections\n    \n        Args:\n            obj: A dataclass instance.\n            exclude_none: Whether to exclude None values.\n            exclude_empty: Whether to exclude Empty values.\n            convert_nested: Whether to recursively convert nested dataclasses.\n            exclude: An iterable of fields to exclude.\n    \n        Returns:\n            A dictionary of key/value pairs.\n        \"\"\"\n        if not is_dataclass_instance(obj):\n            return asdict(obj)\n    \n        fields = extract_dataclass_fields(obj)\n        result = {}\n    \n        for field in fields:\n>           value = getattr(obj, field)\nE           TypeError: getattr(): attribute name must be string\n\nlitestar/utils/dataclass.py:124: TypeError\n__________________ test_cache_control_header_prevent_storing ___________________\n\n    def test_cache_control_header_prevent_storing() -> None:\n        header = CacheControlHeader.prevent_storing()\n>       header_dict = simple_asdict(header, exclude_none=True)\n\ntests/unit/test_datastructures/test_headers.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=None, no_store=True, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\nexclude_none = True, exclude_empty = False, convert_nested = False, exclude = ()\n\n    def simple_asdict(\n        obj: Any,\n        exclude_none: bool = False,\n        exclude_empty: bool = False,\n        convert_nested: bool = False,\n        exclude: Iterable[str] = (),\n    ) -> dict:\n        \"\"\"\n        Convert a dataclass to a dictionary.\n    \n        This method has important differences to the standard library version:\n        - it does not deepcopy values\n        - it does not recurse into collections\n    \n        Args:\n            obj: A dataclass instance.\n            exclude_none: Whether to exclude None values.\n            exclude_empty: Whether to exclude Empty values.\n            convert_nested: Whether to recursively convert nested dataclasses.\n            exclude: An iterable of fields to exclude.\n    \n        Returns:\n            A dictionary of key/value pairs.\n        \"\"\"\n        if not is_dataclass_instance(obj):\n            return asdict(obj)\n    \n        fields = extract_dataclass_fields(obj)\n        result = {}\n    \n        for field in fields:\n>           value = getattr(obj, field)\nE           TypeError: getattr(): attribute name must be string\n\nlitestar/utils/dataclass.py:124: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_from_header\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_from_header_single_value\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_header_prevent_storing\n============================== 3 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/path.py-join_paths": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_path.py F..FF.FF.F                            [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_join_single _______________________________\n\n    def test_join_single() -> None:\n>       assert join_paths([\"\"]) == \"/\"\nE       AssertionError: assert '.' == '/'\nE         \nE         - /\nE         + .\n\ntests/unit/test_utils/test_path.py:28: AssertionError\n_________________ test_join_url_fragments[path/-sub-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub-/path/sub] __________________\n\nbase = 'path', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n________________ test_join_url_fragments[path/-sub/-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub/-/path/sub] _________________\n\nbase = 'path', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert 'path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         ? -\nE         + path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_____________________________ test_join_empty_list _____________________________\n\n    def test_join_empty_list() -> None:\n>       assert join_paths([]) == \"/\"\nE       AssertionError: assert '.' == '/'\nE         \nE         - /\nE         + .\n\ntests/unit/test_utils/test_path.py:24: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_path.py::test_join_single - AssertionError:...\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_empty_list - AssertionEr...\n========================= 6 failed, 4 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_path.py F.FFF.FF.F                            [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_join_single _______________________________\n\n    def test_join_single() -> None:\n>       assert join_paths([\"\"]) == \"/\"\nE       AssertionError: assert '/root/repos/py_data/litestar' == '/'\nE         \nE         - /\nE         + /root/repos/py_data/litestar\n\ntests/unit/test_utils/test_path.py:28: AssertionError\n_______________ test_join_url_fragments[/path/-/sub/-/path/sub] ________________\n\nbase = '/path/', fragment = '/sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path/-sub-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub-/path/sub] __________________\n\nbase = 'path', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n________________ test_join_url_fragments[path/-sub/-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub/-/path/sub] _________________\n\nbase = 'path', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_____________________________ test_join_empty_list _____________________________\n\n    def test_join_empty_list() -> None:\n>       assert join_paths([]) == \"/\"\nE       AssertionError: assert '/root/repos/py_data/litestar' == '/'\nE         \nE         - /\nE         + /root/repos/py_data/litestar\n\ntests/unit/test_utils/test_path.py:24: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_path.py::test_join_single - AssertionError:...\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[/path/-/sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_empty_list - AssertionEr...\n========================= 7 failed, 3 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_path.py F.FFF.FF.F                            [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_join_single _______________________________\n\n    def test_join_single() -> None:\n>       assert join_paths([\"\"]) == \"/\"\nE       AssertionError: assert '/root/repos/py_data/litestar' == '/'\nE         \nE         - /\nE         + /root/repos/py_data/litestar\n\ntests/unit/test_utils/test_path.py:28: AssertionError\n_______________ test_join_url_fragments[/path/-/sub/-/path/sub] ________________\n\nbase = '/path/', fragment = '/sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path/-sub-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub-/path/sub] __________________\n\nbase = 'path', fragment = 'sub', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n________________ test_join_url_fragments[path/-sub/-/path/sub] _________________\n\nbase = 'path/', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_________________ test_join_url_fragments[path-sub/-/path/sub] _________________\n\nbase = 'path', fragment = 'sub/', expected = '/path/sub'\n\n    @pytest.mark.parametrize(\n        \"base,fragment, expected\",\n        (\n            (\"/path/\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"/sub/\", \"/path/sub\"),\n            (\"path/\", \"sub\", \"/path/sub\"),\n            (\"path\", \"sub\", \"/path/sub\"),\n            (\"/path/\", \"sub/\", \"/path/sub\"),\n            (\"path/\", \"sub/\", \"/path/sub\"),\n            (\"path\", \"sub/\", \"/path/sub\"),\n            (\"/\", \"/root/sub\", \"/root/sub\"),\n        ),\n    )\n    def test_join_url_fragments(base: str, fragment: str, expected: str) -> None:\n>       assert join_paths([base, fragment]) == expected\nE       AssertionError: assert '/root/repos/...star/path/sub' == '/path/sub'\nE         \nE         - /path/sub\nE         + /root/repos/py_data/litestar/path/sub\n\ntests/unit/test_utils/test_path.py:20: AssertionError\n_____________________________ test_join_empty_list _____________________________\n\n    def test_join_empty_list() -> None:\n>       assert join_paths([]) == \"/\"\nE       AssertionError: assert '/root/repos/py_data/litestar' == '/'\nE         \nE         - /\nE         + /root/repos/py_data/litestar\n\ntests/unit/test_utils/test_path.py:24: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_path.py::test_join_single - AssertionError:...\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[/path/-/sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path/-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_url_fragments[path-sub/-/path/sub]\nFAILED tests/unit/test_utils/test_path.py::test_join_empty_list - AssertionEr...\n========================= 7 failed, 3 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/helpers.py-get_name": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 11 items\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py .               [  9%]\ntests/unit/test_utils/test_helpers.py .F...F                             [ 63%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py ..           [ 81%]\ntests/unit/test_openapi/test_schema.py ..                                [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_name[value1-Foo] ___________________________\n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7f6017d1cbb0>\nexpected = 'Foo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7f6017d1cbb0>\n\n    def get_name(value: object) -> str:\n        \"\"\"\n        Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return value.__name__\nE       AttributeError: 'Foo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:36: AttributeError\n_______________________ test_get_name[value5-GenericFoo] _______________________\n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7f6017d1ccd0>\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7f6017d1ccd0>\n\n    def get_name(value: object) -> str:\n        \"\"\"\n        Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return value.__name__\nE       AttributeError: 'GenericFoo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:36: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value1-Foo] - Att...\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value5-GenericFoo]\n=================== 2 failed, 9 passed, 2 warnings in 0.13s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 11 items\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py .               [  9%]\ntests/unit/test_utils/test_helpers.py .F...F                             [ 63%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py ..           [ 81%]\ntests/unit/test_openapi/test_schema.py ..                                [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_name[value1-Foo] ___________________________\n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7f118b4bcd00>\nexpected = 'Foo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7f118b4bcd00>\n\n    def get_name(value: object) -> str:\n        \"\"\"\n        Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return str(value.__name__)\nE       AttributeError: 'Foo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:36: AttributeError\n_______________________ test_get_name[value5-GenericFoo] _______________________\n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7f118b4bce20>\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7f118b4bce20>\n\n    def get_name(value: object) -> str:\n        \"\"\"\n        Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return str(value.__name__)\nE       AttributeError: 'GenericFoo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:36: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value1-Foo] - Att...\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value5-GenericFoo]\n=================== 2 failed, 9 passed, 2 warnings in 0.13s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 11 items\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py .               [  9%]\ntests/unit/test_utils/test_helpers.py .F...F                             [ 63%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py ..           [ 81%]\ntests/unit/test_openapi/test_schema.py ..                                [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_name[value1-Foo] ___________________________\n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7ff27e78cb50>\nexpected = 'Foo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7ff27e78cb50>\n\n    def get_name(value: object) -> str:\n        \"\"\"\n        Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return str(value.__name__)\nE       AttributeError: 'Foo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:36: AttributeError\n_______________________ test_get_name[value5-GenericFoo] _______________________\n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7ff27e78cc70>\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7ff27e78cc70>\n\n    def get_name(value: object) -> str:\n        \"\"\"\n        Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return str(value.__name__)\nE       AttributeError: 'GenericFoo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:36: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value1-Foo] - Att...\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value5-GenericFoo]\n=================== 2 failed, 9 passed, 2 warnings in 0.12s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/predicates.py-is_dataclass_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_utils/test_dataclass.py F                                [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_dataclass_class ____________________________\n\n    def test_is_dataclass_class() -> None:\n        \"\"\"is_dataclass_class() should return True for types and False for instances.\"\"\"\n    \n        @dataclass\n        class Foo:\n            \"\"\"A Foo model.\"\"\"\n    \n            bar: str = \"bar\"\n    \n        assert is_dataclass_class(Foo)\n>       assert not is_dataclass_class(Foo())\nE       AssertionError: assert not True\nE        +  where True = is_dataclass_class(test_is_dataclass_class.<locals>.Foo(bar='bar'))\nE        +    where test_is_dataclass_class.<locals>.Foo(bar='bar') = <class 'tests.unit.test_utils.test_dataclass.test_is_dataclass_class.<locals>.Foo'>()\n\ntests/unit/test_utils/test_dataclass.py:190: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_dataclass.py::test_is_dataclass_class - Ass...\n============================== 1 failed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_utils/test_dataclass.py F                                [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_dataclass_class ____________________________\n\n    def test_is_dataclass_class() -> None:\n        \"\"\"is_dataclass_class() should return True for types and False for instances.\"\"\"\n    \n        @dataclass\n        class Foo:\n            \"\"\"A Foo model.\"\"\"\n    \n            bar: str = \"bar\"\n    \n        assert is_dataclass_class(Foo)\n>       assert not is_dataclass_class(Foo())\nE       AssertionError: assert not True\nE        +  where True = is_dataclass_class(test_is_dataclass_class.<locals>.Foo(bar='bar'))\nE        +    where test_is_dataclass_class.<locals>.Foo(bar='bar') = <class 'tests.unit.test_utils.test_dataclass.test_is_dataclass_class.<locals>.Foo'>()\n\ntests/unit/test_utils/test_dataclass.py:190: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_dataclass.py::test_is_dataclass_class - Ass...\n============================== 1 failed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 7, in <module>\n    from .predicates import (\n  File \"/root/repos/py_data/litestar/litestar/utils/predicates.py\", line 98, in <module>\n    from dataclasses import is_dataclass, dataclasses\nImportError: cannot import name 'dataclasses' from 'dataclasses' (/usr/local/lib/python3.10/dataclasses.py)\n\n\n"], "litestar-litestar/utils/predicates.py-is_class_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_utils/test_predicates.py ___________\ntests/unit/test_utils/test_predicates.py:204: in <module>\n    (Annotated[ClassVar[int], \"abc\"], True),\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1677: in __class_getitem__\n    origin = _type_check(params[0], msg)\n/usr/local/lib/python3.10/typing.py:167: in _type_check\n    raise TypeError(f\"{arg} is not valid as type argument\")\nE   TypeError: typing.ClassVar[int] is not valid as type argument\n=========================== short test summary info ============================\nERROR tests/unit/test_utils/test_predicates.py - TypeError: typing.ClassVar[i...\n=============================== 1 error in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_utils/test_predicates.py::test_is_class_var\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_utils/test_predicates.py ___________\ntests/unit/test_utils/test_predicates.py:204: in <module>\n    (Annotated[ClassVar[int], \"abc\"], True),\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1677: in __class_getitem__\n    origin = _type_check(params[0], msg)\n/usr/local/lib/python3.10/typing.py:167: in _type_check\n    raise TypeError(f\"{arg} is not valid as type argument\")\nE   TypeError: typing.ClassVar[int] is not valid as type argument\n=========================== short test summary info ============================\nERROR tests/unit/test_utils/test_predicates.py - TypeError: typing.ClassVar[i...\n=============================== 1 error in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_utils/test_predicates.py::test_is_class_var\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_utils/test_predicates.py ___________\ntests/unit/test_utils/test_predicates.py:204: in <module>\n    (Annotated[ClassVar[int], \"abc\"], True),\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1677: in __class_getitem__\n    origin = _type_check(params[0], msg)\n/usr/local/lib/python3.10/typing.py:167: in _type_check\n    raise TypeError(f\"{arg} is not valid as type argument\")\nE   TypeError: typing.ClassVar[int] is not valid as type argument\n=========================== short test summary info ============================\nERROR tests/unit/test_utils/test_predicates.py - TypeError: typing.ClassVar[i...\n=============================== 1 error in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_utils/test_predicates.py::test_is_class_var\n\n"], "litestar-litestar/utils/module_loader.py-import_string": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_utils/test_module_loader.py F..                          [100%]\n\n=================================== FAILURES ===================================\n__________________ test_import_non_existing_attribute_raises ___________________\n\n    def test_import_non_existing_attribute_raises() -> None:\n        with pytest.raises(ImportError):\n>           import_string(\"litestar.app.some_random_string\")\n\ntests/unit/test_utils/test_module_loader.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndotted_path = 'litestar.app.some_random_string'\n\n    def import_string(dotted_path: str) -> Any:\n        \"\"\"\n        Dotted Path Import.\n    \n        Import a dotted module path and return the attribute/class designated by the\n        last name in the path. Raise ImportError if the import failed.\n    \n        Args:\n            dotted_path: The path of the module to import.\n    \n        Raises:\n            ImportError: Could not import the module.\n    \n        Returns:\n            object: The imported object.\n        \"\"\"\n        try:\n            # Split the dotted path into module names\n            module_names = dotted_path.split('.')\n    \n            # Initialize the module to import\n            module = __import__(module_names[0])\n    \n            # Import the remaining modules in the path\n            for name in module_names[1:]:\n>               module = getattr(module, name)\nE               AttributeError: module 'litestar.app' has no attribute 'some_random_string'\n\nlitestar/utils/module_loader.py:73: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_module_loader.py::test_import_non_existing_attribute_raises\n========================= 1 failed, 2 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_utils/test_module_loader.py F.F                          [100%]\n\n=================================== FAILURES ===================================\n__________________ test_import_non_existing_attribute_raises ___________________\n\n    def test_import_non_existing_attribute_raises() -> None:\n        with pytest.raises(ImportError):\n>           import_string(\"litestar.app.some_random_string\")\n\ntests/unit/test_utils/test_module_loader.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndotted_path = 'litestar.app.some_random_string'\n\n    def import_string(dotted_path: str) -> Any:\n        \"\"\"\n        Dotted Path Import.\n    \n        Import a dotted module path and return the attribute/class designated by the\n        last name in the path. Raise ImportError if the import failed.\n    \n        Args:\n            dotted_path: The path of the module to import.\n    \n        Raises:\n            ImportError: Could not import the module.\n    \n        Returns:\n            object: The imported object.\n        \"\"\"\n        try:\n            # Split the dotted path into module names\n            module_names = dotted_path.split('.')\n    \n            # Import the module\n            module = importlib.import_module('.'.join(module_names[:-1]))\n    \n            # Get the attribute/class from the module\n>           return getattr(module, module_names[-1])\nE           AttributeError: module 'litestar.app' has no attribute 'some_random_string'\n\nlitestar/utils/module_loader.py:72: AttributeError\n______________________________ test_import_string ______________________________\n\n    def test_import_string() -> None:\n        cls = import_string(\"litestar.config.compression.CompressionConfig\")\n        assert type(cls) == type(CompressionConfig)\n    \n        with pytest.raises(ImportError):\n>           _ = import_string(\"CompressionConfigNew\")\n\ntests/unit/test_utils/test_module_loader.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/utils/module_loader.py:69: in import_string\n    module = importlib.import_module('.'.join(module_names[:-1]))\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1047: in _gcd_import\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = '', package = None, level = 0\n\n>   ???\nE   ValueError: Empty module name\n\n<frozen importlib._bootstrap>:981: ValueError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_module_loader.py::test_import_non_existing_attribute_raises\nFAILED tests/unit/test_utils/test_module_loader.py::test_import_string - Valu...\n========================= 2 failed, 1 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_utils/test_module_loader.py ..F                          [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_import_string ______________________________\n\n    def test_import_string() -> None:\n        cls = import_string(\"litestar.config.compression.CompressionConfig\")\n        assert type(cls) == type(CompressionConfig)\n    \n        with pytest.raises(ImportError):\n>           _ = import_string(\"CompressionConfigNew\")\n\ntests/unit/test_utils/test_module_loader.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndotted_path = 'CompressionConfigNew'\n\n    def import_string(dotted_path: str) -> Any:\n        \"\"\"\n        Dotted Path Import.\n    \n        Import a dotted module path and return the attribute/class designated by the\n        last name in the path. Raise ImportError if the import failed.\n    \n        Args:\n            dotted_path: The path of the module to import.\n    \n        Raises:\n            ImportError: Could not import the module.\n    \n        Returns:\n            object: The imported object.\n        \"\"\"\n>       module, attr = dotted_path.rsplit('.', 1)\nE       ValueError: not enough values to unpack (expected 2, got 1)\n\nlitestar/utils/module_loader.py:64: ValueError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_module_loader.py::test_import_string - Valu...\n========================= 1 failed, 2 passed in 0.10s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/channels/backends/redis.py-unsubscribe": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_unsubscribe_without_subscription\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_unsubscribe_without_subscription\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_unsubscribe_without_subscription\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\n"], "litestar-litestar/channels/backends/redis.py-publish": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_stream_backend_expires\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_streams_backend_flushall\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_shutdown_leftover_messages\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_publish_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_publish_not_initialized_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_stream_backend_expires\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_streams_backend_flushall\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_shutdown_leftover_messages\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_publish_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_publish_not_initialized_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_stream_backend_expires\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_streams_backend_flushall\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_shutdown_leftover_messages\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_publish_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_publish_not_initialized_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-stream_events": ["\nImportError while loading conftest '/root/repos/py_data/litestar/tests/unit/test_channels/conftest.py'.\ntests/unit/test_channels/conftest.py:9: in <module>\n    from litestar.channels.backends.redis import RedisChannelsPubSubBackend, RedisChannelsStreamBackend\nlitestar/channels/backends/redis.py:158: in <module>\n    class RedisChannelsStreamBackend(RedisChannelsBackend):\nlitestar/channels/backends/redis.py:235: in RedisChannelsStreamBackend\n    import aioredis\nE   ModuleNotFoundError: No module named 'aioredis'\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-get_history": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_psycopg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_psycopg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_psycopg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\n"], "litestar-litestar/dto/_backend.py-create_transfer_model_type": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._codegen_backend.DTOCodegenBackend object at 0x7f2359c20e00>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:423: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7f2359b13dc0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:423: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\n============================== 2 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._codegen_backend.DTOCodegenBackend object at 0x7f4763bf4e00>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:419: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7f4763acf440>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:419: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\n============================== 2 failed in 0.14s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._codegen_backend.DTOCodegenBackend object at 0x7fc5e22a8e00>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:422: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fc5e21874c0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:422: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\n============================== 2 failed in 0.14s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_builtins": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 261, in DTOBackend\n    from asgi_types import ASGIConnection\nModuleNotFoundError: No module named 'asgi_types'\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 260, in DTOBackend\n    from starlette.types import ASGIConnection\nImportError: cannot import name 'ASGIConnection' from 'starlette.types' (/usr/local/lib/python3.10/site-packages/starlette/types.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 261, in DTOBackend\n    from starlette.requests import ASGIConnection\nImportError: cannot import name 'ASGIConnection' from 'starlette.requests' (/usr/local/lib/python3.10/site-packages/starlette/requests.py)\n\n\n"], "litestar-litestar/dto/_backend.py-populate_data_from_raw": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 301, in DTOBackend\n    from asgi_conn import ASGIConnection\nModuleNotFoundError: No module named 'asgi_conn'\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 301, in DTOBackend\n    from litestar import ASGIConnection\nImportError: cannot import name 'ASGIConnection' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 301, in DTOBackend\n    from asgi_types import ASGIConnection\nModuleNotFoundError: No module named 'asgi_types'\n\n\n"], "litestar-litestar/dto/_backend.py-encode_data": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 329, in DTOBackend\n    from litestar import LitestarEncodableType\nImportError: cannot import name 'LitestarEncodableType' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 6 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py ......   [100%]\n\n============================== 6 passed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 65, in <module>\n    class DTOBackend:\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 328, in DTOBackend\n    from litestar import LitestarEncodableType\nImportError: cannot import name 'LitestarEncodableType' from partially initialized module 'litestar' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/__init__.py)\n\n\n"], "litestar-litestar/dto/_backend.py-_create_transfer_model_type_annotation": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py FFFFFFFFF   [100%]\n\n=================================== FAILURES ===================================\n_______ test_create_transfer_model_type_annotation_tuple_type_not_nested _______\n\n    def test_create_transfer_model_type_annotation_tuple_type_not_nested() -> None:\n        transfer_type = TupleType(\n            field_definition=FieldDefinition.from_annotation(Tuple[str, int]),\n            inner_types=(\n                SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n                SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            ),\n            has_nested=False,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Tuple[str, int]\nE       AssertionError: assert TupleType(field_definition=FieldDefinition(raw=typing.Tuple[str, int], annotation=typing.Tuple[str, int], type_wrapper...ne, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None))) == typing.Tuple[str, int]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:107: AssertionError\n_ test_create_transfer_model_type_annotation_simple_type_without_nested_field_info _\n\n    def test_create_transfer_model_type_annotation_simple_type_without_nested_field_info() -> None:\n        transfer_type = SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None)\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == int\nE       AssertionError: assert SimpleType(field_definition=FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=N...None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None) == int\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:37: AssertionError\n______ test_create_transfer_model_type_annotation_mapping_type_not_nested ______\n\n    def test_create_transfer_model_type_annotation_mapping_type_not_nested() -> None:\n        transfer_type = MappingType(\n            field_definition=FieldDefinition.from_annotation(Dict[str, int]),\n            key_type=SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n            value_type=SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            has_nested=False,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Dict[str, int]\nE       AssertionError: assert MappingType(field_definition=FieldDefinition(raw=typing.Dict[str, int], annotation=typing.Dict[str, int], type_wrapper...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)) == typing.Dict[str, int]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:80: AssertionError\n_________ test_create_transfer_model_type_annotation_tuple_type_nested _________\n\n    def test_create_transfer_model_type_annotation_tuple_type_nested() -> None:\n        transfer_type = TupleType(\n            field_definition=FieldDefinition.from_annotation(Tuple[str, DataModel]),\n            inner_types=(\n                SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n                SimpleType(\n                    field_definition=FieldDefinition.from_annotation(DataModel),\n                    nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n                ),\n            ),\n            has_nested=True,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Tuple[str, TransferModel]\nE       AssertionError: assert TupleType(field_definition=FieldDefinition(raw=typing.Tuple[str, tests.unit.test_dto.test_factory.test_backends.test_u...dInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=())))) == typing.Tuple[str, tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:123: AssertionError\n_____ test_create_transfer_model_type_annotation_unexpected_transfer_type ______\n\n    def test_create_transfer_model_type_annotation_unexpected_transfer_type() -> None:\n        transfer_type = CompositeType(field_definition=FieldDefinition.from_annotation(Union[str, int]), has_nested=False)\n>       with pytest.raises(RuntimeError):\nE       Failed: DID NOT RAISE <class 'RuntimeError'>\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:128: Failed\n_ test_create_transfer_model_type_annotation_simple_type_with_nested_field_info _\n\n    def test_create_transfer_model_type_annotation_simple_type_with_nested_field_info() -> None:\n        transfer_type = SimpleType(\n            field_definition=FieldDefinition.from_annotation(DataModel),\n            nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == TransferModel\nE       AssertionError: assert SimpleType(field_definition=FieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.Data...eldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=())) == TransferModel\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:46: AssertionError\n______ test_create_transfer_model_type_annotation_collection_type_nested _______\n\n    def test_create_transfer_model_type_annotation_collection_type_nested() -> None:\n        transfer_type = CollectionType(\n            field_definition=FieldDefinition.from_annotation(List[DataModel]),\n            inner_type=SimpleType(\n                field_definition=FieldDefinition.from_annotation(DataModel),\n                nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n            ),\n            has_nested=True,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == List[TransferModel]\nE       AssertionError: assert CollectionType(field_definition=FieldDefinition(raw=typing.List[tests.unit.test_dto.test_factory.test_backends.test_ut...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))) == typing.List[tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:69: AssertionError\n____ test_create_transfer_model_type_annotation_collection_type_not_nested _____\n\n    def test_create_transfer_model_type_annotation_collection_type_not_nested() -> None:\n        transfer_type = CollectionType(\n            field_definition=FieldDefinition.from_annotation(List[int]),\n            inner_type=SimpleType(field_definition=FieldDefinition.from_annotation(int), nested_field_info=None),\n            has_nested=False,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == List[int]\nE       AssertionError: assert CollectionType(field_definition=FieldDefinition(raw=typing.List[int], annotation=typing.List[int], type_wrappers=set()...one, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), nested_field_info=None)) == typing.List[int]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:56: AssertionError\n________ test_create_transfer_model_type_annotation_mapping_type_nested ________\n\n    def test_create_transfer_model_type_annotation_mapping_type_nested() -> None:\n        transfer_type = MappingType(\n            field_definition=FieldDefinition.from_annotation(Dict[str, DataModel]),\n            key_type=SimpleType(field_definition=FieldDefinition.from_annotation(str), nested_field_info=None),\n            value_type=SimpleType(\n                field_definition=FieldDefinition.from_annotation(DataModel),\n                nested_field_info=NestedFieldInfo(model=TransferModel, field_definitions=()),\n            ),\n            has_nested=True,\n        )\n        annotation = _create_transfer_model_type_annotation(transfer_type=transfer_type)\n>       assert annotation == Dict[str, TransferModel]\nE       AssertionError: assert MappingType(field_definition=FieldDefinition(raw=typing.Dict[str, tests.unit.test_dto.test_factory.test_backends.test_...ldInfo(model=<class 'tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel'>, field_definitions=()))) == typing.Dict[str, tests.unit.test_dto.test_factory.test_backends.test_utils.TransferModel]\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:94: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_tuple_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_simple_type_without_nested_field_info\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_mapping_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_tuple_type_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_unexpected_transfer_type\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_simple_type_with_nested_field_info\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_collection_type_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_collection_type_not_nested\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_mapping_type_nested\n============================== 9 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 884, in <module>\n    from typing import (  # noqa: F401\nImportError: cannot import name 'CollectionType' from 'typing' (/usr/local/lib/python3.10/typing.py)\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 21, in <module>\n    from litestar._openapi.plugin import OpenAPIPlugin\n  File \"/root/repos/py_data/litestar/litestar/_openapi/plugin.py\", line 5, in <module>\n    from litestar._openapi.datastructures import OpenAPIContext\n  File \"/root/repos/py_data/litestar/litestar/_openapi/datastructures.py\", line 7, in <module>\n    from litestar.openapi.spec import Reference, Schema\n  File \"/root/repos/py_data/litestar/litestar/openapi/__init__.py\", line 1, in <module>\n    from .config import OpenAPIConfig\n  File \"/root/repos/py_data/litestar/litestar/openapi/config.py\", line 8, in <module>\n    from litestar.openapi.plugins import (\n  File \"/root/repos/py_data/litestar/litestar/openapi/plugins.py\", line 11, in <module>\n    from litestar.handlers import get\n  File \"/root/repos/py_data/litestar/litestar/handlers/__init__.py\", line 1, in <module>\n    from .asgi_handlers import ASGIRouteHandler, asgi\n  File \"/root/repos/py_data/litestar/litestar/handlers/asgi_handlers.py\", line 6, in <module>\n    from litestar.handlers.base import BaseRouteHandler\n  File \"/root/repos/py_data/litestar/litestar/handlers/base.py\", line 7, in <module>\n    from litestar._signature import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/__init__.py\", line 1, in <module>\n    from .model import SignatureModel\n  File \"/root/repos/py_data/litestar/litestar/_signature/model.py\", line 36, in <module>\n    from litestar.dto import AbstractDTO, DTOData\n  File \"/root/repos/py_data/litestar/litestar/dto/__init__.py\", line 1, in <module>\n    from .base_dto import AbstractDTO\n  File \"/root/repos/py_data/litestar/litestar/dto/base_dto.py\", line 10, in <module>\n    from litestar.dto._backend import DTOBackend\n  File \"/root/repos/py_data/litestar/litestar/dto/_backend.py\", line 889\n    def _create_transfer_model_mapping_type(transfer_type: MappingType) -> Any:\n    ^^^\nIndentationError: expected an indented block after function definition on line 886\n\n\n"], "litestar-litestar/response/file.py-start_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_response/test_file_response.py FF                        [100%]\n\n=================================== FAILURES ===================================\n______________ test_file_response_with_missing_file_raises_error _______________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2045/test_file_response_with_missin0')\n\n    async def test_file_response_with_missing_file_raises_error(tmpdir: Path) -> None:\n        path = tmpdir / \"404.txt\"\n>       with pytest.raises(ImproperlyConfiguredException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.ImproperlyConfiguredException'>\n\ntests/unit/test_response/test_file_response.py:276: Failed\n________________ test_file_response_with_directory_raises_error ________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2045/test_file_response_with_direct0')\n\n    async def test_file_response_with_directory_raises_error(tmpdir: Path) -> None:\n>       with pytest.raises(ImproperlyConfiguredException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.ImproperlyConfiguredException'>\n\ntests/unit/test_response/test_file_response.py:99: Failed\n=========================== short test summary info ============================\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_missing_file_raises_error\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_directory_raises_error\n============================== 2 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nsys:1: RuntimeWarning: coroutine 'FileSystemAdapter.info' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_response/test_file_response.py FF                        [100%]\n\n=================================== FAILURES ===================================\n______________ test_file_response_with_missing_file_raises_error _______________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2046/test_file_response_with_missin0')\n\n    async def test_file_response_with_missing_file_raises_error(tmpdir: Path) -> None:\n        path = tmpdir / \"404.txt\"\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=path, filename=\"404.txt\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.response.file.ASGIFileResponse object at 0x7f6e18042e40>\nsend = <function empty_send at 0x7f6e1ae295a0>\n\n    async def start_response(self, send: Callable[[str, dict], None]) -> None:\n        \"\"\"\n        Emit the start event of the response. This event includes the headers and status codes.\n    \n        Args:\n            send: The ASGI send function.\n    \n        Returns:\n            None\n        \"\"\"\n        # Code to emit the start event of the response goes here\n        # For example, you might send the HTTP version, status code, and headers\n        http_version = \"HTTP/1.1\"\n        status_code = 200  # Replace with the actual status code\n        headers = {\n            \"Content-Type\": \"text/plain\",\n            # Add more headers as needed\n        }\n    \n        # Send the start event to the client\n>       await send(f\"{http_version} {status_code} OK\\r\\n\", headers)\nE       TypeError: empty_send() takes 1 positional argument but 2 were given\n\nlitestar/response/file.py:220: TypeError\n________________ test_file_response_with_directory_raises_error ________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2046/test_file_response_with_direct0')\n\n    async def test_file_response_with_directory_raises_error(tmpdir: Path) -> None:\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=tmpdir, filename=\"example.png\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.response.file.ASGIFileResponse object at 0x7f6e17d6c8c0>\nsend = <function empty_send at 0x7f6e1ae295a0>\n\n    async def start_response(self, send: Callable[[str, dict], None]) -> None:\n        \"\"\"\n        Emit the start event of the response. This event includes the headers and status codes.\n    \n        Args:\n            send: The ASGI send function.\n    \n        Returns:\n            None\n        \"\"\"\n        # Code to emit the start event of the response goes here\n        # For example, you might send the HTTP version, status code, and headers\n        http_version = \"HTTP/1.1\"\n        status_code = 200  # Replace with the actual status code\n        headers = {\n            \"Content-Type\": \"text/plain\",\n            # Add more headers as needed\n        }\n    \n        # Send the start event to the client\n>       await send(f\"{http_version} {status_code} OK\\r\\n\", headers)\nE       TypeError: empty_send() takes 1 positional argument but 2 were given\n\nlitestar/response/file.py:220: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_missing_file_raises_error\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_directory_raises_error\n============================== 2 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nsys:1: RuntimeWarning: coroutine 'FileSystemAdapter.info' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_response/test_file_response.py FF                        [100%]\n\n=================================== FAILURES ===================================\n______________ test_file_response_with_missing_file_raises_error _______________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2047/test_file_response_with_missin0')\n\n    async def test_file_response_with_missing_file_raises_error(tmpdir: Path) -> None:\n        path = tmpdir / \"404.txt\"\n>       with pytest.raises(ImproperlyConfiguredException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.ImproperlyConfiguredException'>\n\ntests/unit/test_response/test_file_response.py:276: Failed\n________________ test_file_response_with_directory_raises_error ________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2047/test_file_response_with_direct0')\n\n    async def test_file_response_with_directory_raises_error(tmpdir: Path) -> None:\n>       with pytest.raises(ImproperlyConfiguredException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.ImproperlyConfiguredException'>\n\ntests/unit/test_response/test_file_response.py:99: Failed\n=========================== short test summary info ============================\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_missing_file_raises_error\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_directory_raises_error\n============================== 2 failed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nsys:1: RuntimeWarning: coroutine 'FileSystemAdapter.info' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"], "litestar-litestar/connection/request.py-json": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 71 items\n\ntests/unit/test_dto/test_factory/test_integration.py ................... [ 26%]\n....................................................                     [100%]\n\n============================== 71 passed in 0.92s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 71 items\n\ntests/unit/test_dto/test_factory/test_integration.py ................... [ 26%]\n....................................................                     [100%]\n\n============================== 71 passed in 0.91s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 71 items\n\ntests/unit/test_dto/test_factory/test_integration.py ................... [ 26%]\n....................................................                     [100%]\n\n============================== 71 passed in 0.91s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/multi_dicts.py-close": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 24, in <module>\n    from .scope import (  # type: ignore[attr-defined]\n  File \"/root/repos/py_data/litestar/litestar/utils/scope/__init__.py\", line 5, in <module>\n    from litestar.serialization import get_serializer\n  File \"/root/repos/py_data/litestar/litestar/serialization/__init__.py\", line 1, in <module>\n    from .msgspec_hooks import (\n  File \"/root/repos/py_data/litestar/litestar/serialization/msgspec_hooks.py\", line 22, in <module>\n    from litestar.datastructures.secret_values import SecretBytes, SecretString\n  File \"/root/repos/py_data/litestar/litestar/datastructures/__init__.py\", line 2, in <module>\n    from litestar.datastructures.headers import (\n  File \"/root/repos/py_data/litestar/litestar/datastructures/headers.py\", line 27, in <module>\n    from litestar.datastructures.multi_dicts import MultiMixin\n  File \"/root/repos/py_data/litestar/litestar/datastructures/multi_dicts.py\", line 95, in <module>\n    class FormMultiDict(ImmutableMultiDict[Any]):\n  File \"/root/repos/py_data/litestar/litestar/datastructures/multi_dicts.py\", line 99, in FormMultiDict\n    from litestar.datastructures import MultiDict\nImportError: cannot import name 'MultiDict' from partially initialized module 'litestar.datastructures' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/datastructures/__init__.py)\n\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_datastructures/test_multi_dicts.py F                     [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_form_multi_dict_close __________________________\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f639f709db0>\n\n    async def test_form_multi_dict_close(mocker: MockerFixture) -> None:\n        close = mocker.patch(\"litestar.datastructures.multi_dicts.UploadFile.close\")\n    \n        multi = FormMultiDict(\n            [\n                (\"foo\", UploadFile(filename=\"foo\", content_type=\"text/plain\")),\n                (\"bar\", UploadFile(filename=\"foo\", content_type=\"text/plain\")),\n            ]\n        )\n    \n>       await multi.close()\nE       AttributeError: 'FormMultiDict' object has no attribute 'close'\n\ntests/unit/test_datastructures/test_multi_dicts.py:47: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_multi_dicts.py::test_form_multi_dict_close\n============================== 1 failed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_datastructures/test_multi_dicts.py F                     [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_form_multi_dict_close __________________________\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f6409051c30>\n\n    async def test_form_multi_dict_close(mocker: MockerFixture) -> None:\n        close = mocker.patch(\"litestar.datastructures.multi_dicts.UploadFile.close\")\n    \n        multi = FormMultiDict(\n            [\n                (\"foo\", UploadFile(filename=\"foo\", content_type=\"text/plain\")),\n                (\"bar\", UploadFile(filename=\"foo\", content_type=\"text/plain\")),\n            ]\n        )\n    \n>       await multi.close()\nE       AttributeError: 'FormMultiDict' object has no attribute 'close'\n\ntests/unit/test_datastructures/test_multi_dicts.py:47: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_multi_dicts.py::test_form_multi_dict_close\n============================== 1 failed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/url.py-from_scope": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 24, in <module>\n    from .scope import (  # type: ignore[attr-defined]\n  File \"/root/repos/py_data/litestar/litestar/utils/scope/__init__.py\", line 5, in <module>\n    from litestar.serialization import get_serializer\n  File \"/root/repos/py_data/litestar/litestar/serialization/__init__.py\", line 1, in <module>\n    from .msgspec_hooks import (\n  File \"/root/repos/py_data/litestar/litestar/serialization/msgspec_hooks.py\", line 22, in <module>\n    from litestar.datastructures.secret_values import SecretBytes, SecretString\n  File \"/root/repos/py_data/litestar/litestar/datastructures/__init__.py\", line 20, in <module>\n    from litestar.datastructures.url import URL, Address\n  File \"/root/repos/py_data/litestar/litestar/datastructures/url.py\", line 167\n    from .types import Scope\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 24, in <module>\n    from .scope import (  # type: ignore[attr-defined]\n  File \"/root/repos/py_data/litestar/litestar/utils/scope/__init__.py\", line 5, in <module>\n    from litestar.serialization import get_serializer\n  File \"/root/repos/py_data/litestar/litestar/serialization/__init__.py\", line 1, in <module>\n    from .msgspec_hooks import (\n  File \"/root/repos/py_data/litestar/litestar/serialization/msgspec_hooks.py\", line 22, in <module>\n    from litestar.datastructures.secret_values import SecretBytes, SecretString\n  File \"/root/repos/py_data/litestar/litestar/datastructures/__init__.py\", line 20, in <module>\n    from litestar.datastructures.url import URL, Address\n  File \"/root/repos/py_data/litestar/litestar/datastructures/url.py\", line 167\n    from dataclasses import dataclass\n    ^^^^\nSyntaxError: invalid syntax\n\n\n", "\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 24, in <module>\n    from .scope import (  # type: ignore[attr-defined]\n  File \"/root/repos/py_data/litestar/litestar/utils/scope/__init__.py\", line 5, in <module>\n    from litestar.serialization import get_serializer\n  File \"/root/repos/py_data/litestar/litestar/serialization/__init__.py\", line 1, in <module>\n    from .msgspec_hooks import (\n  File \"/root/repos/py_data/litestar/litestar/serialization/msgspec_hooks.py\", line 22, in <module>\n    from litestar.datastructures.secret_values import SecretBytes, SecretString\n  File \"/root/repos/py_data/litestar/litestar/datastructures/__init__.py\", line 20, in <module>\n    from litestar.datastructures.url import URL, Address\n  File \"/root/repos/py_data/litestar/litestar/datastructures/url.py\", line 167\n    from typing import TypeVar, Generic\n    ^^^^\nSyntaxError: invalid syntax\n\n\n"], "litestar-litestar/datastructures/headers.py-to_header": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_datastructures/test_headers.py F                         [ 20%]\ntests/unit/test_response/test_response_headers.py ....                   [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cache_control_to_header _________________________\n\n    def test_cache_control_to_header() -> None:\n        header = CacheControlHeader(max_age=10, private=True)\n        expected_header_values = [\"max-age=10, private\", \"private, max-age=10\"]\n        assert header.to_header() in expected_header_values\n>       assert header.to_header(include_header_name=True) in [f\"cache-control: {v}\" for v in expected_header_values]\n\ntests/unit/test_datastructures/test_headers.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=None, no_store=None, private=True, pu...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ninclude_header_name = True\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        \"\"\"\n        Get the header as string.\n    \n        Args:\n            include_header_name: should include the header name in the return value.\n                If set to false the return value will only include the header value.\n                If set to true the return value will be: ``<header name>: <header value>``.\n                Defaults to false.\n    \n        Returns:\n            str: The header value or header name and value depending on the include_header_name parameter.\n        \"\"\"\n        if include_header_name:\n>           return f\"{self._get_header_name()}: {self._get_header_value()}\"\nE           AttributeError: 'CacheControlHeader' object has no attribute '_get_header_name'. Did you mean: '_get_header_value'?\n\nlitestar/datastructures/headers.py:272: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_to_header\n========================= 1 failed, 4 passed in 0.19s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_datastructures/test_headers.py F                         [ 20%]\ntests/unit/test_response/test_response_headers.py ....                   [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cache_control_to_header _________________________\n\n    def test_cache_control_to_header() -> None:\n        header = CacheControlHeader(max_age=10, private=True)\n        expected_header_values = [\"max-age=10, private\", \"private, max-age=10\"]\n        assert header.to_header() in expected_header_values\n>       assert header.to_header(include_header_name=True) in [f\"cache-control: {v}\" for v in expected_header_values]\nE       AssertionError: assert 'max-age=10, private: max-age=10, private' in ['cache-control: max-age=10, private', 'cache-control: private, max-age=10']\nE        +  where 'max-age=10, private: max-age=10, private' = <bound method Header.to_header of CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=Non...=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)>(include_header_name=True)\nE        +    where <bound method Header.to_header of CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=Non...=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)> = CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=None, no_store=None, private=True, pu...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None).to_header\n\ntests/unit/test_datastructures/test_headers.py:251: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_to_header\n========================= 1 failed, 4 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_datastructures/test_headers.py F                         [ 20%]\ntests/unit/test_response/test_response_headers.py ....                   [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cache_control_to_header _________________________\n\n    def test_cache_control_to_header() -> None:\n        header = CacheControlHeader(max_age=10, private=True)\n        expected_header_values = [\"max-age=10, private\", \"private, max-age=10\"]\n        assert header.to_header() in expected_header_values\n>       assert header.to_header(include_header_name=True) in [f\"cache-control: {v}\" for v in expected_header_values]\n\ntests/unit/test_datastructures/test_headers.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=None, no_store=None, private=True, pu...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ninclude_header_name = True\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        \"\"\"\n        Get the header as string.\n    \n        Args:\n            include_header_name: should include the header name in the return value.\n                If set to false the return value will only include the header value.\n                if set to true the return value will be: ``<header name>: <header value>``.\n                Defaults to false.\n    \n        Returns:\n            A string representation of the header, possibly including the header name.\n        \"\"\"\n        header_value = self._get_header_value()\n        if include_header_name:\n>           return f\"{self._get_header_name()}: {header_value}\"\nE           AttributeError: 'CacheControlHeader' object has no attribute '_get_header_name'. Did you mean: '_get_header_value'?\n\nlitestar/datastructures/headers.py:273: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_to_header\n========================= 1 failed, 4 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/middleware/session/server_side.py-delete": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_security/test_session_auth.py F                          [ 33%]\ntests/unit/test_middleware/test_session/test_server_side_backend.py FF   [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_authentication ______________________________\n\nsession_backend_config_memory = ServerSideSessionConfig(session_id_bytes=32, renew_on_access=False, key='session', max_age=1209600, scopes={<ScopeType...main=None, secure=False, httponly=True, samesite='lax', exclude=None, exclude_opt_key='skip_session', store='sessions')\n\n    def test_authentication(session_backend_config_memory: ServerSideSessionConfig) -> None:\n        session_auth = SessionAuth[Any, ServerSideSessionBackend](\n            retrieve_user_handler=retrieve_user_handler,\n            exclude=[\"login\"],\n            session_backend_config=session_backend_config_memory,\n        )\n    \n        @post(\"/login\")\n        def login_handler(request: \"Request[Any, Any, Any]\", data: User) -> None:\n            request.set_session(msgspec.to_builtins(data))\n    \n        @delete(\"/user/{user_id:str}\")\n        def delete_user_handler(request: \"Request[User, Any, Any]\") -> None:\n            request.clear_session()\n    \n        @get(\"/user/{user_id:str}\")\n        def get_user_handler(request: \"Request[User, Any, Any]\") -> User:\n            return request.user\n    \n        with create_test_client(\n            route_handlers=[login_handler, delete_user_handler, get_user_handler],\n            on_app_init=[session_auth.on_app_init],\n        ) as client:\n            response = client.get(f\"user/{user_instance.id}\")\n>           assert response.status_code == HTTP_401_UNAUTHORIZED, response.json()\n\ntests/unit/test_security/test_session_auth.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/httpx/_models.py:764: in json\n    return jsonlib.loads(self.content, **kwargs)\n/usr/local/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/local/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff9d1815cf0>\ns = 'Traceback (most recent call last):\\n  File \"/root/repos/py_data/litestar/litestar/middleware/_internal/exceptions/mid...  await store.delete_session(session_id)\\nAttributeError: \\'MemoryStore\\' object has no attribute \\'delete_session\\'\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/local/lib/python3.10/json/decoder.py:355: JSONDecodeError\n----------------------------- Captured stderr call -----------------------------\nERROR - ,-768239981 - litestar - middleware - Uncaught exception (connection_type=http, path=/user/39b2ec89-525d-4e70-bace-b45b37cd5fab):\nTraceback (most recent call last):\n  File \"/root/repos/py_data/litestar/litestar/middleware/_internal/exceptions/middleware.py\", line 159, in __call__\n    await self.app(scope, receive, capture_response_started)\n  File \"/root/repos/py_data/litestar/litestar/middleware/authentication.py\", line 87, in __call__\n    auth_result = await self.authenticate_request(ASGIConnection(scope))\n  File \"/root/repos/py_data/litestar/litestar/security/session_auth/middleware.py\", line 112, in authenticate_request\n    raise NotAuthorizedException(\"no session data found\")\nlitestar.exceptions.http_exceptions.NotAuthorizedException: 401: no session data found\nERROR - \u0416v,\ufffdU,-768239980 - litestar - middleware - Uncaught exception (connection_type=http, path=/user/39b2ec89-525d-4e70-bace-b45b37cd5fab):\nTraceback (most recent call last):\n  File \"/root/repos/py_data/litestar/litestar/middleware/_internal/exceptions/middleware.py\", line 159, in __call__\n    await self.app(scope, receive, capture_response_started)\n  File \"/root/repos/py_data/litestar/litestar/middleware/authentication.py\", line 87, in __call__\n    auth_result = await self.authenticate_request(ASGIConnection(scope))\n  File \"/root/repos/py_data/litestar/litestar/security/session_auth/middleware.py\", line 112, in authenticate_request\n    raise NotAuthorizedException(\"no session data found\")\nlitestar.exceptions.http_exceptions.NotAuthorizedException: 401: no session data found\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/root/repos/py_data/litestar/litestar/middleware/_internal/exceptions/middleware.py\", line 159, in __call__\n    await self.app(scope, receive, capture_response_started)\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 99, in __call__\n    await asgi_app(scope, receive, send)\n  File \"/root/repos/py_data/litestar/litestar/security/session_auth/middleware.py\", line 63, in __call__\n    await self.app(scope, receive, send)\n  File \"/root/repos/py_data/litestar/litestar/middleware/base.py\", line 129, in wrapped_call\n    await original__call__(self, scope, receive, send)  # pyright: ignore\n  File \"/root/repos/py_data/litestar/litestar/middleware/session/base.py\", line 256, in __call__\n    await self.app(scope, receive, self.create_send_wrapper(connection))\n  File \"/root/repos/py_data/litestar/litestar/middleware/_internal/exceptions/middleware.py\", line 176, in __call__\n    await self.handle_request_exception(\n  File \"/root/repos/py_data/litestar/litestar/middleware/_internal/exceptions/middleware.py\", line 208, in handle_request_exception\n    await response.to_asgi_response(app=None, request=request, type_encoders=type_encoders)(\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 194, in __call__\n    await self.start_response(send=send)\n  File \"/root/repos/py_data/litestar/litestar/response/base.py\", line 165, in start_response\n    await send(event)\n  File \"/root/repos/py_data/litestar/litestar/middleware/session/base.py\", line 235, in wrapped_send\n    await self.backend.store_in_message(scope_session, message, connection)\n  File \"/root/repos/py_data/litestar/litestar/middleware/session/server_side.py\", line 136, in store_in_message\n    await self.delete(session_id, store=store)\n  File \"/root/repos/py_data/litestar/litestar/middleware/session/server_side.py\", line 81, in delete\n    await store.delete_session(session_id)\nAttributeError: 'MemoryStore' object has no attribute 'delete_session'\n_________________________________ test_delete __________________________________\n\nserver_side_session_backend = <litestar.middleware.session.server_side.ServerSideSessionBackend object at 0x7ff9c835af80>\nmemory_store = <litestar.stores.memory.MemoryStore object at 0x7ff9c82afbb0>\n\n    async def test_delete(server_side_session_backend: \"ServerSideSessionBackend\", memory_store: MemoryStore) -> None:\n        await server_side_session_backend.set(\"foo\", generate_session_data(), memory_store)\n        await server_side_session_backend.set(\"bar\", generate_session_data(), memory_store)\n    \n>       await server_side_session_backend.delete(\"foo\", memory_store)\n\ntests/unit/test_middleware/test_session/test_server_side_backend.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.middleware.session.server_side.ServerSideSessionBackend object at 0x7ff9c835af80>\nsession_id = 'foo'\nstore = <litestar.stores.memory.MemoryStore object at 0x7ff9c82afbb0>\n\n    async def delete(self, session_id: str, store: 'Store') -> None:\n        \"\"\"\n        Delete the data associated with ``session_id``. Fails silently if no such session-ID exists.\n    \n        Args:\n            session_id: The session-ID\n            store: Store to delete the session data from\n    \n        Returns:\n            None\n        \"\"\"\n        # Your deletion logic here\n        # For example, you can use the store object to delete the session data\n>       await store.delete_session(session_id)\nE       AttributeError: 'MemoryStore' object has no attribute 'delete_session'\n\nlitestar/middleware/session/server_side.py:81: AttributeError\n___________________________ test_delete_idempotence ____________________________\n\nserver_side_session_backend = <litestar.middleware.session.server_side.ServerSideSessionBackend object at 0x7ff9c81006c0>\nsession_data = b'{\"6809d80b1adf187b930a01268138ea8522da3996c2402aef6865ee2f6e852cae\":\"85435e0829761ee4e64894ef90db461920785540132b917621689787d6200034\"}'\nmemory_store = <litestar.stores.memory.MemoryStore object at 0x7ff9c833a740>\n\n    async def test_delete_idempotence(\n        server_side_session_backend: \"ServerSideSessionBackend\", session_data: bytes, memory_store: MemoryStore\n    ) -> None:\n        await server_side_session_backend.set(\"foo\", session_data, memory_store)\n    \n>       await server_side_session_backend.delete(\"foo\", memory_store)\n\ntests/unit/test_middleware/test_session/test_server_side_backend.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.middleware.session.server_side.ServerSideSessionBackend object at 0x7ff9c81006c0>\nsession_id = 'foo'\nstore = <litestar.stores.memory.MemoryStore object at 0x7ff9c833a740>\n\n    async def delete(self, session_id: str, store: 'Store') -> None:\n        \"\"\"\n        Delete the data associated with ``session_id``. Fails silently if no such session-ID exists.\n    \n        Args:\n            session_id: The session-ID\n            store: Store to delete the session data from\n    \n        Returns:\n            None\n        \"\"\"\n        # Your deletion logic here\n        # For example, you can use the store object to delete the session data\n>       await store.delete_session(session_id)\nE       AttributeError: 'MemoryStore' object has no attribute 'delete_session'\n\nlitestar/middleware/session/server_side.py:81: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_security/test_session_auth.py::test_authentication - j...\nFAILED tests/unit/test_middleware/test_session/test_server_side_backend.py::test_delete\nFAILED tests/unit/test_middleware/test_session/test_server_side_backend.py::test_delete_idempotence\n============================== 3 failed in 0.18s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_security/test_session_auth.py .                          [ 33%]\ntests/unit/test_middleware/test_session/test_server_side_backend.py ..   [100%]\n\n============================== 3 passed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_security/test_session_auth.py .                          [ 33%]\ntests/unit/test_middleware/test_session/test_server_side_backend.py ..   [100%]\n\n============================== 3 passed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "marimo-marimo/_islands/island_generator.py-add_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/_islands/test_island_generator.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n>       block1 = generator.add_code(\"import marimo as mo\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:40: TypeError\n________________________________ test_add_code _________________________________\n\n    def test_add_code():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:18: TypeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:26: TypeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, islands!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:61: TypeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - TypeError: Mari...\nFAILED tests/_islands/test_island_generator.py::test_add_code - TypeError: Ma...\nFAILED tests/_islands/test_island_generator.py::test_build - TypeError: Marim...\nFAILED tests/_islands/test_island_generator.py::test_render_head - TypeError:...\n============================== 4 failed in 0.07s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/_islands/test_island_generator.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n>       block1 = generator.add_code(\"import marimo as mo\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:40: TypeError\n________________________________ test_add_code _________________________________\n\n    def test_add_code():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:18: TypeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:26: TypeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, islands!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:61: TypeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - TypeError: Mari...\nFAILED tests/_islands/test_island_generator.py::test_add_code - TypeError: Ma...\nFAILED tests/_islands/test_island_generator.py::test_build - TypeError: Marim...\nFAILED tests/_islands/test_island_generator.py::test_render_head - TypeError:...\n============================== 4 failed in 0.06s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/_islands/test_island_generator.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n>       block1 = generator.add_code(\"import marimo as mo\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:40: TypeError\n________________________________ test_add_code _________________________________\n\n    def test_add_code():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:18: TypeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, World!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:26: TypeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n>       generator.add_code(\"print('Hello, islands!')\")\nE       TypeError: MarimoIslandGenerator.add_code() missing 3 required positional arguments: 'display_output', 'is_raw', and 'is_reactive'\n\ntests/_islands/test_island_generator.py:61: TypeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - TypeError: Mari...\nFAILED tests/_islands/test_island_generator.py::test_add_code - TypeError: Ma...\nFAILED tests/_islands/test_island_generator.py::test_build - TypeError: Marim...\nFAILED tests/_islands/test_island_generator.py::test_render_head - TypeError:...\n============================== 4 failed in 0.06s ===============================\n\n"], "marimo-marimo/_islands/island_generator.py-build": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_islands/test_island_generator.py FFF                              [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n        block1 = generator.add_code(\"import marimo as mo\")\n        block2 = generator.add_code(\"mo.md('Hello, islands!')\")\n    \n>       await generator.build()\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'build'\n\ntests/_islands/test_island_generator.py:43: AttributeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, World!')\")\n    \n        # Check if the app is built successfully\n>       app = await generator.build()\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'build'\n\ntests/_islands/test_island_generator.py:29: AttributeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, islands!')\")\n>       await generator.build()\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'build'\n\ntests/_islands/test_island_generator.py:62: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - AttributeError:...\nFAILED tests/_islands/test_island_generator.py::test_build - AttributeError: ...\nFAILED tests/_islands/test_island_generator.py::test_render_head - AttributeE...\n============================== 3 failed in 0.06s ===============================\n\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:134: in <module>\n    class MarimoIslandGenerator:\nmarimo/_islands/island_generator.py:261: in MarimoIslandGenerator\n    from .internal_app import InternalApp\nE   ModuleNotFoundError: No module named 'marimo._islands.internal_app'\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_islands/test_island_generator.py FFF                              [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n        block1 = generator.add_code(\"import marimo as mo\")\n        block2 = generator.add_code(\"mo.md('Hello, islands!')\")\n    \n>       await generator.build()\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'build'\n\ntests/_islands/test_island_generator.py:43: AttributeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, World!')\")\n    \n        # Check if the app is built successfully\n>       app = await generator.build()\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'build'\n\ntests/_islands/test_island_generator.py:29: AttributeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, islands!')\")\n>       await generator.build()\nE       AttributeError: 'MarimoIslandGenerator' object has no attribute 'build'\n\ntests/_islands/test_island_generator.py:62: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - AttributeError:...\nFAILED tests/_islands/test_island_generator.py::test_build - AttributeError: ...\nFAILED tests/_islands/test_island_generator.py::test_render_head - AttributeE...\n============================== 3 failed in 0.06s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-build_dataclass": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_utils/test_parse_dataclass.py ..                                  [100%]\n\n============================== 2 passed in 0.04s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_utils/test_parse_dataclass.py ..                                  [100%]\n\n============================== 2 passed in 0.03s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_utils/test_parse_dataclass.py ..                                  [100%]\n\n============================== 2 passed in 0.03s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-parse_raw": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_plugins/stateless/icon.py-icon": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:89: in <module>\n    from marimo._plugins.stateless.icon import icon\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/icon.py\", line 14\nE       **Args.**\nE   IndentationError: unexpected indent\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:89: in <module>\n    from marimo._plugins.stateless.icon import icon\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/icon.py\", line 14\nE       **Args.**\nE   IndentationError: unexpected indent\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:89: in <module>\n    from marimo._plugins.stateless.icon import icon\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/icon.py\", line 14\nE       **Args.**\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_plugins/stateless/image.py-image": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:90: in <module>\n    from marimo._plugins.stateless.image import image\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/image.py\", line 90\nE       **Args.**\nE   IndentationError: unexpected indent\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:90: in <module>\n    from marimo._plugins.stateless.image import image\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/image.py\", line 90\nE       **Args.**\nE   IndentationError: unexpected indent\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:90: in <module>\n    from marimo._plugins.stateless.image import image\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/image.py\", line 90\nE       Args.\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_plugins/stateless/flex.py-hstack": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:16: in <module>\n    from marimo._plugins.ui import code_editor\nmarimo/_plugins/ui/__init__.py:40: in <module>\n    from marimo._plugins.ui._impl.array import array\nmarimo/_plugins/ui/_impl/array.py:10: in <module>\n    from marimo._plugins.stateless.flex import hstack, vstack\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/flex.py\", line 131\nE       **Args.**\nE   IndentationError: unexpected indent\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:16: in <module>\n    from marimo._plugins.ui import code_editor\nmarimo/_plugins/ui/__init__.py:40: in <module>\n    from marimo._plugins.ui._impl.array import array\nmarimo/_plugins/ui/_impl/array.py:10: in <module>\n    from marimo._plugins.stateless.flex import hstack, vstack\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/flex.py\", line 131\nE       **Args.**\nE   IndentationError: unexpected indent\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:16: in <module>\n    from marimo._plugins.ui import code_editor\nmarimo/_plugins/ui/__init__.py:40: in <module>\n    from marimo._plugins.ui._impl.array import array\nmarimo/_plugins/ui/_impl/array.py:10: in <module>\n    from marimo._plugins.stateless.flex import hstack, vstack\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/flex.py\", line 131\nE       **Args.**\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_plugins/stateless/status/_progress.py-update_progress": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:82: in <module>\n    from marimo._plugins.stateless import mpl, status\nmarimo/_plugins/stateless/status/__init__.py:6: in <module>\n    from marimo._plugins.stateless.status._progress import progress_bar, spinner\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/status/_progress.py\", line 269\nE       every 150ms.\nE               ^\nE   SyntaxError: invalid decimal literal\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:82: in <module>\n    from marimo._plugins.stateless import mpl, status\nmarimo/_plugins/stateless/status/__init__.py:6: in <module>\n    from marimo._plugins.stateless.status._progress import progress_bar, spinner\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/status/_progress.py\", line 271\nE       every 150ms.\nE               ^\nE   SyntaxError: invalid decimal literal\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:82: in <module>\n    from marimo._plugins.stateless import mpl, status\nmarimo/_plugins/stateless/status/__init__.py:6: in <module>\n    from marimo._plugins.stateless.status._progress import progress_bar, spinner\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/status/_progress.py\", line 269\nE       every 150ms.\nE               ^\nE   SyntaxError: invalid decimal literal\n"], "marimo-marimo/_plugins/core/web_component.py-build_ui_plugin": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/core/test_web_component.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_args_escaped _______________________________\n\n    def test_args_escaped() -> None:\n        initial_value = \"'ello&\"\n>       html = build_ui_plugin(\n            \"tag-name\", initial_value, label=None, args={\"text\": \"a & b\"}\n        )\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:16: TypeError\n___________________________ test_initial_value_parse ___________________________\n\n    def test_initial_value_parse() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=None, args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:32: TypeError\n____________________________ test_label_md_compiled ____________________________\n\n    def test_label_md_compiled() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=\"$x$\", args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:40: TypeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_args_escaped - TypeErr...\nFAILED tests/_plugins/core/test_web_component.py::test_initial_value_parse - ...\nFAILED tests/_plugins/core/test_web_component.py::test_label_md_compiled - Ty...\n============================== 3 failed in 0.06s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/core/test_web_component.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_args_escaped _______________________________\n\n    def test_args_escaped() -> None:\n        initial_value = \"'ello&\"\n>       html = build_ui_plugin(\n            \"tag-name\", initial_value, label=None, args={\"text\": \"a & b\"}\n        )\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:16: TypeError\n___________________________ test_initial_value_parse ___________________________\n\n    def test_initial_value_parse() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=None, args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:32: TypeError\n____________________________ test_label_md_compiled ____________________________\n\n    def test_label_md_compiled() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=\"$x$\", args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:40: TypeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_args_escaped - TypeErr...\nFAILED tests/_plugins/core/test_web_component.py::test_initial_value_parse - ...\nFAILED tests/_plugins/core/test_web_component.py::test_label_md_compiled - Ty...\n============================== 3 failed in 0.06s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/core/test_web_component.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_args_escaped _______________________________\n\n    def test_args_escaped() -> None:\n        initial_value = \"'ello&\"\n>       html = build_ui_plugin(\n            \"tag-name\", initial_value, label=None, args={\"text\": \"a & b\"}\n        )\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:16: TypeError\n___________________________ test_initial_value_parse ___________________________\n\n    def test_initial_value_parse() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=None, args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:32: TypeError\n____________________________ test_label_md_compiled ____________________________\n\n    def test_label_md_compiled() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=\"$x$\", args={})\nE       TypeError: build_ui_plugin() missing 1 required positional argument: 'slotted_html'\n\ntests/_plugins/core/test_web_component.py:40: TypeError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_args_escaped - TypeErr...\nFAILED tests/_plugins/core/test_web_component.py::test_initial_value_parse - ...\nFAILED tests/_plugins/core/test_web_component.py::test_label_md_compiled - Ty...\n============================== 3 failed in 0.06s ===============================\n\n"], "marimo-marimo/_output/formatting.py-as_html": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatting.py\", line 237\nE       This is the best way to opt out of marimo's\nE                                                ^\nE   SyntaxError: unterminated string literal (detected at line 237)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatting.py\", line 238\nE       This is the best way to opt out of marimo's\nE                                                ^\nE   SyntaxError: unterminated string literal (detected at line 238)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatting.py\", line 234\nE       This is the best way to opt out of marimo's\nE                                                ^\nE   SyntaxError: unterminated string literal (detected at line 234)\n"], "marimo-marimo/_output/md.py-md": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nmarimo/_output/formatting.py:33: in <module>\n    from marimo._plugins.stateless.json_output import json_output\nmarimo/_plugins/stateless/json_output.py:7: in <module>\n    from marimo._plugins.core.web_component import JSONType, build_stateless_plugin\nmarimo/_plugins/core/web_component.py:26: in <module>\n    from marimo._output.md import md\nE     File \"/root/repos/py_data/marimo/marimo/_output/md.py\", line 78\nE       \"\"\"\nE       ^\nE   SyntaxError: unterminated triple-quoted string literal (detected at line 91)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nmarimo/_output/formatting.py:33: in <module>\n    from marimo._plugins.stateless.json_output import json_output\nmarimo/_plugins/stateless/json_output.py:7: in <module>\n    from marimo._plugins.core.web_component import JSONType, build_stateless_plugin\nmarimo/_plugins/core/web_component.py:26: in <module>\n    from marimo._output.md import md\nE     File \"/root/repos/py_data/marimo/marimo/_output/md.py\", line 80\nE       \"\"\"\nE       ^\nE   SyntaxError: unterminated triple-quoted string literal (detected at line 93)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nmarimo/_output/formatting.py:33: in <module>\n    from marimo._plugins.stateless.json_output import json_output\nmarimo/_plugins/stateless/json_output.py:7: in <module>\n    from marimo._plugins.core.web_component import JSONType, build_stateless_plugin\nmarimo/_plugins/core/web_component.py:26: in <module>\n    from marimo._output.md import md\nE     File \"/root/repos/py_data/marimo/marimo/_output/md.py\", line 78\nE       \"\"\"\nE       ^\nE   SyntaxError: unterminated triple-quoted string literal (detected at line 91)\n"], "marimo-marimo/_output/formatters/formatters.py-register_formatters": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:33: in <module>\n    register_formatters()\nmarimo/_output/formatters/formatters.py:82: in register_formatters\n    for filename in os.listdir(formatters_path):\nE   NameError: name 'os' is not defined\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:33: in <module>\n    register_formatters()\nmarimo/_output/formatters/formatters.py:73: in register_formatters\n    structures.register()\nE   AttributeError: module 'marimo._output.formatters.structures' has no attribute 'register'\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:33: in <module>\n    register_formatters()\nmarimo/_output/formatters/formatters.py:72: in register_formatters\n    from marimo._output.formatters import (\nE   ImportError: cannot import name 'register' from 'marimo._output.formatters' (/root/repos/py_data/marimo/marimo/_output/formatters/__init__.py)\n"], "marimo-marimo/_data/series.py-get_category_series_info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_data/test_series.py ss                                            [100%]\n\n=========================== short test summary info ============================\nSKIPPED [2] tests/_data/test_series.py:58: optional dependencies not installed\n============================== 2 skipped in 0.02s ==============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_data/test_series.py ss                                            [100%]\n\n=========================== short test summary info ============================\nSKIPPED [2] tests/_data/test_series.py:58: optional dependencies not installed\n============================== 2 skipped in 0.01s ==============================\n\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:16: in <module>\n    from marimo._plugins.ui import code_editor\nmarimo/_plugins/ui/__init__.py:46: in <module>\n    from marimo._plugins.ui._impl.input import (\nmarimo/_plugins/ui/_impl/input.py:26: in <module>\n    from marimo._data.series import (\nmarimo/_data/series.py:87: in <module>\n    from marimo._dependencies.dependencies import has_polars, has_pandas\nE   ImportError: cannot import name 'has_polars' from 'marimo._dependencies.dependencies' (/root/repos/py_data/marimo/marimo/_dependencies/dependencies.py)\n"], "marimo-marimo/_data/preview_column.py-get_column_preview": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:112: in <module>\n    from marimo._runtime.runtime import cli_args, defs, query_params, refs\nmarimo/_runtime/runtime.py:26: in <module>\n    from marimo._data.preview_column import get_column_preview\nmarimo/_data/preview_column.py:18: in <module>\n    from marimo._plugins.ui._impl.tables import get_table_manager_or_none\nE   ImportError: cannot import name 'get_table_manager_or_none' from 'marimo._plugins.ui._impl.tables' (unknown location)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:112: in <module>\n    from marimo._runtime.runtime import cli_args, defs, query_params, refs\nmarimo/_runtime/runtime.py:26: in <module>\n    from marimo._data.preview_column import get_column_preview\nmarimo/_data/preview_column.py:18: in <module>\n    from marimo._plugins.ui._impl.tables import get_table_manager_or_none\nE   ImportError: cannot import name 'get_table_manager_or_none' from 'marimo._plugins.ui._impl.tables' (unknown location)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:112: in <module>\n    from marimo._runtime.runtime import cli_args, defs, query_params, refs\nmarimo/_runtime/runtime.py:26: in <module>\n    from marimo._data.preview_column import get_column_preview\nmarimo/_data/preview_column.py:18: in <module>\n    from marimo._plugins.ui._impl.tables import TableManager, get_table_manager_or_none\nE   ImportError: cannot import name 'TableManager' from 'marimo._plugins.ui._impl.tables' (unknown location)\n"], "marimo-marimo/_server/sessions.py-start_file_watcher": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:14: in <module>\n    from marimo._server.api.auth import (\nmarimo/_server/api/auth.py:24: in <module>\n    from marimo._server.api.deps import AppState\nmarimo/_server/api/deps.py:10: in <module>\n    from marimo._server.sessions import Session, SessionManager\nmarimo/_server/sessions.py:562: in <module>\n    class SessionManager:\nmarimo/_server/sessions.py:809: in SessionManager\n    from marimo._utils import Disposable\nE   ImportError: cannot import name 'Disposable' from 'marimo._utils' (/root/repos/py_data/marimo/marimo/_utils/__init__.py)\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:14: in <module>\n    from marimo._server.api.auth import (\nmarimo/_server/api/auth.py:24: in <module>\n    from marimo._server.api.deps import AppState\nmarimo/_server/api/deps.py:10: in <module>\n    from marimo._server.sessions import Session, SessionManager\nmarimo/_server/sessions.py:562: in <module>\n    class SessionManager:\nmarimo/_server/sessions.py:809: in SessionManager\n    from marimo._utils import Disposable\nE   ImportError: cannot import name 'Disposable' from 'marimo._utils' (/root/repos/py_data/marimo/marimo/_utils/__init__.py)\n"], "marimo-marimo/_server/file_manager.py-save_app_config": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_stdin": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_operation": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-get_cell_console_outputs": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_runtime/dataflow.py-register_cell": ["FAILED: No code block", "\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:73: in <module>\n    from marimo._ast.app import App\nmarimo/_ast/app.py:31: in <module>\n    from marimo._runtime import dataflow\nE     File \"/root/repos/py_data/marimo/marimo/_runtime/dataflow.py\", line 114\nE       class Edge:\nE       ^^^^^\nE   IndentationError: expected an indented block after class definition on line 111\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_runtime/packages/test_module_registry.py FFF                      [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_defining_cell ______________________________\n\n    def test_defining_cell() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        mpl = parse_cell(\"import matplotlib\")\n        np = parse_cell(\"import numpy\")\n>       graph.register_cell(\"0\", mpl)\nE       AttributeError: 'DirectedGraph' object has no attribute 'register_cell'\n\ntests/_runtime/packages/test_module_registry.py:14: AttributeError\n_____________________________ test_missing_modules _____________________________\n\n    def test_missing_modules() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n>       graph.register_cell(\"0\", parse_cell(\"import does.nt.exist as foo\"))\nE       AttributeError: 'DirectedGraph' object has no attribute 'register_cell'\n\ntests/_runtime/packages/test_module_registry.py:31: AttributeError\n__________________________ test_defining_cell_dotted ___________________________\n\n    def test_defining_cell_dotted() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        mpl = parse_cell(\"import matplotlib.pyplot as plt\")\n>       graph.register_cell(\"0\", mpl)\nE       AttributeError: 'DirectedGraph' object has no attribute 'register_cell'\n\ntests/_runtime/packages/test_module_registry.py:23: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_module_registry.py::test_defining_cell - ...\nFAILED tests/_runtime/packages/test_module_registry.py::test_missing_modules\nFAILED tests/_runtime/packages/test_module_registry.py::test_defining_cell_dotted\n============================== 3 failed in 0.07s ===============================\n\n"], "marimo-marimo/_runtime/validate_graph.py-check_for_errors": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/_runtime/test_validate_graph.py FFFFFFF                            [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cycle_and_multiple_def __________________________\n\n    def test_cycle_and_multiple_def() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x, z = y, 0\"))\n        graph.register_cell(\"1\", parse_cell(\"y, z = x, 0\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=2632553619788006522, code='x, z = y, 0', mod=<ast.Module object at 0x7fb3bc3c39...'z': {'0', '1'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7fb3bc268680>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n________________________ test_multiple_definition_error ________________________\n\n    def test_multiple_definition_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=1726400073559085787, code='x = 0', mod=<ast.Module object at 0x7fb3bc30bd60>, d...{'1'}, '1': {'0'}}, definitions={'x': {'0', '1'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fb3bc12d280>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n__________________________ test_delete_nonlocal_error __________________________\n\n    def test_delete_nonlocal_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"del x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=1726400073559085787, code='x = 0', mod=<ast.Module object at 0x7fb3bc3e4880>, d...'0': set(), '1': set()}, definitions={'x': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fb3bc3aae00>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n_________________ test_overlapping_multiple_definition_errors __________________\n\n    def test_overlapping_multiple_definition_errors() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x, y = 1, 2\"))\n        graph.register_cell(\"2\", parse_cell(\"y, z = 3, 4\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=1726400073559085787, code='x = 0', mod=<ast.Module object at 0x7fb3bc1275e0>, d...ns={'x': {'0', '1'}, 'y': {'1', '2'}, 'z': {'2'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fb3bc3e9bc0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n_____________________________ test_two_node_cycle ______________________________\n\n    def test_two_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-7908889040123443105, code='x = y', mod=<ast.Module object at 0x7fb3bc266ec0>, ...ons={'x': {'0'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7fb3bc2cdbc0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n____________________________ test_three_node_cycle _____________________________\n\n    def test_three_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = z\"))\n        graph.register_cell(\"2\", parse_cell(\"z = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-7908889040123443105, code='x = y', mod=<ast.Module object at 0x7fb3bc3e53f0>, ...1'}, 'z': {'2'}}, cycles={(('0', '2'), ('2', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7fb3bc155e40>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n____________________ test_underscore_variables_are_private _____________________\n\n    def test_underscore_variables_are_private() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"_x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"_x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:166: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-5981863826813533413, code='_x = 0', mod=<ast.Module object at 0x7fb3bc126fb0>,...siblings={'0': set(), '1': set()}, definitions={}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fb3bc14a4c0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors: Dict[CellId_t, List[CycleError]] = {}\n    \n        # Implement cycle detection algorithm here\n        # For example, using DFS\n        def dfs(node: CellId_t, visited: Set[CellId_t], stack: List[CellId_t]):\n            visited.add(node)\n            stack.append(node)\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited:\n                    if dfs(neighbor, visited, stack):\n                        errors[node] = [f\"Cycle detected: {stack}\"]\n                        return True\n                elif neighbor in stack:\n                    errors[node] = [f\"Cycle detected: {stack}\"]\n                    return True\n            stack.pop()\n            return False\n    \n>       for node in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:113: TypeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/test_validate_graph.py::test_cycle_and_multiple_def - T...\nFAILED tests/_runtime/test_validate_graph.py::test_multiple_definition_error\nFAILED tests/_runtime/test_validate_graph.py::test_delete_nonlocal_error - Ty...\nFAILED tests/_runtime/test_validate_graph.py::test_overlapping_multiple_definition_errors\nFAILED tests/_runtime/test_validate_graph.py::test_two_node_cycle - TypeError...\nFAILED tests/_runtime/test_validate_graph.py::test_three_node_cycle - TypeErr...\nFAILED tests/_runtime/test_validate_graph.py::test_underscore_variables_are_private\n============================== 7 failed in 0.09s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/_runtime/test_validate_graph.py FFFFFFF                            [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cycle_and_multiple_def __________________________\n\n    def test_cycle_and_multiple_def() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x, z = y, 0\"))\n        graph.register_cell(\"1\", parse_cell(\"y, z = x, 0\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=3568467975780283717, code='x, z = y, 0', mod=<ast.Module object at 0x7f0f1a4dff...'z': {'0', '1'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f0f1a382d40>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n________________________ test_multiple_definition_error ________________________\n\n    def test_multiple_definition_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=39291189761134867, code='x = 0', mod=<ast.Module object at 0x7f0f1a3663e0>, def...{'1'}, '1': {'0'}}, definitions={'x': {'0', '1'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f0f1a264cc0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n__________________________ test_delete_nonlocal_error __________________________\n\n    def test_delete_nonlocal_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"del x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=39291189761134867, code='x = 0', mod=<ast.Module object at 0x7f0f1a502350>, def...'0': set(), '1': set()}, definitions={'x': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f0f1a26c640>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n_________________ test_overlapping_multiple_definition_errors __________________\n\n    def test_overlapping_multiple_definition_errors() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x, y = 1, 2\"))\n        graph.register_cell(\"2\", parse_cell(\"y, z = 3, 4\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=39291189761134867, code='x = 0', mod=<ast.Module object at 0x7f0f1a424700>, def...ns={'x': {'0', '1'}, 'y': {'2', '1'}, 'z': {'2'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f0f1a24db40>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n_____________________________ test_two_node_cycle ______________________________\n\n    def test_two_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=2900419433127046280, code='x = y', mod=<ast.Module object at 0x7f0f1a236f80>, d...ons={'x': {'0'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f0f1a26d680>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n____________________________ test_three_node_cycle _____________________________\n\n    def test_three_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = z\"))\n        graph.register_cell(\"2\", parse_cell(\"z = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=2900419433127046280, code='x = y', mod=<ast.Module object at 0x7f0f1a235a20>, d...1'}, 'z': {'2'}}, cycles={(('0', '2'), ('2', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f0f1a4b9b40>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n____________________ test_underscore_variables_are_private _____________________\n\n    def test_underscore_variables_are_private() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"_x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"_x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:134: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=9135623637374928644, code='_x = 0', mod=<ast.Module object at 0x7f0f1a2359c0>, ...siblings={'0': set(), '1': set()}, definitions={}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f0f1a24b6c0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check the graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n>       for cell_id in graph.get_all_cells():\nE       AttributeError: 'DirectedGraph' object has no attribute 'get_all_cells'\n\nmarimo/_runtime/validate_graph.py:95: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/test_validate_graph.py::test_cycle_and_multiple_def - A...\nFAILED tests/_runtime/test_validate_graph.py::test_multiple_definition_error\nFAILED tests/_runtime/test_validate_graph.py::test_delete_nonlocal_error - At...\nFAILED tests/_runtime/test_validate_graph.py::test_overlapping_multiple_definition_errors\nFAILED tests/_runtime/test_validate_graph.py::test_two_node_cycle - Attribute...\nFAILED tests/_runtime/test_validate_graph.py::test_three_node_cycle - Attribu...\nFAILED tests/_runtime/test_validate_graph.py::test_underscore_variables_are_private\n============================== 7 failed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/_runtime/test_validate_graph.py FFFFFFF                            [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cycle_and_multiple_def __________________________\n\n    def test_cycle_and_multiple_def() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x, z = y, 0\"))\n        graph.register_cell(\"1\", parse_cell(\"y, z = x, 0\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=2006634395920879679, code='x, z = y, 0', mod=<ast.Module object at 0x7f3bfab639...0'}, 'x': {'0'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f3bfaa10080>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n________________________ test_multiple_definition_error ________________________\n\n    def test_multiple_definition_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=5691452766591352543, code='x = 0', mod=<ast.Module object at 0x7f3bfab84e50>, d...{'1'}, '1': {'0'}}, definitions={'x': {'1', '0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f3bfa8dcc80>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n__________________________ test_delete_nonlocal_error __________________________\n\n    def test_delete_nonlocal_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"del x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=5691452766591352543, code='x = 0', mod=<ast.Module object at 0x7f3bfa8eeb00>, d...'0': set(), '1': set()}, definitions={'x': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f3bfaba80c0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n_________________ test_overlapping_multiple_definition_errors __________________\n\n    def test_overlapping_multiple_definition_errors() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x, y = 1, 2\"))\n        graph.register_cell(\"2\", parse_cell(\"y, z = 3, 4\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=5691452766591352543, code='x = 0', mod=<ast.Module object at 0x7f3bfa8efe50>, d...ns={'x': {'1', '0'}, 'y': {'2', '1'}, 'z': {'2'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f3bfab9d700>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n_____________________________ test_two_node_cycle ______________________________\n\n    def test_two_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-3400670496999786709, code='x = y', mod=<ast.Module object at 0x7f3bfab863b0>, ...ons={'x': {'0'}, 'y': {'1'}}, cycles={(('0', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f3bfababfc0>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n____________________________ test_three_node_cycle _____________________________\n\n    def test_three_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = z\"))\n        graph.register_cell(\"2\", parse_cell(\"z = x\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-3400670496999786709, code='x = y', mod=<ast.Module object at 0x7f3bfa9f6770>, ...1'}, 'z': {'2'}}, cycles={(('0', '2'), ('2', '1'), ('1', '0'))}, lock=<unlocked _thread.lock object at 0x7f3bfa8f3a40>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n____________________ test_underscore_variables_are_private _____________________\n\n    def test_underscore_variables_are_private() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"_x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"_x = 1\"))\n>       errors = check_for_errors(graph)\n\ntests/_runtime/test_validate_graph.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/validate_graph.py:183: in check_for_errors\n    errors.update(check_for_cycles(graph))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={'0': CellImpl(key=-6585790852661803962, code='_x = 0', mod=<ast.Module object at 0x7f3bfa917730>,...siblings={'0': set(), '1': set()}, definitions={}, cycles=set(), lock=<unlocked _thread.lock object at 0x7f3bfab9ca40>)\n\n    def check_for_cycles(graph: DirectedGraph) -> Dict[CellId_t, List[CycleError]]:\n        \"\"\"\n        Check graph for cycles.\n    \n        Return a dict of errors in the graph, with an entry for each cell\n        that is involved in a cycle.\n        \"\"\"\n        errors = {}\n        visited = set()\n        stack = []\n    \n>       for cell in graph:\nE       TypeError: 'DirectedGraph' object is not iterable\n\nmarimo/_runtime/validate_graph.py:104: TypeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/test_validate_graph.py::test_cycle_and_multiple_def - T...\nFAILED tests/_runtime/test_validate_graph.py::test_multiple_definition_error\nFAILED tests/_runtime/test_validate_graph.py::test_delete_nonlocal_error - Ty...\nFAILED tests/_runtime/test_validate_graph.py::test_overlapping_multiple_definition_errors\nFAILED tests/_runtime/test_validate_graph.py::test_two_node_cycle - TypeError...\nFAILED tests/_runtime/test_validate_graph.py::test_three_node_cycle - TypeErr...\nFAILED tests/_runtime/test_validate_graph.py::test_underscore_variables_are_private\n============================== 7 failed in 0.09s ===============================\n\n"], "marimo-marimo/_runtime/runtime.py-_maybe_register_cell": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:112: in <module>\n    from marimo._runtime.runtime import cli_args, defs, query_params, refs\nE     File \"/root/repos/py_data/marimo/marimo/_runtime/runtime.py\", line 598\nE       def _try_registering_cell(self, cell_id: CellId, code: Code) -> Optional[Error]:\nE       ^^^\nE   IndentationError: expected an indented block after function definition on line 594\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_runtime/reload/test_module_watcher.py FF                          [100%]\n\n=================================== FAILURES ===================================\n______________________ test_reload_with_modified_cell[k] _______________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2051/test_reload_with_modified_cell0')\npy_modname = 'avxwlkoehugtcbdmqirf'\nexecution_kernel = <marimo._runtime.runtime.Kernel object at 0x7facf7216710>\nexec_req = <tests.conftest.ExecReqProvider object at 0x7facf7215e10>\n\n    async def test_reload_with_modified_cell(\n        tmp_path: pathlib.Path,\n        py_modname: str,\n        execution_kernel: Kernel,\n        exec_req: ExecReqProvider,\n    ):\n        k = execution_kernel\n        sys.path.append(str(tmp_path))\n        py_file = tmp_path / pathlib.Path(py_modname + \".py\")\n        py_file.write_text(\n            textwrap.dedent(\n                \"\"\"\n                def foo():\n                    return 1\n                \"\"\"\n            )\n        )\n    \n        config = copy.deepcopy(DEFAULT_CONFIG)\n        config[\"runtime\"][\"auto_reload\"] = \"lazy\"\n        k.set_user_config(SetUserConfigRequest(config=config))\n>       await k.run(\n            [\n                er_1 := exec_req.get(f\"from {py_modname} import foo\"),\n                er_2 := exec_req.get(\"x = foo()\"),\n                er_3 := exec_req.get(\"pass\"),\n            ]\n        )\n\ntests/_runtime/reload/test_module_watcher.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/runtime.py:1097: in run\n    await self._run_cells(\nmarimo/_runtime/runtime.py:978: in _run_cells\n    while cell_ids := await self._run_cells_internal(cell_ids):\nmarimo/_runtime/runtime.py:1033: in _run_cells_internal\n    runner = cell_runner.Runner(\nmarimo/_runtime/runner/cell_runner.py:119: in __init__\n    dataflow.transitive_closure(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={}, children={}, parents={}, siblings={}, definitions={}, cycles=set(), lock=<unlocked _thread.lock object at 0x7facf72c2d80>)\ncell_ids = {'Hbol', 'MJUe', 'vblA'}, children = False, inclusive = False\npredicate = <function Runner.__init__.<locals>.<lambda> at 0x7facf73dff40>\n\n    def transitive_closure(\n        graph: DirectedGraph,\n        cell_ids: set[CellId_t],\n        children: bool = True,\n        inclusive: bool = True,\n        predicate: Callable[[CellImpl], bool] | None = None,\n    ) -> set[CellId_t]:\n        \"\"\"Return a set of the passed-in cells and their descendants or ancestors\n    \n        If children is True, returns descendants; otherwise, returns ancestors\n    \n        If inclusive, includes passed-in cells in the set.\n    \n        If predicate, only cells satisfying predicate(cell) are included\n        \"\"\"\n        seen = set()\n        cells = set()\n        queue = list(cell_ids)\n        predicate = predicate or (lambda _: True)\n    \n        def relatives(cid: CellId_t) -> set[CellId_t]:\n            return graph.children[cid] if children else graph.parents[cid]\n    \n        while queue:\n            cid = queue.pop(0)\n            seen.add(cid)\n>           cell = graph.cells[cid]\nE           KeyError: 'vblA'\n\nmarimo/_runtime/dataflow.py:395: KeyError\n________________ test_reload_with_modified_cell[strict_kernel] _________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2051/test_reload_with_modified_cell1')\npy_modname = 'wgavpzbhcilmfusxtkdy'\nexecution_kernel = <marimo._runtime.runtime.Kernel object at 0x7facf58dfbe0>\nexec_req = <tests.conftest.ExecReqProvider object at 0x7facf58dd9c0>\n\n    async def test_reload_with_modified_cell(\n        tmp_path: pathlib.Path,\n        py_modname: str,\n        execution_kernel: Kernel,\n        exec_req: ExecReqProvider,\n    ):\n        k = execution_kernel\n        sys.path.append(str(tmp_path))\n        py_file = tmp_path / pathlib.Path(py_modname + \".py\")\n        py_file.write_text(\n            textwrap.dedent(\n                \"\"\"\n                def foo():\n                    return 1\n                \"\"\"\n            )\n        )\n    \n        config = copy.deepcopy(DEFAULT_CONFIG)\n        config[\"runtime\"][\"auto_reload\"] = \"lazy\"\n        k.set_user_config(SetUserConfigRequest(config=config))\n>       await k.run(\n            [\n                er_1 := exec_req.get(f\"from {py_modname} import foo\"),\n                er_2 := exec_req.get(\"x = foo()\"),\n                er_3 := exec_req.get(\"pass\"),\n            ]\n        )\n\ntests/_runtime/reload/test_module_watcher.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/runtime.py:1097: in run\n    await self._run_cells(\nmarimo/_runtime/runtime.py:978: in _run_cells\n    while cell_ids := await self._run_cells_internal(cell_ids):\nmarimo/_runtime/runtime.py:1033: in _run_cells_internal\n    runner = cell_runner.Runner(\nmarimo/_runtime/runner/cell_runner.py:119: in __init__\n    dataflow.transitive_closure(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = DirectedGraph(cells={}, children={}, parents={}, siblings={}, definitions={}, cycles=set(), lock=<unlocked _thread.lock object at 0x7facf56f5800>)\ncell_ids = {'Hbol', 'MJUe', 'vblA'}, children = False, inclusive = False\npredicate = <function Runner.__init__.<locals>.<lambda> at 0x7facf588f5b0>\n\n    def transitive_closure(\n        graph: DirectedGraph,\n        cell_ids: set[CellId_t],\n        children: bool = True,\n        inclusive: bool = True,\n        predicate: Callable[[CellImpl], bool] | None = None,\n    ) -> set[CellId_t]:\n        \"\"\"Return a set of the passed-in cells and their descendants or ancestors\n    \n        If children is True, returns descendants; otherwise, returns ancestors\n    \n        If inclusive, includes passed-in cells in the set.\n    \n        If predicate, only cells satisfying predicate(cell) are included\n        \"\"\"\n        seen = set()\n        cells = set()\n        queue = list(cell_ids)\n        predicate = predicate or (lambda _: True)\n    \n        def relatives(cid: CellId_t) -> set[CellId_t]:\n            return graph.children[cid] if children else graph.parents[cid]\n    \n        while queue:\n            cid = queue.pop(0)\n            seen.add(cid)\n>           cell = graph.cells[cid]\nE           KeyError: 'vblA'\n\nmarimo/_runtime/dataflow.py:395: KeyError\n=========================== short test summary info ============================\nFAILED tests/_runtime/reload/test_module_watcher.py::test_reload_with_modified_cell[k]\nFAILED tests/_runtime/reload/test_module_watcher.py::test_reload_with_modified_cell[strict_kernel]\n============================== 2 failed in 0.17s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_runtime/reload/test_module_watcher.py FF                          [100%]\n\n=================================== FAILURES ===================================\n______________________ test_reload_with_modified_cell[k] _______________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2052/test_reload_with_modified_cell0')\npy_modname = 'qepytlkisdrmfwojzbag'\nexecution_kernel = <marimo._runtime.runtime.Kernel object at 0x7ff7c1ace2f0>\nexec_req = <tests.conftest.ExecReqProvider object at 0x7ff7c1acd9f0>\n\n    async def test_reload_with_modified_cell(\n        tmp_path: pathlib.Path,\n        py_modname: str,\n        execution_kernel: Kernel,\n        exec_req: ExecReqProvider,\n    ):\n        k = execution_kernel\n        sys.path.append(str(tmp_path))\n        py_file = tmp_path / pathlib.Path(py_modname + \".py\")\n        py_file.write_text(\n            textwrap.dedent(\n                \"\"\"\n                def foo():\n                    return 1\n                \"\"\"\n            )\n        )\n    \n        config = copy.deepcopy(DEFAULT_CONFIG)\n        config[\"runtime\"][\"auto_reload\"] = \"lazy\"\n        k.set_user_config(SetUserConfigRequest(config=config))\n>       await k.run(\n            [\n                er_1 := exec_req.get(f\"from {py_modname} import foo\"),\n                er_2 := exec_req.get(\"x = foo()\"),\n                er_3 := exec_req.get(\"pass\"),\n            ]\n        )\n\ntests/_runtime/reload/test_module_watcher.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/runtime.py:1050: in run\n    self.mutate_graph(execution_requests, deletion_requests=[])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._runtime.runtime.Kernel object at 0x7ff7c1ace2f0>\nexecution_requests = [ExecutionRequest(cell_id='Hbol', code='from qepytlkisdrmfwojzbag import foo'), ExecutionRequest(cell_id='MJUe', code='x = foo()'), ExecutionRequest(cell_id='vblA', code='pass')]\ndeletion_requests = []\n\n    def mutate_graph(\n        self,\n        execution_requests: Sequence[ExecutionRequest],\n        deletion_requests: Sequence[DeleteCellRequest],\n    ) -> set[CellId_t]:\n        \"\"\"Add and remove cells to/from the graph.\n    \n        This method adds the cells in `execution_requests` to the kernel's\n        graph (deleting old versions of these cells, if any), and removes the\n        cells in `deletion_requests` from the kernel's graph.\n    \n        The mutations that this method makes to the graph renders the\n        kernel inconsistent (stale).\n    \n        This method does not register errors for cells that were previously\n        valid and are not descendants of any of the newly registered cells.\n        This is important for multiple definition errors, since a user may\n        absent-mindedly redefine an existing name when creating a new cell:\n        such a mistake shouldn't invalidate the program state.\n    \n        Returns\n        - set of cells that must be run to return kernel to consistent state\n        \"\"\"\n        LOGGER.debug(\"Current set of errors: %s\", self.errors)\n        cells_before_mutation = set(self.graph.cells.keys())\n        cells_with_errors_before_mutation = set(self.errors.keys())\n    \n        # The set of cells that were successfully registered\n        registered_cell_ids: set[CellId_t] = set()\n    \n        # The set of cells that need to be re-run due to cells being\n        # deleted/re-registered.\n        cells_that_were_children_of_mutated_cells: set[CellId_t] = set()\n    \n        # Cells that were unable to be added to the graph due to syntax errors\n        syntax_errors: dict[CellId_t, Error] = {}\n    \n        # Register and delete cells\n        for er in execution_requests:\n>           old_children, error = self._maybe_register_cell(\n                er.cell_id, er.code\n            )\nE           AttributeError: 'Kernel' object has no attribute '_maybe_register_cell'. Did you mean: '_try_registering_cell'?\n\nmarimo/_runtime/runtime.py:759: AttributeError\n________________ test_reload_with_modified_cell[strict_kernel] _________________\n\ntmp_path = PosixPath('/tmp/pytest-of-root/pytest-2052/test_reload_with_modified_cell1')\npy_modname = 'tghyraoebujwzscmlkxi'\nexecution_kernel = <marimo._runtime.runtime.Kernel object at 0x7ff7c1a907c0>\nexec_req = <tests.conftest.ExecReqProvider object at 0x7ff7c1a93100>\n\n    async def test_reload_with_modified_cell(\n        tmp_path: pathlib.Path,\n        py_modname: str,\n        execution_kernel: Kernel,\n        exec_req: ExecReqProvider,\n    ):\n        k = execution_kernel\n        sys.path.append(str(tmp_path))\n        py_file = tmp_path / pathlib.Path(py_modname + \".py\")\n        py_file.write_text(\n            textwrap.dedent(\n                \"\"\"\n                def foo():\n                    return 1\n                \"\"\"\n            )\n        )\n    \n        config = copy.deepcopy(DEFAULT_CONFIG)\n        config[\"runtime\"][\"auto_reload\"] = \"lazy\"\n        k.set_user_config(SetUserConfigRequest(config=config))\n>       await k.run(\n            [\n                er_1 := exec_req.get(f\"from {py_modname} import foo\"),\n                er_2 := exec_req.get(\"x = foo()\"),\n                er_3 := exec_req.get(\"pass\"),\n            ]\n        )\n\ntests/_runtime/reload/test_module_watcher.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_runtime/runtime.py:1050: in run\n    self.mutate_graph(execution_requests, deletion_requests=[])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._runtime.runtime.Kernel object at 0x7ff7c1a907c0>\nexecution_requests = [ExecutionRequest(cell_id='Hbol', code='from tghyraoebujwzscmlkxi import foo'), ExecutionRequest(cell_id='MJUe', code='x = foo()'), ExecutionRequest(cell_id='vblA', code='pass')]\ndeletion_requests = []\n\n    def mutate_graph(\n        self,\n        execution_requests: Sequence[ExecutionRequest],\n        deletion_requests: Sequence[DeleteCellRequest],\n    ) -> set[CellId_t]:\n        \"\"\"Add and remove cells to/from the graph.\n    \n        This method adds the cells in `execution_requests` to the kernel's\n        graph (deleting old versions of these cells, if any), and removes the\n        cells in `deletion_requests` from the kernel's graph.\n    \n        The mutations that this method makes to the graph renders the\n        kernel inconsistent (stale).\n    \n        This method does not register errors for cells that were previously\n        valid and are not descendants of any of the newly registered cells.\n        This is important for multiple definition errors, since a user may\n        absent-mindedly redefine an existing name when creating a new cell:\n        such a mistake shouldn't invalidate the program state.\n    \n        Returns\n        - set of cells that must be run to return kernel to consistent state\n        \"\"\"\n        LOGGER.debug(\"Current set of errors: %s\", self.errors)\n        cells_before_mutation = set(self.graph.cells.keys())\n        cells_with_errors_before_mutation = set(self.errors.keys())\n    \n        # The set of cells that were successfully registered\n        registered_cell_ids: set[CellId_t] = set()\n    \n        # The set of cells that need to be re-run due to cells being\n        # deleted/re-registered.\n        cells_that_were_children_of_mutated_cells: set[CellId_t] = set()\n    \n        # Cells that were unable to be added to the graph due to syntax errors\n        syntax_errors: dict[CellId_t, Error] = {}\n    \n        # Register and delete cells\n        for er in execution_requests:\n>           old_children, error = self._maybe_register_cell(\n                er.cell_id, er.code\n            )\nE           AttributeError: 'Kernel' object has no attribute '_maybe_register_cell'. Did you mean: '_try_registering_cell'?\n\nmarimo/_runtime/runtime.py:759: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/reload/test_module_watcher.py::test_reload_with_modified_cell[k]\nFAILED tests/_runtime/reload/test_module_watcher.py::test_reload_with_modified_cell[strict_kernel]\n============================== 2 failed in 0.14s ===============================\n\n"], "marimo-marimo/_runtime/runtime.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 86 items\n\n============================ no tests ran in 0.07s =============================\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_code_with_nbsp\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_empty_iteration_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_pickle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_break_cycle_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_processpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_state_invalidated\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wont_execute_bad_ref\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_stop\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_freeze\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future_complex\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_consecutive\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_fileno\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_ref_local_var_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_with_cell_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_make_local_with_global_keywd\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_enable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_delete_nonlocal_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_var_not_local_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_run_matplotlib_figures_closed\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_basic\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_tree\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_gather\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_pickle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_altair_chart.py::test_altair_settings_when_set\n(no match in any of [<Module test_altair_chart.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_init_not_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_ok_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_interruption\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_triangle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_non_ui_elements_not_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_scope_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_running_in_notebook\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_config_before_registering_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_input_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readlines_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_threadpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_nested_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_add_mock_package\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_private\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list_mock_packages\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_value\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_output_cleared_on_rerun\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_dunder_not_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_file_path\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_instances\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_await_allowed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_marimo_mpl_backend_not_used\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cycle_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_default_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_zero_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wait_for\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_exception\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_referrers_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_set_index_urls\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_install\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readline_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_available\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_local_var_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_with_state\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_multiple_ui_elements\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_async\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_new_errors_update_old_ones\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_locals_dont_leak\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_bound_child\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_delete_nonlocal_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_new_multiple_definition_does_not_invalidate\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_simultaneous_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_unparsable_cell\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_defs_with_no_definers_are_removed_from_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_uninstall\n(no match in any of [<Module test_patches.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 86 items\n\n============================ no tests ran in 0.06s =============================\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_code_with_nbsp\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_empty_iteration_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_pickle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_break_cycle_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_processpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_state_invalidated\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wont_execute_bad_ref\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_stop\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_freeze\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future_complex\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_consecutive\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_fileno\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_ref_local_var_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_with_cell_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_make_local_with_global_keywd\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_enable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_delete_nonlocal_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_var_not_local_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_run_matplotlib_figures_closed\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_basic\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_tree\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_gather\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_pickle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_altair_chart.py::test_altair_settings_when_set\n(no match in any of [<Module test_altair_chart.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_init_not_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_ok_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_interruption\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_triangle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_non_ui_elements_not_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_scope_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_running_in_notebook\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_config_before_registering_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_input_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readlines_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_threadpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_nested_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_add_mock_package\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_private\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list_mock_packages\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_value\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_output_cleared_on_rerun\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_dunder_not_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_file_path\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_instances\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_await_allowed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_marimo_mpl_backend_not_used\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cycle_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_default_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_zero_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wait_for\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_exception\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_referrers_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_set_index_urls\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_install\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readline_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_available\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_local_var_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_with_state\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_multiple_ui_elements\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_async\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_new_errors_update_old_ones\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_locals_dont_leak\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_bound_child\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_delete_nonlocal_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_new_multiple_definition_does_not_invalidate\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_simultaneous_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_unparsable_cell\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_defs_with_no_definers_are_removed_from_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_uninstall\n(no match in any of [<Module test_patches.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 86 items\n\n============================ no tests ran in 0.06s =============================\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_code_with_nbsp\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_empty_iteration_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_pickle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_break_cycle_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_processpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_state_invalidated\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wont_execute_bad_ref\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_stop\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_freeze\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future_complex\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_consecutive\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_fileno\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_ref_local_var_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_with_cell_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_make_local_with_global_keywd\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_enable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_delete_nonlocal_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_var_not_local_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_run_matplotlib_figures_closed\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_basic\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_tree\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_gather\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_pickle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_altair_chart.py::test_altair_settings_when_set\n(no match in any of [<Module test_altair_chart.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_init_not_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_ok_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_interruption\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_triangle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_non_ui_elements_not_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_scope_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_running_in_notebook\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_config_before_registering_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_input_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readlines_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_threadpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_nested_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_add_mock_package\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_private\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list_mock_packages\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_value\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_output_cleared_on_rerun\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_dunder_not_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_file_path\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_instances\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_await_allowed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_marimo_mpl_backend_not_used\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cycle_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_default_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_zero_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wait_for\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_exception\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_referrers_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_set_index_urls\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_install\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readline_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_available\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_local_var_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_with_state\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_multiple_ui_elements\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_async\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_new_errors_update_old_ones\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_locals_dont_leak\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_bound_child\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_delete_nonlocal_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_new_multiple_definition_does_not_invalidate\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_simultaneous_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_unparsable_cell\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_defs_with_no_definers_are_removed_from_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_uninstall\n(no match in any of [<Module test_patches.py>])\n\n"], "marimo-marimo/_runtime/packages/utils.py-is_python_isolated": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_package_utils.py F                          [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_python_isolated ____________________________\n\n    @pytest.mark.skipif(sys.platform == \"win32\", reason=\"Failing on Windows CI\")\n    def test_is_python_isolated() -> None:\n        # tests should always be run in an isolated (non-system) environment;\n        # we only run them in a virtualenv, venv, or conda env ...\n>       assert is_python_isolated()\nE       assert False\nE        +  where False = is_python_isolated()\n\ntests/_runtime/packages/test_package_utils.py:13: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_package_utils.py::test_is_python_isolated\n============================== 1 failed in 0.06s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_package_utils.py .                          [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_package_utils.py .                          [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n"], "marimo-marimo/_runtime/packages/module_registry.py-missing_modules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_module_registry.py F                        [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_missing_modules _____________________________\n\n    def test_missing_modules() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        graph.register_cell(\"0\", parse_cell(\"import does.nt.exist as foo\"))\n        graph.register_cell(\n            \"1\", parse_cell(\"import time; import super_fake_package\")\n        )\n>       assert mgr.missing_modules() == set([\"does\", \"super_fake_package\"])\nE       AssertionError: assert set() == {'does', 'super_fake_package'}\nE         \nE         Extra items in the right set:\nE         'super_fake_package'\nE         'does'\nE         Use -v to get more diff\n\ntests/_runtime/packages/test_module_registry.py:35: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_module_registry.py::test_missing_modules\n============================== 1 failed in 0.06s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_module_registry.py F                        [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_missing_modules _____________________________\n\n    def test_missing_modules() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        graph.register_cell(\"0\", parse_cell(\"import does.nt.exist as foo\"))\n        graph.register_cell(\n            \"1\", parse_cell(\"import time; import super_fake_package\")\n        )\n>       assert mgr.missing_modules() == set([\"does\", \"super_fake_package\"])\nE       AssertionError: assert set() == {'does', 'super_fake_package'}\nE         \nE         Extra items in the right set:\nE         'super_fake_package'\nE         'does'\nE         Use -v to get more diff\n\ntests/_runtime/packages/test_module_registry.py:35: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_module_registry.py::test_missing_modules\n============================== 1 failed in 0.06s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_module_registry.py F                        [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_missing_modules _____________________________\n\n    def test_missing_modules() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        graph.register_cell(\"0\", parse_cell(\"import does.nt.exist as foo\"))\n        graph.register_cell(\n            \"1\", parse_cell(\"import time; import super_fake_package\")\n        )\n>       assert mgr.missing_modules() == set([\"does\", \"super_fake_package\"])\n\ntests/_runtime/packages/test_module_registry.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._runtime.packages.module_registry.ModuleRegistry object at 0x7fcef1961ff0>\n\n    def missing_modules(self) -> set[str]:\n        \"\"\"\n        Returns a set of modules that will fail to import.\n    \n        Returns:\n            set[str]: A set of module names that will fail to import.\n        \"\"\"\n        # TO DO: implement the logic to get missing modules\n        # For now, let's assume a simple implementation by combining _is_module_installed and modules\n>       installed_modules = modules(self)\nE       NameError: name 'modules' is not defined\n\nmarimo/_runtime/packages/module_registry.py:94: NameError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_module_registry.py::test_missing_modules\n============================== 1 failed in 0.06s ===============================\n\n"], "TaskWeaver-taskweaver/misc/example.py-load_examples": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/unit_tests/test_example.py _______________\nImportError while importing test module '/root/repos/py_data/TaskWeaver/tests/unit_tests/test_example.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit_tests/test_example.py:3: in <module>\n    from taskweaver.misc.example import load_examples\ntaskweaver/misc/example.py:8: in <module>\n    from taskweaver.conversation import Conversation\nE   ModuleNotFoundError: No module named 'taskweaver.conversation'\n=========================== short test summary info ============================\nERROR tests/unit_tests/test_example.py\n=============================== 1 error in 0.05s ===============================\n\nERROR: found no collectors for /root/repos/py_data/TaskWeaver/tests/unit_tests/test_example.py::test_load_examples\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/unit_tests/test_example.py _______________\nImportError while importing test module '/root/repos/py_data/TaskWeaver/tests/unit_tests/test_example.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit_tests/test_example.py:3: in <module>\n    from taskweaver.misc.example import load_examples\ntaskweaver/misc/example.py:8: in <module>\n    from taskweaver.conversation import Conversation\nE   ModuleNotFoundError: No module named 'taskweaver.conversation'\n=========================== short test summary info ============================\nERROR tests/unit_tests/test_example.py\n=============================== 1 error in 0.04s ===============================\n\nERROR: found no collectors for /root/repos/py_data/TaskWeaver/tests/unit_tests/test_example.py::test_load_examples\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/unit_tests/test_example.py _______________\nImportError while importing test module '/root/repos/py_data/TaskWeaver/tests/unit_tests/test_example.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/unit_tests/test_example.py:3: in <module>\n    from taskweaver.misc.example import load_examples\ntaskweaver/misc/example.py:11: in <module>\n    from taskweaver.conversation import Conversation  # Import Conversation class from taskweaver.conversation module\nE   ModuleNotFoundError: No module named 'taskweaver.conversation'\n=========================== short test summary info ============================\nERROR tests/unit_tests/test_example.py\n=============================== 1 error in 0.05s ===============================\n\nERROR: found no collectors for /root/repos/py_data/TaskWeaver/tests/unit_tests/test_example.py::test_load_examples\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-add_selected_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n>       selected_plugin_pool.add_selected_plugins(plugins[:1])\nE       AttributeError: 'SelectedPluginPool' object has no attribute 'add_selected_plugins'\n\ntests/unit_tests/test_plugin_pool.py:30: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.19s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n>       selected_plugin_pool.add_selected_plugins(plugins[:1])\nE       AttributeError: 'SelectedPluginPool' object has no attribute 'add_selected_plugins'\n\ntests/unit_tests/test_plugin_pool.py:30: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.18s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n>       selected_plugin_pool.add_selected_plugins(plugins[:1])\nE       AttributeError: 'SelectedPluginPool' object has no attribute 'add_selected_plugins'\n\ntests/unit_tests/test_plugin_pool.py:30: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.18s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-filter_unused_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[1:3])\n        assert len(selected_plugin_pool) == 3\n    \n        selected_plugin_pool.add_selected_plugins(plugins[2:4])\n        assert len(selected_plugin_pool) == 4\n    \n>       selected_plugin_pool.filter_unused_plugins(\"xcxcxc anomaly_detection() ababab\")\nE       AttributeError: 'SelectedPluginPool' object has no attribute 'filter_unused_plugins'\n\ntests/unit_tests/test_plugin_pool.py:42: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.18s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[1:3])\n        assert len(selected_plugin_pool) == 3\n    \n        selected_plugin_pool.add_selected_plugins(plugins[2:4])\n        assert len(selected_plugin_pool) == 4\n    \n>       selected_plugin_pool.filter_unused_plugins(\"xcxcxc anomaly_detection() ababab\")\n\ntests/unit_tests/test_plugin_pool.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <taskweaver.code_interpreter.plugin_selection.SelectedPluginPool object at 0x7f5cd74d01f0>\ncode = 'xcxcxc anomaly_detection() ababab'\n\n    def filter_unused_plugins(self, code: str) -> List[PluginEntry]:\n        \"\"\"\n        Filter out plugins that are not used in the code generated by LLM.\n    \n        Args:\n        code (str): The code generated by the LLM.\n    \n        Returns:\n        List[PluginEntry]: A list of plugins that are used in the code.\n        \"\"\"\n        # Assuming we have a list of plugins that we want to check\n        plugins = [\n>           PluginEntry(\"Plugin 1\", \"print('Hello World')\"),\n            PluginEntry(\"Plugin 2\", \"x = 5\"),\n            PluginEntry(\"Plugin 3\", \"print(x)\"),\n            PluginEntry(\"Plugin 4\", \"print('Hello World')\"),\n        ]\nE       TypeError: PluginEntry.__init__() missing 4 required positional arguments: 'impl', 'spec', 'config', and 'required'\n\ntaskweaver/code_interpreter/plugin_selection.py:51: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - TypeError: Pl...\n============================== 1 failed in 0.18s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/unit_tests/test_plugin_pool.py _____________\ntests/unit_tests/test_plugin_pool.py:5: in <module>\n    from taskweaver.code_interpreter.plugin_selection import SelectedPluginPool\ntaskweaver/code_interpreter/__init__.py:1: in <module>\n    from .code_interpreter import CodeInterpreter\ntaskweaver/code_interpreter/code_interpreter/__init__.py:1: in <module>\n    from .code_generator import CodeGenerator\ntaskweaver/code_interpreter/code_interpreter/code_generator.py:8: in <module>\n    from taskweaver.code_interpreter.plugin_selection import PluginSelector, SelectedPluginPool\ntaskweaver/code_interpreter/plugin_selection.py:11: in <module>\n    class SelectedPluginPool:\ntaskweaver/code_interpreter/plugin_selection.py:91: in SelectedPluginPool\n    used_plugins = llm.filter_unused_plugins(code)\ntaskweaver/code_interpreter/plugin_selection.py:81: in filter_unused_plugins\n    used_plugins.append(PluginEntry(name, plugin_code, True))\nE   TypeError: PluginEntry.__init__() missing 3 required positional arguments: 'spec', 'config', and 'required'\n=========================== short test summary info ============================\nERROR tests/unit_tests/test_plugin_pool.py - TypeError: PluginEntry.__init__(...\n=============================== 1 error in 0.05s ===============================\n\nERROR: found no collectors for /root/repos/py_data/TaskWeaver/tests/unit_tests/test_plugin_pool.py::test_plugin_pool\n\n"], "TaskWeaver-taskweaver/module/prompt_util.py-remove_all_delimiters": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_prompt_util.py F                                   [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_handle_delimiter _____________________________\n\n    def test_handle_delimiter():\n>       from taskweaver.module.prompt_util import PromptUtil\nE         File \"/root/repos/py_data/TaskWeaver/taskweaver/module/prompt_util.py\", line 50\nE           from typing import List, Tuple\nE           ^^^^\nE       SyntaxError: invalid syntax\n\ntests/unit_tests/test_prompt_util.py:2: SyntaxError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_prompt_util.py::test_handle_delimiter -   File \"...\n============================== 1 failed in 0.05s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_prompt_util.py F                                   [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_handle_delimiter _____________________________\n\n    def test_handle_delimiter():\n>       from taskweaver.module.prompt_util import PromptUtil\nE         File \"/root/repos/py_data/TaskWeaver/taskweaver/module/prompt_util.py\", line 50\nE           from typing import List, Tuple\nE           ^^^^\nE       SyntaxError: invalid syntax\n\ntests/unit_tests/test_prompt_util.py:2: SyntaxError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_prompt_util.py::test_handle_delimiter -   File \"...\n============================== 1 failed in 0.05s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_prompt_util.py F                                   [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_handle_delimiter _____________________________\n\n    def test_handle_delimiter():\n>       from taskweaver.module.prompt_util import PromptUtil\nE         File \"/root/repos/py_data/TaskWeaver/taskweaver/module/prompt_util.py\", line 50\nE           from typing import List, Tuple\nE           ^^^^\nE       SyntaxError: invalid syntax\n\ntests/unit_tests/test_prompt_util.py:2: SyntaxError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_prompt_util.py::test_handle_delimiter -   File \"...\n============================== 1 failed in 0.05s ===============================\n\n"], "reflex-reflex/app.py-_enable_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_app_state_manager ____________________________\n\n    def test_app_state_manager():\n        app = App()\n        with pytest.raises(ValueError):\n            app.state_manager\n        app._enable_state()\n>       assert app.state_manager is not None\n\ntests/test_app.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    @property\n    def state_manager(self) -> StateManager:\n        \"\"\"Get the state manager.\n    \n        Returns:\n            The initialized state manager.\n    \n        Raises:\n            ValueError: if the state has not been initialized.\n        \"\"\"\n        if self._state_manager is None:\n>           raise ValueError(\"The state manager has not been initialized.\")\nE           ValueError: The state manager has not been initialized.\n\nreflex/app.py:349: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_state_manager - ValueError: The state mana...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_app_state_manager ____________________________\n\n    def test_app_state_manager():\n        app = App()\n        with pytest.raises(ValueError):\n            app.state_manager\n        app._enable_state()\n>       assert app.state_manager is not None\n\ntests/test_app.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    @property\n    def state_manager(self) -> StateManager:\n        \"\"\"Get the state manager.\n    \n        Returns:\n            The initialized state manager.\n    \n        Raises:\n            ValueError: if the state has not been initialized.\n        \"\"\"\n        if self._state_manager is None:\n>           raise ValueError(\"The state manager has not been initialized.\")\nE           ValueError: The state manager has not been initialized.\n\nreflex/app.py:346: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_state_manager - ValueError: The state mana...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_app_state_manager ____________________________\n\n    def test_app_state_manager():\n        app = App()\n        with pytest.raises(ValueError):\n            app.state_manager\n        app._enable_state()\n>       assert app.state_manager is not None\n\ntests/test_app.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    @property\n    def state_manager(self) -> StateManager:\n        \"\"\"Get the state manager.\n    \n        Returns:\n            The initialized state manager.\n    \n        Raises:\n            ValueError: if the state has not been initialized.\n        \"\"\"\n        if self._state_manager is None:\n>           raise ValueError(\"The state manager has not been initialized.\")\nE           ValueError: The state manager has not been initialized.\n\nreflex/app.py:347: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_state_manager - ValueError: The state mana...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n"], "reflex-reflex/app.py-_add_optional_endpoints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_app_with_optional_endpoints _______________________\n\n    def test_app_with_optional_endpoints():\n        from reflex.components.core.upload import Upload\n    \n        app = App()\n        Upload.is_used = True\n>       app._add_optional_endpoints()\nE       AttributeError: 'App' object has no attribute '_add_optional_endpoints'. Did you mean: '_add_default_endpoints'?\n\ntests/test_app.py:1431: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_with_optional_endpoints - AttributeError: ...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_app_with_optional_endpoints _______________________\n\n    def test_app_with_optional_endpoints():\n        from reflex.components.core.upload import Upload\n    \n        app = App()\n        Upload.is_used = True\n>       app._add_optional_endpoints()\nE       AttributeError: 'App' object has no attribute '_add_optional_endpoints'. Did you mean: '_add_default_endpoints'?\n\ntests/test_app.py:1431: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_with_optional_endpoints - AttributeError: ...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_app_with_optional_endpoints _______________________\n\n    def test_app_with_optional_endpoints():\n        from reflex.components.core.upload import Upload\n    \n        app = App()\n        Upload.is_used = True\n>       app._add_optional_endpoints()\nE       AttributeError: 'App' object has no attribute '_add_optional_endpoints'. Did you mean: '_add_default_endpoints'?\n\ntests/test_app.py:1431: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_with_optional_endpoints - AttributeError: ...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n"], "reflex-reflex/app.py-add_page": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:375: in App\n    from reflex.components.component import Component, ComponentCallable, StatefulComponent\nE   ImportError: cannot import name 'ComponentCallable' from 'reflex.components.component' (/root/repos/py_data/reflex/reflex/components/component.py)\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:375: in App\n    from reflex.components.component import create\nE   ImportError: cannot import name 'create' from 'reflex.components.component' (/root/repos/py_data/reflex/reflex/components/component.py)\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:379: in App\n    from reflex.state import setup_dynamic_args\nE   ImportError: cannot import name 'setup_dynamic_args' from 'reflex.state' (/root/repos/py_data/reflex/reflex/state.py)\n"], "reflex-reflex/app.py-_setup_overlay_component": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_app.py F.FF.FF                                                [100%]\n\n=================================== FAILURES ===================================\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7f11b4ed4670>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n>           assert app.overlay_component is None\nE           assert <function default_overlay_component at 0x7f11b4ed4670> is None\nE            +  where <function default_overlay_component at 0x7f11b4ed4670> = <App state=None>.overlay_component\n\ntests/test_app.py:1229: AssertionError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7f11b4ed4670>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7f116884b5b0>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - asser...\n=================== 5 failed, 2 passed, 5 warnings in 0.19s ====================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_app.py FFFFFFF                                                [100%]\n\n=================================== FAILURES ===================================\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7fe9fb234670>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n____________________ test_overlay_component[None-None-None] ____________________\n\nstate = None, overlay_component = None, exp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7fe9fb234670>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n___________________ test_overlay_component[State-None-None] ____________________\n\nstate = <class 'reflex.state.State'>, overlay_component = None\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7fe9aecbb5b0>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming self is an instance of a class and has access to the component and state\n>       if not self.component.used_state and not self.component.overlay_component:\nE       AttributeError: 'App' object has no attribute 'component'\n\nreflex/app.py:689: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-None-None] - AttributeE...\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-None-None] - Attribute...\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - Attri...\n======================== 7 failed, 5 warnings in 0.33s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_app.py F.FFFFF                                                [100%]\n\n=================================== FAILURES ===================================\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7fe164378670>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming the component and state are already defined in the class\n        if not self.state and not self.overlay_component:\n            # Do not render the connection modal\n            return\n        # Otherwise, render the connection modal\n        # This is a placeholder, you would need to implement the actual rendering logic here\n        # For example:\n>       self.render_connection_modal()\nE       AttributeError: 'App' object has no attribute 'render_connection_modal'\n\nreflex/app.py:695: AttributeError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming the component and state are already defined in the class\n        if not self.state and not self.overlay_component:\n            # Do not render the connection modal\n            return\n        # Otherwise, render the connection modal\n        # This is a placeholder, you would need to implement the actual rendering logic here\n        # For example:\n>       self.render_connection_modal()\nE       AttributeError: 'App' object has no attribute 'render_connection_modal'\n\nreflex/app.py:695: AttributeError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7fe164378670>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming the component and state are already defined in the class\n        if not self.state and not self.overlay_component:\n            # Do not render the connection modal\n            return\n        # Otherwise, render the connection modal\n        # This is a placeholder, you would need to implement the actual rendering logic here\n        # For example:\n>       self.render_connection_modal()\nE       AttributeError: 'App' object has no attribute 'render_connection_modal'\n\nreflex/app.py:695: AttributeError\n___________________ test_overlay_component[State-None-None] ____________________\n\nstate = <class 'reflex.state.State'>, overlay_component = None\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming the component and state are already defined in the class\n        if not self.state and not self.overlay_component:\n            # Do not render the connection modal\n            return\n        # Otherwise, render the connection modal\n        # This is a placeholder, you would need to implement the actual rendering logic here\n        # For example:\n>       self.render_connection_modal()\nE       AttributeError: 'App' object has no attribute 'render_connection_modal'\n\nreflex/app.py:695: AttributeError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming the component and state are already defined in the class\n        if not self.state and not self.overlay_component:\n            # Do not render the connection modal\n            return\n        # Otherwise, render the connection modal\n        # This is a placeholder, you would need to implement the actual rendering logic here\n        # For example:\n>       self.render_connection_modal()\nE       AttributeError: 'App' object has no attribute 'render_connection_modal'\n\nreflex/app.py:695: AttributeError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7fe117cf75b0>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n>       app._setup_overlay_component()\n\ntests/test_app.py:1227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=State>\n\n    def _setup_overlay_component(self):\n        \"\"\"\n        If a State is not used and no overlay_component is specified, do not render the connection modal.\n        \"\"\"\n        # Assuming the component and state are already defined in the class\n        if not self.state and not self.overlay_component:\n            # Do not render the connection modal\n            return\n        # Otherwise, render the connection modal\n        # This is a placeholder, you would need to implement the actual rendering logic here\n        # For example:\n>       self.render_connection_modal()\nE       AttributeError: 'App' object has no attribute 'render_connection_modal'\n\nreflex/app.py:695: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-None-None] - Attribute...\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - Attri...\n=================== 6 failed, 1 passed, 5 warnings in 0.33s ====================\n\n"], "reflex-reflex/app.py-_compile": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:735: in App\n    from reflex.components.core.upload import create as upload_create\nE   ImportError: cannot import name 'create' from 'reflex.components.core.upload' (/root/repos/py_data/reflex/reflex/components/core/upload.py)\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:736: in App\n    from reflex.components.base import Component as BaseComponent\nE   ImportError: cannot import name 'Component' from 'reflex.components.base' (/root/repos/py_data/reflex/reflex/components/base/__init__.py)\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:735: in App\n    from reflex.components.base import Component as BaseComponent\nE   ImportError: cannot import name 'Component' from 'reflex.components.base' (/root/repos/py_data/reflex/reflex/components/base/__init__.py)\n"], "reflex-reflex/app.py-modify_state": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nE     File \"/root/repos/py_data/reflex/reflex/app.py\", line 967\nE       from abc import ABC, abstractmethod\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.37s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_waiter\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_blocker\n(no match in any of [<Module test_state.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.23s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_waiter\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_blocker\n(no match in any of [<Module test_state.py>])\n\n"], "reflex-reflex/vars.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:8: in <module>\n    from reflex.event import Event\nreflex/event.py:21: in <module>\n    from reflex.utils import format\nreflex/utils/format.py:13: in <module>\n    from reflex.vars import BaseVar, Var\nE     File \"/root/repos/py_data/reflex/reflex/vars.py\", line 369\nE       from typing import Iterable, List, Union\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:8: in <module>\n    from reflex.event import Event\nreflex/event.py:21: in <module>\n    from reflex.utils import format\nreflex/utils/format.py:13: in <module>\n    from reflex.vars import BaseVar, Var\nE     File \"/root/repos/py_data/reflex/reflex/vars.py\", line 369\nE       from typing import Iterable, TypeVar\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:8: in <module>\n    from reflex.event import Event\nreflex/event.py:21: in <module>\n    from reflex.utils import format\nreflex/utils/format.py:13: in <module>\n    from reflex.vars import BaseVar, Var\nE     File \"/root/repos/py_data/reflex/reflex/vars.py\", line 369\nE       from typing import Iterable, TypeVar, Optional\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/vars.py-create_safe": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:19: in <module>\n    from reflex.components.sonner.toast import Toaster, ToastProps\nreflex/components/sonner/__init__.py:3: in <module>\n    from .toast import toast\nreflex/components/sonner/toast.py:31: in <module>\n    toast_ref = Var.create_safe(\"refs['__toast']\", _var_is_string=False)\nE   TypeError: Var.create_safe() missing 1 required positional argument: '_var_data'\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:19: in <module>\n    from reflex.components.sonner.toast import Toaster, ToastProps\nreflex/components/sonner/__init__.py:3: in <module>\n    from .toast import toast\nreflex/components/sonner/toast.py:31: in <module>\n    toast_ref = Var.create_safe(\"refs['__toast']\", _var_is_string=False)\nE   TypeError: Var.create_safe() missing 1 required positional argument: '_var_data'\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:19: in <module>\n    from reflex.components.sonner.toast import Toaster, ToastProps\nreflex/components/sonner/__init__.py:3: in <module>\n    from .toast import toast\nreflex/components/sonner/toast.py:31: in <module>\n    toast_ref = Var.create_safe(\"refs['__toast']\", _var_is_string=False)\nE   TypeError: Var.create_safe() missing 1 required positional argument: '_var_data'\n"], "reflex-reflex/vars.py-foreach": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:8: in <module>\n    from reflex.event import Event\nreflex/event.py:21: in <module>\n    from reflex.utils import format\nreflex/utils/format.py:13: in <module>\n    from reflex.vars import BaseVar, Var\nreflex/vars.py:347: in <module>\n    class Var:\nreflex/vars.py:1616: in Var\n    from reflex import Var, BaseVar, VarTypeError\nE   ImportError: cannot import name 'Var' from 'reflex' (/root/repos/py_data/reflex/reflex/__init__.py)\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:8: in <module>\n    from reflex.event import Event\nreflex/event.py:21: in <module>\n    from reflex.utils import format\nreflex/utils/format.py:13: in <module>\n    from reflex.vars import BaseVar, Var\nreflex/vars.py:347: in <module>\n    class Var:\nreflex/vars.py:1618: in Var\n    from reflex.exceptions import VarTypeError\nE   ModuleNotFoundError: No module named 'reflex.exceptions'\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:8: in <module>\n    from reflex.event import Event\nreflex/event.py:21: in <module>\n    from reflex.utils import format\nreflex/utils/format.py:13: in <module>\n    from reflex.vars import BaseVar, Var\nE     File \"/root/repos/py_data/reflex/reflex/vars.py\", line 1625\nE       class BaseVar:\nE       ^^^^^\nE   IndentationError: expected an indented block after class definition on line 1622\n"], "reflex-reflex/vars.py-get_default_value": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:18: in <module>\n    from .states import (\ntests/states/__init__.py:7: in <module>\n    from .upload import (\ntests/states/upload.py:28: in <module>\n    class SubUploadState(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\nreflex/state.py:936: in _set_default_value\n    default_value = prop.get_default_value()\nreflex/vars.py:1866: in get_default_value\n    return self.var.default_value\nreflex/vars.py:819: in __getattr__\n    raise VarAttributeError(\nE   reflex.utils.exceptions.VarAttributeError: The State var `base_state__sub_upload_state.img` has no attribute 'var' or may have been annotated wrongly.\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:18: in <module>\n    from .states import (\ntests/states/__init__.py:7: in <module>\n    from .upload import (\ntests/states/upload.py:28: in <module>\n    class SubUploadState(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\nreflex/state.py:936: in _set_default_value\n    default_value = prop.get_default_value()\nreflex/vars.py:1862: in get_default_value\n    if self.var is None:\nreflex/vars.py:819: in __getattr__\n    raise VarAttributeError(\nE   reflex.utils.exceptions.VarAttributeError: The State var `base_state__sub_upload_state.img` has no attribute 'var' or may have been annotated wrongly.\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:18: in <module>\n    from .states import (\ntests/states/__init__.py:7: in <module>\n    from .upload import (\ntests/states/upload.py:28: in <module>\n    class SubUploadState(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:845: in _init_var\n    cls._set_default_value(prop)\nreflex/state.py:936: in _set_default_value\n    default_value = prop.get_default_value()\nreflex/vars.py:1867: in get_default_value\n    var = self.var\nreflex/vars.py:819: in __getattr__\n    raise VarAttributeError(\nE   reflex.utils.exceptions.VarAttributeError: The State var `base_state__sub_upload_state.img` has no attribute 'var' or may have been annotated wrongly.\n"], "reflex-reflex/state.py-get_skip_vars": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:292: in <module>\n    class BaseState(Base, ABC, extra=pydantic.Extra.allow):\nreflex/state.py:717: in BaseState\n    class MyClass:\nreflex/state.py:718: in MyClass\n    @skip_vars\nE   NameError: name 'skip_vars' is not defined\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:1788: in <module>\n    class State(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:499: in __init_subclass__\n    cls.base_vars = {\nreflex/state.py:504: in <dictcomp>\n    if f.name not in cls.get_skip_vars()\nreflex/state.py:717: in get_skip_vars\n    return cls._skip_vars\nE   AttributeError: type object 'State' has no attribute '_skip_vars'. Did you mean: 'get_skip_vars'?\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:1787: in <module>\n    class State(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:499: in __init_subclass__\n    cls.base_vars = {\nreflex/state.py:504: in <dictcomp>\n    if f.name not in cls.get_skip_vars()\nreflex/state.py:716: in get_skip_vars\n    return cls.__skip_vars\nE   AttributeError: type object 'State' has no attribute '_BaseState__skip_vars'\n"], "reflex-reflex/state.py-add_var": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nE     File \"/root/repos/py_data/reflex/reflex/state.py\", line 848\nE       from typing import Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nE     File \"/root/repos/py_data/reflex/reflex/state.py\", line 848\nE       from typing import Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nE     File \"/root/repos/py_data/reflex/reflex/state.py\", line 848\nE       from reflex import BaseVar, Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/state.py-reset": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:1810: in <module>\n    class State(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:503: in __init_subclass__\n    for f in cls.get_fields().values()\nE   TypeError: BaseState.get_fields() missing 1 required positional argument: 'cls'\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:1808: in <module>\n    class State(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:837: in _init_var\n    raise VarTypeError(\nE   reflex.utils.exceptions.VarTypeError: State vars must be primitive Python types, Plotly figures, Pandas dataframes, or subclasses of rx.Base. Found var \"Any\" with type <class 'typing._SpecialForm'>.\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:1805: in <module>\n    class State(BaseState):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/state.py:516: in __init_subclass__\n    cls._init_var(prop)\nreflex/state.py:837: in _init_var\n    raise VarTypeError(\nE   reflex.utils.exceptions.VarTypeError: State vars must be primitive Python types, Plotly figures, Pandas dataframes, or subclasses of rx.Base. Found var \"Any\" with type <class 'typing._SpecialForm'>.\n"], "reflex-reflex/state.py-get_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/test_state.py .sFs.s                                               [ 33%]\ntests/test_state_tree.py sssssssss                                       [ 83%]\ntests/test_state.py sFs                                                  [100%]\n\n=================================== FAILURES ===================================\n______________ test_get_state_from_sibling_not_cached[in_process] ______________\n\nself = Child({'parent.child': {}})\nstate_cls = <class 'tests.test_state.test_get_state_from_sibling_not_cached.<locals>.Child2'>\n\n    async def get_state(self, state_cls: Type[BaseState]) -> BaseState:\n        \"\"\"\n        Get an instance of the state associated with this token.\n    \n        Allows for arbitrary access to sibling states from within an event handler.\n    \n        Args:\n            state_cls: The class of the state.\n    \n        Returns:\n            The instance of state_cls associated with this state's client_token.\n        \"\"\"\n        try:\n            # Try to get the state from the cache\n>           return await self._get_state_from_cache(state_cls)\nE           TypeError: object Child2 can't be used in 'await' expression\n\nreflex/state.py:1319: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nmock_app = <App state=Parent>, token = '1a630829-8a14-4340-9b33-28a607d359f8'\n\n    @pytest.mark.asyncio\n    async def test_get_state_from_sibling_not_cached(mock_app: rx.App, token: str):\n        \"\"\"A test simulating update_vars_internal when setting cookies with computed vars.\n    \n        In that case, a sibling state, UpdateVarsInternalState handles the fetching\n        of states that need to have values set. Only the states that have a computed\n        var are pre-fetched (like Child3 in this test), so `get_state` needs to\n        avoid refetching those already-cached states when getting substates,\n        otherwise the set values will be overridden by the freshly deserialized\n        version and lost.\n    \n        Explicit regression test for https://github.com/reflex-dev/reflex/issues/2851.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n    \n        class Parent(BaseState):\n            \"\"\"A root state like rx.State.\"\"\"\n    \n            parent_var: int = 0\n    \n        class Child(Parent):\n            \"\"\"A state simulating UpdateVarsInternalState.\"\"\"\n    \n            pass\n    \n        class Child2(Parent):\n            \"\"\"An unconnected child state.\"\"\"\n    \n            pass\n    \n        class Child3(Parent):\n            \"\"\"A child state with a computed var causing it to be pre-fetched.\n    \n            If child3_var gets set to a value, and `get_state` erroneously\n            re-fetches it from redis, the value will be lost.\n            \"\"\"\n    \n            child3_var: int = 0\n    \n            @rx.var\n            def v(self):\n                pass\n    \n        class Grandchild3(Child3):\n            \"\"\"An extra layer of substate to catch an issue discovered in\n            _determine_missing_parent_states while writing the regression test where\n            invalid parent state names were being constructed.\n            \"\"\"\n    \n            pass\n    \n        class GreatGrandchild3(Grandchild3):\n            \"\"\"Fetching this state wants to also fetch Child3 as a missing parent.\n            However, Child3 should already be cached in the state tree because it\n            has a computed var.\n            \"\"\"\n    \n            pass\n    \n        mock_app.state_manager.state = mock_app.state = Parent\n    \n        # Get the top level state via unconnected sibling.\n        root = await mock_app.state_manager.get_state(_substate_key(token, Child))\n        # Set value in parent_var to assert it does not get refetched later.\n        root.parent_var = 1\n    \n        if isinstance(mock_app.state_manager, StateManagerRedis):\n            # When redis is used, only states with computed vars are pre-fetched.\n            assert \"child2\" not in root.substates\n            assert \"child3\" in root.substates  # (due to @rx.var)\n    \n        # Get the unconnected sibling state, which will be used to `get_state` other instances.\n        child = root.get_substate(Child.get_full_name().split(\".\"))\n    \n        # Get an uncached child state.\n>       child2 = await child.get_state(Child2)\n\ntests/test_state.py:2895: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1322: in get_state\n    return await self._get_state_from_redis(state_cls)\nreflex/state.py:1289: in _get_state_from_redis\n    parent_state_of_state_cls = await self._populate_parent_states(state_cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Child({'parent.child': {}})\ntarget_state_cls = <class 'tests.test_state.test_get_state_from_sibling_not_cached.<locals>.Child2'>\n\n    async def _populate_parent_states(self, target_state_cls: Type[BaseState]):\n        \"\"\"Populate substates in the tree between the target_state_cls and common ancestor of this state.\n    \n        Args:\n            target_state_cls: The class of the state to populate parent states for.\n    \n        Returns:\n            The parent state instance of target_state_cls.\n    \n        Raises:\n            RuntimeError: If redis is not used in this backend process.\n        \"\"\"\n        state_manager = get_state_manager()\n        if not isinstance(state_manager, StateManagerRedis):\n>           raise RuntimeError(\n                f\"Cannot populate parent states of {target_state_cls.get_full_name()} without redis. \"\n                \"(All states should already be available -- this is likely a bug).\",\n            )\nE           RuntimeError: Cannot populate parent states of parent.child2 without redis. (All states should already be available -- this is likely a bug).\n\nreflex/state.py:1225: RuntimeError\n__________________________ test_get_state[in_process] __________________________\n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nstate_cls = <class 'tests.test_state.ChildState2'>\n\n    async def get_state(self, state_cls: Type[BaseState]) -> BaseState:\n        \"\"\"\n        Get an instance of the state associated with this token.\n    \n        Allows for arbitrary access to sibling states from within an event handler.\n    \n        Args:\n            state_cls: The class of the state.\n    \n        Returns:\n            The instance of state_cls associated with this state's client_token.\n        \"\"\"\n        try:\n            # Try to get the state from the cache\n>           return await self._get_state_from_cache(state_cls)\nE           TypeError: object ChildState2 can't be used in 'await' expression\n\nreflex/state.py:1319: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nmock_app = <App state=TestState>, token = 'b3d436ac-5757-4e1e-8a93-8fa4d08bf1cf'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n>       child_state2_get_state = await test_state.get_state(ChildState2)\n\ntests/test_state.py:2734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1322: in get_state\n    return await self._get_state_from_redis(state_cls)\nreflex/state.py:1289: in _get_state_from_redis\n    parent_state_of_state_cls = await self._populate_parent_states(state_cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ntarget_state_cls = <class 'tests.test_state.ChildState2'>\n\n    async def _populate_parent_states(self, target_state_cls: Type[BaseState]):\n        \"\"\"Populate substates in the tree between the target_state_cls and common ancestor of this state.\n    \n        Args:\n            target_state_cls: The class of the state to populate parent states for.\n    \n        Returns:\n            The parent state instance of target_state_cls.\n    \n        Raises:\n            RuntimeError: If redis is not used in this backend process.\n        \"\"\"\n        state_manager = get_state_manager()\n        if not isinstance(state_manager, StateManagerRedis):\n>           raise RuntimeError(\n                f\"Cannot populate parent states of {target_state_cls.get_full_name()} without redis. \"\n                \"(All states should already be available -- this is likely a bug).\",\n            )\nE           RuntimeError: Cannot populate parent states of test_state.child_state2 without redis. (All states should already be available -- this is likely a bug).\n\nreflex/state.py:1225: RuntimeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_get_state_from_sibling_not_cached[in_process]\nFAILED tests/test_state.py::test_get_state[in_process] - RuntimeError: Cannot...\n============= 2 failed, 2 passed, 14 skipped, 5 warnings in 0.97s ==============\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/test_state.py .sFs.s                                               [ 33%]\ntests/test_state_tree.py sssssssss                                       [ 83%]\ntests/test_state.py sFs                                                  [100%]\n\n=================================== FAILURES ===================================\n______________ test_get_state_from_sibling_not_cached[in_process] ______________\n\nself = Child({'parent.child': {}})\nstate_cls = <class 'tests.test_state.test_get_state_from_sibling_not_cached.<locals>.Child2'>\n\n    async def get_state(self, state_cls: Type[BaseState]) -> BaseState:\n        \"\"\"\n        Get an instance of the state associated with this token.\n    \n        Allows for arbitrary access to sibling states from within an event handler.\n    \n        Args:\n            state_cls: The class of the state.\n    \n        Returns:\n            The instance of state_cls associated with this state's client_token.\n        \"\"\"\n        # Try to get the state from the cache first\n        try:\n>           return await self._get_state_from_cache(state_cls)\nE           TypeError: object Child2 can't be used in 'await' expression\n\nreflex/state.py:1319: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nmock_app = <App state=Parent>, token = '6dba78ea-8b27-4390-8d19-e8967a6ba5e6'\n\n    @pytest.mark.asyncio\n    async def test_get_state_from_sibling_not_cached(mock_app: rx.App, token: str):\n        \"\"\"A test simulating update_vars_internal when setting cookies with computed vars.\n    \n        In that case, a sibling state, UpdateVarsInternalState handles the fetching\n        of states that need to have values set. Only the states that have a computed\n        var are pre-fetched (like Child3 in this test), so `get_state` needs to\n        avoid refetching those already-cached states when getting substates,\n        otherwise the set values will be overridden by the freshly deserialized\n        version and lost.\n    \n        Explicit regression test for https://github.com/reflex-dev/reflex/issues/2851.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n    \n        class Parent(BaseState):\n            \"\"\"A root state like rx.State.\"\"\"\n    \n            parent_var: int = 0\n    \n        class Child(Parent):\n            \"\"\"A state simulating UpdateVarsInternalState.\"\"\"\n    \n            pass\n    \n        class Child2(Parent):\n            \"\"\"An unconnected child state.\"\"\"\n    \n            pass\n    \n        class Child3(Parent):\n            \"\"\"A child state with a computed var causing it to be pre-fetched.\n    \n            If child3_var gets set to a value, and `get_state` erroneously\n            re-fetches it from redis, the value will be lost.\n            \"\"\"\n    \n            child3_var: int = 0\n    \n            @rx.var\n            def v(self):\n                pass\n    \n        class Grandchild3(Child3):\n            \"\"\"An extra layer of substate to catch an issue discovered in\n            _determine_missing_parent_states while writing the regression test where\n            invalid parent state names were being constructed.\n            \"\"\"\n    \n            pass\n    \n        class GreatGrandchild3(Grandchild3):\n            \"\"\"Fetching this state wants to also fetch Child3 as a missing parent.\n            However, Child3 should already be cached in the state tree because it\n            has a computed var.\n            \"\"\"\n    \n            pass\n    \n        mock_app.state_manager.state = mock_app.state = Parent\n    \n        # Get the top level state via unconnected sibling.\n        root = await mock_app.state_manager.get_state(_substate_key(token, Child))\n        # Set value in parent_var to assert it does not get refetched later.\n        root.parent_var = 1\n    \n        if isinstance(mock_app.state_manager, StateManagerRedis):\n            # When redis is used, only states with computed vars are pre-fetched.\n            assert \"child2\" not in root.substates\n            assert \"child3\" in root.substates  # (due to @rx.var)\n    \n        # Get the unconnected sibling state, which will be used to `get_state` other instances.\n        child = root.get_substate(Child.get_full_name().split(\".\"))\n    \n        # Get an uncached child state.\n>       child2 = await child.get_state(Child2)\n\ntests/test_state.py:2895: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1322: in get_state\n    return await self._get_state_from_redis(state_cls)\nreflex/state.py:1289: in _get_state_from_redis\n    parent_state_of_state_cls = await self._populate_parent_states(state_cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Child({'parent.child': {}})\ntarget_state_cls = <class 'tests.test_state.test_get_state_from_sibling_not_cached.<locals>.Child2'>\n\n    async def _populate_parent_states(self, target_state_cls: Type[BaseState]):\n        \"\"\"Populate substates in the tree between the target_state_cls and common ancestor of this state.\n    \n        Args:\n            target_state_cls: The class of the state to populate parent states for.\n    \n        Returns:\n            The parent state instance of target_state_cls.\n    \n        Raises:\n            RuntimeError: If redis is not used in this backend process.\n        \"\"\"\n        state_manager = get_state_manager()\n        if not isinstance(state_manager, StateManagerRedis):\n>           raise RuntimeError(\n                f\"Cannot populate parent states of {target_state_cls.get_full_name()} without redis. \"\n                \"(All states should already be available -- this is likely a bug).\",\n            )\nE           RuntimeError: Cannot populate parent states of parent.child2 without redis. (All states should already be available -- this is likely a bug).\n\nreflex/state.py:1225: RuntimeError\n__________________________ test_get_state[in_process] __________________________\n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nstate_cls = <class 'tests.test_state.ChildState2'>\n\n    async def get_state(self, state_cls: Type[BaseState]) -> BaseState:\n        \"\"\"\n        Get an instance of the state associated with this token.\n    \n        Allows for arbitrary access to sibling states from within an event handler.\n    \n        Args:\n            state_cls: The class of the state.\n    \n        Returns:\n            The instance of state_cls associated with this state's client_token.\n        \"\"\"\n        # Try to get the state from the cache first\n        try:\n>           return await self._get_state_from_cache(state_cls)\nE           TypeError: object ChildState2 can't be used in 'await' expression\n\nreflex/state.py:1319: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nmock_app = <App state=TestState>, token = 'dca0380b-a4f7-4bff-afd9-1924c2df57ed'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n>       child_state2_get_state = await test_state.get_state(ChildState2)\n\ntests/test_state.py:2734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1322: in get_state\n    return await self._get_state_from_redis(state_cls)\nreflex/state.py:1289: in _get_state_from_redis\n    parent_state_of_state_cls = await self._populate_parent_states(state_cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ntarget_state_cls = <class 'tests.test_state.ChildState2'>\n\n    async def _populate_parent_states(self, target_state_cls: Type[BaseState]):\n        \"\"\"Populate substates in the tree between the target_state_cls and common ancestor of this state.\n    \n        Args:\n            target_state_cls: The class of the state to populate parent states for.\n    \n        Returns:\n            The parent state instance of target_state_cls.\n    \n        Raises:\n            RuntimeError: If redis is not used in this backend process.\n        \"\"\"\n        state_manager = get_state_manager()\n        if not isinstance(state_manager, StateManagerRedis):\n>           raise RuntimeError(\n                f\"Cannot populate parent states of {target_state_cls.get_full_name()} without redis. \"\n                \"(All states should already be available -- this is likely a bug).\",\n            )\nE           RuntimeError: Cannot populate parent states of test_state.child_state2 without redis. (All states should already be available -- this is likely a bug).\n\nreflex/state.py:1225: RuntimeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_get_state_from_sibling_not_cached[in_process]\nFAILED tests/test_state.py::test_get_state[in_process] - RuntimeError: Cannot...\n============= 2 failed, 2 passed, 14 skipped, 5 warnings in 0.96s ==============\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/test_state.py .s.s.s                                               [ 33%]\ntests/test_state_tree.py sssssssss                                       [ 83%]\ntests/test_state.py s.s                                                  [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================== 4 passed, 14 skipped, 5 warnings in 0.75s ===================\n\n"], "reflex-reflex/state.py-_process": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/test_app.py FFFFFFFFFFF                                            [ 52%]\ntests/test_state.py FFFFFFFFFs                                           [100%]\n\n=================================== FAILURES ===================================\n______ test_dict_mutation_detection__plain_list[update then __setitem__] _______\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...ny'}}}), ('dict_mutation_test_state.remove_last_detail', {'dict_mutation_test_state': {'details': {'name': 'Jenny'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'cea57b82-885c-4657-9b12-058e6e4597a8'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:769: AttributeError\n________ test_dict_mutation_detection__plain_list[delitem then update] _________\n\nevent_tuples = [('dict_mutation_test_state.clear_details', {'dict_mutation_test_state': {'details': {}}}), ('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '85123d8f-762f-4a4e-b17f-f944bebd30bb'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:769: AttributeError\n__________ test_dict_mutation_detection__plain_list[add, remove, pop] __________\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...': {'details': {'age': 20}}}), ('dict_mutation_test_state.pop_out_age', {'dict_mutation_test_state': {'details': {}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '403d129b-0b8e-421a-a857-1154f4fe2ec8'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:769: AttributeError\n____________ test_dict_mutation_detection__plain_list[dict in list] ____________\n\nevent_tuples = [('dict_mutation_test_state.remove_home_address', {'dict_mutation_test_state': {'address': [{}, {'work': 'work address...to_home_address', {'dict_mutation_test_state': {'address': [{'street': 'street address'}, {'work': 'work address'}]}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '67e59cd7-8bc9-44fa-95a0-d7cb48776c30'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:769: AttributeError\n____________ test_dict_mutation_detection__plain_list[nested dict] _____________\n\nevent_tuples = [('dict_mutation_test_state.change_friend_name', {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'n...'dict_mutation_test_state.remove_friend', {'dict_mutation_test_state': {'friend_in_nested_dict': {'name': 'Nikhil'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'a29df353-6fea-47cd-bb49-c364c1d30b3d'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:769: AttributeError\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = 'e6461d0b-eacb-45d9-a2ba-bf0b2b093a46'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n        result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n>       ).__anext__()\nE       AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:475: AttributeError\n______ test_list_mutation_detection__plain_list[append then __setitem__] _______\n\nevent_tuples = [('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}), ('list_mutation_test_state.change_first_friend', {'list_mutation_test_state': {'plain_friends': ['Jenny', 'another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '82b5df96-fda3-4e0a-bd72-5be513de20b0'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:619: AttributeError\n________ test_list_mutation_detection__plain_list[delitem then append] _________\n\nevent_tuples = [('list_mutation_test_state.unfriend_first_friend', {'list_mutation_test_state': {'plain_friends': []}}), ('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '09531a59-1312-47bd-9b77-fe398c53e51d'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:619: AttributeError\n_____ test_list_mutation_detection__plain_list[extend, remove, pop, clear] _____\n\nevent_tuples = [('list_mutation_test_state.make_friends_with_colleagues', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'P...: ['Peter']}}), ('list_mutation_test_state.unfriend_all_friends', {'list_mutation_test_state': {'plain_friends': []}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'cb8c29ca-aba2-4f8a-8bfd-a965d1ebe83d'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:619: AttributeError\n____________ test_list_mutation_detection__plain_list[nested list] _____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_second_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Tom...tation_test_state.remove_first_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Jenny', 'Jimmy']]}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '19cf8579-9403-4dca-9364-2804e8218b83'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:619: AttributeError\n____________ test_list_mutation_detection__plain_list[list in dict] ____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_tommy_friends', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['...]}}}), ('list_mutation_test_state.tommy_has_no_fds', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': []}}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '846452ad-27db-42f7-b4ab-874ff72175d4'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n>           ).__anext__()\nE           AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_app.py:619: AttributeError\n_________________________ test_process_event_generator _________________________\n\n    @pytest.mark.asyncio\n    async def test_process_event_generator():\n        \"\"\"Test event handlers that generate multiple updates.\"\"\"\n        gen_state = GenState()  # type: ignore\n        event = Event(\n            token=\"t\",\n            name=\"go\",\n            payload={\"c\": 5},\n        )\n        gen = gen_state._process(event)\n    \n        count = 0\n>       async for update in gen:\nE       TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\ntests/test_state.py:780: TypeError\n_________________________ test_process_event_substate __________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...{'value2': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ngrandchild_state = GrandchildState({'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_substate(test_state, child_state, grandchild_state):\n        \"\"\"Test processing an event on a substate.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n            grandchild_state: A grandchild state.\n        \"\"\"\n        # Events should bubble down to the substate.\n        assert child_state.value == \"\"\n        assert child_state.count == 23\n        event = Event(\n            token=\"t\", name=\"child_state.change_both\", payload={\"value\": \"hi\", \"count\": 12}\n        )\n>       update = await test_state._process(event).__anext__()\nE       AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_state.py:742: AttributeError\n__________________________ test_process_event_simple ___________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...{'value2': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_simple(test_state):\n        \"\"\"Test processing an event.\n    \n        Args:\n            test_state: A state.\n        \"\"\"\n        assert test_state.num1 == 0\n    \n        event = Event(token=\"t\", name=\"set_num1\", payload={\"value\": 69})\n>       update = await test_state._process(event).__anext__()\nE       AttributeError: 'coroutine' object has no attribute '__anext__'. Did you mean: '__await__'?\n\ntests/test_state.py:713: AttributeError\n____________________ test_preprocess[OnLoadState-expected0] ____________________\n\napp_module_mock = <Mock id='140668141454480'>\ntoken = 'cf7e8aed-e17a-4bb5-a058-e07637e93a6f'\ntest_state = <class 'tests.test_state.OnLoadState'>\nexpected = {'on_load_state': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fefda9a5fc0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <App state=State>\nevent = Event(token='cf7e8aed-e17a-4bb5-a058-e07637e93a6f', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': 'cf7e8aed-e17a-4bb5-a058-e07637e93a6f', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\nsid = 'sid', headers = {}, client_ip = ''\n\n    async def process(\n        app: App, event: Event, sid: str, headers: Dict, client_ip: str\n    ) -> AsyncIterator[StateUpdate]:\n        \"\"\"Process an event.\n    \n        Args:\n            app: The app to process the event for.\n            event: The event to process.\n            sid: The Socket.IO session id.\n            headers: The client headers.\n            client_ip: The client_ip.\n    \n        Raises:\n            Exception: If a reflex specific error occurs during processing the event.\n    \n        Yields:\n            The state updates after processing the event.\n        \"\"\"\n        from reflex.utils import telemetry\n    \n        try:\n            # Add request data to the state.\n            router_data = event.router_data\n            router_data.update(\n                {\n                    constants.RouteVar.QUERY: format.format_query_params(event.router_data),\n                    constants.RouteVar.CLIENT_TOKEN: event.token,\n                    constants.RouteVar.SESSION_ID: sid,\n                    constants.RouteVar.HEADERS: headers,\n                    constants.RouteVar.CLIENT_IP: client_ip,\n                }\n            )\n            # Get the state for the session exclusively.\n            async with app.state_manager.modify_state(event.substate_token) as state:\n                # re-assign only when the value is different\n                if state.router_data != router_data:\n                    # assignment will recurse into substates and force recalculation of\n                    # dependent ComputedVar (dynamic route variables)\n                    state.router_data = router_data\n                    state.router = RouterData(router_data)\n    \n                # Preprocess the event.\n                update = await app._preprocess(state, event)\n    \n                # If there was an update, yield it.\n                if update is not None:\n                    yield update\n    \n                # Only process the event if there is no update.\n                else:\n                    if app._process_background(state, event) is not None:\n                        # `final=True` allows the frontend send more events immediately.\n                        yield StateUpdate(final=True)\n                        return\n    \n                    # Process the event synchronously.\n>                   async for update in state._process(event):\nE                   TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\nreflex/app.py:1096: TypeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-16' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n___________________ test_preprocess[OnLoadState2-expected1] ____________________\n\napp_module_mock = <Mock id='140668141591552'>\ntoken = 'af6f9d92-4121-4a8a-b88d-28ca9970048f'\ntest_state = <class 'tests.test_state.OnLoadState2'>\nexpected = {'on_load_state2': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fefda9c68f0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <App state=State>\nevent = Event(token='af6f9d92-4121-4a8a-b88d-28ca9970048f', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': 'af6f9d92-4121-4a8a-b88d-28ca9970048f', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\nsid = 'sid', headers = {}, client_ip = ''\n\n    async def process(\n        app: App, event: Event, sid: str, headers: Dict, client_ip: str\n    ) -> AsyncIterator[StateUpdate]:\n        \"\"\"Process an event.\n    \n        Args:\n            app: The app to process the event for.\n            event: The event to process.\n            sid: The Socket.IO session id.\n            headers: The client headers.\n            client_ip: The client_ip.\n    \n        Raises:\n            Exception: If a reflex specific error occurs during processing the event.\n    \n        Yields:\n            The state updates after processing the event.\n        \"\"\"\n        from reflex.utils import telemetry\n    \n        try:\n            # Add request data to the state.\n            router_data = event.router_data\n            router_data.update(\n                {\n                    constants.RouteVar.QUERY: format.format_query_params(event.router_data),\n                    constants.RouteVar.CLIENT_TOKEN: event.token,\n                    constants.RouteVar.SESSION_ID: sid,\n                    constants.RouteVar.HEADERS: headers,\n                    constants.RouteVar.CLIENT_IP: client_ip,\n                }\n            )\n            # Get the state for the session exclusively.\n            async with app.state_manager.modify_state(event.substate_token) as state:\n                # re-assign only when the value is different\n                if state.router_data != router_data:\n                    # assignment will recurse into substates and force recalculation of\n                    # dependent ComputedVar (dynamic route variables)\n                    state.router_data = router_data\n                    state.router = RouterData(router_data)\n    \n                # Preprocess the event.\n                update = await app._preprocess(state, event)\n    \n                # If there was an update, yield it.\n                if update is not None:\n                    yield update\n    \n                # Only process the event if there is no update.\n                else:\n                    if app._process_background(state, event) is not None:\n                        # `final=True` allows the frontend send more events immediately.\n                        yield StateUpdate(final=True)\n                        return\n    \n                    # Process the event synchronously.\n>                   async for update in state._process(event):\nE                   TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\nreflex/app.py:1096: TypeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-18' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n___________________ test_preprocess[OnLoadState3-expected2] ____________________\n\napp_module_mock = <Mock id='140668135734672'>\ntoken = '823dc324-9f94-4270-b321-708ef463f4d4'\ntest_state = <class 'tests.test_state.OnLoadState3'>\nexpected = {'on_load_state3': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fefda42fe80>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <App state=State>\nevent = Event(token='823dc324-9f94-4270-b321-708ef463f4d4', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': '823dc324-9f94-4270-b321-708ef463f4d4', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\nsid = 'sid', headers = {}, client_ip = ''\n\n    async def process(\n        app: App, event: Event, sid: str, headers: Dict, client_ip: str\n    ) -> AsyncIterator[StateUpdate]:\n        \"\"\"Process an event.\n    \n        Args:\n            app: The app to process the event for.\n            event: The event to process.\n            sid: The Socket.IO session id.\n            headers: The client headers.\n            client_ip: The client_ip.\n    \n        Raises:\n            Exception: If a reflex specific error occurs during processing the event.\n    \n        Yields:\n            The state updates after processing the event.\n        \"\"\"\n        from reflex.utils import telemetry\n    \n        try:\n            # Add request data to the state.\n            router_data = event.router_data\n            router_data.update(\n                {\n                    constants.RouteVar.QUERY: format.format_query_params(event.router_data),\n                    constants.RouteVar.CLIENT_TOKEN: event.token,\n                    constants.RouteVar.SESSION_ID: sid,\n                    constants.RouteVar.HEADERS: headers,\n                    constants.RouteVar.CLIENT_IP: client_ip,\n                }\n            )\n            # Get the state for the session exclusively.\n            async with app.state_manager.modify_state(event.substate_token) as state:\n                # re-assign only when the value is different\n                if state.router_data != router_data:\n                    # assignment will recurse into substates and force recalculation of\n                    # dependent ComputedVar (dynamic route variables)\n                    state.router_data = router_data\n                    state.router = RouterData(router_data)\n    \n                # Preprocess the event.\n                update = await app._preprocess(state, event)\n    \n                # If there was an update, yield it.\n                if update is not None:\n                    yield update\n    \n                # Only process the event if there is no update.\n                else:\n                    if app._process_background(state, event) is not None:\n                        # `final=True` allows the frontend send more events immediately.\n                        yield StateUpdate(final=True)\n                        return\n    \n                    # Process the event synchronously.\n>                   async for update in state._process(event):\nE                   TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\nreflex/app.py:1096: TypeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-20' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n_____________________ test_preprocess_multiple_load_events _____________________\n\napp_module_mock = <Mock id='140668147297600'>\ntoken = '3565fa58-375e-46aa-89fd-37b20d59b53e'\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fefdac6a7a0>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_multiple_load_events(app_module_mock, token, mocker):\n        \"\"\"Test that a state hydrate event for multiple on-load events is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {OnLoadState, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State,\n            load_events={\"index\": [OnLoadState.test_handler, OnLoadState.test_handler]},\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_full_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2672: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <App state=State>\nevent = Event(token='3565fa58-375e-46aa-89fd-37b20d59b53e', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': '3565fa58-375e-46aa-89fd-37b20d59b53e', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\nsid = 'sid', headers = {}, client_ip = ''\n\n    async def process(\n        app: App, event: Event, sid: str, headers: Dict, client_ip: str\n    ) -> AsyncIterator[StateUpdate]:\n        \"\"\"Process an event.\n    \n        Args:\n            app: The app to process the event for.\n            event: The event to process.\n            sid: The Socket.IO session id.\n            headers: The client headers.\n            client_ip: The client_ip.\n    \n        Raises:\n            Exception: If a reflex specific error occurs during processing the event.\n    \n        Yields:\n            The state updates after processing the event.\n        \"\"\"\n        from reflex.utils import telemetry\n    \n        try:\n            # Add request data to the state.\n            router_data = event.router_data\n            router_data.update(\n                {\n                    constants.RouteVar.QUERY: format.format_query_params(event.router_data),\n                    constants.RouteVar.CLIENT_TOKEN: event.token,\n                    constants.RouteVar.SESSION_ID: sid,\n                    constants.RouteVar.HEADERS: headers,\n                    constants.RouteVar.CLIENT_IP: client_ip,\n                }\n            )\n            # Get the state for the session exclusively.\n            async with app.state_manager.modify_state(event.substate_token) as state:\n                # re-assign only when the value is different\n                if state.router_data != router_data:\n                    # assignment will recurse into substates and force recalculation of\n                    # dependent ComputedVar (dynamic route variables)\n                    state.router_data = router_data\n                    state.router = RouterData(router_data)\n    \n                # Preprocess the event.\n                update = await app._preprocess(state, event)\n    \n                # If there was an update, yield it.\n                if update is not None:\n                    yield update\n    \n                # Only process the event if there is no update.\n                else:\n                    if app._process_background(state, event) is not None:\n                        # `final=True` allows the frontend send more events immediately.\n                        yield StateUpdate(final=True)\n                        return\n    \n                    # Process the event synchronously.\n>                   async for update in state._process(event):\nE                   TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\nreflex/app.py:1096: TypeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-22' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n________________________ test_state_with_invalid_yield _________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7fefda917460>\n\n    @pytest.mark.asyncio\n    async def test_state_with_invalid_yield(capsys):\n        \"\"\"Test that an error is thrown when a state yields an invalid value.\n    \n        Args:\n            capsys: Pytest fixture for capture standard streams.\n        \"\"\"\n    \n        class StateWithInvalidYield(BaseState):\n            \"\"\"A state that yields an invalid value.\"\"\"\n    \n            def invalid_handler(self):\n                \"\"\"Invalid handler.\n    \n                Yields:\n                    an invalid value.\n                \"\"\"\n                yield 1\n    \n        invalid_state = StateWithInvalidYield()\n>       async for update in invalid_state._process(\n            rx.event.Event(token=\"fake_token\", name=\"invalid_handler\")\n        ):\nE       TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\ntests/test_state.py:1486: TypeError\n___________________________ test_setvar[in_process] ____________________________\n\nmock_app = <App state=TestState>, token = '2cabcb09-0095-4959-8cda-e53aa7159ff6'\n\n    @pytest.mark.asyncio\n    async def test_setvar(mock_app: rx.App, token: str):\n        \"\"\"Test that setvar works correctly.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        state = await mock_app.state_manager.get_state(_substate_key(token, TestState))\n    \n        # Set Var in same state (with Var type casting)\n        for event in rx.event.fix_events(\n            [TestState.setvar(\"num1\", 42), TestState.setvar(\"num2\", \"4.2\")], token\n        ):\n>           async for update in state._process(event):\nE           TypeError: 'async for' requires an object with __aiter__ method, got coroutine\n\ntests/test_state.py:2949: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\ntests/test_state.py::test_preprocess[OnLoadState-expected0]\ntests/test_state.py::test_preprocess[OnLoadState2-expected1]\ntests/test_state.py::test_preprocess[OnLoadState3-expected2]\ntests/test_state.py::test_preprocess_multiple_load_events\n  /root/repos/py_data/reflex/reflex/app.py:1096: RuntimeWarning:\n  \n  coroutine 'BaseState._process' was never awaited\n  \n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_state.py::test_state_with_invalid_yield\n  /root/repos/py_data/reflex/tests/test_state.py:1486: RuntimeWarning:\n  \n  coroutine 'BaseState._process' was never awaited\n  \n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_state.py::test_setvar[in_process]\n  /root/repos/py_data/reflex/tests/test_state.py:2949: RuntimeWarning:\n  \n  coroutine 'BaseState._process' was never awaited\n  \n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[update then __setitem__]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[delitem then update]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[add, remove, pop]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[dict in list]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[nested dict]\nFAILED tests/test_app.py::test_dynamic_var_event - AttributeError: 'coroutine...\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[append then __setitem__]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[delitem then append]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[extend, remove, pop, clear]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[nested list]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[list in dict]\nFAILED tests/test_state.py::test_process_event_generator - TypeError: 'async ...\nFAILED tests/test_state.py::test_process_event_substate - AttributeError: 'co...\nFAILED tests/test_state.py::test_process_event_simple - AttributeError: 'coro...\nFAILED tests/test_state.py::test_preprocess[OnLoadState-expected0] - TypeErro...\nFAILED tests/test_state.py::test_preprocess[OnLoadState2-expected1] - TypeErr...\nFAILED tests/test_state.py::test_preprocess[OnLoadState3-expected2] - TypeErr...\nFAILED tests/test_state.py::test_preprocess_multiple_load_events - TypeError:...\nFAILED tests/test_state.py::test_state_with_invalid_yield - TypeError: 'async...\nFAILED tests/test_state.py::test_setvar[in_process] - TypeError: 'async for' ...\n================== 20 failed, 1 skipped, 11 warnings in 1.10s ==================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/test_app.py FFFFFFFFFFF                                            [ 52%]\ntests/test_state.py FFFFFFFFFs                                           [100%]\n\n=================================== FAILURES ===================================\n______ test_dict_mutation_detection__plain_list[update then __setitem__] _______\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...ny'}}}), ('dict_mutation_test_state.remove_last_detail', {'dict_mutation_test_state': {'details': {'name': 'Jenny'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '5e34bb07-9ec3-4083-aecf-d361a0e2f2ec'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...e': 'Tommy'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-2' coro=<<async_generator_athrow without __name__>()>>\n________ test_dict_mutation_detection__plain_list[delitem then update] _________\n\nevent_tuples = [('dict_mutation_test_state.clear_details', {'dict_mutation_test_state': {'details': {}}}), ('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '9c8978ae-d8e0-47ce-9d90-ca76141d1501'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...details': {}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-4' coro=<<async_generator_athrow without __name__>()>>\n__________ test_dict_mutation_detection__plain_list[add, remove, pop] __________\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...': {'details': {'age': 20}}}), ('dict_mutation_test_state.pop_out_age', {'dict_mutation_test_state': {'details': {}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '912accbb-d86d-4e51-989f-c88c2be38a24'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...e': 'Tommy'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-6' coro=<<async_generator_athrow without __name__>()>>\n____________ test_dict_mutation_detection__plain_list[dict in list] ____________\n\nevent_tuples = [('dict_mutation_test_state.remove_home_address', {'dict_mutation_test_state': {'address': [{}, {'work': 'work address...to_home_address', {'dict_mutation_test_state': {'address': [{'street': 'street address'}, {'work': 'work address'}]}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '69bb7a22-209c-4467-8f51-aeb1514d54ca'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...k address'}]}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'address': [{}, {'work': 'work address'}]}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-8' coro=<<async_generator_athrow without __name__>()>>\n____________ test_dict_mutation_detection__plain_list[nested dict] _____________\n\nevent_tuples = [('dict_mutation_test_state.change_friend_name', {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'n...'dict_mutation_test_state.remove_friend', {'dict_mutation_test_state': {'friend_in_nested_dict': {'name': 'Nikhil'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '903f74ee-29d8-4f72-aa29-a4bff096cfdb'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...': 'Nikhil'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'name': 'Tommy'},\nE                                                                     'name': 'Nikhil'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-10' coro=<<async_generator_athrow without __name__>()>>\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = '2f727476-70a4-4741-8f22-1778cd4a4162'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n        result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n        ).__anext__()\n>       assert result.delta == {test_state.get_name(): {\"int_val\": 50}}\nE       AssertionError: assert {} == {'a_test_stat...int_val': 50}}\nE         \nE         Right contains 1 more item:\nE         {'a_test_state': {'int_val': 50}}\nE         Use -v to get more diff\n\ntests/test_app.py:476: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-12' coro=<<async_generator_athrow without __name__>()>>\n______ test_list_mutation_detection__plain_list[append then __setitem__] _______\n\nevent_tuples = [('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}), ('list_mutation_test_state.change_first_friend', {'list_mutation_test_state': {'plain_friends': ['Jenny', 'another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'dcc94beb-0c50-4fe1-a57c-2f135bf7f589'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...another-fd']}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-14' coro=<<async_generator_athrow without __name__>()>>\n________ test_list_mutation_detection__plain_list[delitem then append] _________\n\nevent_tuples = [('list_mutation_test_state.unfriend_first_friend', {'list_mutation_test_state': {'plain_friends': []}}), ('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '60e3897a-d401-428d-af45-0b105060b90c'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...friends': []}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': []}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-16' coro=<<async_generator_athrow without __name__>()>>\n_____ test_list_mutation_detection__plain_list[extend, remove, pop, clear] _____\n\nevent_tuples = [('list_mutation_test_state.make_friends_with_colleagues', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'P...: ['Peter']}}), ('list_mutation_test_state.unfriend_all_friends', {'list_mutation_test_state': {'plain_friends': []}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '7270a2a3-4761-48f9-aab9-18db433324d5'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...r', 'Jimmy']}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': ['Tommy', 'Peter', 'Jimmy']}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-18' coro=<<async_generator_athrow without __name__>()>>\n____________ test_list_mutation_detection__plain_list[nested list] _____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_second_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Tom...tation_test_state.remove_first_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Jenny', 'Jimmy']]}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'cdc739c5-9665-4c24-aa19-4b0c60fd4fe3'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...', 'Jimmy']]}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'friends_in_nested_list': [['Tommy'],\nE                                                                      ['Jenny', 'Jimmy']]}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-20' coro=<<async_generator_athrow without __name__>()>>\n____________ test_list_mutation_detection__plain_list[list in dict] ____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_tommy_friends', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['...]}}}), ('list_mutation_test_state.tommy_has_no_fds', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': []}}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '27087659-1e01-4c16-84d9-96d8e617bb89'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...', 'Jimmy']}}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny', 'Jimmy']}}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-22' coro=<<async_generator_athrow without __name__>()>>\n_________________________ test_process_event_generator _________________________\n\n    @pytest.mark.asyncio\n    async def test_process_event_generator():\n        \"\"\"Test event handlers that generate multiple updates.\"\"\"\n        gen_state = GenState()  # type: ignore\n        event = Event(\n            token=\"t\",\n            name=\"go\",\n            payload={\"c\": 5},\n        )\n        gen = gen_state._process(event)\n    \n        count = 0\n        async for update in gen:\n            count += 1\n            if count == 6:\n                assert update.delta == {}\n                assert update.final\n            else:\n>               assert gen_state.value == count\nE               AssertionError: assert 0 == 1\nE                +  where 0 = GenState({'gen_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'headers': {'ho...}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'value': 0}}).value\n\ntests/test_state.py:786: AssertionError\n_________________________ test_process_event_substate __________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...value2': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ngrandchild_state = GrandchildState({'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_substate(test_state, child_state, grandchild_state):\n        \"\"\"Test processing an event on a substate.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n            grandchild_state: A grandchild state.\n        \"\"\"\n        # Events should bubble down to the substate.\n        assert child_state.value == \"\"\n        assert child_state.count == 23\n        event = Event(\n            token=\"t\", name=\"child_state.change_both\", payload={\"value\": \"hi\", \"count\": 12}\n        )\n        update = await test_state._process(event).__anext__()\n>       assert child_state.value == \"HI\"\nE       AssertionError: assert '' == 'HI'\nE         \nE         - HI\n\ntests/test_state.py:743: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-25' coro=<<async_generator_athrow without __name__>()>>\n__________________________ test_process_event_simple ___________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...value2': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_simple(test_state):\n        \"\"\"Test processing an event.\n    \n        Args:\n            test_state: A state.\n        \"\"\"\n        assert test_state.num1 == 0\n    \n        event = Event(token=\"t\", name=\"set_num1\", payload={\"value\": 69})\n        update = await test_state._process(event).__anext__()\n    \n        # The event should update the value.\n>       assert test_state.num1 == 69\nE       AssertionError: assert 0 == 69\nE        +  where 0 = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...value2': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}).num1\n\ntests/test_state.py:716: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-27' coro=<<async_generator_athrow without __name__>()>>\n____________________ test_preprocess[OnLoadState-expected0] ____________________\n\napp_module_mock = <Mock id='140645090272464'>\ntoken = '7e4494ef-154c-4a0d-813f-8b63bbaef9a2'\ntest_state = <class 'tests.test_state.OnLoadState'>\nexpected = {'on_load_state': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fea7ca53e50>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n___________________ test_preprocess[OnLoadState2-expected1] ____________________\n\napp_module_mock = <Mock id='140645090275248'>\ntoken = '36095917-8090-4e1e-9372-61f86b7324dd'\ntest_state = <class 'tests.test_state.OnLoadState2'>\nexpected = {'on_load_state2': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fea7ce98970>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n___________________ test_preprocess[OnLoadState3-expected2] ____________________\n\napp_module_mock = <Mock id='140645091744384'>\ntoken = '7d0b0a37-e476-46bc-8c04-45d7b5d86cf6'\ntest_state = <class 'tests.test_state.OnLoadState3'>\nexpected = {'on_load_state3': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fea7cb5c400>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n_____________________ test_preprocess_multiple_load_events _____________________\n\napp_module_mock = <Mock id='140645091361360'>\ntoken = '3a8c0d12-6d23-47db-9d4f-0aed6a4d4137'\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fea7d8a9060>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_multiple_load_events(app_module_mock, token, mocker):\n        \"\"\"Test that a state hydrate event for multiple on-load events is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {OnLoadState, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State,\n            load_events={\"index\": [OnLoadState.test_handler, OnLoadState.test_handler]},\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_full_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2686: KeyError\n________________________ test_state_with_invalid_yield _________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7fea7cb8ada0>\n\n    @pytest.mark.asyncio\n    async def test_state_with_invalid_yield(capsys):\n        \"\"\"Test that an error is thrown when a state yields an invalid value.\n    \n        Args:\n            capsys: Pytest fixture for capture standard streams.\n        \"\"\"\n    \n        class StateWithInvalidYield(BaseState):\n            \"\"\"A state that yields an invalid value.\"\"\"\n    \n            def invalid_handler(self):\n                \"\"\"Invalid handler.\n    \n                Yields:\n                    an invalid value.\n                \"\"\"\n                yield 1\n    \n        invalid_state = StateWithInvalidYield()\n        async for update in invalid_state._process(\n            rx.event.Event(token=\"fake_token\", name=\"invalid_handler\")\n        ):\n            assert not update.delta\n>           assert update.events == rx.event.fix_events(\n                [rx.window_alert(\"An error occurred. See logs for details.\")],\n                token=\"\",\n            )\nE           AssertionError: assert [] == [Event(token=...r details.'})]\nE             \nE             Right contains one more item: Event(token='', name='_alert', router_data={}, payload={'message': 'An error occurred. See logs for details.'})\nE             Use -v to get more diff\n\ntests/test_state.py:1490: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-33' coro=<<async_generator_athrow without __name__>()>>\n___________________________ test_setvar[in_process] ____________________________\n\nmock_app = <App state=TestState>, token = '3cae8518-2ec6-4190-8e21-3c3e4312248b'\n\n    @pytest.mark.asyncio\n    async def test_setvar(mock_app: rx.App, token: str):\n        \"\"\"Test that setvar works correctly.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        state = await mock_app.state_manager.get_state(_substate_key(token, TestState))\n    \n        # Set Var in same state (with Var type casting)\n        for event in rx.event.fix_events(\n            [TestState.setvar(\"num1\", 42), TestState.setvar(\"num2\", \"4.2\")], token\n        ):\n            async for update in state._process(event):\n                print(update)\n>       assert state.num1 == 42\nE       AssertionError: assert 0 == 42\nE        +  where 0 = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...value2': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}).num1\n\ntests/test_state.py:2951: AssertionError\n----------------------------- Captured stdout call -----------------------------\ndelta={} events=[] final=True\ndelta={} events=[] final=True\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[update then __setitem__]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[delitem then update]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[add, remove, pop]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[dict in list]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[nested dict]\nFAILED tests/test_app.py::test_dynamic_var_event - AssertionError: assert {} ...\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[append then __setitem__]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[delitem then append]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[extend, remove, pop, clear]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[nested list]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[list in dict]\nFAILED tests/test_state.py::test_process_event_generator - AssertionError: as...\nFAILED tests/test_state.py::test_process_event_substate - AssertionError: ass...\nFAILED tests/test_state.py::test_process_event_simple - AssertionError: asser...\nFAILED tests/test_state.py::test_preprocess[OnLoadState-expected0] - KeyError...\nFAILED tests/test_state.py::test_preprocess[OnLoadState2-expected1] - KeyErro...\nFAILED tests/test_state.py::test_preprocess[OnLoadState3-expected2] - KeyErro...\nFAILED tests/test_state.py::test_preprocess_multiple_load_events - KeyError: ...\nFAILED tests/test_state.py::test_state_with_invalid_yield - AssertionError: a...\nFAILED tests/test_state.py::test_setvar[in_process] - AssertionError: assert ...\n================== 20 failed, 1 skipped, 5 warnings in 1.07s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/test_app.py FFFFFFFFFFF                                            [ 52%]\ntests/test_state.py FFFFFFFFFs                                           [100%]\n\n=================================== FAILURES ===================================\n______ test_dict_mutation_detection__plain_list[update then __setitem__] _______\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...ny'}}}), ('dict_mutation_test_state.remove_last_detail', {'dict_mutation_test_state': {'details': {'name': 'Jenny'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '993d3db2-c2d2-44f1-916e-39146306f9ad'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='993d3db2-c2d2-44f1-916e-39146306f9ad', name='dict_mutation_test_state.add_age', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n________ test_dict_mutation_detection__plain_list[delitem then update] _________\n\nevent_tuples = [('dict_mutation_test_state.clear_details', {'dict_mutation_test_state': {'details': {}}}), ('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'ae6d3c66-6282-401f-bd27-382bcccbe7d7'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='ae6d3c66-6282-401f-bd27-382bcccbe7d7', name='dict_mutation_test_state.clear_details', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n__________ test_dict_mutation_detection__plain_list[add, remove, pop] __________\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...': {'details': {'age': 20}}}), ('dict_mutation_test_state.pop_out_age', {'dict_mutation_test_state': {'details': {}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'e527019e-b521-4620-a3fb-9cd48d41880e'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='e527019e-b521-4620-a3fb-9cd48d41880e', name='dict_mutation_test_state.add_age', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n____________ test_dict_mutation_detection__plain_list[dict in list] ____________\n\nevent_tuples = [('dict_mutation_test_state.remove_home_address', {'dict_mutation_test_state': {'address': [{}, {'work': 'work address...to_home_address', {'dict_mutation_test_state': {'address': [{'street': 'street address'}, {'work': 'work address'}]}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '19795b8e-7608-4eaf-a70f-3a7b891823fc'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='19795b8e-7608-4eaf-a70f-3a7b891823fc', name='dict_mutation_test_state.remove_home_address', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n____________ test_dict_mutation_detection__plain_list[nested dict] _____________\n\nevent_tuples = [('dict_mutation_test_state.change_friend_name', {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'n...'dict_mutation_test_state.remove_friend', {'dict_mutation_test_state': {'friend_in_nested_dict': {'name': 'Nikhil'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '9c958f52-5aca-44e4-80f7-c2f0a4be9a4e'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:762: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='9c958f52-5aca-44e4-80f7-c2f0a4be9a4e', name='dict_mutation_test_state.change_friend_name', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = '21057c82-c5e4-4540-a77d-d0845888fcfc'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n>       result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n        ).__anext__()\n\ntests/test_app.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ATestState({'a_test_state': {'int_val': BaseVar(_var_name='int_val', _var_type=<class 'int'>, _var_is_local=False, _va...''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'var': 0}})\nevent = Event(token='21057c82-c5e4-4540-a77d-d0845888fcfc', name='a_test_state.set_int_val', router_data={'pathname': '/', 'query': {}}, payload={'value': 50})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n______ test_list_mutation_detection__plain_list[append then __setitem__] _______\n\nevent_tuples = [('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}), ('list_mutation_test_state.change_first_friend', {'list_mutation_test_state': {'plain_friends': ['Jenny', 'another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '335be5d8-f839-4d19-adf4-98417fc5141d'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='335be5d8-f839-4d19-adf4-98417fc5141d', name='list_mutation_test_state.make_friend', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n________ test_list_mutation_detection__plain_list[delitem then append] _________\n\nevent_tuples = [('list_mutation_test_state.unfriend_first_friend', {'list_mutation_test_state': {'plain_friends': []}}), ('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'c0c98170-81d7-4136-a5b1-ebe90acc5d3e'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='c0c98170-81d7-4136-a5b1-ebe90acc5d3e', name='list_mutation_test_state.unfriend_first_friend', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n_____ test_list_mutation_detection__plain_list[extend, remove, pop, clear] _____\n\nevent_tuples = [('list_mutation_test_state.make_friends_with_colleagues', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'P...: ['Peter']}}), ('list_mutation_test_state.unfriend_all_friends', {'list_mutation_test_state': {'plain_friends': []}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '5d4e69b3-4342-471c-b5f3-cb64379987ae'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='5d4e69b3-4342-471c-b5f3-cb64379987ae', name='list_mutation_test_state.make_friends_with_colleagues', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n____________ test_list_mutation_detection__plain_list[nested list] _____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_second_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Tom...tation_test_state.remove_first_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Jenny', 'Jimmy']]}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '686e75f0-954b-4d25-b850-203bcddfa347'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='686e75f0-954b-4d25-b850-203bcddfa347', name='list_mutation_test_state.add_jimmy_to_second_group', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n____________ test_list_mutation_detection__plain_list[list in dict] ____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_tommy_friends', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['...]}}}), ('list_mutation_test_state.tommy_has_no_fds', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': []}}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '5edc1ea2-ad97-4d2f-9bfb-2b52d7f9a25c'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n>           result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n\ntests/test_app.py:612: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='5edc1ea2-ad97-4d2f-9bfb-2b52d7f9a25c', name='list_mutation_test_state.add_jimmy_to_tommy_friends', router_data={'pathname': '/', 'query': {}}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n_________________________ test_process_event_generator _________________________\n\n    @pytest.mark.asyncio\n    async def test_process_event_generator():\n        \"\"\"Test event handlers that generate multiple updates.\"\"\"\n        gen_state = GenState()  # type: ignore\n        event = Event(\n            token=\"t\",\n            name=\"go\",\n            payload={\"c\": 5},\n        )\n        gen = gen_state._process(event)\n    \n        count = 0\n>       async for update in gen:\n\ntests/test_state.py:780: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = GenState({'gen_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'headers': {'ho...}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'value': 0}})\nevent = Event(token='t', name='go', router_data={}, payload={'c': 5})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n_________________________ test_process_event_substate __________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...computed': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ngrandchild_state = GrandchildState({'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_substate(test_state, child_state, grandchild_state):\n        \"\"\"Test processing an event on a substate.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n            grandchild_state: A grandchild state.\n        \"\"\"\n        # Events should bubble down to the substate.\n        assert child_state.value == \"\"\n        assert child_state.count == 23\n        event = Event(\n            token=\"t\", name=\"child_state.change_both\", payload={\"value\": \"hi\", \"count\": 12}\n        )\n>       update = await test_state._process(event).__anext__()\n\ntests/test_state.py:742: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...computed': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\nevent = Event(token='t', name='child_state.change_both', router_data={}, payload={'value': 'hi', 'count': 12})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n__________________________ test_process_event_simple ___________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...computed': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_simple(test_state):\n        \"\"\"Test processing an event.\n    \n        Args:\n            test_state: A state.\n        \"\"\"\n        assert test_state.num1 == 0\n    \n        event = Event(token=\"t\", name=\"set_num1\", payload={\"value\": 69})\n>       update = await test_state._process(event).__anext__()\n\ntests/test_state.py:713: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...computed': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\nevent = Event(token='t', name='set_num1', router_data={}, payload={'value': 69})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n____________________ test_preprocess[OnLoadState-expected0] ____________________\n\napp_module_mock = <Mock id='139653145463824'>\ntoken = 'd0840ac5-e823-4da3-8ac9-ba257dbc3941'\ntest_state = <class 'tests.test_state.OnLoadState'>\nexpected = {'on_load_state': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f0388208f70>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': 'd0840ac5-e823-4da3-8ac9-ba257dbc3941', ...e/', 'full_raw_path': 'None/', 'params': {}}}}, 'state.on_load_state': {'num': 0}, 'state.on_load_internal_state': {}})\nevent = Event(token='d0840ac5-e823-4da3-8ac9-ba257dbc3941', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': 'd0840ac5-e823-4da3-8ac9-ba257dbc3941', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-16' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n___________________ test_preprocess[OnLoadState2-expected1] ____________________\n\napp_module_mock = <Mock id='139653148481312'>\ntoken = '56a48453-f206-41d1-b46a-6ad194e44066'\ntest_state = <class 'tests.test_state.OnLoadState2'>\nexpected = {'on_load_state2': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f03884ea500>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '56a48453-f206-41d1-b46a-6ad194e44066', ...w_path': 'None/', 'params': {}}}}, 'state.on_load_internal_state': {}, 'state.on_load_state2': {'name': '', 'num': 0}})\nevent = Event(token='56a48453-f206-41d1-b46a-6ad194e44066', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': '56a48453-f206-41d1-b46a-6ad194e44066', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-18' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n___________________ test_preprocess[OnLoadState3-expected2] ____________________\n\napp_module_mock = <Mock id='139653145467952'>\ntoken = '0c0d8de3-e48e-4af1-bbcf-079adf92bbcd'\ntest_state = <class 'tests.test_state.OnLoadState3'>\nexpected = {'on_load_state3': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f038820b6d0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '0c0d8de3-e48e-4af1-bbcf-079adf92bbcd', .../', 'full_raw_path': 'None/', 'params': {}}}}, 'state.on_load_internal_state': {}, 'state.on_load_state3': {'num': 0}})\nevent = Event(token='0c0d8de3-e48e-4af1-bbcf-079adf92bbcd', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': '0c0d8de3-e48e-4af1-bbcf-079adf92bbcd', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-20' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n_____________________ test_preprocess_multiple_load_events _____________________\n\napp_module_mock = <Mock id='139653149756672'>\ntoken = '8b722a1b-755a-495a-93cf-513b5049237f'\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f03886207f0>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_multiple_load_events(app_module_mock, token, mocker):\n        \"\"\"Test that a state hydrate event for multiple on-load events is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {OnLoadState, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State,\n            load_events={\"index\": [OnLoadState.test_handler, OnLoadState.test_handler]},\n        )\n        state = State()\n    \n        updates = []\n>       async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_full_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n\ntests/test_state.py:2672: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/app.py:1096: in process\n    async for update in state._process(event):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '8b722a1b-755a-495a-93cf-513b5049237f', ...e/', 'full_raw_path': 'None/', 'params': {}}}}, 'state.on_load_state': {'num': 0}, 'state.on_load_internal_state': {}})\nevent = Event(token='8b722a1b-755a-495a-93cf-513b5049237f', name='state.on_load_internal_state.on_load_internal', router_data=... '/', 'query': {}, 'token': '8b722a1b-755a-495a-93cf-513b5049237f', 'sid': 'sid', 'headers': {}, 'ip': ''}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1729 Task exception was never retrieved\nfuture: <Task finished name='Task-22' coro=<send.<locals>.async_send() done, defined at /root/repos/py_data/reflex/reflex/utils/telemetry.py:188> exception=FileNotFoundError(2, 'No such file or directory')>\nTraceback (most recent call last):\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 189, in async_send\n    return _send(event, telemetry_enabled, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 173, in _send\n    event_data = _prepare_event(event, **kwargs)\n  File \"/root/repos/py_data/reflex/reflex/utils/telemetry.py\", line 114, in _prepare_event\n    project_hash = get_project_hash(raise_on_fail=_raise_on_missing_project_hash())\n  File \"/root/repos/py_data/reflex/reflex/utils/prerequisites.py\", line 531, in get_project_hash\n    data = json.loads(json_file.read_text())\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1132, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n  File \"/usr/local/lib/python3.10/pathlib.py\", line 1117, in open\n    return self._accessor.open(self, mode, buffering, encoding, errors,\nFileNotFoundError: [Errno 2] No such file or directory: '.web/reflex.json'\n________________________ test_state_with_invalid_yield _________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f0388557220>\n\n    @pytest.mark.asyncio\n    async def test_state_with_invalid_yield(capsys):\n        \"\"\"Test that an error is thrown when a state yields an invalid value.\n    \n        Args:\n            capsys: Pytest fixture for capture standard streams.\n        \"\"\"\n    \n        class StateWithInvalidYield(BaseState):\n            \"\"\"A state that yields an invalid value.\"\"\"\n    \n            def invalid_handler(self):\n                \"\"\"Invalid handler.\n    \n                Yields:\n                    an invalid value.\n                \"\"\"\n                yield 1\n    \n        invalid_state = StateWithInvalidYield()\n>       async for update in invalid_state._process(\n            rx.event.Event(token=\"fake_token\", name=\"invalid_handler\")\n        ):\n\ntests/test_state.py:1486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = StateWithInvalidYield({'state_with_invalid_yield': {'router': {'session': {'client_token': '', 'client_ip': '', 'sessi...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nevent = Event(token='fake_token', name='invalid_handler', router_data={}, payload={})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n___________________________ test_setvar[in_process] ____________________________\n\nmock_app = <App state=TestState>, token = '18480ba8-7258-47f7-bb4d-595713df57fe'\n\n    @pytest.mark.asyncio\n    async def test_setvar(mock_app: rx.App, token: str):\n        \"\"\"Test that setvar works correctly.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        state = await mock_app.state_manager.get_state(_substate_key(token, TestState))\n    \n        # Set Var in same state (with Var type casting)\n        for event in rx.event.fix_events(\n            [TestState.setvar(\"num1\", 42), TestState.setvar(\"num2\", \"4.2\")], token\n        ):\n>           async for update in state._process(event):\n\ntests/test_state.py:2949: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...computed': ''}, 'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}})\nevent = Event(token='18480ba8-7258-47f7-bb4d-595713df57fe', name='test_state.setvar', router_data={}, payload={'var_name': 'num1', 'value': 42})\n\n    async def _process(self, event: Event) -> AsyncIterator[StateUpdate]:\n        \"\"\"\n        Obtain event info and process event.\n    \n        Args:\n            event: The event to process.\n    \n        Yields:\n            The state update after processing the event.\n        \"\"\"\n        # Obtain event info\n        # For example, let's assume we have a function to get event info\n>       event_info = await get_event_info(event)\nE       NameError: name 'get_event_info' is not defined\n\nreflex/state.py:1368: NameError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[update then __setitem__]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[delitem then update]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[add, remove, pop]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[dict in list]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[nested dict]\nFAILED tests/test_app.py::test_dynamic_var_event - NameError: name 'get_event...\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[append then __setitem__]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[delitem then append]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[extend, remove, pop, clear]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[nested list]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[list in dict]\nFAILED tests/test_state.py::test_process_event_generator - NameError: name 'g...\nFAILED tests/test_state.py::test_process_event_substate - NameError: name 'ge...\nFAILED tests/test_state.py::test_process_event_simple - NameError: name 'get_...\nFAILED tests/test_state.py::test_preprocess[OnLoadState-expected0] - NameErro...\nFAILED tests/test_state.py::test_preprocess[OnLoadState2-expected1] - NameErr...\nFAILED tests/test_state.py::test_preprocess[OnLoadState3-expected2] - NameErr...\nFAILED tests/test_state.py::test_preprocess_multiple_load_events - NameError:...\nFAILED tests/test_state.py::test_state_with_invalid_yield - NameError: name '...\nFAILED tests/test_state.py::test_setvar[in_process] - NameError: name 'get_ev...\n================== 20 failed, 1 skipped, 5 warnings in 1.71s ===================\n\n"], "reflex-reflex/state.py-_dirty_computed_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_conditional_computed_vars ________________________\n\n    def test_conditional_computed_vars():\n        \"\"\"Test that computed vars can have conditionals.\"\"\"\n    \n        class MainState(BaseState):\n            flag: bool = False\n            t1: str = \"a\"\n            t2: str = \"b\"\n    \n            @ComputedVar\n            def rendered_var(self) -> str:\n                if self.flag:\n                    return self.t1\n                return self.t2\n    \n        ms = MainState()\n        # Initially there are no dirty computed vars.\n>       assert ms._dirty_computed_vars(from_vars={\"flag\"}) == {\"rendered_var\"}\n\ntests/test_state.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'str' object has no attribute 'dependencies'\") raised in repr()] MainState object at 0x7fd1a6ba0c40>\nfrom_vars = {'flag'}, include_backend = False\n\n    def _dirty_computed_vars(self, from_vars=None, include_backend=False):\n        \"\"\"\n        Determine ComputedVars that need to be recalculated based on the given vars.\n    \n        Args:\n            from_vars (set): find ComputedVar that depend on this set of vars. If unspecified, will use the dirty_vars.\n            include_backend (bool): whether to include backend vars in the calculation.\n    \n        Returns:\n            Set of computed vars to include in the delta.\n        \"\"\"\n        # Get the dirty vars if from_vars is not specified\n        if from_vars is None:\n            from_vars = self.dirty_vars\n    \n        # Initialize an empty set to store the computed vars that need to be recalculated\n        dirty_computed_vars = set()\n    \n        # Iterate over each computed var\n        for computed_var in self.computed_vars:\n            # Check if the computed var depends on any of the given vars\n>           if any(var in from_vars for var in computed_var.dependencies):\nE           AttributeError: 'str' object has no attribute 'dependencies'\n\nreflex/state.py:1548: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_conditional_computed_vars - AttributeError: ...\n======================== 1 failed, 5 warnings in 0.45s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_conditional_computed_vars ________________________\n\n    def test_conditional_computed_vars():\n        \"\"\"Test that computed vars can have conditionals.\"\"\"\n    \n        class MainState(BaseState):\n            flag: bool = False\n            t1: str = \"a\"\n            t2: str = \"b\"\n    \n            @ComputedVar\n            def rendered_var(self) -> str:\n                if self.flag:\n                    return self.t1\n                return self.t2\n    \n        ms = MainState()\n        # Initially there are no dirty computed vars.\n>       assert ms._dirty_computed_vars(from_vars={\"flag\"}) == {\"rendered_var\"}\n\ntests/test_state.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[VarTypeError(\"Cannot iterate over Var 'main_state.rendered_var'. Instead use `rx.foreach`.\") raised in repr()] MainState object at 0x7ff8c74f4be0>\nfrom_vars = {'flag'}, include_backend = False\n\n    def _dirty_computed_vars(self, from_vars=None, include_backend=False):\n        \"\"\"\n        Determine ComputedVars that need to be recalculated based on the given vars.\n    \n        Args:\n            from_vars (list): find ComputedVar that depend on this set of vars. If unspecified, will use the dirty_vars.\n            include_backend (bool): whether to include backend vars in the calculation.\n    \n        Returns:\n            Set of computed vars to include in the delta.\n        \"\"\"\n        # Initialize an empty set to store the dirty computed vars\n        dirty_computed = set()\n    \n        # If from_vars is not specified, use self.dirty_vars as default\n        if from_vars is None:\n            from_vars = self.dirty_vars\n    \n        # Iterate over each var in from_vars\n        for var in from_vars:\n            # If include_backend is True, include backend vars in the calculation\n            if include_backend:\n                # Assuming self.computed_vars_backend is a set of backend computed vars\n                backend_computed = self.computed_vars_backend\n                # Add backend computed vars to the dirty computed set\n                dirty_computed.update(backend_computed)\n            # Iterate over each computed var that depends on the current var\n>           for computed_var in self.computed_vars[var]:\nE           KeyError: 'flag'\n\nreflex/state.py:1554: KeyError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_conditional_computed_vars - KeyError: 'flag'\n======================== 1 failed, 5 warnings in 0.45s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_conditional_computed_vars ________________________\n\n    def test_conditional_computed_vars():\n        \"\"\"Test that computed vars can have conditionals.\"\"\"\n    \n        class MainState(BaseState):\n            flag: bool = False\n            t1: str = \"a\"\n            t2: str = \"b\"\n    \n            @ComputedVar\n            def rendered_var(self) -> str:\n                if self.flag:\n                    return self.t1\n                return self.t2\n    \n        ms = MainState()\n        # Initially there are no dirty computed vars.\n>       assert ms._dirty_computed_vars(from_vars={\"flag\"}) == {\"rendered_var\"}\nE       AssertionError: assert set() == {'rendered_var'}\nE         \nE         Extra items in the right set:\nE         'rendered_var'\nE         Use -v to get more diff\n\ntests/test_state.py:1075: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_conditional_computed_vars - AssertionError: ...\n======================== 1 failed, 5 warnings in 0.43s =========================\n\n"], "reflex-reflex/state.py-_potentially_dirty_substates": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nE     File \"/root/repos/py_data/reflex/reflex/state.py\", line 1547\nE       from typing import Sequence, Type, Set\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nE     File \"/root/repos/py_data/reflex/reflex/state.py\", line 1547\nE       from typing import Sequence, Type, Set\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nE     File \"/root/repos/py_data/reflex/reflex/state.py\", line 1547\nE       from typing import Sequence, Type, Set\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/state.py-get_delta": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 15 items\n\ntests/test_state.py FFF                                                  [ 20%]\ntests/test_state_tree.py sssssssss                                       [ 80%]\ntests/test_state.py FFs                                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_dirty_computed_var_from_var _______________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\n\n    def test_dirty_computed_var_from_var(interdependent_state: InterdependentState) -> None:\n        \"\"\"Set Var that ComputedVar depends on, expect recalculation.\n    \n        The other ComputedVar depends on the changed ComputedVar and should also be\n        recalculated. No other ComputedVars should be recalculated.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.v1 = 1\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v1\": 1, \"v1x2\": 2, \"v1x2x2\": 4},\n        }\nE       AssertionError: assert None == {'interdependent_state': {'v1': 1, 'v1x2': 2, 'v1x2x2': 4}}\nE        +  where None = <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})>()\nE        +    where <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})> = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}}).get_delta\n\ntests/test_state.py:1001: AssertionError\n___________________ test_dirty_computed_var_from_backend_var ___________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\n\n    def test_dirty_computed_var_from_backend_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set backend var that ComputedVar depends on, expect recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        assert InterdependentState._v3._backend is True\n        interdependent_state._v2 = 2\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v2x2\": 4, \"v3x2\": 4},\n        }\nE       AssertionError: assert None == {'interdependent_state': {'v2x2': 4, 'v3x2': 4}}\nE        +  where None = <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})>()\nE        +    where <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})> = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}}).get_delta\n\ntests/test_state.py:1016: AssertionError\n_____________________ test_not_dirty_computed_var_from_var _____________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\n\n    def test_not_dirty_computed_var_from_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set Var that no ComputedVar depends on, expect no recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.x = 5\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"x\": 5},\n        }\nE       AssertionError: assert None == {'interdependent_state': {'x': 5}}\nE        +  where None = <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})>()\nE        +    where <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})> = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}}).get_delta\n\ntests/test_state.py:986: AssertionError\n________________ test_computed_var_cached_depends_on_non_cached ________________\n\n    def test_computed_var_cached_depends_on_non_cached():\n        \"\"\"Test that a cached var is recalculated if it depends on non-cached ComputedVar.\"\"\"\n    \n        class ComputedState(BaseState):\n            v: int = 0\n    \n            @rx.var\n            def no_cache_v(self) -> int:\n                return self.v\n    \n            @rx.var(cache=True)\n            def dep_v(self) -> int:\n                return self.no_cache_v  # type: ignore\n    \n            @rx.var(cache=True)\n            def comp_v(self) -> int:\n                return self.v\n    \n        cs = ComputedState()\n        assert cs.dirty_vars == set()\n>       assert cs.get_delta() == {cs.get_name(): {\"no_cache_v\": 0, \"dep_v\": 0}}\nE       AssertionError: assert None == {'computed_state': {'dep_v': 0, 'no_cache_v': 0}}\nE        +  where None = <bound method BaseState.get_delta of ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'rout... ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}})>()\nE        +    where <bound method BaseState.get_delta of ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'rout... ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}})> = ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'router': {'session': {'client_token': '',...: ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}}).get_delta\n\ntests/test_state.py:1183: AssertionError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = 'ac6c5023-81b6-4bf2-844d-3738763faf87'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n        assert child_state2_direct is child_state2_get_state\n    \n        # Get arbitrary GrandchildState.\n        grandchild_state = await child_state2_get_state.get_state(GrandchildState)\n        assert isinstance(grandchild_state, GrandchildState)\n    \n        # Now the original root should have all substates populated.\n        assert tuple(sorted(test_state.substates)) == (\n            \"child_state\",\n            \"child_state2\",\n            \"child_state3\",\n        )\n    \n        # ChildState should be retrievable\n        child_state_direct = test_state.get_substate([\"child_state\"])\n        child_state_get_state = await test_state.get_state(ChildState)\n        # These should be the same object.\n        assert child_state_direct is child_state_get_state\n    \n        # GrandchildState instance should be the same as the one retrieved from the child_state2.\n        assert grandchild_state is child_state_direct.get_substate([\"grandchild_state\"])\n        grandchild_state.value2 = \"set_value\"\n    \n>       assert test_state.get_delta() == {\n            TestState.get_full_name(): {\n                \"sum\": 3.14,\n                \"upper\": \"\",\n            },\n            GrandchildState.get_full_name(): {\n                \"value2\": \"set_value\",\n            },\n            GrandchildState3.get_full_name(): {\n                \"computed\": \"\",\n            },\n        }\nE       AssertionError: assert None == {'test_state': {'sum': 3.14, 'upper': ''}, 'test_state.child_state.grandchild_state': {'value2': 'set_value'}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}\nE        +  where None = <bound method BaseState.get_delta of TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'pr...ached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})>()\nE        +    where <bound method BaseState.get_delta of TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'pr...ached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})> = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}).get_delta\n\ntests/test_state.py:2759: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_dirty_computed_var_from_var - AssertionError...\nFAILED tests/test_state.py::test_dirty_computed_var_from_backend_var - Assert...\nFAILED tests/test_state.py::test_not_dirty_computed_var_from_var - AssertionE...\nFAILED tests/test_state.py::test_computed_var_cached_depends_on_non_cached - ...\nFAILED tests/test_state.py::test_get_state[in_process] - AssertionError: asse...\n================== 5 failed, 10 skipped, 5 warnings in 0.65s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 15 items\n\ntests/test_state.py FFF                                                  [ 20%]\ntests/test_state_tree.py sssssssss                                       [ 80%]\ntests/test_state.py FFs                                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_dirty_computed_var_from_var _______________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\n\n    def test_dirty_computed_var_from_var(interdependent_state: InterdependentState) -> None:\n        \"\"\"Set Var that ComputedVar depends on, expect recalculation.\n    \n        The other ComputedVar depends on the changed ComputedVar and should also be\n        recalculated. No other ComputedVars should be recalculated.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.v1 = 1\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v1\": 1, \"v1x2\": 2, \"v1x2x2\": 4},\n        }\nE       AssertionError: assert None == {'interdependent_state': {'v1': 1, 'v1x2': 2, 'v1x2x2': 4}}\nE        +  where None = <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})>()\nE        +    where <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})> = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}}).get_delta\n\ntests/test_state.py:1001: AssertionError\n___________________ test_dirty_computed_var_from_backend_var ___________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\n\n    def test_dirty_computed_var_from_backend_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set backend var that ComputedVar depends on, expect recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        assert InterdependentState._v3._backend is True\n        interdependent_state._v2 = 2\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v2x2\": 4, \"v3x2\": 4},\n        }\nE       AssertionError: assert None == {'interdependent_state': {'v2x2': 4, 'v3x2': 4}}\nE        +  where None = <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})>()\nE        +    where <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})> = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}}).get_delta\n\ntests/test_state.py:1016: AssertionError\n_____________________ test_not_dirty_computed_var_from_var _____________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\n\n    def test_not_dirty_computed_var_from_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set Var that no ComputedVar depends on, expect no recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.x = 5\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"x\": 5},\n        }\nE       AssertionError: assert None == {'interdependent_state': {'x': 5}}\nE        +  where None = <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})>()\nE        +    where <bound method BaseState.get_delta of InterdependentState({'interdependent_state': {'router': {'session': {'client_toke...'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})> = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}}).get_delta\n\ntests/test_state.py:986: AssertionError\n________________ test_computed_var_cached_depends_on_non_cached ________________\n\n    def test_computed_var_cached_depends_on_non_cached():\n        \"\"\"Test that a cached var is recalculated if it depends on non-cached ComputedVar.\"\"\"\n    \n        class ComputedState(BaseState):\n            v: int = 0\n    \n            @rx.var\n            def no_cache_v(self) -> int:\n                return self.v\n    \n            @rx.var(cache=True)\n            def dep_v(self) -> int:\n                return self.no_cache_v  # type: ignore\n    \n            @rx.var(cache=True)\n            def comp_v(self) -> int:\n                return self.v\n    \n        cs = ComputedState()\n        assert cs.dirty_vars == set()\n>       assert cs.get_delta() == {cs.get_name(): {\"no_cache_v\": 0, \"dep_v\": 0}}\nE       AssertionError: assert None == {'computed_state': {'dep_v': 0, 'no_cache_v': 0}}\nE        +  where None = <bound method BaseState.get_delta of ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'rout... ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}})>()\nE        +    where <bound method BaseState.get_delta of ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'rout... ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}})> = ComputedState({'computed_state': {'comp_v': 0, 'dep_v': 0, 'no_cache_v': 0, 'router': {'session': {'client_token': '',...: ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v': 0}}).get_delta\n\ntests/test_state.py:1183: AssertionError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = '804af5d1-99d4-4388-98d4-3e8d5de471c1'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n        assert child_state2_direct is child_state2_get_state\n    \n        # Get arbitrary GrandchildState.\n        grandchild_state = await child_state2_get_state.get_state(GrandchildState)\n        assert isinstance(grandchild_state, GrandchildState)\n    \n        # Now the original root should have all substates populated.\n        assert tuple(sorted(test_state.substates)) == (\n            \"child_state\",\n            \"child_state2\",\n            \"child_state3\",\n        )\n    \n        # ChildState should be retrievable\n        child_state_direct = test_state.get_substate([\"child_state\"])\n        child_state_get_state = await test_state.get_state(ChildState)\n        # These should be the same object.\n        assert child_state_direct is child_state_get_state\n    \n        # GrandchildState instance should be the same as the one retrieved from the child_state2.\n        assert grandchild_state is child_state_direct.get_substate([\"grandchild_state\"])\n        grandchild_state.value2 = \"set_value\"\n    \n>       assert test_state.get_delta() == {\n            TestState.get_full_name(): {\n                \"sum\": 3.14,\n                \"upper\": \"\",\n            },\n            GrandchildState.get_full_name(): {\n                \"value2\": \"set_value\",\n            },\n            GrandchildState3.get_full_name(): {\n                \"computed\": \"\",\n            },\n        }\nE       AssertionError: assert None == {'test_state': {'sum': 3.14, 'upper': ''}, 'test_state.child_state.grandchild_state': {'value2': 'set_value'}, 'test_state.child_state3.grandchild_state3': {'computed': ''}}\nE        +  where None = <bound method BaseState.get_delta of TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'pr...t_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': 'set_value'}})>()\nE        +    where <bound method BaseState.get_delta of TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'pr...t_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': 'set_value'}})> = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...st_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': 'set_value'}}).get_delta\n\ntests/test_state.py:2759: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_dirty_computed_var_from_var - AssertionError...\nFAILED tests/test_state.py::test_dirty_computed_var_from_backend_var - Assert...\nFAILED tests/test_state.py::test_not_dirty_computed_var_from_var - AssertionE...\nFAILED tests/test_state.py::test_computed_var_cached_depends_on_non_cached - ...\nFAILED tests/test_state.py::test_get_state[in_process] - AssertionError: asse...\n================== 5 failed, 10 skipped, 5 warnings in 0.65s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 15 items\n\ntests/test_state.py FFF                                                  [ 20%]\ntests/test_state_tree.py sssssssss                                       [ 80%]\ntests/test_state.py FFs                                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_dirty_computed_var_from_var _______________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\n\n    def test_dirty_computed_var_from_var(interdependent_state: InterdependentState) -> None:\n        \"\"\"Set Var that ComputedVar depends on, expect recalculation.\n    \n        The other ComputedVar depends on the changed ComputedVar and should also be\n        recalculated. No other ComputedVars should be recalculated.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.v1 = 1\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v1\": 1, \"v1x2\": 2, \"v1x2x2\": 4},\n        }\n\ntests/test_state.py:1001: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1576: in get_delta\n    return Delta()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.Any], args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n___________________ test_dirty_computed_var_from_backend_var ___________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\n\n    def test_dirty_computed_var_from_backend_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set backend var that ComputedVar depends on, expect recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        assert InterdependentState._v3._backend is True\n        interdependent_state._v2 = 2\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v2x2\": 4, \"v3x2\": 4},\n        }\n\ntests/test_state.py:1016: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1576: in get_delta\n    return Delta()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.Any], args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n_____________________ test_not_dirty_computed_var_from_var _____________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\n\n    def test_not_dirty_computed_var_from_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set Var that no ComputedVar depends on, expect no recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.x = 5\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"x\": 5},\n        }\n\ntests/test_state.py:986: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1576: in get_delta\n    return Delta()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.Any], args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n________________ test_computed_var_cached_depends_on_non_cached ________________\n\n    def test_computed_var_cached_depends_on_non_cached():\n        \"\"\"Test that a cached var is recalculated if it depends on non-cached ComputedVar.\"\"\"\n    \n        class ComputedState(BaseState):\n            v: int = 0\n    \n            @rx.var\n            def no_cache_v(self) -> int:\n                return self.v\n    \n            @rx.var(cache=True)\n            def dep_v(self) -> int:\n                return self.no_cache_v  # type: ignore\n    \n            @rx.var(cache=True)\n            def comp_v(self) -> int:\n                return self.v\n    \n        cs = ComputedState()\n        assert cs.dirty_vars == set()\n>       assert cs.get_delta() == {cs.get_name(): {\"no_cache_v\": 0, \"dep_v\": 0}}\n\ntests/test_state.py:1183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1576: in get_delta\n    return Delta()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.Any], args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = '5da7c8d1-dcf1-4841-acd7-917caa827bcd'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n        assert child_state2_direct is child_state2_get_state\n    \n        # Get arbitrary GrandchildState.\n        grandchild_state = await child_state2_get_state.get_state(GrandchildState)\n        assert isinstance(grandchild_state, GrandchildState)\n    \n        # Now the original root should have all substates populated.\n        assert tuple(sorted(test_state.substates)) == (\n            \"child_state\",\n            \"child_state2\",\n            \"child_state3\",\n        )\n    \n        # ChildState should be retrievable\n        child_state_direct = test_state.get_substate([\"child_state\"])\n        child_state_get_state = await test_state.get_state(ChildState)\n        # These should be the same object.\n        assert child_state_direct is child_state_get_state\n    \n        # GrandchildState instance should be the same as the one retrieved from the child_state2.\n        assert grandchild_state is child_state_direct.get_substate([\"grandchild_state\"])\n        grandchild_state.value2 = \"set_value\"\n    \n>       assert test_state.get_delta() == {\n            TestState.get_full_name(): {\n                \"sum\": 3.14,\n                \"upper\": \"\",\n            },\n            GrandchildState.get_full_name(): {\n                \"value2\": \"set_value\",\n            },\n            GrandchildState3.get_full_name(): {\n                \"computed\": \"\",\n            },\n        }\n\ntests/test_state.py:2759: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1576: in get_delta\n    return Delta()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Dict[str, typing.Any], args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n>           raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self.__origin__.__name__}() instead\")\nE           TypeError: Type Dict cannot be instantiated; use dict() instead\n\n/usr/local/lib/python3.10/typing.py:941: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_dirty_computed_var_from_var - TypeError: Typ...\nFAILED tests/test_state.py::test_dirty_computed_var_from_backend_var - TypeEr...\nFAILED tests/test_state.py::test_not_dirty_computed_var_from_var - TypeError:...\nFAILED tests/test_state.py::test_computed_var_cached_depends_on_non_cached - ...\nFAILED tests/test_state.py::test_get_state[in_process] - TypeError: Type Dict...\n================== 5 failed, 10 skipped, 5 warnings in 0.96s ===================\n\n"], "reflex-reflex/model.py-get_db_engine": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 201\nE       from sqlalchemy import create_engine\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 201\nE       from sqlalchemy import create_engine\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 201\nE       from sqlalchemy import create_engine\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/model.py-alembic_autogenerate": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 256\nE       from alembic import command\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 258\nE       from sqlalchemy import MetaData\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 256\nE       from alembic import command\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/model.py-migrate": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 352\nE       from alembic import command\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 352\nE       from alembic import command, config\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:42: in <module>\n    from reflex.app_mixins import AppMixin, LifespanMixin, MiddlewareMixin\nreflex/app_mixins/__init__.py:4: in <module>\n    from .middleware import MiddlewareMixin\nreflex/app_mixins/middleware.py:9: in <module>\n    from reflex.middleware import HydrateMiddleware, Middleware\nreflex/middleware/__init__.py:3: in <module>\n    from .hydrate_middleware import HydrateMiddleware\nreflex/middleware/hydrate_middleware.py:9: in <module>\n    from reflex.middleware.middleware import Middleware\nreflex/middleware/middleware.py:10: in <module>\n    from reflex.state import BaseState, StateUpdate\nreflex/state.py:52: in <module>\n    from reflex.utils import console, format, prerequisites, types\nreflex/utils/prerequisites.py:34: in <module>\n    from reflex import constants, model\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:79: in __getattr__\n    return importlib.import_module(f\"{package_name}.{name}\")\nE     File \"/root/repos/py_data/reflex/reflex/model.py\", line 352\nE       from sqlmodel import SQLModel\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/model.py-select": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py .                                                    [ 50%]\ntests/test_sqlalchemy.py .                                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.27s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py .                                                    [ 50%]\ntests/test_sqlalchemy.py .                                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.27s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py .                                                    [ 50%]\ntests/test_sqlalchemy.py .                                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.26s =========================\n\n"], "reflex-reflex/compiler/compiler.py-compile_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncomponents = {{\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}}\n\n    def compile_components(components):\n        \"\"\"\n        Compile the custom components.\n    \n        Args:\n            components (list): The custom components to compile.\n    \n        Returns:\n            dict: A dictionary containing the path and code of the compiled components.\n        \"\"\"\n        compiled_components = {}\n        for component in components:\n            # Assuming component is a dictionary with 'name' and 'code' keys\n>           name = component['name']\nE           TypeError: 'CustomComponent' object is not subscriptable\n\nreflex/compiler/compiler.py:437: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 1 failed, 5 warnings in 0.81s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\nE       ValueError: not enough values to unpack (expected 3, got 1)\n\ntests/components/test_component.py:1686: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 1 failed, 5 warnings in 0.79s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncomponents = {{\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}}\n\n    def compile_components(components):\n        \"\"\"\n        Compile the custom components.\n    \n        Args:\n            components (list): The custom components to compile.\n    \n        Returns:\n            dict: A dictionary containing the path and code of the compiled components.\n        \"\"\"\n        # Initialize an empty dictionary to store the compiled components\n        compiled_components = {}\n    \n        # Iterate over each component\n        for component in components:\n            # Create a path for the compiled component\n>           path = f\"compiled/{component.name}\"\nE           AttributeError: 'CustomComponent' object has no attribute 'name'\n\nreflex/compiler/compiler.py:440: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 1 failed, 5 warnings in 0.80s =========================\n\n"], "reflex-reflex/utils/prerequisites.py-get_or_set_last_reflex_version_check_datetime": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.77s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/reflex/utils/prerequisites.py::check_latest_package_version\n(no match in any of [<Module prerequisites.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.76s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/reflex/utils/prerequisites.py::check_latest_package_version\n(no match in any of [<Module prerequisites.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________________ ERROR collecting reflex/utils/prerequisites.py ________________\nImportError while importing test module '/root/repos/py_data/reflex/reflex/utils/prerequisites.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nreflex/utils/prerequisites.py:100: in <module>\n    from reflex.utils import get_web_dir\nE   ImportError: cannot import name 'get_web_dir' from 'reflex.utils' (/root/repos/py_data/reflex/reflex/utils/__init__.py)\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR reflex/utils/prerequisites.py\n========================= 5 warnings, 1 error in 0.83s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/reflex/utils/prerequisites.py::check_latest_package_version\n\n"], "reflex-reflex/middleware/hydrate_middleware.py-preprocess": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/middleware/test_hydrate_middleware.py F                            [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_preprocess_no_events ___________________________\n\nhydrate_middleware = HydrateMiddleware(Optional=typing.Optional, List=typing.List)\nevent1 = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fef30316260>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_no_events(hydrate_middleware, event1, mocker):\n        \"\"\"Test that app without on_load is processed correctly.\n    \n        Args:\n            hydrate_middleware: Instance of HydrateMiddleware\n            event1: An Event.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\"reflex.state.State.class_subclasses\", {TestState})\n        state = State()\n        update = await hydrate_middleware.preprocess(\n            app=App(state=State),\n            event=event1,\n            state=state,\n        )\n>       assert isinstance(update, StateUpdate)\nE       AssertionError: assert False\nE        +  where False = isinstance({'key': 'value'}, StateUpdate)\n\ntests/middleware/test_hydrate_middleware.py:48: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/middleware/test_hydrate_middleware.py::test_preprocess_no_events\n======================== 1 failed, 5 warnings in 0.10s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/middleware/test_hydrate_middleware.py F                            [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_preprocess_no_events ___________________________\n\nhydrate_middleware = HydrateMiddleware(Optional=typing.Optional, List=typing.List)\nevent1 = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f51f644a170>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_no_events(hydrate_middleware, event1, mocker):\n        \"\"\"Test that app without on_load is processed correctly.\n    \n        Args:\n            hydrate_middleware: Instance of HydrateMiddleware\n            event1: An Event.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\"reflex.state.State.class_subclasses\", {TestState})\n        state = State()\n>       update = await hydrate_middleware.preprocess(\n            app=App(state=State),\n            event=event1,\n            state=state,\n        )\nE       TypeError: HydrateMiddleware.preprocess() got multiple values for argument 'app'\n\ntests/middleware/test_hydrate_middleware.py:43: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/middleware/test_hydrate_middleware.py::test_preprocess_no_events\n======================== 1 failed, 5 warnings in 0.10s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/middleware/test_hydrate_middleware.py F                            [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_preprocess_no_events ___________________________\n\nhydrate_middleware = HydrateMiddleware()\nevent1 = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f6ae4245d50>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_no_events(hydrate_middleware, event1, mocker):\n        \"\"\"Test that app without on_load is processed correctly.\n    \n        Args:\n            hydrate_middleware: Instance of HydrateMiddleware\n            event1: An Event.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\"reflex.state.State.class_subclasses\", {TestState})\n        state = State()\n>       update = await hydrate_middleware.preprocess(\n            app=App(state=State),\n            event=event1,\n            state=state,\n        )\n\ntests/middleware/test_hydrate_middleware.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HydrateMiddleware(), app = <App state=State>\nstate = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, ...'', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}, 'state.test_state': {'num': 0}})\nevent = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\n\n    async def preprocess(self, app, state, event):\n        \"\"\"\n        Preprocess the event.\n    \n        Args:\n            app: The app to apply the middleware to.\n            state: The client state.\n            event: The event to preprocess.\n    \n        Returns:\n            An optional delta or list of state updates to return.\n        \"\"\"\n        # Add your preprocessing logic here\n        # For example:\n        # If the event is a user login event, update the state with the user's login status\n>       if event['type'] == 'login':\nE       TypeError: 'Event' object is not subscriptable\n\nreflex/middleware/hydrate_middleware.py:35: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/middleware/test_hydrate_middleware.py::test_preprocess_no_events\n======================== 1 failed, 5 warnings in 0.11s =========================\n\n"], "reflex-reflex/components/component.py-get_event_triggers": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:794: in create\n    return cls(children=children, **props)\nreflex/components/component.py:367: in __init__\n    component_specific_triggers = self.get_event_triggers()\nE   AttributeError: 'Theme' object has no attribute 'get_event_triggers'. Did you mean: 'event_triggers'?\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nreflex/components/component.py:1630: in <module>\n    class CustomComponent(Component):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/components/component.py:314: in __init_subclass__\n    for field in cls.get_fields().values():\nE   TypeError: Component.get_fields() missing 1 required positional argument: 'cls'\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:792: in create\n    return cls(children=children, **props)\nreflex/components/component.py:387: in __init__\n    if key in component_specific_triggers:\nE   TypeError: argument of type 'NoneType' is not iterable\n"], "reflex-reflex/components/component.py-get_props": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nE     File \"/root/repos/py_data/reflex/reflex/components/component.py\", line 715\nE       from typing import Set, Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nE     File \"/root/repos/py_data/reflex/reflex/components/component.py\", line 715\nE       from typing import Set, Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nE     File \"/root/repos/py_data/reflex/reflex/components/component.py\", line 715\nE       from typing import Set, Any\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/components/component.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nE     File \"/root/repos/py_data/reflex/reflex/components/component.py\", line 749\nE       from typing import Any, Set, Union\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nE     File \"/root/repos/py_data/reflex/reflex/components/component.py\", line 749\nE       from typing import Any, Set, Union\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:760: in create\n    component = cls(props)\nreflex/components/component.py:485: in __init__\n    super().__init__(*args, **kwargs)\nE   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n"], "reflex-reflex/components/component.py-_add_style_recursive": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nreflex/components/component.py:165: in <module>\n    class Component(BaseComponent, ABC):\nreflex/components/component.py:862: in Component\n    from reflex.components import Component\nE   ImportError: cannot import name 'Component' from 'reflex.components' (/root/repos/py_data/reflex/reflex/components/__init__.py)\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/core/test_foreach.py F                                  [ 33%]\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_foreach_component_styles _________________________\n\n    def test_foreach_component_styles():\n        \"\"\"Test that the foreach component works with global component styles.\"\"\"\n        component = el.div(\n            foreach(\n                ForEachState.colors_list,\n                display_color,\n            )\n        )\n>       component._add_style_recursive({box: {\"color\": \"red\"}})\n\ntests/components/core/test_foreach.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"div\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\", \"props\": {...olors_list\", \"arg_name\": \"color\", \"arg_index\": \"index_9e1b390612efee9d\", \"iterable_type\": \"list\"}], \"autofocus\": false}\nstyle = {<bound method RadixThemesComponent.create of <class 'reflex.components.radix.themes.layout.box.Box'>>: {'color': 'red'}}\ntheme = None\n\n    def _add_style_recursive(self, style: dict | None = None, theme: Optional[Component] = None) -> Component:\n        \"\"\"\n        Add additional style to the component and its children.\n    \n        Apply order is as follows (with the latest overriding the earliest):\n        1. Default style from `_add_style`/`add_style`.\n        2. User-defined style from `App.style`.\n        3. User-defined style from `Component.style`.\n        4. style dict and css props passed to the component instance.\n    \n        Args:\n            style: A dict from component to styling.\n            theme: The theme to apply. (for retro-compatibility with deprecated _apply_theme API)\n    \n        Raises:\n            UserWarning: If `_add_style` has been overridden.\n    \n        Returns:\n            The component with the additional style.\n        \"\"\"\n        # Check if _add_style has been overridden\n        if hasattr(self, '_add_style'):\n>           warnings.warn(\"_add_style has been overridden. Please use add_style instead.\", UserWarning)\nE           NameError: name 'warnings' is not defined\n\nreflex/components/component.py:883: NameError\n____________________________ test_add_style_foreach ____________________________\n\n    def test_add_style_foreach():\n        class StyledComponent(Component):\n            tag = \"StyledComponent\"\n            ix: Var[int]\n    \n            def add_style(self):\n                return Style({\"color\": \"red\"})\n    \n        page = rx.vstack(rx.foreach(Var.range(3), lambda i: StyledComponent.create(i)))\n>       page._add_style_recursive(Style())\n\ntests/components/test_component.py:2062: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...undefined, 1))\", \"arg_name\": \"i\", \"arg_index\": \"index_9959d62cae2c34a0\", \"iterable_type\": \"list\"}], \"autofocus\": false}\nstyle = {}, theme = None\n\n    def _add_style_recursive(self, style: dict | None = None, theme: Optional[Component] = None) -> Component:\n        \"\"\"\n        Add additional style to the component and its children.\n    \n        Apply order is as follows (with the latest overriding the earliest):\n        1. Default style from `_add_style`/`add_style`.\n        2. User-defined style from `App.style`.\n        3. User-defined style from `Component.style`.\n        4. style dict and css props passed to the component instance.\n    \n        Args:\n            style: A dict from component to styling.\n            theme: The theme to apply. (for retro-compatibility with deprecated _apply_theme API)\n    \n        Raises:\n            UserWarning: If `_add_style` has been overridden.\n    \n        Returns:\n            The component with the additional style.\n        \"\"\"\n        # Check if _add_style has been overridden\n        if hasattr(self, '_add_style'):\n>           warnings.warn(\"_add_style has been overridden. Please use add_style instead.\", UserWarning)\nE           NameError: name 'warnings' is not defined\n\nreflex/components/component.py:883: NameError\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n>       page._add_style_recursive(Style())\n\ntests/components/test_component.py:2037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...ps\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nstyle = {}, theme = None\n\n    def _add_style_recursive(self, style: dict | None = None, theme: Optional[Component] = None) -> Component:\n        \"\"\"\n        Add additional style to the component and its children.\n    \n        Apply order is as follows (with the latest overriding the earliest):\n        1. Default style from `_add_style`/`add_style`.\n        2. User-defined style from `App.style`.\n        3. User-defined style from `Component.style`.\n        4. style dict and css props passed to the component instance.\n    \n        Args:\n            style: A dict from component to styling.\n            theme: The theme to apply. (for retro-compatibility with deprecated _apply_theme API)\n    \n        Raises:\n            UserWarning: If `_add_style` has been overridden.\n    \n        Returns:\n            The component with the additional style.\n        \"\"\"\n        # Check if _add_style has been overridden\n        if hasattr(self, '_add_style'):\n>           warnings.warn(\"_add_style has been overridden. Please use add_style instead.\", UserWarning)\nE           NameError: name 'warnings' is not defined\n\nreflex/components/component.py:883: NameError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/core/test_foreach.py::test_foreach_component_styles\nFAILED tests/components/test_component.py::test_add_style_foreach - NameError...\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - Nam...\n======================== 3 failed, 5 warnings in 0.92s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/core/test_foreach.py F                                  [ 33%]\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_foreach_component_styles _________________________\n\n    def test_foreach_component_styles():\n        \"\"\"Test that the foreach component works with global component styles.\"\"\"\n        component = el.div(\n            foreach(\n                ForEachState.colors_list,\n                display_color,\n            )\n        )\n>       component._add_style_recursive({box: {\"color\": \"red\"}})\n\ntests/components/core/test_foreach.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"div\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\", \"props\": {...olors_list\", \"arg_name\": \"color\", \"arg_index\": \"index_4c53497aafa9c61d\", \"iterable_type\": \"list\"}], \"autofocus\": false}\nstyle = {<bound method RadixThemesComponent.create of <class 'reflex.components.radix.themes.layout.box.Box'>>: {'color': 'red'}}\ntheme = None\n\n    def _add_style_recursive(self, style: dict | None = None, theme: Optional[Component] = None) -> Component:\n        \"\"\"\n        Add additional style to the component and its children.\n    \n        Apply order is as follows (with the latest overriding the earliest):\n        1. Default style from `_add_style`/`add_style`.\n        2. User-defined style from `App.style`.\n        3. User-defined style from `Component.style`.\n        4. style dict and css props passed to the component instance.\n    \n        Args:\n            style: A dict from component to styling.\n            theme: The theme to apply. (for retro-compatibility with deprecated _apply_theme API)\n    \n        Raises:\n            UserWarning: If `_add_style` has been overridden.\n    \n        Returns:\n            The component with the additional style.\n        \"\"\"\n        # 1. Get the default style from `_add_style`/`add_style`\n        default_style = self._add_style()\n    \n        # 2. Get the user-defined style from `App.style`\n>       app_style = App.style\nE       NameError: name 'App' is not defined\n\nreflex/components/component.py:885: NameError\n____________________________ test_add_style_foreach ____________________________\n\n    def test_add_style_foreach():\n        class StyledComponent(Component):\n            tag = \"StyledComponent\"\n            ix: Var[int]\n    \n            def add_style(self):\n                return Style({\"color\": \"red\"})\n    \n        page = rx.vstack(rx.foreach(Var.range(3), lambda i: StyledComponent.create(i)))\n>       page._add_style_recursive(Style())\n\ntests/components/test_component.py:2062: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...undefined, 1))\", \"arg_name\": \"i\", \"arg_index\": \"index_1e52afb8f9667387\", \"iterable_type\": \"list\"}], \"autofocus\": false}\nstyle = {}, theme = None\n\n    def _add_style_recursive(self, style: dict | None = None, theme: Optional[Component] = None) -> Component:\n        \"\"\"\n        Add additional style to the component and its children.\n    \n        Apply order is as follows (with the latest overriding the earliest):\n        1. Default style from `_add_style`/`add_style`.\n        2. User-defined style from `App.style`.\n        3. User-defined style from `Component.style`.\n        4. style dict and css props passed to the component instance.\n    \n        Args:\n            style: A dict from component to styling.\n            theme: The theme to apply. (for retro-compatibility with deprecated _apply_theme API)\n    \n        Raises:\n            UserWarning: If `_add_style` has been overridden.\n    \n        Returns:\n            The component with the additional style.\n        \"\"\"\n        # 1. Get the default style from `_add_style`/`add_style`\n        default_style = self._add_style()\n    \n        # 2. Get the user-defined style from `App.style`\n>       app_style = App.style\nE       NameError: name 'App' is not defined\n\nreflex/components/component.py:885: NameError\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n>       page._add_style_recursive(Style())\n\ntests/components/test_component.py:2037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...ps\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nstyle = {}, theme = None\n\n    def _add_style_recursive(self, style: dict | None = None, theme: Optional[Component] = None) -> Component:\n        \"\"\"\n        Add additional style to the component and its children.\n    \n        Apply order is as follows (with the latest overriding the earliest):\n        1. Default style from `_add_style`/`add_style`.\n        2. User-defined style from `App.style`.\n        3. User-defined style from `Component.style`.\n        4. style dict and css props passed to the component instance.\n    \n        Args:\n            style: A dict from component to styling.\n            theme: The theme to apply. (for retro-compatibility with deprecated _apply_theme API)\n    \n        Raises:\n            UserWarning: If `_add_style` has been overridden.\n    \n        Returns:\n            The component with the additional style.\n        \"\"\"\n        # 1. Get the default style from `_add_style`/`add_style`\n        default_style = self._add_style()\n    \n        # 2. Get the user-defined style from `App.style`\n>       app_style = App.style\nE       NameError: name 'App' is not defined\n\nreflex/components/component.py:885: NameError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/core/test_foreach.py::test_foreach_component_styles\nFAILED tests/components/test_component.py::test_add_style_foreach - NameError...\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - Nam...\n======================== 3 failed, 5 warnings in 0.90s =========================\n\n"], "reflex-reflex/components/component.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/components/test_component.py FFFF..                                [ 28%]\ntests/components/core/test_foreach.py ...........                        [ 80%]\ntests/components/test_component.py ..FF                                  [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_rename_props _______________________________\n\n    def test_rename_props():\n        \"\"\"Test that _rename_props works and is inherited.\"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            prop1: Var[str]\n            prop2: Var[str]\n    \n            _rename_props = {\"prop1\": \"renamed_prop1\", \"prop2\": \"renamed_prop2\"}\n    \n        class C2(C1):\n            tag = \"C2\"\n    \n            prop3: Var[str]\n    \n            _rename_props = {\"prop2\": \"subclass_prop2\", \"prop3\": \"renamed_prop3\"}\n    \n        c1 = C1.create(prop1=\"prop1_1\", prop2=\"prop2_1\")\n        rendered_c1 = c1.render()\n>       assert \"renamed_prop1={`prop1_1`}\" in rendered_c1[\"props\"]\nE       KeyError: 'props'\n\ntests/components/test_component.py:1597: KeyError\n_________ test_component_create_unpack_tuple_child[element0-expected0] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({},)\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {} == {'args': None...nts': '', ...}\nE         \nE         Right contains 7 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,\nE                        'autofocus': False,\nE                        'children': [{'args': None,...\nE         \nE         ...Full output truncated (15 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element1-expected1] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({}, {})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo..., 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {} == {'args': None...nts': '', ...}\nE         \nE         Right contains 7 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,\nE                        'autofocus': False,\nE                        'children': [{'args': None,...\nE         \nE         ...Full output truncated (28 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element2-expected2] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({}, {})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo...rgs': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {} == {'args': None...nts': '', ...}\nE         \nE         Right contains 7 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,\nE                        'autofocus': False,\nE                        'children': [{'args': None,...\nE         \nE         ...Full output truncated (40 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________________ test_component_event_trigger_arbitrary_args __________________\n\n    def test_component_event_trigger_arbitrary_args():\n        \"\"\"Test that we can define arbitrary types for the args of an event trigger.\"\"\"\n    \n        class Obj(Base):\n            custom: int = 0\n    \n        def on_foo_spec(_e, alpha: str, bravo: Dict[str, Any], charlie: Obj):\n            return [_e.target.value, bravo[\"nested\"], charlie.custom + 42]\n    \n        class C1(Component):\n            library = \"/local\"\n            tag = \"C1\"\n    \n            def get_event_triggers(self) -> Dict[str, Any]:\n                return {\n                    **super().get_event_triggers(),\n                    \"on_foo\": on_foo_spec,\n                }\n    \n        comp = C1.create(on_foo=C1State.mock_handler)\n    \n>       assert comp.render()[\"props\"][0] == (\n            \"onFoo={(__e,_alpha,_bravo,_charlie) => addEvents(\"\n            '[Event(\"c1_state.mock_handler\", {_e:__e.target.value,_bravo:_bravo[\"nested\"],_charlie:((_charlie.custom) + (42))})], '\n            \"(__e,_alpha,_bravo,_charlie), {})}\"\n        )\nE       KeyError: 'props'\n\ntests/components/test_component.py:826: KeyError\n____________________________ test_deprecated_props _____________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f1ef0b32410>\n\n    def test_deprecated_props(capsys):\n        \"\"\"Assert that deprecated underscore suffix props are translated.\n    \n        Args:\n            capsys: Pytest fixture for capturing stdout and stderr.\n        \"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            type: Var[str]\n            min: Var[str]\n            max: Var[str]\n    \n        # No warnings are emitted when using the new prop names.\n        c1_1 = C1.create(type=\"type1\", min=\"min1\", max=\"max1\")\n        out_err = capsys.readouterr()\n        assert not out_err.err\n        assert not out_err.out\n    \n        c1_1_render = c1_1.render()\n>       assert \"type={`type1`}\" in c1_1_render[\"props\"]\nE       KeyError: 'props'\n\ntests/components/test_component.py:1628: KeyError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_rename_props - KeyError: 'props'\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element0-expected0]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element1-expected1]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element2-expected2]\nFAILED tests/components/test_component.py::test_component_event_trigger_arbitrary_args\nFAILED tests/components/test_component.py::test_deprecated_props - KeyError: ...\n=================== 6 failed, 15 passed, 5 warnings in 0.92s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/components/test_component.py FFFF..                                [ 28%]\ntests/components/core/test_foreach.py ...........                        [ 80%]\ntests/components/test_component.py ..FF                                  [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_rename_props _______________________________\n\n    def test_rename_props():\n        \"\"\"Test that _rename_props works and is inherited.\"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            prop1: Var[str]\n            prop2: Var[str]\n    \n            _rename_props = {\"prop1\": \"renamed_prop1\", \"prop2\": \"renamed_prop2\"}\n    \n        class C2(C1):\n            tag = \"C2\"\n    \n            prop3: Var[str]\n    \n            _rename_props = {\"prop2\": \"subclass_prop2\", \"prop3\": \"renamed_prop3\"}\n    \n        c1 = C1.create(prop1=\"prop1_1\", prop2=\"prop2_1\")\n        rendered_c1 = c1.render()\n>       assert \"renamed_prop1={`prop1_1`}\" in rendered_c1[\"props\"]\nE       KeyError: 'props'\n\ntests/components/test_component.py:1597: KeyError\n_________ test_component_create_unpack_tuple_child[element0-expected0] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"name\": \"John\"},)\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'name': 'John'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'name': 'John'} != {'name': 'Fragment'}\nE         Right contains 6 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,...\nE         \nE         ...Full output truncated (16 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element1-expected1] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"name\": \"John\"}, {\"name\": \"John\"})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo..., 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'name': 'John'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'name': 'John'} != {'name': 'Fragment'}\nE         Right contains 6 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,...\nE         \nE         ...Full output truncated (29 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element2-expected2] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"name\": \"John\"}, {\"name\": \"John\"})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo...rgs': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'name': 'John'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'name': 'John'} != {'name': 'Fragment'}\nE         Right contains 6 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,...\nE         \nE         ...Full output truncated (41 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________________ test_component_event_trigger_arbitrary_args __________________\n\n    def test_component_event_trigger_arbitrary_args():\n        \"\"\"Test that we can define arbitrary types for the args of an event trigger.\"\"\"\n    \n        class Obj(Base):\n            custom: int = 0\n    \n        def on_foo_spec(_e, alpha: str, bravo: Dict[str, Any], charlie: Obj):\n            return [_e.target.value, bravo[\"nested\"], charlie.custom + 42]\n    \n        class C1(Component):\n            library = \"/local\"\n            tag = \"C1\"\n    \n            def get_event_triggers(self) -> Dict[str, Any]:\n                return {\n                    **super().get_event_triggers(),\n                    \"on_foo\": on_foo_spec,\n                }\n    \n        comp = C1.create(on_foo=C1State.mock_handler)\n    \n>       assert comp.render()[\"props\"][0] == (\n            \"onFoo={(__e,_alpha,_bravo,_charlie) => addEvents(\"\n            '[Event(\"c1_state.mock_handler\", {_e:__e.target.value,_bravo:_bravo[\"nested\"],_charlie:((_charlie.custom) + (42))})], '\n            \"(__e,_alpha,_bravo,_charlie), {})}\"\n        )\nE       KeyError: 'props'\n\ntests/components/test_component.py:826: KeyError\n____________________________ test_deprecated_props _____________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f0b44c6c130>\n\n    def test_deprecated_props(capsys):\n        \"\"\"Assert that deprecated underscore suffix props are translated.\n    \n        Args:\n            capsys: Pytest fixture for capturing stdout and stderr.\n        \"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            type: Var[str]\n            min: Var[str]\n            max: Var[str]\n    \n        # No warnings are emitted when using the new prop names.\n        c1_1 = C1.create(type=\"type1\", min=\"min1\", max=\"max1\")\n        out_err = capsys.readouterr()\n        assert not out_err.err\n        assert not out_err.out\n    \n        c1_1_render = c1_1.render()\n>       assert \"type={`type1`}\" in c1_1_render[\"props\"]\nE       KeyError: 'props'\n\ntests/components/test_component.py:1628: KeyError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_rename_props - KeyError: 'props'\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element0-expected0]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element1-expected1]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element2-expected2]\nFAILED tests/components/test_component.py::test_component_event_trigger_arbitrary_args\nFAILED tests/components/test_component.py::test_deprecated_props - KeyError: ...\n=================== 6 failed, 15 passed, 5 warnings in 0.92s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/components/test_component.py FFFF..                                [ 28%]\ntests/components/core/test_foreach.py ...........                        [ 80%]\ntests/components/test_component.py ..FF                                  [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_rename_props _______________________________\n\n    def test_rename_props():\n        \"\"\"Test that _rename_props works and is inherited.\"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            prop1: Var[str]\n            prop2: Var[str]\n    \n            _rename_props = {\"prop1\": \"renamed_prop1\", \"prop2\": \"renamed_prop2\"}\n    \n        class C2(C1):\n            tag = \"C2\"\n    \n            prop3: Var[str]\n    \n            _rename_props = {\"prop2\": \"subclass_prop2\", \"prop3\": \"renamed_prop3\"}\n    \n        c1 = C1.create(prop1=\"prop1_1\", prop2=\"prop2_1\")\n        rendered_c1 = c1.render()\n>       assert \"renamed_prop1={`prop1_1`}\" in rendered_c1[\"props\"]\nE       KeyError: 'props'\n\ntests/components/test_component.py:1597: KeyError\n_________ test_component_create_unpack_tuple_child[element0-expected0] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"template\": \"component_template\", \"data\": {\"key\": \"value\"}},)\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'data': {'ke...ent_template'} == {'args': None...nts': '', ...}\nE         \nE         Left contains 2 more items:\nE         {'data': {'key': 'value'}, 'template': 'component_template'}\nE         Right contains 7 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,...\nE         \nE         ...Full output truncated (17 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element1-expected1] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"template\": \"component_template\", \"data\": {\"key\": \"value\"}}, {\"template\": \"component_template\", \"data\": {\"key\": \"value\"}})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo..., 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'data': {'ke...ent_template'} == {'args': None...nts': '', ...}\nE         \nE         Left contains 2 more items:\nE         {'data': {'key': 'value'}, 'template': 'component_template'}\nE         Right contains 7 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,...\nE         \nE         ...Full output truncated (30 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element2-expected2] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"template\": \"component_template\", \"data\": {\"key\": \"value\"}}, {\"template\": \"component_template\", \"data\": {\"key\": \"value\"}})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo...rgs': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'data': {'ke...ent_template'} == {'args': None...nts': '', ...}\nE         \nE         Left contains 2 more items:\nE         {'data': {'key': 'value'}, 'template': 'component_template'}\nE         Right contains 7 more items:\nE         {'args': None,\nE          'autofocus': False,\nE          'children': [{'args': None,...\nE         \nE         ...Full output truncated (42 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________________ test_component_event_trigger_arbitrary_args __________________\n\n    def test_component_event_trigger_arbitrary_args():\n        \"\"\"Test that we can define arbitrary types for the args of an event trigger.\"\"\"\n    \n        class Obj(Base):\n            custom: int = 0\n    \n        def on_foo_spec(_e, alpha: str, bravo: Dict[str, Any], charlie: Obj):\n            return [_e.target.value, bravo[\"nested\"], charlie.custom + 42]\n    \n        class C1(Component):\n            library = \"/local\"\n            tag = \"C1\"\n    \n            def get_event_triggers(self) -> Dict[str, Any]:\n                return {\n                    **super().get_event_triggers(),\n                    \"on_foo\": on_foo_spec,\n                }\n    \n        comp = C1.create(on_foo=C1State.mock_handler)\n    \n>       assert comp.render()[\"props\"][0] == (\n            \"onFoo={(__e,_alpha,_bravo,_charlie) => addEvents(\"\n            '[Event(\"c1_state.mock_handler\", {_e:__e.target.value,_bravo:_bravo[\"nested\"],_charlie:((_charlie.custom) + (42))})], '\n            \"(__e,_alpha,_bravo,_charlie), {})}\"\n        )\nE       KeyError: 'props'\n\ntests/components/test_component.py:826: KeyError\n____________________________ test_deprecated_props _____________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f52b79eeb00>\n\n    def test_deprecated_props(capsys):\n        \"\"\"Assert that deprecated underscore suffix props are translated.\n    \n        Args:\n            capsys: Pytest fixture for capturing stdout and stderr.\n        \"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            type: Var[str]\n            min: Var[str]\n            max: Var[str]\n    \n        # No warnings are emitted when using the new prop names.\n        c1_1 = C1.create(type=\"type1\", min=\"min1\", max=\"max1\")\n        out_err = capsys.readouterr()\n        assert not out_err.err\n        assert not out_err.out\n    \n        c1_1_render = c1_1.render()\n>       assert \"type={`type1`}\" in c1_1_render[\"props\"]\nE       KeyError: 'props'\n\ntests/components/test_component.py:1628: KeyError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_rename_props - KeyError: 'props'\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element0-expected0]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element1-expected1]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element2-expected2]\nFAILED tests/components/test_component.py::test_component_event_trigger_arbitrary_args\nFAILED tests/components/test_component.py::test_deprecated_props - KeyError: ...\n=================== 6 failed, 15 passed, 5 warnings in 0.92s ===================\n\n"], "reflex-reflex/components/component.py-_get_vars": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nreflex/components/component.py:1845: in <module>\n    class NoSSRComponent(Component):\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:282: in __new__\n    cls = super().__new__(mcs, name, bases, new_namespace, **kwargs)\n/usr/local/lib/python3.10/abc.py:106: in __new__\n    cls = super().__new__(mcls, name, bases, namespace, **kwargs)\nreflex/components/component.py:311: in __init_subclass__\n    props = cls.get_props()\nE   TypeError: Component.get_props() missing 1 required positional argument: 'cls'\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/components/test_component.py ..FFFFFFFFFFFFFFFFFFFFFFFFFFFFF       [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_vars[direct-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesText\", \"props\": [\"as={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Text' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_________________________ test_get_vars[fstring-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesHeading\", \"props\": [\"as={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Heading' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________________ test_get_vars[direct-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________________ test_get_vars[fstring-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________________ test_get_vars[direct-key] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________________ test_get_vars[fstring-key] __________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_______________________ test_get_vars[direct-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[fstring-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[direct-special_props] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-special_props] _____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________ test_get_vars[fstring-custom_attrs-nofmt] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-custom_attrs] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n____________________ test_get_vars[direct-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________ test_get_vars[fstring-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_________________ test_get_vars[direct-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n________________ test_get_vars[fstring-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-event-chain] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={test}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'reflex.event.EventChain'>, _var_is_local=True, _var_is_string=False, _var...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[direct-event-handler] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler\\\", {})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = []\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________ test_get_vars[direct-event-handler-arg] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________ test_get_vars[direct-event-handler-arg2] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...False)]}, hooks={'const state__event_state = useContext(StateContexts.state__event_state)': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________ test_get_vars[direct-event-handler-lambda] __________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f7215439c00>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"test\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _var_fu...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f721543a290>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"footestbar\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f721543a1a0>\nexp_vars = [BaseVar(_var_name='[[\"test\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_ne...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f7215439b10>\nexp_vars = [BaseVar(_var_name='[[\"footestbar\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_n...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________ test_get_vars[direct-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f7215439330>\nexp_vars = [BaseVar(_var_name='[[[\"test\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_________________ test_get_vars[fstring-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f721543a5c0>\nexp_vars = [BaseVar(_var_name='[[[\"footestbar\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f7215439ff0>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"test\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_na...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f721543a830>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"footestbar\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_f...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_vars[direct-prop] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[fstring-prop] - Attr...\nFAILED tests/components/test_component.py::test_get_vars[direct-id] - Attribu...\nFAILED tests/components/test_component.py::test_get_vars[fstring-id] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[direct-key] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[fstring-key] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[direct-class_name]\nFAILED tests/components/test_component.py::test_get_vars[fstring-class_name]\nFAILED tests/components/test_component.py::test_get_vars[direct-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs-nofmt]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs]\nFAILED tests/components/test_component.py::test_get_vars[direct-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-chain]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg2]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-lambda]\nFAILED tests/components/test_component.py::test_get_vars[direct-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_dict]\n=================== 29 failed, 2 passed, 5 warnings in 1.52s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/components/test_component.py ..FFFFFFFFFFFFFFFFFFFFFFFFFFFFF       [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_vars[direct-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesText\", \"props\": [\"as={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Text' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_________________________ test_get_vars[fstring-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesHeading\", \"props\": [\"as={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Heading' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________________ test_get_vars[direct-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________________ test_get_vars[fstring-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________________ test_get_vars[direct-key] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________________ test_get_vars[fstring-key] __________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_______________________ test_get_vars[direct-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[fstring-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[direct-special_props] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-special_props] _____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________ test_get_vars[fstring-custom_attrs-nofmt] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-custom_attrs] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n____________________ test_get_vars[direct-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________ test_get_vars[fstring-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_________________ test_get_vars[direct-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n________________ test_get_vars[fstring-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-event-chain] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={test}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'reflex.event.EventChain'>, _var_is_local=True, _var_is_string=False, _var...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[direct-event-handler] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler\\\", {})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = []\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________ test_get_vars[direct-event-handler-arg] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n___________________ test_get_vars[direct-event-handler-arg2] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...False)]}, hooks={'const state__event_state = useContext(StateContexts.state__event_state)': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________ test_get_vars[direct-event-handler-lambda] __________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'Fragment' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131ddc60>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"test\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _var_fu...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131de2f0>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"footestbar\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131de200>\nexp_vars = [BaseVar(_var_name='[[\"test\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_ne...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131ddb70>\nexp_vars = [BaseVar(_var_name='[[\"footestbar\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_n...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n__________________ test_get_vars[direct-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131dd390>\nexp_vars = [BaseVar(_var_name='[[[\"test\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_________________ test_get_vars[fstring-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131de620>\nexp_vars = [BaseVar(_var_name='[[[\"footestbar\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n______________________ test_get_vars[direct-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131de050>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"test\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_na...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n_____________________ test_get_vars[fstring-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7feb131de890>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"footestbar\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_f...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\nE       AttributeError: 'ComponentNestedVar' object has no attribute '_get_vars'. Did you mean: '_get_value'?\n\ntests/components/test_component.py:1292: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_vars[direct-prop] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[fstring-prop] - Attr...\nFAILED tests/components/test_component.py::test_get_vars[direct-id] - Attribu...\nFAILED tests/components/test_component.py::test_get_vars[fstring-id] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[direct-key] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[fstring-key] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[direct-class_name]\nFAILED tests/components/test_component.py::test_get_vars[fstring-class_name]\nFAILED tests/components/test_component.py::test_get_vars[direct-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs-nofmt]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs]\nFAILED tests/components/test_component.py::test_get_vars[direct-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-chain]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg2]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-lambda]\nFAILED tests/components/test_component.py::test_get_vars[direct-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_dict]\n=================== 29 failed, 2 passed, 5 warnings in 1.52s ===================\n\n"], "reflex-reflex/components/component.py-_has_stateful_event_triggers": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/components/test_component.py ..F.F.FF                              [100%]\n\n=================================== FAILURES ===================================\n________________ test_has_state_event_triggers[component2-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n________________ test_has_state_event_triggers[component4-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n________________ test_has_state_event_triggers[component6-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n________________ test_has_state_event_triggers[component7-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\nE       assert False == True\nE        +  where False = <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._has_stateful_event_triggers of {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\"..., \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}._has_stateful_event_triggers\n\ntests/components/test_component.py:2144: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component2-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component4-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component6-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component7-True]\n=================== 4 failed, 4 passed, 5 warnings in 0.85s ====================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/components/test_component.py FFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n_______________ test_has_state_event_triggers[component0-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ed5ac4c0>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n_______________ test_has_state_event_triggers[component1-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ec8424a0>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n________________ test_has_state_event_triggers[component2-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ec83fb50>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n_______________ test_has_state_event_triggers[component3-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ec840460>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n________________ test_has_state_event_triggers[component4-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ee08faf0>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n_______________ test_has_state_event_triggers[component5-False] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = False\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ed5ae710>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n________________ test_has_state_event_triggers[component6-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83ede27b50>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n________________ test_has_state_event_triggers[component7-True] ________________\n\ncomponent = {\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"Ra...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\noutput = True\n\n    @pytest.mark.parametrize(\n        \"component, output\",\n        [\n            (rx.box(rx.text(\"random text\")), False),\n            (\n                rx.box(rx.text(\"random text\", on_click=rx.console_log(\"log\"))),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=TriggerState.do_something),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\"random text\", on_click=rx.console_log(\"log\")),\n                    rx.text(\n                        \"random text\",\n                        on_click=BaseVar(_var_name=\"toggleColorMode\", _var_type=EventChain),\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(rx.text(\"random text\", on_click=TriggerState.do_something)),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), rx.window_alert(\"alert\")],\n                    ),\n                ),\n                False,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_click=[rx.console_log(\"log\"), TriggerState.do_something],\n                    ),\n                ),\n                True,\n            ),\n            (\n                rx.box(\n                    rx.text(\n                        \"random text\",\n                        on_blur=lambda: TriggerState.do_something,\n                    ),\n                ),\n                True,\n            ),\n        ],\n    )\n    def test_has_state_event_triggers(component, output):\n>       assert component._has_stateful_event_triggers() == output\n\ntests/components/test_component.py:2144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1149: in _has_stateful_event_triggers\n    return any(child.uses_state() for child in self.children) or self.uses_state()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f83edf49390>\n\n>   return any(child.uses_state() for child in self.children) or self.uses_state()\nE   AttributeError: 'Text' object has no attribute 'uses_state'\n\nreflex/components/component.py:1149: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component0-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component1-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component2-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component3-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component4-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component5-False]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component6-True]\nFAILED tests/components/test_component.py::test_has_state_event_triggers[component7-True]\n======================== 8 failed, 5 warnings in 1.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/components/test_component.py ........                              [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 8 passed, 5 warnings in 0.71s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_get_custom_code _____________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\n\n    def test_get_custom_code(component1, component2):\n        \"\"\"Test getting the custom code of a component.\n    \n        Args:\n            component1: A test component.\n            component2: A test component.\n        \"\"\"\n        # Check that the code gets compiled correctly.\n        c1 = component1.create()\n        c2 = component2.create()\n>       assert c1._get_all_custom_code() == {\"console.log('component1')\"}\nE       assert {\"'\", '(', ')...'1', 'c', ...} == {\"console.log('component1')\"}\nE         \nE         Extra items in the left set:\nE         's'\nE         'o'\nE         '1'\nE         'm'\nE         \"'\"...\nE         \nE         ...Full output truncated (13 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:468: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_custom_code - assert {\"'\"...\n======================== 1 failed, 5 warnings in 0.80s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.71s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_get_custom_code _____________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\n\n    def test_get_custom_code(component1, component2):\n        \"\"\"Test getting the custom code of a component.\n    \n        Args:\n            component1: A test component.\n            component2: A test component.\n        \"\"\"\n        # Check that the code gets compiled correctly.\n        c1 = component1.create()\n        c2 = component2.create()\n>       assert c1._get_all_custom_code() == {\"console.log('component1')\"}\n\ntests/components/test_component.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] TestComponent1 object at 0x7fd9c857dd80>\n\n    def _get_all_custom_code(self) -> set[str]:\n        \"\"\"\n        Get custom code for the component and its children.\n    \n        Returns:\n            The custom code.\n        \"\"\"\n        # Initialize an empty set to store custom code\n        custom_code = set()\n    \n        # Get the custom code for the current component\n        custom_code.update(self._get_custom_code())\n    \n        # Get the custom code for the children of the component\n>       children_custom_code = self.children._get_all_custom_code()\nE       AttributeError: 'list' object has no attribute '_get_all_custom_code'\n\nreflex/components/component.py:1209: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_custom_code - AttributeEr...\n======================== 1 failed, 5 warnings in 0.81s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_imports": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:44: in <module>\n    from reflex.compiler import compiler\nreflex/compiler/compiler.py:11: in <module>\n    from reflex.compiler import templates, utils\nreflex/compiler/utils.py:18: in <module>\n    from reflex.components.base import (\n/usr/local/lib/python3.10/site-packages/lazy_loader/__init__.py:82: in __getattr__\n    submod = importlib.import_module(submod_path)\nreflex/components/base/body.py:3: in <module>\n    from reflex.components.component import Component\nE     File \"/root/repos/py_data/reflex/reflex/components/component.py\", line 1402\nE       return import_dict\nE       ^^^^^^\nE   IndentationError: expected an indented block after 'if' statement on line 1399\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:811: in create\n    return cls(children=children, **props)\nE   TypeError: Can't instantiate abstract class Theme with abstract method _get_all_imports\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:110: in <module>\n    class App(MiddlewareMixin, LifespanMixin, Base):\nreflex/app.py:132: in App\n    theme: Optional[Component] = themes.theme(accent_color=\"blue\")\nreflex/components/radix/themes/base.py:210: in create\n    return super().create(*children, **props)\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:811: in create\n    return cls(children=children, **props)\nE   TypeError: Can't instantiate abstract class Theme with abstract method _get_all_imports\n"], "reflex-reflex/components/component.py-_get_all_hooks_internal": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n        page._add_style_recursive(Style())\n    \n>       assert (\n            \"const test_state = useContext(StateContexts.test_state)\"\n            in page._get_all_hooks_internal()\n        )\nE       assert 'const test_state = useContext(StateContexts.test_state)' in {}\nE        +  where {} = <bound method Component._get_all_hooks_internal of {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className...%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}>()\nE        +    where <bound method Component._get_all_hooks_internal of {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className...%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}> = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...}%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}._get_all_hooks_internal\n\ntests/components/test_component.py:2039: AssertionError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - ass...\n======================== 1 failed, 5 warnings in 0.85s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n        page._add_style_recursive(Style())\n    \n>       assert (\n            \"const test_state = useContext(StateContexts.test_state)\"\n            in page._get_all_hooks_internal()\n        )\n\ntests/components/test_component.py:2039: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...}%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\n\n    def _get_all_hooks_internal(self) -> dict[str, None]:\n        \"\"\"\n        Get the reflex internal hooks for the component and its children.\n    \n        Returns:\n            The code that should appear just before user-defined hooks.\n        \"\"\"\n        # Initialize an empty dictionary to store the hooks\n        hooks = {}\n    \n        # Get the component's own hooks\n        # For the purpose of this example, let's assume we have a method to get the hooks\n        # Replace this with your actual implementation\n>       component_hooks = self.get_component_hooks()\nE       AttributeError: 'VStack' object has no attribute 'get_component_hooks'. Did you mean: 'get_component_props'?\n\nreflex/components/component.py:1526: AttributeError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - Att...\n======================== 1 failed, 5 warnings in 0.85s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_add_style_embedded_vars _________________________\n\ntest_state = <class 'tests.components.test_component.test_state.<locals>.TestState'>\n\n    def test_add_style_embedded_vars(test_state: BaseState):\n        \"\"\"Test that add_style works with embedded vars when returning a plain dict.\n    \n        Args:\n            test_state: A test state.\n        \"\"\"\n        v0 = Var.create_safe(\"parent\")._replace(\n            merge_var_data=VarData(hooks={\"useParent\": None}),  # type: ignore\n        )\n        v1 = rx.color(\"plum\", 10)\n        v2 = Var.create_safe(\"text\")._replace(\n            merge_var_data=VarData(hooks={\"useText\": None}),  # type: ignore\n        )\n    \n        class ParentComponent(Component):\n            def add_style(self):\n                return Style(\n                    {\n                        \"fake_parent\": v0,\n                    }\n                )\n    \n        class StyledComponent(ParentComponent):\n            tag = \"StyledComponent\"\n    \n            def add_style(self):\n                return {\n                    \"color\": v1,\n                    \"fake\": v2,\n                    \"margin\": f\"{test_state.num}%\",\n                }\n    \n        page = rx.vstack(StyledComponent.create())\n        page._add_style_recursive(Style())\n    \n>       assert (\n            \"const test_state = useContext(StateContexts.test_state)\"\n            in page._get_all_hooks_internal()\n        )\n\ntests/components/test_component.py:2039: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesFlex\", \"props\": [\"align={`start`}\", \"className={`rx-Stack`}\", \"direction={`column`}\", \"gap={`3`}\"...}%`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\n\n    def _get_all_hooks_internal(self) -> dict[str, None]:\n        \"\"\"\n        Get the reflex internal hooks for the component and its children.\n    \n        Returns:\n            The code that should appear just before user-defined hooks.\n        \"\"\"\n        # Initialize an empty dictionary to store the hooks\n        hooks = {}\n    \n        # Add the component's hooks to the dictionary\n        # For this example, let's assume we have a method to get the component's hooks\n>       component_hooks = self.get_component_hooks()\nE       AttributeError: 'VStack' object has no attribute 'get_component_hooks'. Did you mean: 'get_component_props'?\n\nreflex/components/component.py:1525: AttributeError\n----------------------------- Captured stdout call -----------------------------\nDeprecationWarning: Creating a Var (parent) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (text) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_add_style_embedded_vars - Att...\n======================== 1 failed, 5 warnings in 0.85s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.73s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_get_hooks_nested _____________________________\n\ncomponent1 = <class 'tests.components.test_component.component1.<locals>.TestComponent1'>\ncomponent2 = <class 'tests.components.test_component.component2.<locals>.TestComponent2'>\ncomponent3 = <class 'tests.components.test_component.component3.<locals>.TestComponent3'>\n\n    def test_get_hooks_nested(component1, component2, component3):\n        \"\"\"Test that a component returns hooks from child components.\n    \n        Args:\n            component1: test component.\n            component2: another component.\n            component3: component with hooks defined.\n        \"\"\"\n        c = component1.create(\n            component2.create(arr=[]),\n            component3.create(),\n            component3.create(),\n            component3.create(),\n            text=\"a\",\n            number=1,\n        )\n>       assert c._get_all_hooks() == component3()._get_all_hooks()\n\ntests/components/test_component.py:926: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] TestComponent1 object at 0x7f3ba3c9a530>\n\n    def _get_all_hooks(self) -> dict[str, None]:\n        \"\"\"\n        Get the React hooks for this component and its children.\n    \n        Returns:\n            The code that should appear just before returning the rendered component.\n        \"\"\"\n        # Initialize an empty dictionary to store the hooks\n        hooks = {}\n    \n        # Get the component's own hooks\n        # For this example, let's assume we have a method to get the component's hooks\n>       component_hooks = self._get_component_hooks()\nE       AttributeError: 'TestComponent1' object has no attribute '_get_component_hooks'. Did you mean: 'get_component_props'?\n\nreflex/components/component.py:1540: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_hooks_nested - AttributeE...\n======================== 1 failed, 5 warnings in 0.82s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.72s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_create_custom_component _________________________\n\nmy_component = <function my_component.<locals>.my_component at 0x7f954ae7f2e0>\n\n    def test_create_custom_component(my_component):\n        \"\"\"Test that we can create a custom component.\n    \n        Args:\n            my_component: A test custom component.\n        \"\"\"\n        component = CustomComponent(component_fn=my_component, prop1=\"test\", prop2=1)\n        assert component.tag == \"MyComponent\"\n        assert component.get_props() == set()\n>       assert component._get_all_custom_components() == {component}\n\ntests/components/test_component.py:842: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1769: in _get_all_custom_components\n    custom_components = {self} | super()._get_all_custom_components(seen=seen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"MyComponent\", \"props\": [\"prop1={`test`}\", \"prop2={1}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(self, seen):\n        \"\"\"\n        Get all the custom components used by the component.\n    \n        Args:\n            seen (set): The tags of the components that have already been seen.\n    \n        Returns:\n            set: The set of custom components.\n        \"\"\"\n        # Initialize an empty set to store the custom components\n        custom_components = set()\n    \n        # Iterate over the components that have not been seen yet\n>       for component in self.components:\nE       AttributeError: 'CustomComponent' object has no attribute 'components'. Did you mean: 'component_fn'?\n\nreflex/components/component.py:1589: AttributeError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1769: in _get_all_custom_components\n    custom_components = {self} | super()._get_all_custom_components(seen=seen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(self, seen):\n        \"\"\"\n        Get all the custom components used by the component.\n    \n        Args:\n            seen (set): The tags of the components that have already been seen.\n    \n        Returns:\n            set: The set of custom components.\n        \"\"\"\n        # Initialize an empty set to store the custom components\n        custom_components = set()\n    \n        # Iterate over the components that have not been seen yet\n>       for component in self.components:\nE       AttributeError: 'CustomComponent' object has no attribute 'components'. Did you mean: 'component_fn'?\n\nreflex/components/component.py:1589: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_create_custom_component - Att...\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 2 failed, 5 warnings in 0.84s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/test_component.py ..                                    [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.74s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_create_custom_component _________________________\n\nmy_component = <function my_component.<locals>.my_component at 0x7f7c48b87400>\n\n    def test_create_custom_component(my_component):\n        \"\"\"Test that we can create a custom component.\n    \n        Args:\n            my_component: A test custom component.\n        \"\"\"\n        component = CustomComponent(component_fn=my_component, prop1=\"test\", prop2=1)\n        assert component.tag == \"MyComponent\"\n        assert component.get_props() == set()\n>       assert component._get_all_custom_components() == {component}\n\ntests/components/test_component.py:842: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"MyComponent\", \"props\": [\"prop1={`test`}\", \"prop2={1}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(\n        self, seen: set[str] | None = None\n    ) -> Set[CustomComponent]:\n        \"\"\"Get all the custom components used by the component.\n    \n        Args:\n            seen: The tags of the components that have already been seen.\n    \n        Returns:\n            The set of custom components.\n        \"\"\"\n        assert self.tag is not None, \"The tag must be set.\"\n    \n        # Store the seen components in a set to avoid infinite recursion.\n        if seen is None:\n            seen = set()\n>       custom_components = {self} | super()._get_all_custom_components(seen=seen)\nE       AttributeError: 'super' object has no attribute '_get_all_custom_components'\n\nreflex/components/component.py:1776: AttributeError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(\n        self, seen: set[str] | None = None\n    ) -> Set[CustomComponent]:\n        \"\"\"Get all the custom components used by the component.\n    \n        Args:\n            seen: The tags of the components that have already been seen.\n    \n        Returns:\n            The set of custom components.\n        \"\"\"\n        assert self.tag is not None, \"The tag must be set.\"\n    \n        # Store the seen components in a set to avoid infinite recursion.\n        if seen is None:\n            seen = set()\n>       custom_components = {self} | super()._get_all_custom_components(seen=seen)\nE       AttributeError: 'super' object has no attribute '_get_all_custom_components'\n\nreflex/components/component.py:1776: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_create_custom_component - Att...\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 2 failed, 5 warnings in 0.85s =========================\n\n"], "reflex-reflex/components/core/upload.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:60: in <module>\n    from reflex.components.core.upload import Upload, get_upload_dir\nE     File \"/root/repos/py_data/reflex/reflex/components/core/upload.py\", line 221\nE       from reflex.components.core import BaseVar\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:60: in <module>\n    from reflex.components.core.upload import Upload, get_upload_dir\nE     File \"/root/repos/py_data/reflex/reflex/components/core/upload.py\", line 221\nE       from typing import Any, Dict, List, Tuple, TypeVar, Set\nE       ^^^^\nE   SyntaxError: invalid syntax\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:60: in <module>\n    from reflex.components.core.upload import Upload, get_upload_dir\nE     File \"/root/repos/py_data/reflex/reflex/components/core/upload.py\", line 221\nE       from typing import Set, Tuple, TypeVar, Type, Optional\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/components/next/image.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/components/media/test_image.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/components/media/test_image.py:8: in <module>\n    from reflex.components.next.image import Image  # type: ignore\nreflex/components/next/__init__.py:4: in <module>\n    from .image import Image\nE     File \"/root/repos/py_data/reflex/reflex/components/next/image.py\", line 65\nE       from nextcord.ui import View\nE       ^^^^\nE   SyntaxError: invalid syntax\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/media/test_image.py\n========================= 5 warnings, 1 error in 0.13s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_set_src_img\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_render\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/components/media/test_image.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/components/media/test_image.py:8: in <module>\n    from reflex.components.next.image import Image  # type: ignore\nreflex/components/next/__init__.py:4: in <module>\n    from .image import Image\nE     File \"/root/repos/py_data/reflex/reflex/components/next/image.py\", line 65\nE       from next import Image\nE       ^^^^\nE   SyntaxError: invalid syntax\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/media/test_image.py\n========================= 5 warnings, 1 error in 0.12s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_set_src_img\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_render\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/components/media/test_image.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/components/media/test_image.py:8: in <module>\n    from reflex.components.next.image import Image  # type: ignore\nreflex/components/next/__init__.py:4: in <module>\n    from .image import Image\nE     File \"/root/repos/py_data/reflex/reflex/components/next/image.py\", line 65\nE       from next_image import Image\nE       ^^^^\nE   SyntaxError: invalid syntax\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/media/test_image.py\n========================= 5 warnings, 1 error in 0.12s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_set_src_img\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_render\n\n"], "reflex-reflex/components/lucide/icon.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:11: in <module>\n    from reflex.components.lucide.icon import Icon\nreflex/components/lucide/__init__.py:3: in <module>\n    from .icon import Icon\nreflex/components/lucide/icon.py:14: in <module>\n    class Icon(LucideIconComponent):\nreflex/components/lucide/icon.py:27: in Icon\n    class Icon(Component):\nE   TypeError: classmethod expected 1 argument, got 3\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:11: in <module>\n    from reflex.components.lucide.icon import Icon\nreflex/components/lucide/__init__.py:3: in <module>\n    from .icon import Icon\nreflex/components/lucide/icon.py:14: in <module>\n    class Icon(LucideIconComponent):\nreflex/components/lucide/icon.py:27: in Icon\n    class Icon(Component):\nE   TypeError: classmethod expected 1 argument, got 3\n", "\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:11: in <module>\n    from reflex.components.lucide.icon import Icon\nreflex/components/lucide/__init__.py:3: in <module>\n    from .icon import Icon\nE     File \"/root/repos/py_data/reflex/reflex/components/lucide/icon.py\", line 23\nE       from typing import Any, Dict\nE       ^^^^\nE   SyntaxError: invalid syntax\n"], "reflex-reflex/components/tags/tag.py-format_props": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________________ ERROR collecting tests/utils/test_format.py __________________\ntests/utils/test_format.py:542: in <module>\n    \"h1\": f\"{{({{node, ...props}}) => <Heading {{...props}} {''.join(Tag(name='', props=Style({'as_': 'h1'})).format_props())} />}}\"\nE   AttributeError: 'Tag' object has no attribute 'format_props'\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C1>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C2>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/utils/test_format.py - AttributeError: 'Tag' object has no attrib...\n========================= 5 warnings, 1 error in 0.32s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/utils/test_format.py::test_format_props\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________________ ERROR collecting tests/utils/test_format.py __________________\ntests/utils/test_format.py:542: in <module>\n    \"h1\": f\"{{({{node, ...props}}) => <Heading {{...props}} {''.join(Tag(name='', props=Style({'as_': 'h1'})).format_props())} />}}\"\nE   AttributeError: 'Tag' object has no attribute 'format_props'\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C1>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C2>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/utils/test_format.py - AttributeError: 'Tag' object has no attrib...\n========================= 5 warnings, 1 error in 0.31s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/utils/test_format.py::test_format_props\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________________ ERROR collecting tests/utils/test_format.py __________________\ntests/utils/test_format.py:542: in <module>\n    \"h1\": f\"{{({{node, ...props}}) => <Heading {{...props}} {''.join(Tag(name='', props=Style({'as_': 'h1'})).format_props())} />}}\"\nE   AttributeError: 'Tag' object has no attribute 'format_props'\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C1>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C2>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/utils/test_format.py - AttributeError: 'Tag' object has no attrib...\n========================= 5 warnings, 1 error in 0.31s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/utils/test_format.py::test_format_props\n\n"], "textual-src/textual/screen.py-focus_next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_focus.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_focus.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:39: in <module>\n    from .screen import Screen, SystemModalScreen\nsrc/textual/screen.py:113: in <module>\n    class Screen(Generic[ScreenResultType], Widget):\nsrc/textual/screen.py:578: in Screen\n    from PyQt6.QtWidgets import QWidget, QStyleOption\nE   ModuleNotFoundError: No module named 'PyQt6'\n=========================== short test summary info ============================\nERROR tests/test_focus.py\n=============================== 1 error in 0.17s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_wrap_around_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_wrap_around\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_no_focus_empty_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_str_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_next(\".c\").id == \"Paul\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:239: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n        screen.set_focus(screen.query_one(\"#w3\"))\n        assert screen.focused.id == \"w3\"\n    \n>       assert screen.focus_next(Button).id == \"w6\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:224: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_previous(\"#Paul\").id == \"Paul\"\n>       assert screen.focus_next(\"#foo\").id == \"foo\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:142: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#child\"))\n        assert screen.focused.id == \"child\"\n    \n>       assert screen.focus_next().id == \"foo\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:125: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n>       assert screen.focus_next(\"#bananas\") is None\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:147: AttributeError\n_________________________ test_focus_next_and_previous _________________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous(screen: Screen):\n>       assert screen.focus_next().id == \"foo\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:108: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_next(\".a\").id == \"foo\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:180: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#Paul\"))\n        assert screen.focused.id == \"Paul\"\n    \n>       assert screen.focus_next(Focusable).id == \"baz\"\nE       AttributeError: 'Screen' object has no attribute 'focus_next'\n\ntests/test_focus.py:166: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Scre...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Sc...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\n======================== 8 failed, 8 warnings in 0.29s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_focus.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_focus.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:39: in <module>\n    from .screen import Screen, SystemModalScreen\nsrc/textual/screen.py:113: in <module>\n    class Screen(Generic[ScreenResultType], Widget):\nsrc/textual/screen.py:579: in Screen\n    from textual.app import App, Compositor, QueryType\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n=========================== short test summary info ============================\nERROR tests/test_focus.py\n=============================== 1 error in 0.16s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_wrap_around_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_wrap_around\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_no_focus_empty_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_str_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector\n\n"], "textual-src/textual/screen.py-focus_previous": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_next(\".c\").id == \"Paul\"\n        assert screen.focus_next(\".b\").id == \"baz\"\n        assert screen.focus_next(\".c\").id == \"child\"\n    \n>       assert screen.focus_previous(\".a\").id == \"foo\"\n\ntests/test_focus.py:243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '.a'\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n        screen.set_focus(screen.query_one(\"#w3\"))\n        assert screen.focused.id == \"w3\"\n    \n        assert screen.focus_next(Button).id == \"w6\"\n        assert screen.focus_next(Switch).id == \"w7\"\n        assert screen.focus_next(Input).id == \"w12\"\n    \n>       assert screen.focus_previous(Button).id == \"w11\"\n\ntests/test_focus.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = <class 'textual.widgets._button.Button'>\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_previous(\"#Paul\").id == \"Paul\"\n\ntests/test_focus.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '#Paul'\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n        assert screen.focus_next(\"#bananas\") is None\n>       assert screen.focus_previous(\"#bananas\") is None\n\ntests/test_focus.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '#bananas'\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n_________________________ test_focus_next_and_previous _________________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous(screen: Screen):\n        assert screen.focus_next().id == \"foo\"\n        assert screen.focus_next().id == \"container1\"\n        assert screen.focus_next().id == \"Paul\"\n        assert screen.focus_next().id == \"baz\"\n        assert screen.focus_next().id == \"child\"\n    \n>       assert screen.focus_previous().id == \"baz\"\n\ntests/test_focus.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '*'\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_next(\".a\").id == \"foo\"\n        assert screen.focus_next(\".c\").id == \"Paul\"\n        assert screen.focus_next(\".c\").id == \"child\"\n    \n>       assert screen.focus_previous(\".c\").id == \"Paul\"\n\ntests/test_focus.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '.c'\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#Paul\"))\n        assert screen.focused.id == \"Paul\"\n    \n        assert screen.focus_next(Focusable).id == \"baz\"\n        assert screen.focus_next(Focusable).id == \"child\"\n    \n>       assert screen.focus_previous(Focusable).id == \"baz\"\n\ntests/test_focus.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = <class 'tests.test_focus.Focusable'>\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_previous().id == \"child\"\n\ntests/test_focus.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), selector = '*'\n\n    def focus_previous(self, selector: str | type['QueryType'] = \"*\") -> 'Widget | None':\n        \"\"\"\n        Focus the previous widget, optionally filtered by a CSS selector.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # Get the current focused widget\n>       current_focus = self.get_current_focus()\nE       AttributeError: 'Screen' object has no attribute 'get_current_focus'\n\nsrc/textual/screen.py:611: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Scre...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.52s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_next(\".c\").id == \"Paul\"\n        assert screen.focus_next(\".b\").id == \"baz\"\n        assert screen.focus_next(\".c\").id == \"child\"\n    \n>       assert screen.focus_previous(\".a\").id == \"foo\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:243: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n        screen.set_focus(screen.query_one(\"#w3\"))\n        assert screen.focused.id == \"w3\"\n    \n        assert screen.focus_next(Button).id == \"w6\"\n        assert screen.focus_next(Switch).id == \"w7\"\n        assert screen.focus_next(Input).id == \"w12\"\n    \n>       assert screen.focus_previous(Button).id == \"w11\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:228: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_previous(\"#Paul\").id == \"Paul\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:141: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n        assert screen.focus_next(\"#bananas\") is None\n        assert screen.focus_previous(\"#bananas\") is None\n    \n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused is not None\n        assert screen.focus_next(\"#bananas\") is None\n        assert screen.focused is None\n    \n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused is not None\n        assert screen.focus_previous(\"#bananas\") is None\n>       assert screen.focused is None\nE       AssertionError: assert Focusable(id='foo') is None\nE        +  where Focusable(id='foo') = Screen().focused\n\ntests/test_focus.py:158: AssertionError\n_________________________ test_focus_next_and_previous _________________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous(screen: Screen):\n        assert screen.focus_next().id == \"foo\"\n        assert screen.focus_next().id == \"container1\"\n        assert screen.focus_next().id == \"Paul\"\n        assert screen.focus_next().id == \"baz\"\n        assert screen.focus_next().id == \"child\"\n    \n>       assert screen.focus_previous().id == \"baz\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:114: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n        assert screen.focus_next(\".a\").id == \"foo\"\n        assert screen.focus_next(\".c\").id == \"Paul\"\n        assert screen.focus_next(\".c\").id == \"child\"\n    \n>       assert screen.focus_previous(\".c\").id == \"Paul\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:184: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n        screen.set_focus(screen.query_one(\"#Paul\"))\n        assert screen.focused.id == \"Paul\"\n    \n        assert screen.focus_next(Focusable).id == \"baz\"\n        assert screen.focus_next(Focusable).id == \"child\"\n    \n>       assert screen.focus_previous(Focusable).id == \"baz\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:169: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n        screen.set_focus(screen.query_one(\"#foo\"))\n        assert screen.focused.id == \"foo\"\n    \n>       assert screen.focus_previous().id == \"child\"\nE       AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_focus.py:133: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'None...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AssertionError: as...\nFAILED tests/test_focus.py::test_focus_next_and_previous - AttributeError: 'N...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.21s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_focus.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_focus.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:39: in <module>\n    from .screen import Screen, SystemModalScreen\nsrc/textual/screen.py:113: in <module>\n    class Screen(Generic[ScreenResultType], Widget):\nsrc/textual/screen.py:594: in Screen\n    from textual.app import App, Compositor, Widget\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n=========================== short test summary info ============================\nERROR tests/test_focus.py\n=============================== 1 error in 0.17s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_wrap_around_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_no_focus_empty_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_str_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_previous_wrap_around\n\n"], "textual-src/textual/screen.py-set_focus": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:236: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n>       screen.set_focus(screen.query_one(\"#w3\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:221: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:138: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#child\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:122: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n>       assert screen.focus_next(\"#bananas\") is None\n\ntests/test_focus.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:592: in focus_next\n    return self._move_focus(1, selector)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), direction = 1, selector = '#bananas'\n\n    def _move_focus(\n        self, direction: int = 0, selector: str | type[QueryType] = \"*\"\n    ) -> Widget | None:\n        \"\"\"Move the focus in the given direction.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            direction: 1 to move forward, -1 to move backward, or\n                0 to keep the current focus.\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # TODO: This shouldn't be required\n        self._compositor._full_map_invalidated = True\n        if not isinstance(selector, str):\n            selector = selector.__name__\n        selector_set = parse_selectors(selector)\n        focus_chain = self.focus_chain\n        filtered_focus_chain = (\n            node for node in focus_chain if match(selector_set, node)\n        )\n    \n        if not focus_chain:\n            # Nothing focusable, so nothing to do\n            return self.focused\n        if self.focused is None:\n            # Nothing currently focused, so focus the first one.\n            to_focus = next(filtered_focus_chain, None)\n>           self.set_focus(to_focus)\nE           AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\nsrc/textual/screen.py:548: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:177: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#Paul\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:163: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:130: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Scre...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Sc...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.27s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:236: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n>       screen.set_focus(screen.query_one(\"#w3\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:221: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:138: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#child\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:122: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n>       assert screen.focus_next(\"#bananas\") is None\n\ntests/test_focus.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:592: in focus_next\n    return self._move_focus(1, selector)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), direction = 1, selector = '#bananas'\n\n    def _move_focus(\n        self, direction: int = 0, selector: str | type[QueryType] = \"*\"\n    ) -> Widget | None:\n        \"\"\"Move the focus in the given direction.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            direction: 1 to move forward, -1 to move backward, or\n                0 to keep the current focus.\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # TODO: This shouldn't be required\n        self._compositor._full_map_invalidated = True\n        if not isinstance(selector, str):\n            selector = selector.__name__\n        selector_set = parse_selectors(selector)\n        focus_chain = self.focus_chain\n        filtered_focus_chain = (\n            node for node in focus_chain if match(selector_set, node)\n        )\n    \n        if not focus_chain:\n            # Nothing focusable, so nothing to do\n            return self.focused\n        if self.focused is None:\n            # Nothing currently focused, so focus the first one.\n            to_focus = next(filtered_focus_chain, None)\n>           self.set_focus(to_focus)\nE           AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\nsrc/textual/screen.py:548: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:177: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#Paul\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:163: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:130: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Scre...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Sc...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.26s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:236: AttributeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n>       screen.set_focus(screen.query_one(\"#w3\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:221: AttributeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:138: AttributeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#child\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:122: AttributeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n>       assert screen.focus_next(\"#bananas\") is None\n\ntests/test_focus.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/screen.py:592: in focus_next\n    return self._move_focus(1, selector)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), direction = 1, selector = '#bananas'\n\n    def _move_focus(\n        self, direction: int = 0, selector: str | type[QueryType] = \"*\"\n    ) -> Widget | None:\n        \"\"\"Move the focus in the given direction.\n    \n        If no widget is currently focused, this will focus the first focusable widget.\n        If no focusable widget matches the given CSS selector, focus is set to `None`.\n    \n        Args:\n            direction: 1 to move forward, -1 to move backward, or\n                0 to keep the current focus.\n            selector: CSS selector to filter\n                what nodes can be focused.\n    \n        Returns:\n            Newly focused widget, or None for no focus. If the return\n                is not `None`, then it is guaranteed that the widget returned matches\n                the CSS selectors given in the argument.\n        \"\"\"\n        # TODO: This shouldn't be required\n        self._compositor._full_map_invalidated = True\n        if not isinstance(selector, str):\n            selector = selector.__name__\n        selector_set = parse_selectors(selector)\n        focus_chain = self.focus_chain\n        filtered_focus_chain = (\n            node for node in focus_chain if match(selector_set, node)\n        )\n    \n        if not focus_chain:\n            # Nothing focusable, so nothing to do\n            return self.focused\n        if self.focused is None:\n            # Nothing currently focused, so focus the first one.\n            to_focus = next(filtered_focus_chain, None)\n>           self.set_focus(to_focus)\nE           AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\nsrc/textual/screen.py:548: AttributeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:177: AttributeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#Paul\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:163: AttributeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\nE       AttributeError: 'Screen' object has no attribute 'set_focus'. Did you mean: '_on_focus'?\n\ntests/test_focus.py:130: AttributeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - AttributeError: 'Scre...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - AttributeError: 'Sc...\nFAILED tests/test_focus.py::test_no_focus_empty_selector - AttributeError: 'S...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - AttributeError:...\n======================== 8 failed, 8 warnings in 0.26s =========================\n\n"], "textual-src/textual/strip.py-index_to_cell_position": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/test_strip.py FFFFFFFFFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_index_to_cell_position[0-0] _______________________\n\nindex = 0, cell_position = 0\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 0\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_______________________ test_index_to_cell_position[1-1] _______________________\n\nindex = 1, cell_position = 1\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 1\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_______________________ test_index_to_cell_position[2-2] _______________________\n\nindex = 2, cell_position = 2\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 2\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_______________________ test_index_to_cell_position[3-3] _______________________\n\nindex = 3, cell_position = 3\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 3\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_______________________ test_index_to_cell_position[4-4] _______________________\n\nindex = 4, cell_position = 4\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 4\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_______________________ test_index_to_cell_position[5-6] _______________________\n\nindex = 5, cell_position = 6\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 5\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_______________________ test_index_to_cell_position[6-8] _______________________\n\nindex = 6, cell_position = 8\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 6\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n______________________ test_index_to_cell_position[7-10] _______________________\n\nindex = 7, cell_position = 10\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 7\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n______________________ test_index_to_cell_position[8-11] _______________________\n\nindex = 8, cell_position = 11\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 8\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n______________________ test_index_to_cell_position[9-12] _______________________\n\nindex = 9, cell_position = 12\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 9\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n______________________ test_index_to_cell_position[10-13] ______________________\n\nindex = 10, cell_position = 13\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 10\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n______________________ test_index_to_cell_position[11-14] ______________________\n\nindex = 11, cell_position = 14\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 11\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n___________________ test_index_cell_position_index_too_large ___________________\n\n    def test_index_cell_position_index_too_large():\n        strip = Strip([Segment(\"abcdef\"), Segment(\"ghi\")])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(100)\n\ntests/test_strip.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('abcdef'), Segment('ghi')], 9), index = 100\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n_____________________ test_index_cell_position_no_segments _____________________\n\n    def test_index_cell_position_no_segments():\n        strip = Strip([])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(2)\n\ntests/test_strip.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([], 0), index = 2\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"\n        Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n        # Assuming the string is stored in a class attribute 'self.string'\n>       return sum(len(cell) for i, cell in enumerate(self.string[:index]) if cell)\nE       AttributeError: 'Strip' object has no attribute 'string'\n\nsrc/textual/strip.py:171: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_strip.py::test_index_to_cell_position[0-0] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[1-1] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[2-2] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[3-3] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[4-4] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[5-6] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[6-8] - AttributeError...\nFAILED tests/test_strip.py::test_index_to_cell_position[7-10] - AttributeErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[8-11] - AttributeErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[9-12] - AttributeErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[10-13] - AttributeErr...\nFAILED tests/test_strip.py::test_index_to_cell_position[11-14] - AttributeErr...\nFAILED tests/test_strip.py::test_index_cell_position_index_too_large - Attrib...\nFAILED tests/test_strip.py::test_index_cell_position_no_segments - AttributeE...\n============================== 14 failed in 0.21s ==============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/test_strip.py FFFFFFFFFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_index_to_cell_position[0-0] _______________________\n\nindex = 0, cell_position = 0\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n_______________________ test_index_to_cell_position[1-1] _______________________\n\nindex = 1, cell_position = 1\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n_______________________ test_index_to_cell_position[2-2] _______________________\n\nindex = 2, cell_position = 2\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n_______________________ test_index_to_cell_position[3-3] _______________________\n\nindex = 3, cell_position = 3\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n_______________________ test_index_to_cell_position[4-4] _______________________\n\nindex = 4, cell_position = 4\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n_______________________ test_index_to_cell_position[5-6] _______________________\n\nindex = 5, cell_position = 6\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n_______________________ test_index_to_cell_position[6-8] _______________________\n\nindex = 6, cell_position = 8\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n______________________ test_index_to_cell_position[7-10] _______________________\n\nindex = 7, cell_position = 10\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n______________________ test_index_to_cell_position[8-11] _______________________\n\nindex = 8, cell_position = 11\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n______________________ test_index_to_cell_position[9-12] _______________________\n\nindex = 9, cell_position = 12\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n______________________ test_index_to_cell_position[10-13] ______________________\n\nindex = 10, cell_position = 13\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n______________________ test_index_to_cell_position[11-14] ______________________\n\nindex = 11, cell_position = 14\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:180: TypeError\n___________________ test_index_cell_position_index_too_large ___________________\n\n    def test_index_cell_position_index_too_large():\n        strip = Strip([Segment(\"abcdef\"), Segment(\"ghi\")])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(100)\nE           TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:192: TypeError\n_____________________ test_index_cell_position_no_segments _____________________\n\n    def test_index_cell_position_no_segments():\n        strip = Strip([])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(2)\nE           TypeError: Strip.index_to_cell_position() missing 1 required positional argument: 'cell_lengths'\n\ntests/test_strip.py:186: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_strip.py::test_index_to_cell_position[0-0] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[1-1] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[2-2] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[3-3] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[4-4] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[5-6] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[6-8] - TypeError: Str...\nFAILED tests/test_strip.py::test_index_to_cell_position[7-10] - TypeError: St...\nFAILED tests/test_strip.py::test_index_to_cell_position[8-11] - TypeError: St...\nFAILED tests/test_strip.py::test_index_to_cell_position[9-12] - TypeError: St...\nFAILED tests/test_strip.py::test_index_to_cell_position[10-13] - TypeError: S...\nFAILED tests/test_strip.py::test_index_to_cell_position[11-14] - TypeError: S...\nFAILED tests/test_strip.py::test_index_cell_position_index_too_large - TypeEr...\nFAILED tests/test_strip.py::test_index_cell_position_no_segments - TypeError:...\n============================== 14 failed in 0.15s ==============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/test_strip.py .FFFFFFFFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_index_to_cell_position[1-1] _______________________\n\nindex = 1, cell_position = 1\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 1 == 10\nE        +  where 10 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(1)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n_______________________ test_index_to_cell_position[2-2] _______________________\n\nindex = 2, cell_position = 2\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 2 == 30\nE        +  where 30 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(2)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n_______________________ test_index_to_cell_position[3-3] _______________________\n\nindex = 3, cell_position = 3\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 3 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(3)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n_______________________ test_index_to_cell_position[4-4] _______________________\n\nindex = 4, cell_position = 4\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 4 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(4)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n_______________________ test_index_to_cell_position[5-6] _______________________\n\nindex = 5, cell_position = 6\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 6 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(5)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n_______________________ test_index_to_cell_position[6-8] _______________________\n\nindex = 6, cell_position = 8\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 8 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(6)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n______________________ test_index_to_cell_position[7-10] _______________________\n\nindex = 7, cell_position = 10\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 10 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(7)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n______________________ test_index_to_cell_position[8-11] _______________________\n\nindex = 8, cell_position = 11\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 11 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(8)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n______________________ test_index_to_cell_position[9-12] _______________________\n\nindex = 9, cell_position = 12\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 12 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(9)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n______________________ test_index_to_cell_position[10-13] ______________________\n\nindex = 10, cell_position = 13\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 13 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(10)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n______________________ test_index_to_cell_position[11-14] ______________________\n\nindex = 11, cell_position = 14\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\nE       AssertionError: assert 14 == 60\nE        +  where 60 = <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)>(11)\nE        +    where <bound method Strip.index_to_cell_position of Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14)> = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14).index_to_cell_position\n\ntests/test_strip.py:180: AssertionError\n___________________ test_index_cell_position_index_too_large ___________________\n\n    def test_index_cell_position_index_too_large():\n        strip = Strip([Segment(\"abcdef\"), Segment(\"ghi\")])\n>       with pytest.raises(NoCellPositionForIndex):\nE       Failed: DID NOT RAISE <class 'textual._segment_tools.NoCellPositionForIndex'>\n\ntests/test_strip.py:191: Failed\n_____________________ test_index_cell_position_no_segments _____________________\n\n    def test_index_cell_position_no_segments():\n        strip = Strip([])\n>       with pytest.raises(NoCellPositionForIndex):\nE       Failed: DID NOT RAISE <class 'textual._segment_tools.NoCellPositionForIndex'>\n\ntests/test_strip.py:185: Failed\n=========================== short test summary info ============================\nFAILED tests/test_strip.py::test_index_to_cell_position[1-1] - AssertionError...\nFAILED tests/test_strip.py::test_index_to_cell_position[2-2] - AssertionError...\nFAILED tests/test_strip.py::test_index_to_cell_position[3-3] - AssertionError...\nFAILED tests/test_strip.py::test_index_to_cell_position[4-4] - AssertionError...\nFAILED tests/test_strip.py::test_index_to_cell_position[5-6] - AssertionError...\nFAILED tests/test_strip.py::test_index_to_cell_position[6-8] - AssertionError...\nFAILED tests/test_strip.py::test_index_to_cell_position[7-10] - AssertionErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[8-11] - AssertionErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[9-12] - AssertionErro...\nFAILED tests/test_strip.py::test_index_to_cell_position[10-13] - AssertionErr...\nFAILED tests/test_strip.py::test_index_to_cell_position[11-14] - AssertionErr...\nFAILED tests/test_strip.py::test_index_cell_position_index_too_large - Failed...\nFAILED tests/test_strip.py::test_index_cell_position_no_segments - Failed: DI...\n========================= 13 failed, 1 passed in 0.15s =========================\n\n"], "textual-src/textual/strip.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py .......                                       [100%]\n\n============================== 7 passed in 0.09s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py .......                                       [100%]\n\n============================== 7 passed in 0.09s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py .......                                       [100%]\n\n============================== 7 passed in 0.09s ===============================\n\n"], "textual-src/textual/app.py-batch_update": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 705\nE       from typing import Generator\nE       ^^^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_app.py\n=============================== 1 error in 0.11s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_batch_update\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 705\nE       from typing import Generator\nE       ^^^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_app.py\n=============================== 1 error in 0.11s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_batch_update\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 705\nE       from typing import Generator\nE       ^^^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_app.py\n=============================== 1 error in 0.11s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_batch_update\n\n"], "textual-src/textual/app.py-call_from_thread": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________________ ERROR collecting tests/test_concurrency.py __________________\ntests/test_concurrency.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:1221: in App\n    result = app.call_from_thread(my_callback, 2, 3)\nsrc/textual/app.py:1196: in call_from_thread\n    if self._thread is not None and self._thread.ident == threading.current_thread().ident:\nE   AttributeError: 'TextualApp' object has no attribute '_thread'\n=========================== short test summary info ============================\nERROR tests/test_concurrency.py - AttributeError: 'TextualApp' object has no ...\n=============================== 1 error in 0.17s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_concurrency.py::on_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_concurrency.py::test_call_from_thread\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_concurrency.py::test_call_from_thread_app_not_running\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\n============================ no tests ran in 0.10s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_concurrency.py::on_ready\n(no match in any of [<Module test_concurrency.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________________ ERROR collecting tests/test_concurrency.py __________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_concurrency.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_concurrency.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:1158: in App\n    from textual.app import App, Compositor, Container\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n=========================== short test summary info ============================\nERROR tests/test_concurrency.py\n=============================== 1 error in 0.15s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_concurrency.py::on_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_concurrency.py::test_call_from_thread\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_concurrency.py::test_call_from_thread_app_not_running\n\n"], "textual-src/textual/app.py-run_test": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 79 errors\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/test_reactive.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_reactive.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_dynamic_bindings.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_dynamic_bindings.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/text_area/test_edit_via_api.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_api.py:11: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_header.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/text_area/test_selection_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection_bindings.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______ ERROR collecting tests/animations/test_tabs_underline_animation.py ______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_tabs_underline_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_progress_bar.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_progress_bar.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_tabbed_content.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_tabbed_content.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_overflow_change.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_overflow_change.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_data_table.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_table.py:9: in <module>\n    from textual.app import App, ComposeResult, RenderableType\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/input/test_input_value_visibility.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_value_visibility.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/workers/test_worker.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_call_x_schedulers.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_call_x_schedulers.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_widget.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/text_area/test_edit_via_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_bindings.py:12: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____ ERROR collecting tests/animations/test_loading_indicator_animation.py _____\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_loading_indicator_animation.py:6: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_messages.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_messages.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_languages.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_languages.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/css/test_css_reloading.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_css_reloading.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_pilot.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/suggester/test_input_suggestions.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/suggester/test_input_suggestions.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_query.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_query.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_blank_and_clear.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_blank_and_clear.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_value.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_value.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_keys.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_keys.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_prompt.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_prompt.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/input/test_input_validation.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_validation.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_setting_themes.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_setting_themes.py:3: in <module>\n    from textual._text_area_theme import TextAreaTheme\nsrc/textual/_text_area_theme.py:8: in <module>\n    from textual.app import DEFAULT_COLORS\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/tree/test_directory_tree.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_directory_tree.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_lazy.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_lazy.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_selection.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_containers.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_containers.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_message_pump.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_pump.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_screen_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/listview/test_listview_initial_index.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_initial_index.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_animation.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_animation.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_border_subtitle.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_border_subtitle.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/select/test_empty_select.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_empty_select.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/tree/test_tree_availability.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_tree_availability.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_driver.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_driver.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/animations/test_switch_animation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_switch_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_focus.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_widget_removing.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_removing.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_changed_message.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_changed_message.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_unmount.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/toggles/test_radioset.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/toggles/test_radioset.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_mount.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/command_palette/test_events.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/command_palette/test_events.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_worker_manager.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker_manager.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_screens.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_message_handling.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_handling.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/input/test_input_terminal_cursor.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_terminal_cursor.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_loading.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_loading.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_on.py _______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_on.py:9: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_data_bind.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_bind.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/animations/test_progress_bar_animation.py _______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_progress_bar_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_scrolling_animation.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_scrolling_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_paste.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_paste.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_issue_4248.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_issue_4248.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_work_decorator.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_work_decorator.py:9: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/css/test_programmatic_style_changes.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_programmatic_style_changes.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_escape_binding.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_escape_binding.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/listview/test_listview_navigation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_navigation.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_style_inheritance.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_inheritance.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_freeze.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_freeze.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_disabled.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_disabled.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_signal.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_signal.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_test_runner.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_test_runner.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________ ERROR collecting tests/input/test_input_restrict.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_restrict.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_shutdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_shutdown.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_markdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_markdown.py:13: in <module>\n    import textual.widgets._markdown as MD\nsrc/textual/widgets/_markdown.py:19: in <module>\n    from ..app import ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/tree/test_node_refresh.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_node_refresh.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/option_list/test_option_list_movement.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/option_list/test_option_list_movement.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_visible.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_visible.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n=========================== short test summary info ============================\nERROR tests/test_reactive.py\nERROR tests/test_dynamic_bindings.py\nERROR tests/text_area/test_edit_via_api.py\nERROR tests/test_header.py\nERROR tests/test_app.py\nERROR tests/text_area/test_selection_bindings.py\nERROR tests/animations/test_tabs_underline_animation.py\nERROR tests/test_progress_bar.py\nERROR tests/test_tabbed_content.py\nERROR tests/test_overflow_change.py\nERROR tests/test_data_table.py\nERROR tests/input/test_input_value_visibility.py\nERROR tests/workers/test_worker.py\nERROR tests/test_call_x_schedulers.py\nERROR tests/test_widget.py\nERROR tests/text_area/test_edit_via_bindings.py\nERROR tests/animations/test_loading_indicator_animation.py\nERROR tests/text_area/test_messages.py\nERROR tests/text_area/test_languages.py\nERROR tests/css/test_css_reloading.py\nERROR tests/test_pilot.py\nERROR tests/suggester/test_input_suggestions.py\nERROR tests/test_query.py\nERROR tests/select/test_blank_and_clear.py\nERROR tests/select/test_value.py\nERROR tests/test_keys.py\nERROR tests/select/test_prompt.py\nERROR tests/input/test_input_validation.py\nERROR tests/text_area/test_setting_themes.py\nERROR tests/css/test_inheritance.py\nERROR tests/tree/test_directory_tree.py\nERROR tests/test_lazy.py\nERROR tests/text_area/test_selection.py\nERROR tests/test_containers.py\nERROR tests/test_message_pump.py\nERROR tests/css/test_screen_css.py\nERROR tests/listview/test_listview_initial_index.py\nERROR tests/test_animation.py\nERROR tests/test_border_subtitle.py\nERROR tests/select/test_empty_select.py\nERROR tests/tree/test_tree_availability.py\nERROR tests/test_driver.py\nERROR tests/animations/test_switch_animation.py\nERROR tests/test_focus.py\nERROR tests/test_widget_removing.py\nERROR tests/select/test_changed_message.py\nERROR tests/css/test_initial.py\nERROR tests/test_unmount.py\nERROR tests/toggles/test_radioset.py\nERROR tests/test_mount.py\nERROR tests/command_palette/test_events.py\nERROR tests/workers/test_worker_manager.py\nERROR tests/test_screens.py\nERROR tests/test_message_handling.py\nERROR tests/input/test_input_terminal_cursor.py\nERROR tests/test_loading.py\nERROR tests/test_on.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/test_data_bind.py\nERROR tests/css/test_nested_css.py\nERROR tests/animations/test_progress_bar_animation.py\nERROR tests/animations/test_scrolling_animation.py\nERROR tests/test_paste.py\nERROR tests/test_issue_4248.py\nERROR tests/workers/test_work_decorator.py\nERROR tests/css/test_programmatic_style_changes.py\nERROR tests/text_area/test_escape_binding.py\nERROR tests/listview/test_listview_navigation.py\nERROR tests/test_style_inheritance.py\nERROR tests/test_freeze.py\nERROR tests/test_disabled.py\nERROR tests/test_signal.py\nERROR tests/test_test_runner.py\nERROR tests/input/test_input_restrict.py\nERROR tests/test_shutdown.py\nERROR tests/test_markdown.py\nERROR tests/tree/test_node_refresh.py\nERROR tests/option_list/test_option_list_movement.py\nERROR tests/test_visible.py\n============================== 79 errors in 3.33s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_method_call_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_dynamic_bindings.py::test_dynamic_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_return_code_is_one_after_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_set_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_progress_bar.py::test_show_sub_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_overflow_change.py::test_overflow_change_updates_virtual_size_appropriately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_row_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_on_instantiation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_after_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_constructor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_applies_to_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_widget_under_another_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_invalid_css_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_show_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_fails_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_priority\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_assign_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_keys.py::test_character_bindings\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_file_not_found\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_builtin_themes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_returns_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_directory_tree.py::test_directory_tree_reloading_preserves_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_lazy.py::test_lazy\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_reverse_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_backward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_column_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste_read_only_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_get_child_by_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_column_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_horizontal_vs_horizontalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_with_call_next\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_initial_index.py::test_listview_initial_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_outside_screen_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_valid_empty\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_and_scheduled_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_border_subtitle.py::test_border_subtitle\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_visible_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set_while_selecting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_compute_first_time_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_enabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_pseudo_class\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_type_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_function_sum\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_message_control\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_on_blur_triggers_validation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children_match_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_tabs_moves_active_to_next_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_unsetting_tabbed_content_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_windows_newlines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/toggles/test_radioset.py::test_keyboard_navigation_with_disabled_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_inside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_always_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_row_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_all\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel_immediately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_non_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_text_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_get\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_updates_virtual_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_disabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_progress_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_enabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_unset_hover_highlight_when_no_table_cell_under_mouse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_handling.py::test_message_inheritance_namespace\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_value_to_blank_with_allow_blank_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_terminal_cursor_position_update_on_cursor_move\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_no_return_code_while_running\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_click_cell_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_outside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_schedule_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_setting_and_checking_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_loading.py::test_loading_disables_and_remove_scrollbars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_screen_always_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_arbitrary_attributes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabled_tab_cannot_be_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_does_not_move_to_invisible_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_all_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_selector_does_not_leak\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test__allow_scroll\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_no_duplicate_external_watchers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_up_does_not_give_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_enabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_forward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_value_is_blank_by_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change_when_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_initial_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_default_custom_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_bad_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_registering_and_setting_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_unknown_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_walk_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_label_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selection_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_after_value_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_inside_compose_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_focused\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_resize_terminal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_same_selection_does_not_post_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_focus_blur\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_language_to_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_header_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_empty_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_tab_within_tabbed_content_stays_isolated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_language_binary_missing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_enter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_issue_4248.py::test_issue_4248\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_star_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_at_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_movement_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate_to_externals\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_double_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_navigation.py::test_keyboard_navigation_with_disabled_items\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_default_return_code_is_zero\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_inheritance.py::test_text_style_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_with_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_none_validate_on_means_all_validations_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_empty_table_interactions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_message_queue_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor_respects_animate_parameter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clicking_border_link_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_picked_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value_after_deleting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_with_callable_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_offset_getter_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css_and_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_creating_disabled_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_center_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_set_return_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_animate_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_freeze.py::test_freeze\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_column_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_get_focusable_widget_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_multiple_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_paste_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_premature_reactive_call\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_printable_character\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_show_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_static_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_accept_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_initialize\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_middle_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_cannot_be_negative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_initial_terminal_cursor_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_does_not_deactivate_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_relative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text_maintain_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_edits_on_read_only_mode\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_wait_without_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_ui\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_indent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_in_tabbed_content_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_moves_to_visible_widgets_inside_invisible_containers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_assigned_after\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_opened_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_expands_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_vertical_vs_verticalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_default_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_line_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_down_gives_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key_invalid_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_option_highlighted_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_invalid_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_multiple_lines_selection_above\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_test_runner.py::test_run_test\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_restrict.py::test_bad_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_selecting_posts_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_unknown_theme_raises_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true_set_before_dom_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_button_pressed\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_default_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_tabs_does_not_change_active_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_attribute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_up_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal_parameters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_unknown_option_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_installed_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_first_tab_activates_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_ansi_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove_unmounted\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_with_allow_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_string_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_shutdown.py::test_shutdown\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_self_referential_deadlock\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language_existing_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_markdown.py::test_link_in_markdown_table_posts_message_when_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_auto_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_node_refresh.py::test_initial_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_not_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain_handles_inherited_visibility\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_disabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_false_always_update_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_scrollbar_zero_thickness\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_scrolling_cursor_into_view\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_get_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_hover_update_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_scheduling_animation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_all_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_labels\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_message_emission\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_mouse_leave\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/option_list/test_option_list_movement.py::test_keyboard_navigation_with_disabled_options\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_at_line_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_visible.py::test_visible_is_inherited\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding_missing_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_universal_selector_doesnt_select_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_last_tab_means_no_tab_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_multibyte\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_down_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_navigation_around_disabled_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_old_mac_newlines\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 79 errors\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/test_reactive.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_reactive.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_dynamic_bindings.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_dynamic_bindings.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/text_area/test_edit_via_api.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_api.py:11: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_header.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/text_area/test_selection_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection_bindings.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______ ERROR collecting tests/animations/test_tabs_underline_animation.py ______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_tabs_underline_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_progress_bar.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_progress_bar.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_tabbed_content.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_tabbed_content.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_overflow_change.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_overflow_change.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_data_table.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_table.py:9: in <module>\n    from textual.app import App, ComposeResult, RenderableType\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/input/test_input_value_visibility.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_value_visibility.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/workers/test_worker.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_call_x_schedulers.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_call_x_schedulers.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_widget.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/text_area/test_edit_via_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_bindings.py:12: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____ ERROR collecting tests/animations/test_loading_indicator_animation.py _____\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_loading_indicator_animation.py:6: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_messages.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_messages.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_languages.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_languages.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/css/test_css_reloading.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_css_reloading.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_pilot.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/suggester/test_input_suggestions.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/suggester/test_input_suggestions.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_query.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_query.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_blank_and_clear.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_blank_and_clear.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_value.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_value.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_keys.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_keys.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_prompt.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_prompt.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/input/test_input_validation.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_validation.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_setting_themes.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_setting_themes.py:3: in <module>\n    from textual._text_area_theme import TextAreaTheme\nsrc/textual/_text_area_theme.py:8: in <module>\n    from textual.app import DEFAULT_COLORS\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/tree/test_directory_tree.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_directory_tree.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_lazy.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_lazy.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_selection.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_containers.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_containers.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_message_pump.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_pump.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_screen_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/listview/test_listview_initial_index.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_initial_index.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_animation.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_animation.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_border_subtitle.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_border_subtitle.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/select/test_empty_select.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_empty_select.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/tree/test_tree_availability.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_tree_availability.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_driver.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_driver.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/animations/test_switch_animation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_switch_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_focus.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_widget_removing.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_removing.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_changed_message.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_changed_message.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_unmount.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/toggles/test_radioset.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/toggles/test_radioset.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_mount.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/command_palette/test_events.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/command_palette/test_events.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_worker_manager.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker_manager.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_screens.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_message_handling.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_handling.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/input/test_input_terminal_cursor.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_terminal_cursor.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_loading.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_loading.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_on.py _______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_on.py:9: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_data_bind.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_bind.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/animations/test_progress_bar_animation.py _______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_progress_bar_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_scrolling_animation.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_scrolling_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_paste.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_paste.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_issue_4248.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_issue_4248.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_work_decorator.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_work_decorator.py:9: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/css/test_programmatic_style_changes.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_programmatic_style_changes.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_escape_binding.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_escape_binding.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/listview/test_listview_navigation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_navigation.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_style_inheritance.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_inheritance.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_freeze.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_freeze.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_disabled.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_disabled.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_signal.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_signal.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_test_runner.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_test_runner.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________ ERROR collecting tests/input/test_input_restrict.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_restrict.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_shutdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_shutdown.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_markdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_markdown.py:13: in <module>\n    import textual.widgets._markdown as MD\nsrc/textual/widgets/_markdown.py:19: in <module>\n    from ..app import ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/tree/test_node_refresh.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_node_refresh.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/option_list/test_option_list_movement.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/option_list/test_option_list_movement.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_visible.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_visible.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n=========================== short test summary info ============================\nERROR tests/test_reactive.py\nERROR tests/test_dynamic_bindings.py\nERROR tests/text_area/test_edit_via_api.py\nERROR tests/test_header.py\nERROR tests/test_app.py\nERROR tests/text_area/test_selection_bindings.py\nERROR tests/animations/test_tabs_underline_animation.py\nERROR tests/test_progress_bar.py\nERROR tests/test_tabbed_content.py\nERROR tests/test_overflow_change.py\nERROR tests/test_data_table.py\nERROR tests/input/test_input_value_visibility.py\nERROR tests/workers/test_worker.py\nERROR tests/test_call_x_schedulers.py\nERROR tests/test_widget.py\nERROR tests/text_area/test_edit_via_bindings.py\nERROR tests/animations/test_loading_indicator_animation.py\nERROR tests/text_area/test_messages.py\nERROR tests/text_area/test_languages.py\nERROR tests/css/test_css_reloading.py\nERROR tests/test_pilot.py\nERROR tests/suggester/test_input_suggestions.py\nERROR tests/test_query.py\nERROR tests/select/test_blank_and_clear.py\nERROR tests/select/test_value.py\nERROR tests/test_keys.py\nERROR tests/select/test_prompt.py\nERROR tests/input/test_input_validation.py\nERROR tests/text_area/test_setting_themes.py\nERROR tests/css/test_inheritance.py\nERROR tests/tree/test_directory_tree.py\nERROR tests/test_lazy.py\nERROR tests/text_area/test_selection.py\nERROR tests/test_containers.py\nERROR tests/test_message_pump.py\nERROR tests/css/test_screen_css.py\nERROR tests/listview/test_listview_initial_index.py\nERROR tests/test_animation.py\nERROR tests/test_border_subtitle.py\nERROR tests/select/test_empty_select.py\nERROR tests/tree/test_tree_availability.py\nERROR tests/test_driver.py\nERROR tests/animations/test_switch_animation.py\nERROR tests/test_focus.py\nERROR tests/test_widget_removing.py\nERROR tests/select/test_changed_message.py\nERROR tests/css/test_initial.py\nERROR tests/test_unmount.py\nERROR tests/toggles/test_radioset.py\nERROR tests/test_mount.py\nERROR tests/command_palette/test_events.py\nERROR tests/workers/test_worker_manager.py\nERROR tests/test_screens.py\nERROR tests/test_message_handling.py\nERROR tests/input/test_input_terminal_cursor.py\nERROR tests/test_loading.py\nERROR tests/test_on.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/test_data_bind.py\nERROR tests/css/test_nested_css.py\nERROR tests/animations/test_progress_bar_animation.py\nERROR tests/animations/test_scrolling_animation.py\nERROR tests/test_paste.py\nERROR tests/test_issue_4248.py\nERROR tests/workers/test_work_decorator.py\nERROR tests/css/test_programmatic_style_changes.py\nERROR tests/text_area/test_escape_binding.py\nERROR tests/listview/test_listview_navigation.py\nERROR tests/test_style_inheritance.py\nERROR tests/test_freeze.py\nERROR tests/test_disabled.py\nERROR tests/test_signal.py\nERROR tests/test_test_runner.py\nERROR tests/input/test_input_restrict.py\nERROR tests/test_shutdown.py\nERROR tests/test_markdown.py\nERROR tests/tree/test_node_refresh.py\nERROR tests/option_list/test_option_list_movement.py\nERROR tests/test_visible.py\n============================== 79 errors in 3.27s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_method_call_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_dynamic_bindings.py::test_dynamic_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_return_code_is_one_after_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_set_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_progress_bar.py::test_show_sub_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_overflow_change.py::test_overflow_change_updates_virtual_size_appropriately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_row_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_on_instantiation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_after_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_constructor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_applies_to_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_widget_under_another_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_invalid_css_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_show_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_fails_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_priority\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_assign_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_keys.py::test_character_bindings\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_file_not_found\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_builtin_themes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_returns_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_directory_tree.py::test_directory_tree_reloading_preserves_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_lazy.py::test_lazy\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_reverse_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_backward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_column_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste_read_only_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_get_child_by_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_column_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_horizontal_vs_horizontalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_with_call_next\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_initial_index.py::test_listview_initial_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_outside_screen_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_valid_empty\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_and_scheduled_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_border_subtitle.py::test_border_subtitle\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_visible_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set_while_selecting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_compute_first_time_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_enabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_pseudo_class\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_type_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_function_sum\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_message_control\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_on_blur_triggers_validation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children_match_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_tabs_moves_active_to_next_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_unsetting_tabbed_content_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_windows_newlines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/toggles/test_radioset.py::test_keyboard_navigation_with_disabled_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_inside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_always_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_row_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_all\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel_immediately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_non_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_text_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_get\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_updates_virtual_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_disabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_progress_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_enabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_unset_hover_highlight_when_no_table_cell_under_mouse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_handling.py::test_message_inheritance_namespace\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_value_to_blank_with_allow_blank_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_terminal_cursor_position_update_on_cursor_move\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_no_return_code_while_running\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_click_cell_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_outside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_schedule_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_setting_and_checking_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_loading.py::test_loading_disables_and_remove_scrollbars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_screen_always_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_arbitrary_attributes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabled_tab_cannot_be_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_does_not_move_to_invisible_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_all_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_selector_does_not_leak\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test__allow_scroll\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_no_duplicate_external_watchers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_up_does_not_give_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_enabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_forward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_value_is_blank_by_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change_when_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_initial_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_default_custom_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_bad_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_registering_and_setting_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_unknown_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_walk_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_label_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selection_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_after_value_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_inside_compose_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_focused\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_resize_terminal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_same_selection_does_not_post_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_focus_blur\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_language_to_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_header_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_empty_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_tab_within_tabbed_content_stays_isolated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_language_binary_missing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_enter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_issue_4248.py::test_issue_4248\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_star_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_at_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_movement_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate_to_externals\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_double_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_navigation.py::test_keyboard_navigation_with_disabled_items\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_default_return_code_is_zero\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_inheritance.py::test_text_style_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_with_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_none_validate_on_means_all_validations_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_empty_table_interactions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_message_queue_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor_respects_animate_parameter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clicking_border_link_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_picked_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value_after_deleting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_with_callable_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_offset_getter_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css_and_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_creating_disabled_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_center_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_set_return_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_animate_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_freeze.py::test_freeze\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_column_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_get_focusable_widget_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_multiple_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_paste_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_premature_reactive_call\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_printable_character\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_show_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_static_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_accept_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_initialize\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_middle_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_cannot_be_negative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_initial_terminal_cursor_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_does_not_deactivate_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_relative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text_maintain_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_edits_on_read_only_mode\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_wait_without_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_ui\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_indent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_in_tabbed_content_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_moves_to_visible_widgets_inside_invisible_containers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_assigned_after\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_opened_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_expands_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_vertical_vs_verticalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_default_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_line_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_down_gives_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key_invalid_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_option_highlighted_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_invalid_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_multiple_lines_selection_above\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_test_runner.py::test_run_test\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_restrict.py::test_bad_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_selecting_posts_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_unknown_theme_raises_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true_set_before_dom_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_button_pressed\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_default_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_tabs_does_not_change_active_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_attribute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_up_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal_parameters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_unknown_option_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_installed_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_first_tab_activates_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_ansi_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove_unmounted\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_with_allow_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_string_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_shutdown.py::test_shutdown\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_self_referential_deadlock\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language_existing_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_markdown.py::test_link_in_markdown_table_posts_message_when_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_auto_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_node_refresh.py::test_initial_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_not_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain_handles_inherited_visibility\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_disabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_false_always_update_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_scrollbar_zero_thickness\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_scrolling_cursor_into_view\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_get_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_hover_update_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_scheduling_animation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_all_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_labels\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_message_emission\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_mouse_leave\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/option_list/test_option_list_movement.py::test_keyboard_navigation_with_disabled_options\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_at_line_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_visible.py::test_visible_is_inherited\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding_missing_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_universal_selector_doesnt_select_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_last_tab_means_no_tab_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_multibyte\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_down_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_navigation_around_disabled_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_old_mac_newlines\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 79 errors\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/test_reactive.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_reactive.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/test_dynamic_bindings.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_dynamic_bindings.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/text_area/test_edit_via_api.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_api.py:11: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_header.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________ ERROR collecting tests/text_area/test_selection_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection_bindings.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______ ERROR collecting tests/animations/test_tabs_underline_animation.py ______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_tabs_underline_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________________ ERROR collecting tests/test_progress_bar.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_progress_bar.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/test_tabbed_content.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_tabbed_content.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/test_overflow_change.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_overflow_change.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________________ ERROR collecting tests/test_data_table.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_table.py:9: in <module>\n    from textual.app import App, ComposeResult, RenderableType\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________ ERROR collecting tests/input/test_input_value_visibility.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_value_visibility.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/workers/test_worker.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/test_call_x_schedulers.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_call_x_schedulers.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_widget.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________ ERROR collecting tests/text_area/test_edit_via_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_bindings.py:12: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____ ERROR collecting tests/animations/test_loading_indicator_animation.py _____\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_loading_indicator_animation.py:6: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________ ERROR collecting tests/text_area/test_messages.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_messages.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________ ERROR collecting tests/text_area/test_languages.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_languages.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/css/test_css_reloading.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_css_reloading.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_pilot.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________ ERROR collecting tests/suggester/test_input_suggestions.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/suggester/test_input_suggestions.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_query.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_query.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/select/test_blank_and_clear.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_blank_and_clear.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________________ ERROR collecting tests/select/test_value.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_value.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_keys.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_keys.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________________ ERROR collecting tests/select/test_prompt.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_prompt.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/input/test_input_validation.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_validation.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________ ERROR collecting tests/text_area/test_setting_themes.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_setting_themes.py:3: in <module>\n    from textual._text_area_theme import TextAreaTheme\nsrc/textual/_text_area_theme.py:8: in <module>\n    from textual.app import DEFAULT_COLORS\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________ ERROR collecting tests/tree/test_directory_tree.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_directory_tree.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_lazy.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_lazy.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________ ERROR collecting tests/text_area/test_selection.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________________ ERROR collecting tests/test_containers.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_containers.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________________ ERROR collecting tests/test_message_pump.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_pump.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/css/test_screen_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________ ERROR collecting tests/listview/test_listview_initial_index.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_initial_index.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________________ ERROR collecting tests/test_animation.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_animation.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/test_border_subtitle.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_border_subtitle.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________ ERROR collecting tests/select/test_empty_select.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_empty_select.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/tree/test_tree_availability.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_tree_availability.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_driver.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_driver.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________ ERROR collecting tests/animations/test_switch_animation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_switch_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_focus.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/test_widget_removing.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_removing.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/select/test_changed_message.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_changed_message.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_unmount.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/toggles/test_radioset.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/toggles/test_radioset.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_mount.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/command_palette/test_events.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/command_palette/test_events.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/workers/test_worker_manager.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker_manager.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_screens.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/test_message_handling.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_handling.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________ ERROR collecting tests/input/test_input_terminal_cursor.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_terminal_cursor.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_loading.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_loading.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n______________________ ERROR collecting tests/test_on.py _______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_on.py:9: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________________ ERROR collecting tests/test_data_bind.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_bind.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______ ERROR collecting tests/animations/test_progress_bar_animation.py _______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_progress_bar_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________ ERROR collecting tests/animations/test_scrolling_animation.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_scrolling_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________________ ERROR collecting tests/test_paste.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_paste.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________________ ERROR collecting tests/test_issue_4248.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_issue_4248.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________ ERROR collecting tests/workers/test_work_decorator.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_work_decorator.py:9: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n________ ERROR collecting tests/css/test_programmatic_style_changes.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_programmatic_style_changes.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________ ERROR collecting tests/text_area/test_escape_binding.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_escape_binding.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_________ ERROR collecting tests/listview/test_listview_navigation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_navigation.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/test_style_inheritance.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_inheritance.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_freeze.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_freeze.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________________ ERROR collecting tests/test_disabled.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_disabled.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_signal.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_signal.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n__________________ ERROR collecting tests/test_test_runner.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_test_runner.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_____________ ERROR collecting tests/input/test_input_restrict.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_restrict.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________________ ERROR collecting tests/test_shutdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_shutdown.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n___________________ ERROR collecting tests/test_markdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_markdown.py:13: in <module>\n    import textual.widgets._markdown as MD\nsrc/textual/widgets/_markdown.py:19: in <module>\n    from ..app import ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______________ ERROR collecting tests/tree/test_node_refresh.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_node_refresh.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n_______ ERROR collecting tests/option_list/test_option_list_movement.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/option_list/test_option_list_movement.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n____________________ ERROR collecting tests/test_visible.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_visible.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1451\nE       inline_no_clear: Don't clear the app output when exiting an inline app.\nE                           ^\nE   SyntaxError: unterminated string literal (detected at line 1451)\n=========================== short test summary info ============================\nERROR tests/test_reactive.py\nERROR tests/test_dynamic_bindings.py\nERROR tests/text_area/test_edit_via_api.py\nERROR tests/test_header.py\nERROR tests/test_app.py\nERROR tests/text_area/test_selection_bindings.py\nERROR tests/animations/test_tabs_underline_animation.py\nERROR tests/test_progress_bar.py\nERROR tests/test_tabbed_content.py\nERROR tests/test_overflow_change.py\nERROR tests/test_data_table.py\nERROR tests/input/test_input_value_visibility.py\nERROR tests/workers/test_worker.py\nERROR tests/test_call_x_schedulers.py\nERROR tests/test_widget.py\nERROR tests/text_area/test_edit_via_bindings.py\nERROR tests/animations/test_loading_indicator_animation.py\nERROR tests/text_area/test_messages.py\nERROR tests/text_area/test_languages.py\nERROR tests/css/test_css_reloading.py\nERROR tests/test_pilot.py\nERROR tests/suggester/test_input_suggestions.py\nERROR tests/test_query.py\nERROR tests/select/test_blank_and_clear.py\nERROR tests/select/test_value.py\nERROR tests/test_keys.py\nERROR tests/select/test_prompt.py\nERROR tests/input/test_input_validation.py\nERROR tests/text_area/test_setting_themes.py\nERROR tests/css/test_inheritance.py\nERROR tests/tree/test_directory_tree.py\nERROR tests/test_lazy.py\nERROR tests/text_area/test_selection.py\nERROR tests/test_containers.py\nERROR tests/test_message_pump.py\nERROR tests/css/test_screen_css.py\nERROR tests/listview/test_listview_initial_index.py\nERROR tests/test_animation.py\nERROR tests/test_border_subtitle.py\nERROR tests/select/test_empty_select.py\nERROR tests/tree/test_tree_availability.py\nERROR tests/test_driver.py\nERROR tests/animations/test_switch_animation.py\nERROR tests/test_focus.py\nERROR tests/test_widget_removing.py\nERROR tests/select/test_changed_message.py\nERROR tests/css/test_initial.py\nERROR tests/test_unmount.py\nERROR tests/toggles/test_radioset.py\nERROR tests/test_mount.py\nERROR tests/command_palette/test_events.py\nERROR tests/workers/test_worker_manager.py\nERROR tests/test_screens.py\nERROR tests/test_message_handling.py\nERROR tests/input/test_input_terminal_cursor.py\nERROR tests/test_loading.py\nERROR tests/test_on.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/test_data_bind.py\nERROR tests/css/test_nested_css.py\nERROR tests/animations/test_progress_bar_animation.py\nERROR tests/animations/test_scrolling_animation.py\nERROR tests/test_paste.py\nERROR tests/test_issue_4248.py\nERROR tests/workers/test_work_decorator.py\nERROR tests/css/test_programmatic_style_changes.py\nERROR tests/text_area/test_escape_binding.py\nERROR tests/listview/test_listview_navigation.py\nERROR tests/test_style_inheritance.py\nERROR tests/test_freeze.py\nERROR tests/test_disabled.py\nERROR tests/test_signal.py\nERROR tests/test_test_runner.py\nERROR tests/input/test_input_restrict.py\nERROR tests/test_shutdown.py\nERROR tests/test_markdown.py\nERROR tests/tree/test_node_refresh.py\nERROR tests/option_list/test_option_list_movement.py\nERROR tests/test_visible.py\n============================== 79 errors in 3.29s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_method_call_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_dynamic_bindings.py::test_dynamic_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_return_code_is_one_after_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_set_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_progress_bar.py::test_show_sub_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_overflow_change.py::test_overflow_change_updates_virtual_size_appropriately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_row_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_on_instantiation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_after_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_constructor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_applies_to_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_widget_under_another_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_invalid_css_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_show_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_fails_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_priority\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_assign_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_keys.py::test_character_bindings\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_file_not_found\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_builtin_themes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_returns_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_directory_tree.py::test_directory_tree_reloading_preserves_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_lazy.py::test_lazy\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_reverse_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_backward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_column_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste_read_only_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_get_child_by_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_column_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_horizontal_vs_horizontalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_with_call_next\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_initial_index.py::test_listview_initial_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_outside_screen_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_valid_empty\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_and_scheduled_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_border_subtitle.py::test_border_subtitle\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_visible_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set_while_selecting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_compute_first_time_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_enabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_pseudo_class\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_type_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_function_sum\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_message_control\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_on_blur_triggers_validation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children_match_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_tabs_moves_active_to_next_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_unsetting_tabbed_content_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_windows_newlines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/toggles/test_radioset.py::test_keyboard_navigation_with_disabled_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_inside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_always_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_row_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_all\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel_immediately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_non_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_text_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_get\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_updates_virtual_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_disabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_progress_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_enabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_unset_hover_highlight_when_no_table_cell_under_mouse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_handling.py::test_message_inheritance_namespace\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_value_to_blank_with_allow_blank_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_terminal_cursor_position_update_on_cursor_move\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_no_return_code_while_running\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_click_cell_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_outside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_schedule_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_setting_and_checking_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_loading.py::test_loading_disables_and_remove_scrollbars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_screen_always_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_arbitrary_attributes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabled_tab_cannot_be_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_does_not_move_to_invisible_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_all_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_selector_does_not_leak\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test__allow_scroll\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_no_duplicate_external_watchers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_up_does_not_give_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_enabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_forward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_value_is_blank_by_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change_when_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_initial_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_default_custom_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_bad_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_registering_and_setting_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_unknown_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_walk_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_label_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selection_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_after_value_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_inside_compose_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_focused\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_resize_terminal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_same_selection_does_not_post_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_focus_blur\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_language_to_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_header_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_empty_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_tab_within_tabbed_content_stays_isolated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_language_binary_missing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_enter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_issue_4248.py::test_issue_4248\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_star_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_at_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_movement_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate_to_externals\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_double_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_navigation.py::test_keyboard_navigation_with_disabled_items\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_default_return_code_is_zero\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_inheritance.py::test_text_style_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_with_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_none_validate_on_means_all_validations_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_empty_table_interactions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_message_queue_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor_respects_animate_parameter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clicking_border_link_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_picked_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value_after_deleting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_with_callable_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_offset_getter_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css_and_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_creating_disabled_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_center_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_set_return_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_animate_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_freeze.py::test_freeze\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_column_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_get_focusable_widget_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_multiple_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_paste_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_premature_reactive_call\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_printable_character\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_show_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_static_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_accept_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_initialize\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_middle_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_cannot_be_negative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_initial_terminal_cursor_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_does_not_deactivate_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_relative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text_maintain_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_edits_on_read_only_mode\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_wait_without_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_ui\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_indent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_in_tabbed_content_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_moves_to_visible_widgets_inside_invisible_containers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_assigned_after\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_opened_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_expands_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_vertical_vs_verticalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_default_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_line_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_down_gives_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key_invalid_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_option_highlighted_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_invalid_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_multiple_lines_selection_above\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_test_runner.py::test_run_test\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_restrict.py::test_bad_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_selecting_posts_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_unknown_theme_raises_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true_set_before_dom_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_button_pressed\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_default_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_tabs_does_not_change_active_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_attribute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_up_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal_parameters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_unknown_option_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_installed_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_first_tab_activates_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_ansi_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove_unmounted\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_with_allow_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_string_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_shutdown.py::test_shutdown\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_self_referential_deadlock\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language_existing_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_markdown.py::test_link_in_markdown_table_posts_message_when_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_auto_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_node_refresh.py::test_initial_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_not_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain_handles_inherited_visibility\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_disabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_false_always_update_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_scrollbar_zero_thickness\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_scrolling_cursor_into_view\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_get_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_hover_update_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_scheduling_animation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_all_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_labels\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_message_emission\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_mouse_leave\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/option_list/test_option_list_movement.py::test_keyboard_navigation_with_disabled_options\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_at_line_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_visible.py::test_visible_is_inherited\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding_missing_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_universal_selector_doesnt_select_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_last_tab_means_no_tab_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_multibyte\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_down_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_navigation_around_disabled_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_old_mac_newlines\n\n"], "textual-src/textual/app.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_auto_refresh.py F                                             [ 33%]\ntests/test_concurrency.py F                                              [ 66%]\ntests/test_win_sleep.py s                                                [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_auto_refresh _______________________________\n\n    def test_auto_refresh():\n        app = RefreshApp()\n    \n        async def quit_after(pilot: Pilot) -> None:\n            await asyncio.sleep(1)\n    \n>       elapsed = app.run(auto_pilot=quit_after, headless=True)\nE       TypeError: App.run() got multiple values for argument 'headless'\n\ntests/test_auto_refresh.py:30: TypeError\n____________________________ test_call_from_thread _____________________________\n\n    def test_call_from_thread():\n        \"\"\"Test the call_from_thread method.\"\"\"\n    \n        class BackgroundThread(Thread):\n            \"\"\"A background thread which will modify app in some way.\"\"\"\n    \n            def __init__(self, app: App[object]) -> None:\n                self.app = app\n                super().__init__()\n    \n            def run(self) -> None:\n                def write_stuff(text: str) -> None:\n                    \"\"\"Write stuff to a widget.\"\"\"\n                    self.app.query_one(RichLog).write(text)\n    \n                self.app.call_from_thread(write_stuff, \"Hello\")\n                # Exit the app with a code we can assert\n                self.app.call_from_thread(self.app.exit, 123)\n    \n        class ThreadTestApp(App[object]):\n            \"\"\"Trivial app with a single widget.\"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield RichLog()\n    \n            def on_ready(self) -> None:\n                \"\"\"Launch a thread which will modify the app.\"\"\"\n                try:\n                    self.call_from_thread(print)\n                except RuntimeError as error:\n                    # Calling this from the same thread as the app is an error\n                    self._runtime_error = error\n                BackgroundThread(self).start()\n    \n        app = ThreadTestApp()\n>       result = app.run(headless=True, size=(80, 24))\nE       TypeError: App.run() got multiple values for argument 'headless'\n\ntests/test_concurrency.py:52: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_auto_refresh.py::test_auto_refresh - TypeError: App.run() g...\nFAILED tests/test_concurrency.py::test_call_from_thread - TypeError: App.run(...\n========================= 2 failed, 1 skipped in 0.15s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_auto_refresh.py F                                             [ 33%]\ntests/test_concurrency.py F                                              [ 66%]\ntests/test_win_sleep.py s                                                [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_auto_refresh _______________________________\n\n    def test_auto_refresh():\n        app = RefreshApp()\n    \n        async def quit_after(pilot: Pilot) -> None:\n            await asyncio.sleep(1)\n    \n>       elapsed = app.run(auto_pilot=quit_after, headless=True)\nE       TypeError: App.run() got multiple values for argument 'headless'\n\ntests/test_auto_refresh.py:30: TypeError\n____________________________ test_call_from_thread _____________________________\n\n    def test_call_from_thread():\n        \"\"\"Test the call_from_thread method.\"\"\"\n    \n        class BackgroundThread(Thread):\n            \"\"\"A background thread which will modify app in some way.\"\"\"\n    \n            def __init__(self, app: App[object]) -> None:\n                self.app = app\n                super().__init__()\n    \n            def run(self) -> None:\n                def write_stuff(text: str) -> None:\n                    \"\"\"Write stuff to a widget.\"\"\"\n                    self.app.query_one(RichLog).write(text)\n    \n                self.app.call_from_thread(write_stuff, \"Hello\")\n                # Exit the app with a code we can assert\n                self.app.call_from_thread(self.app.exit, 123)\n    \n        class ThreadTestApp(App[object]):\n            \"\"\"Trivial app with a single widget.\"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield RichLog()\n    \n            def on_ready(self) -> None:\n                \"\"\"Launch a thread which will modify the app.\"\"\"\n                try:\n                    self.call_from_thread(print)\n                except RuntimeError as error:\n                    # Calling this from the same thread as the app is an error\n                    self._runtime_error = error\n                BackgroundThread(self).start()\n    \n        app = ThreadTestApp()\n>       result = app.run(headless=True, size=(80, 24))\nE       TypeError: App.run() got multiple values for argument 'headless'\n\ntests/test_concurrency.py:52: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_auto_refresh.py::test_auto_refresh - TypeError: App.run() g...\nFAILED tests/test_concurrency.py::test_call_from_thread - TypeError: App.run(...\n========================= 2 failed, 1 skipped in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_auto_refresh.py F                                             [ 33%]\ntests/test_concurrency.py F                                              [ 66%]\ntests/test_win_sleep.py s                                                [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_auto_refresh _______________________________\n\n    def test_auto_refresh():\n        app = RefreshApp()\n    \n        async def quit_after(pilot: Pilot) -> None:\n            await asyncio.sleep(1)\n    \n>       elapsed = app.run(auto_pilot=quit_after, headless=True)\nE       AttributeError: 'RefreshApp' object has no attribute 'run'\n\ntests/test_auto_refresh.py:30: AttributeError\n____________________________ test_call_from_thread _____________________________\n\n    def test_call_from_thread():\n        \"\"\"Test the call_from_thread method.\"\"\"\n    \n        class BackgroundThread(Thread):\n            \"\"\"A background thread which will modify app in some way.\"\"\"\n    \n            def __init__(self, app: App[object]) -> None:\n                self.app = app\n                super().__init__()\n    \n            def run(self) -> None:\n                def write_stuff(text: str) -> None:\n                    \"\"\"Write stuff to a widget.\"\"\"\n                    self.app.query_one(RichLog).write(text)\n    \n                self.app.call_from_thread(write_stuff, \"Hello\")\n                # Exit the app with a code we can assert\n                self.app.call_from_thread(self.app.exit, 123)\n    \n        class ThreadTestApp(App[object]):\n            \"\"\"Trivial app with a single widget.\"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield RichLog()\n    \n            def on_ready(self) -> None:\n                \"\"\"Launch a thread which will modify the app.\"\"\"\n                try:\n                    self.call_from_thread(print)\n                except RuntimeError as error:\n                    # Calling this from the same thread as the app is an error\n                    self._runtime_error = error\n                BackgroundThread(self).start()\n    \n        app = ThreadTestApp()\n>       result = app.run(headless=True, size=(80, 24))\nE       AttributeError: 'ThreadTestApp' object has no attribute 'run'\n\ntests/test_concurrency.py:52: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_auto_refresh.py::test_auto_refresh - AttributeError: 'Refre...\nFAILED tests/test_concurrency.py::test_call_from_thread - AttributeError: 'Th...\n========================= 2 failed, 1 skipped in 0.15s =========================\n\n"], "textual-src/textual/app.py-switch_mode": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________________ ERROR collecting tests/css/test_screen_css.py _________________\nImportError while importing test module '/root/repos/py_data/textual/tests/css/test_screen_css.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:1864: in App\n    from textual.app import App, Compositor, Mount\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n=========================== short test summary info ============================\nERROR tests/css/test_screen_css.py\n=============================== 1 error in 0.15s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/css/test_screen_css.py FFF                                         [100%]\n\n=================================== FAILURES ===================================\n_________________ test_screen_css_switch_mode_screen_instance __________________\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3112: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3283: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.switch_mode(\"base\")\nE       AttributeError: 'MyApp' object has no attribute 'switch_mode'\n\ntests/css/test_screen_css.py:241: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:241 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   238 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   239 \u2502   \u2502                                                                  \u2502\n\u2502   240 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 241 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   242 \u2502                                                                      \u2502\n\u2502   243 \u2502   app = MyApp()                                                      \u2502\n\u2502   244 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_mode'\n_______________ test_screen_css_switch_mode_screen_type_by_name ________________\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3112: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3283: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.switch_mode(\"base\")\nE       AttributeError: 'MyApp' object has no attribute 'switch_mode'\n\ntests/css/test_screen_css.py:299: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:299 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   297 \u2502   \u2502                                                                  \u2502\n\u2502   298 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 299 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502   302 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_mode'\n_____________ test_screen_css_switch_mode_screen_instance_by_name ______________\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3112: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3283: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.switch_mode(\"base\")\nE       AttributeError: 'MyApp' object has no attribute 'switch_mode'\n\ntests/css/test_screen_css.py:270: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:270 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   267 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   268 \u2502   \u2502                                                                  \u2502\n\u2502   269 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 270 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   271 \u2502                                                                      \u2502\n\u2502   272 \u2502   app = MyApp()                                                      \u2502\n\u2502   273 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_mode'\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n======================== 3 failed, 4 warnings in 0.86s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/css/test_screen_css.py FFF                                         [100%]\n\n=================================== FAILURES ===================================\n_________________ test_screen_css_switch_mode_screen_instance __________________\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": ScreenWithCSS(),\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3113: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3284: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.switch_mode(\"base\")\nE       AttributeError: 'MyApp' object has no attribute 'switch_mode'\n\ntests/css/test_screen_css.py:241: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:241 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   238 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   239 \u2502   \u2502                                                                  \u2502\n\u2502   240 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 241 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   242 \u2502                                                                      \u2502\n\u2502   243 \u2502   app = MyApp()                                                      \u2502\n\u2502   244 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_mode'\n_______________ test_screen_css_switch_mode_screen_type_by_name ________________\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen type name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS,\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3113: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3284: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.switch_mode(\"base\")\nE       AttributeError: 'MyApp' object has no attribute 'switch_mode'\n\ntests/css/test_screen_css.py:299: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:299 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   297 \u2502   \u2502                                                                  \u2502\n\u2502   298 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 299 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502   302 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_mode'\n_____________ test_screen_css_switch_mode_screen_instance_by_name ______________\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"o\")\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_switch_mode_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a mode with a screen instance name.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\n                \"screenwithcss\": ScreenWithCSS(),\n            }\n    \n            MODES = {\n                \"base\": BaseScreen(),\n                \"mode\": \"screenwithcss\",\n            }\n    \n            def key_p(self):\n                self.switch_mode(\"mode\")\n    \n            def key_o(self):\n                self.switch_mode(\"base\")\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3113: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3284: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.switch_mode(\"base\")\nE       AttributeError: 'MyApp' object has no attribute 'switch_mode'\n\ntests/css/test_screen_css.py:270: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:270 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   267 \u2502   \u2502   \u2502   self.switch_mode(\"mode\")                                   \u2502\n\u2502   268 \u2502   \u2502                                                                  \u2502\n\u2502   269 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 270 \u2502   \u2502   \u2502   self.switch_mode(\"base\")                                   \u2502\n\u2502   271 \u2502                                                                      \u2502\n\u2502   272 \u2502   app = MyApp()                                                      \u2502\n\u2502   273 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'switch_mode'\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n======================== 3 failed, 4 warnings in 0.86s =========================\n\n"], "textual-src/textual/app.py-push_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 7 errors\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting tests/test_header.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_header.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n_____________________ ERROR collecting tests/test_focus.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_focus.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n________________ ERROR collecting tests/css/test_screen_css.py _________________\nImportError while importing test module '/root/repos/py_data/textual/tests/css/test_screen_css.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n____________________ ERROR collecting tests/test_screens.py ____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_screens.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n____________________ ERROR collecting tests/test_widget.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_widget.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n____________________ ERROR collecting tests/test_unmount.py ____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_unmount.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n_____________________ ERROR collecting tests/test_pilot.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_pilot.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2078: in App\n    from textual.app import App, Compositor, Screen, CompositorKey, ScreenQuery\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n=========================== short test summary info ============================\nERROR tests/test_header.py\nERROR tests/test_focus.py\nERROR tests/css/test_screen_css.py\nERROR tests/test_screens.py\nERROR tests/test_widget.py\nERROR tests/test_unmount.py\nERROR tests/test_pilot.py\n============================== 7 errors in 0.41s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_allow_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_receives_mouse_move_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_exception_catching_widget_compose\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/test_header.py F                                                   [  3%]\ntests/test_focus.py F                                                    [  6%]\ntests/css/test_screen_css.py F                                           [  9%]\ntests/test_focus.py F                                                    [ 12%]\ntests/test_header.py F                                                   [ 16%]\ntests/test_screens.py FF                                                 [ 22%]\ntests/test_header.py F                                                   [ 25%]\ntests/css/test_screen_css.py F                                           [ 29%]\ntests/test_screens.py F                                                  [ 32%]\ntests/test_widget.py F                                                   [ 35%]\ntests/test_header.py F                                                   [ 38%]\ntests/css/test_screen_css.py F                                           [ 41%]\ntests/test_screens.py FF                                                 [ 48%]\ntests/test_header.py F                                                   [ 51%]\ntests/test_screens.py FF                                                 [ 58%]\ntests/test_focus.py F                                                    [ 61%]\ntests/test_screens.py FF                                                 [ 67%]\ntests/test_unmount.py F                                                  [ 70%]\ntests/test_header.py F                                                   [ 74%]\ntests/test_screens.py F                                                  [ 77%]\ntests/test_header.py F                                                   [ 80%]\ntests/test_screens.py FF                                                 [ 87%]\ntests/css/test_screen_css.py F                                           [ 90%]\ntests/test_pilot.py F                                                    [ 93%]\ntests/test_screens.py F                                                  [ 96%]\ntests/test_header.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n______________________ test_screen_title_none_is_ignored _______________________\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"app title\"\n\ntests/test_header.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n>       screen = app.screen\n\ntests/test_focus.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'})\n\n    @property\n    def screen(self) -> Screen[object]:\n        \"\"\"The current active screen.\n    \n        Returns:\n            The currently active (visible) screen.\n    \n        Raises:\n            ScreenStackError: If there are no screens on the stack.\n        \"\"\"\n        try:\n            return self._screen_stack[-1]\n        except KeyError:\n            raise UnknownModeError(f\"No known mode {self._current_mode!r}\") from None\n        except IndexError:\n>           raise ScreenStackError(\"No screens on stack\") from None\nE           textual.app.ScreenStackError: No screens on stack\n\nsrc/textual/app.py:1023: ScreenStackError\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_______________________________ test_allow_focus _______________________________\n\n    def test_allow_focus():\n        \"\"\"Test allow_focus and allow_focus_children are called and the result used.\"\"\"\n        focusable_allow_focus_called = False\n        non_focusable_allow_focus_called = False\n    \n        class Focusable(Widget, can_focus=False):\n            def allow_focus(self) -> bool:\n                nonlocal focusable_allow_focus_called\n                focusable_allow_focus_called = True\n                return True\n    \n        class NonFocusable(Container, can_focus=True):\n            def allow_focus(self) -> bool:\n                nonlocal non_focusable_allow_focus_called\n                non_focusable_allow_focus_called = True\n                return False\n    \n        class FocusableContainer(Container, can_focus_children=False):\n            def allow_focus_children(self) -> bool:\n                return True\n    \n        class NonFocusableContainer(Container, can_focus_children=True):\n            def allow_focus_children(self) -> bool:\n                return False\n    \n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n>       app.screen._add_children(\n            Focusable(id=\"foo\"),\n            NonFocusable(id=\"bar\"),\n            FocusableContainer(Button(\"egg\", id=\"egg\")),\n            NonFocusableContainer(Button(\"EGG\", id=\"qux\")),\n        )\n\ntests/test_focus.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'})\n\n    @property\n    def screen(self) -> Screen[object]:\n        \"\"\"The current active screen.\n    \n        Returns:\n            The currently active (visible) screen.\n    \n        Raises:\n            ScreenStackError: If there are no screens on the stack.\n        \"\"\"\n        try:\n            return self._screen_stack[-1]\n        except KeyError:\n            raise UnknownModeError(f\"No known mode {self._current_mode!r}\") from None\n        except IndexError:\n>           raise ScreenStackError(\"No screens on stack\") from None\nE           textual.app.ScreenStackError: No screens on stack\n\nsrc/textual/app.py:1023: ScreenStackError\n____________________ test_screen_sub_title_none_is_ignored _____________________\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"app sub-title\"\n\ntests/test_header.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_____________________________ test_dismiss_action ______________________________\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"y\")\n>           assert app.bingo\nE           AssertionError: assert False\nE            +  where False = MyApp(title='MyApp', classes={'-dark-mode'}).bingo\n\ntests/test_screens.py:324: AssertionError\n_________________ test_push_screen_wait_for_dismiss_no_worker __________________\n\n    async def test_push_screen_wait_for_dismiss_no_worker() -> None:\n        \"\"\"Test wait_for_dismiss raises NoActiveWorker when not using workers.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # using `wait_for_dismiss` outside of a worker should raise NoActiveWorker\n        with pytest.raises(NoActiveWorker):\n>           async with app.run_test() as pilot:\n\ntests/test_screens.py:498: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3087: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3257: in _on_key\n    if not (await self._check_bindings(event.key)):\nsrc/textual/app.py:3023: in _check_bindings\n    if await self.run_action(binding.action, namespace):\nsrc/textual/app.py:3159: in run_action\n    return await self._dispatch_action(action_target, action_name, params)\nsrc/textual/app.py:3192: in _dispatch_action\n    await invoke(public_method, *params)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:492: in action_exit\n    result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = QuitScreen(), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before QuitScreen() is mounted\n\nsrc/textual/widget.py:947: MountError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:492 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   489 \u2502   \u2502   BINDINGS = [(\"x\", \"exit\")]                                     \u2502\n\u2502   490 \u2502   \u2502                                                                  \u2502\n\u2502   491 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 492 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   493 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   494 \u2502                                                                      \u2502\n\u2502   495 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss_no_w\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502                                                                 \u2502\n\u2502   2100 \u2502   \u2502   # Push the screen onto the screen stack                       \u2502\n\u2502   2101 \u2502   \u2502   self._load_screen_css(screen)                                 \u2502\n\u2502 \u2771 2102 \u2502   \u2502   await screen.mount()                                          \u2502\n\u2502   2103 \u2502   \u2502                                                                 \u2502\n\u2502   2104 \u2502   \u2502   # If wait_for_dismiss is True, return an awaitable that await \u2502\n\u2502   2105 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:947 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    944 \u2502   \u2502   if self._closing:                                             \u2502\n\u2502    945 \u2502   \u2502   \u2502   return AwaitMount(self, [])                               \u2502\n\u2502    946 \u2502   \u2502   if not self.is_attached:                                      \u2502\n\u2502 \u2771  947 \u2502   \u2502   \u2502   raise MountError(f\"Can't mount widget(s) before {self!r}  \u2502\n\u2502    948 \u2502   \u2502   # Check for duplicate IDs in the incoming widgets             \u2502\n\u2502    949 \u2502   \u2502   ids_to_mount = [                                              \u2502\n\u2502    950 \u2502   \u2502   \u2502   widget_id for widget in widgets if (widget_id := widget.i \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502   after = None         \u2502                                                   \u2502\n\u2502 \u2502  before = None         \u2502                                                   \u2502\n\u2502 \u2502    self = QuitScreen() \u2502                                                   \u2502\n\u2502 \u2502 widgets = ()           \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nMountError: Can't mount widget(s) before QuitScreen() is mounted\n_______________ test_screen_sub_title_reactive_updates_sub_title _______________\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.sub_title = \"new screen sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"new screen sub-title\"\n\ntests/test_header.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n        async with app.run_test() as pilot:\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n>           assert counter == 1\nE           assert 0 == 1\n\ntests/css/test_screen_css.py:103: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3087: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3258: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:80: in key_o\n    self.pop_screen()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def pop_screen(self) -> AwaitComplete:\n        \"\"\"Pop the current [screen](/guide/screens) from the stack, and switch to the previous screen.\n    \n        Returns:\n            The screen that was replaced.\n        \"\"\"\n    \n        screen_stack = self._screen_stack\n        if len(screen_stack) <= 1:\n>           raise ScreenStackError(\n                \"Can't pop screen; there must be at least one screen on the stack\"\n            )\nE           textual.app.ScreenStackError: Can't pop screen; there must be at least one screen on the stack\n\nsrc/textual/app.py:2245: ScreenStackError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:80 in key_o         \u2502\n\u2502                                                                              \u2502\n\u2502    77 \u2502   \u2502   \u2502   self.push_screen(ScreenWithCSS())                          \u2502\n\u2502    78 \u2502   \u2502                                                                  \u2502\n\u2502    79 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771  80 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502    81 \u2502                                                                      \u2502\n\u2502    82 \u2502   counter = 0                                                        \u2502\n\u2502    83                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2245 in pop_screen            \u2502\n\u2502                                                                              \u2502\n\u2502   2242 \u2502   \u2502                                                                 \u2502\n\u2502   2243 \u2502   \u2502   screen_stack = self._screen_stack                             \u2502\n\u2502   2244 \u2502   \u2502   if len(screen_stack) <= 1:                                    \u2502\n\u2502 \u2771 2245 \u2502   \u2502   \u2502   raise ScreenStackError(                                   \u2502\n\u2502   2246 \u2502   \u2502   \u2502   \u2502   \"Can't pop screen; there must be at least one screen  \u2502\n\u2502   2247 \u2502   \u2502   \u2502   )                                                         \u2502\n\u2502   2248                                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 screen_stack = [Screen(id='_default')]                      \u2502              \u2502\n\u2502 \u2502         self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nScreenStackError: Can't pop screen; there must be at least one screen on the \nstack\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyScreen(), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before MyScreen() is mounted\n\nsrc/textual/widget.py:947: MountError\n______________________________ test_compose_order ______________________________\n\n    async def test_compose_order() -> None:\n        from textual.containers import Horizontal\n        from textual.screen import Screen\n        from textual.widgets import Select\n    \n        class MyScreen(Screen):\n            def on_mount(self) -> None:\n                self.query_one(Select).value = 1\n    \n            def compose(self) -> ComposeResult:\n                yield Horizontal(\n                    Select(((str(n), n) for n in range(10)), id=\"select\"),\n                    id=\"screen-horizontal\",\n                )\n    \n        class SelectBugApp(App[None]):\n            async def on_mount(self):\n                await self.push_screen(MyScreen(id=\"my-screen\"))\n                self.query_one(Select)\n    \n        app = SelectBugApp()\n        messages: list[Message] = []\n    \n>       async with app.run_test(message_hook=messages.append) as pilot:\n\ntests/test_widget.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2567: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2514: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3087: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:287: in on_mount\n    await self.push_screen(MyScreen(id=\"my-screen\"))\nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyScreen(id='my-screen'), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before MyScreen(id='my-screen') is mounted\n\nsrc/textual/widget.py:947: MountError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:287 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   284 \u2502                                                                      \u2502\n\u2502   285 \u2502   class SelectBugApp(App[None]):                                     \u2502\n\u2502   286 \u2502   \u2502   async def on_mount(self):                                      \u2502\n\u2502 \u2771 287 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"my-screen\"))           \u2502\n\u2502   288 \u2502   \u2502   \u2502   self.query_one(Select)                                     \u2502\n\u2502   289 \u2502                                                                      \u2502\n\u2502   290 \u2502   app = SelectBugApp()                                               \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_widget.test_compose_order.<locals>.MyScreen'>     \u2502 \u2502\n\u2502 \u2502   Select = <class 'textual.widgets._select.Select'>                      \u2502 \u2502\n\u2502 \u2502     self = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502                                                                 \u2502\n\u2502   2100 \u2502   \u2502   # Push the screen onto the screen stack                       \u2502\n\u2502   2101 \u2502   \u2502   self._load_screen_css(screen)                                 \u2502\n\u2502 \u2771 2102 \u2502   \u2502   await screen.mount()                                          \u2502\n\u2502   2103 \u2502   \u2502                                                                 \u2502\n\u2502   2104 \u2502   \u2502   # If wait_for_dismiss is True, return an awaitable that await \u2502\n\u2502   2105 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                            \u2502\n\u2502 \u2502         callback = None                       \u2502                            \u2502\n\u2502 \u2502           screen = MyScreen(id='my-screen')   \u2502                            \u2502\n\u2502 \u2502             self = SelectBugApp(              \u2502                            \u2502\n\u2502 \u2502                    \u2502   title='SelectBugApp',  \u2502                            \u2502\n\u2502 \u2502                    \u2502   classes={              \u2502                            \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'       \u2502                            \u2502\n\u2502 \u2502                    \u2502   }                      \u2502                            \u2502\n\u2502 \u2502                    )                          \u2502                            \u2502\n\u2502 \u2502 wait_for_dismiss = False                      \u2502                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:947 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    944 \u2502   \u2502   if self._closing:                                             \u2502\n\u2502    945 \u2502   \u2502   \u2502   return AwaitMount(self, [])                               \u2502\n\u2502    946 \u2502   \u2502   if not self.is_attached:                                      \u2502\n\u2502 \u2771  947 \u2502   \u2502   \u2502   raise MountError(f\"Can't mount widget(s) before {self!r}  \u2502\n\u2502    948 \u2502   \u2502   # Check for duplicate IDs in the incoming widgets             \u2502\n\u2502    949 \u2502   \u2502   ids_to_mount = [                                              \u2502\n\u2502    950 \u2502   \u2502   \u2502   widget_id for widget in widgets if (widget_id := widget.i \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                       \u2502\n\u2502 \u2502   after = None                     \u2502                                       \u2502\n\u2502 \u2502  before = None                     \u2502                                       \u2502\n\u2502 \u2502    self = MyScreen(id='my-screen') \u2502                                       \u2502\n\u2502 \u2502 widgets = ()                       \u2502                                       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nMountError: Can't mount widget(s) before MyScreen(id='my-screen') is mounted\n________________ test_screen_sub_title_overrides_app_sub_title _________________\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert len(app.screen._result_callbacks) == 1\nE           AssertionError: assert 0 == 1\nE            +  where 0 = len([])\nE            +    where [] = Screen(id='_default')._result_callbacks\nE            +      where Screen(id='_default') = MyApp(title='MyApp', classes={'-dark-mode'}).screen\n\ntests/test_screens.py:371: AssertionError\n______________________ test_push_screen_wait_for_dismiss _______________________\n\n    async def test_push_screen_wait_for_dismiss() -> None:\n        \"\"\"Test push_screen returns result.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            @work\n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # Press X to exit, then Y to dismiss, expect True result\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ScreensApp(title='ScreensApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n            await pilot._wait_for_screen()\n            yield pilot\n        finally:\n            # Shutdown the app cleanly\n            await app._shutdown()\n            await app_task\n            # Re-raise the exception which caused panic so test frameworks are aware\n            if self._exception:\n>               raise self._exception\nE               textual.worker.WorkerFailed: Worker raised exception: MountError(\"Can't mount widget(s) before QuitScreen() is mounted\")\n\nsrc/textual/app.py:1492: WorkerFailed\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:365 in _run                \u2502\n\u2502                                                                              \u2502\n\u2502   362 \u2502   \u2502   self.state = WorkerState.RUNNING                               \u2502\n\u2502   363 \u2502   \u2502   app.log.worker(self)                                           \u2502\n\u2502   364 \u2502   \u2502   try:                                                           \u2502\n\u2502 \u2771 365 \u2502   \u2502   \u2502   self._result = await self.run()                            \u2502\n\u2502   366 \u2502   \u2502   except asyncio.CancelledError as error:                        \u2502\n\u2502   367 \u2502   \u2502   \u2502   self.state = WorkerState.CANCELLED                         \u2502\n\u2502   368 \u2502   \u2502   \u2502   self._error = error                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502           app = ScreensApp(title='ScreensApp', classes={'-dark-mode'})   \u2502 \u2502\n\u2502 \u2502         error = MountError(\"Can't mount widget(s) before QuitScreen() is \u2502 \u2502\n\u2502 \u2502                 mounted\")                                                \u2502 \u2502\n\u2502 \u2502          self = <Worker                                                  \u2502 \u2502\n\u2502 \u2502                 \u2502   ERROR                                                \u2502 \u2502\n\u2502 \u2502                 \u2502   name='action_exit'                                   \u2502 \u2502\n\u2502 \u2502                 \u2502   description='action_exit()'                          \u2502 \u2502\n\u2502 \u2502                 >                                                        \u2502 \u2502\n\u2502 \u2502     Traceback = <class 'rich.traceback.Traceback'>                       \u2502 \u2502\n\u2502 \u2502 worker_failed = WorkerFailed('Worker raised exception:                   \u2502 \u2502\n\u2502 \u2502                 MountError(\"Can\\'t mount widget(s) before QuitScreen()   \u2502 \u2502\n\u2502 \u2502                 is mounted\")')                                           \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:349 in run                 \u2502\n\u2502                                                                              \u2502\n\u2502   346 \u2502   \u2502   Returns:                                                       \u2502\n\u2502   347 \u2502   \u2502   \u2502   Return value of the work.                                  \u2502\n\u2502   348 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502 \u2771 349 \u2502   \u2502   return await (                                                 \u2502\n\u2502   350 \u2502   \u2502   \u2502   self._run_threaded() if self._thread_worker else self._run \u2502\n\u2502   351 \u2502   \u2502   )                                                              \u2502\n\u2502   352                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:334 in _run_async          \u2502\n\u2502                                                                              \u2502\n\u2502   331 \u2502   \u2502   \u2502   or hasattr(self._work, \"func\")                             \u2502\n\u2502   332 \u2502   \u2502   \u2502   and inspect.iscoroutinefunction(self._work.func)           \u2502\n\u2502   333 \u2502   \u2502   ):                                                             \u2502\n\u2502 \u2771 334 \u2502   \u2502   \u2502   return await self._work()                                  \u2502\n\u2502   335 \u2502   \u2502   elif inspect.isawaitable(self._work):                          \u2502\n\u2502   336 \u2502   \u2502   \u2502   return await self._work                                    \u2502\n\u2502   337 \u2502   \u2502   elif callable(self._work):                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:457 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   454 \u2502   \u2502                                                                  \u2502\n\u2502   455 \u2502   \u2502   @work                                                          \u2502\n\u2502   456 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 457 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   458 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   459 \u2502                                                                      \u2502\n\u2502   460 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss.<loc\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502                                                                 \u2502\n\u2502   2100 \u2502   \u2502   # Push the screen onto the screen stack                       \u2502\n\u2502   2101 \u2502   \u2502   self._load_screen_css(screen)                                 \u2502\n\u2502 \u2771 2102 \u2502   \u2502   await screen.mount()                                          \u2502\n\u2502   2103 \u2502   \u2502                                                                 \u2502\n\u2502   2104 \u2502   \u2502   # If wait_for_dismiss is True, return an awaitable that await \u2502\n\u2502   2105 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:947 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    944 \u2502   \u2502   if self._closing:                                             \u2502\n\u2502    945 \u2502   \u2502   \u2502   return AwaitMount(self, [])                               \u2502\n\u2502    946 \u2502   \u2502   if not self.is_attached:                                      \u2502\n\u2502 \u2771  947 \u2502   \u2502   \u2502   raise MountError(f\"Can't mount widget(s) before {self!r}  \u2502\n\u2502    948 \u2502   \u2502   # Check for duplicate IDs in the incoming widgets             \u2502\n\u2502    949 \u2502   \u2502   ids_to_mount = [                                              \u2502\n\u2502    950 \u2502   \u2502   \u2502   widget_id for widget in widgets if (widget_id := widget.i \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502   after = None         \u2502                                                   \u2502\n\u2502 \u2502  before = None         \u2502                                                   \u2502\n\u2502 \u2502    self = QuitScreen() \u2502                                                   \u2502\n\u2502 \u2502 widgets = ()           \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nMountError: Can't mount widget(s) before QuitScreen() is mounted\n___________________ test_screen_title_reactive_updates_title ___________________\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.title = \"new screen title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"new screen title\"\n\ntests/test_header.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n        async with app.run_test():\n            MyApp.AUTO_FOCUS = \"Input\"\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyScreen(), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before MyScreen() is mounted\n\nsrc/textual/widget.py:947: MountError\n____________________ test_screen_receives_mouse_move_events ____________________\n\n    async def test_screen_receives_mouse_move_events():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        mouse_offset = Offset(1, 1)\n    \n        async with SimpleApp().run_test() as pilot:\n            await pilot.hover(None, mouse_offset)\n    \n>       assert len(MouseMoveRecordingScreen.mouse_events) == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = len([])\nE        +    where [] = <class 'tests.test_screens.test_screen_receives_mouse_move_events.<locals>.MouseMoveRecordingScreen'>.mouse_events\n\ntests/test_screens.py:397: AssertionError\n_______________________________ test_focus_chain _______________________________\n\n    def test_focus_chain():\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n>       screen = app.screen\n\ntests/test_focus.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'})\n\n    @property\n    def screen(self) -> Screen[object]:\n        \"\"\"The current active screen.\n    \n        Returns:\n            The currently active (visible) screen.\n    \n        Raises:\n            ScreenStackError: If there are no screens on the stack.\n        \"\"\"\n        try:\n            return self._screen_stack[-1]\n        except KeyError:\n            raise UnknownModeError(f\"No known mode {self._current_mode!r}\") from None\n        except IndexError:\n>           raise ScreenStackError(\"No screens on stack\") from None\nE           textual.app.ScreenStackError: No screens on stack\n\nsrc/textual/app.py:1023: ScreenStackError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n>       await app.push_screen(\"screen1\")\n\ntests/test_screens.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2101: in push_screen\n    self._load_screen_css(screen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'})\nscreen = (Screen(name='screen1'), <textual.widget.AwaitMount object at 0x7f917c097880>)\n\n    def _load_screen_css(self, screen: Screen):\n        \"\"\"Loads the CSS associated with a screen.\"\"\"\n    \n        if self.css_monitor is not None:\n            self.css_monitor.add_paths(screen.css_path)\n    \n        update = False\n>       for path in screen.css_path:\nE       AttributeError: 'tuple' object has no attribute 'css_path'\n\nsrc/textual/app.py:2017: AttributeError\n_________________________ test_dismiss_non_top_screen __________________________\n\n    async def test_dismiss_non_top_screen():\n        class MyApp(App[None]):\n            async def key_p(self) -> None:\n                self.bottom = Screen()\n                top = Screen()\n                await self.push_screen(self.bottom)\n                await self.push_screen(top)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3087: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3258: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:298: in key_p\n    await self.push_screen(self.bottom)\nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before Screen() is mounted\n\nsrc/textual/widget.py:947: MountError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:298 in key_p               \u2502\n\u2502                                                                              \u2502\n\u2502   295 \u2502   \u2502   async def key_p(self) -> None:                                 \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.bottom = Screen()                                     \u2502\n\u2502   297 \u2502   \u2502   \u2502   top = Screen()                                             \u2502\n\u2502 \u2771 298 \u2502   \u2502   \u2502   await self.push_screen(self.bottom)                        \u2502\n\u2502   299 \u2502   \u2502   \u2502   await self.push_screen(top)                                \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2502  top = Screen()                                     \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502                                                                 \u2502\n\u2502   2100 \u2502   \u2502   # Push the screen onto the screen stack                       \u2502\n\u2502   2101 \u2502   \u2502   self._load_screen_css(screen)                                 \u2502\n\u2502 \u2771 2102 \u2502   \u2502   await screen.mount()                                          \u2502\n\u2502   2103 \u2502   \u2502                                                                 \u2502\n\u2502   2104 \u2502   \u2502   # If wait_for_dismiss is True, return an awaitable that await \u2502\n\u2502   2105 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502           screen = Screen()                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:947 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    944 \u2502   \u2502   if self._closing:                                             \u2502\n\u2502    945 \u2502   \u2502   \u2502   return AwaitMount(self, [])                               \u2502\n\u2502    946 \u2502   \u2502   if not self.is_attached:                                      \u2502\n\u2502 \u2771  947 \u2502   \u2502   \u2502   raise MountError(f\"Can't mount widget(s) before {self!r}  \u2502\n\u2502    948 \u2502   \u2502   # Check for duplicate IDs in the incoming widgets             \u2502\n\u2502    949 \u2502   \u2502   ids_to_mount = [                                              \u2502\n\u2502    950 \u2502   \u2502   \u2502   widget_id for widget in widgets if (widget_id := widget.i \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                       \u2502\n\u2502 \u2502   after = None     \u2502                                                       \u2502\n\u2502 \u2502  before = None     \u2502                                                       \u2502\n\u2502 \u2502    self = Screen() \u2502                                                       \u2502\n\u2502 \u2502 widgets = ()       \u2502                                                       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nMountError: Can't mount widget(s) before Screen() is mounted\n_________________________________ test_unmount _________________________________\n\n    async def test_unmount():\n        \"\"\"Test unmount events are received in reverse DOM order.\"\"\"\n        unmount_ids: list[str] = []\n    \n        class UnmountWidget(Container):\n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(\n                    f\"{self.__class__.__name__}#{self.id}-{self.parent is not None}-{len(self._nodes)}\"\n                )\n    \n        class MyScreen(Screen):\n            def compose(self) -> ComposeResult:\n                yield UnmountWidget(\n                    UnmountWidget(\n                        UnmountWidget(id=\"bar1\"), UnmountWidget(id=\"bar2\"), id=\"bar\"\n                    ),\n                    UnmountWidget(\n                        UnmountWidget(id=\"baz1\"), UnmountWidget(id=\"baz2\"), id=\"baz\"\n                    ),\n                    id=\"top\",\n                )\n    \n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(f\"{self.__class__.__name__}#{self.id}\")\n    \n        class UnmountApp(App):\n            async def on_mount(self) -> None:\n                await self.push_screen(MyScreen(id=\"main\"))\n    \n        app = UnmountApp()\n>       async with app.run_test() as pilot:\n\ntests/test_unmount.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2567: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2514: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3087: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_unmount.py:36: in on_mount\n    await self.push_screen(MyScreen(id=\"main\"))\nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyScreen(id='main'), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before MyScreen(id='main') is mounted\n\nsrc/textual/widget.py:947: MountError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_unmount.py:36 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   33 \u2502                                                                       \u2502\n\u2502   34 \u2502   class UnmountApp(App):                                              \u2502\n\u2502   35 \u2502   \u2502   async def on_mount(self) -> None:                               \u2502\n\u2502 \u2771 36 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"main\"))                 \u2502\n\u2502   37 \u2502                                                                       \u2502\n\u2502   38 \u2502   app = UnmountApp()                                                  \u2502\n\u2502   39 \u2502   async with app.run_test() as pilot:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502 \u2502 MyScreen = <class 'tests.test_unmount.test_unmount.<locals>.MyScreen'> \u2502   \u2502\n\u2502 \u2502     self = UnmountApp(title='UnmountApp', classes={'-dark-mode'})      \u2502   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502                                                                 \u2502\n\u2502   2100 \u2502   \u2502   # Push the screen onto the screen stack                       \u2502\n\u2502   2101 \u2502   \u2502   self._load_screen_css(screen)                                 \u2502\n\u2502 \u2771 2102 \u2502   \u2502   await screen.mount()                                          \u2502\n\u2502   2103 \u2502   \u2502                                                                 \u2502\n\u2502   2104 \u2502   \u2502   # If wait_for_dismiss is True, return an awaitable that await \u2502\n\u2502   2105 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502           screen = MyScreen(id='main')                                   \u2502 \u2502\n\u2502 \u2502             self = UnmountApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='UnmountApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   '-dark-mode'                                  \u2502 \u2502\n\u2502 \u2502                    \u2502   }                                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:947 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    944 \u2502   \u2502   if self._closing:                                             \u2502\n\u2502    945 \u2502   \u2502   \u2502   return AwaitMount(self, [])                               \u2502\n\u2502    946 \u2502   \u2502   if not self.is_attached:                                      \u2502\n\u2502 \u2771  947 \u2502   \u2502   \u2502   raise MountError(f\"Can't mount widget(s) before {self!r}  \u2502\n\u2502    948 \u2502   \u2502   # Check for duplicate IDs in the incoming widgets             \u2502\n\u2502    949 \u2502   \u2502   ids_to_mount = [                                              \u2502\n\u2502    950 \u2502   \u2502   \u2502   widget_id for widget in widgets if (widget_id := widget.i \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                            \u2502\n\u2502 \u2502   after = None                \u2502                                            \u2502\n\u2502 \u2502  before = None                \u2502                                            \u2502\n\u2502 \u2502    self = MyScreen(id='main') \u2502                                            \u2502\n\u2502 \u2502 widgets = ()                  \u2502                                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nMountError: Can't mount widget(s) before MyScreen(id='main') is mounted\n_ test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set _\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.sub_title = \"new app sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_____________ test_mouse_move_event_bubbles_to_screen_from_widget ______________\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n        async with SimpleApp().run_test() as pilot:\n>           await pilot.hover(Label, mouse_offset)\n\ntests/test_screens.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/pilot.py:271: in hover\n    return await self._post_mouse_events(\nsrc/textual/pilot.py:317: in _post_mouse_events\n    target_widget = app.query_one(selector)\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='Label'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='Label'> on SimpleApp(title='SimpleApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n____ test_app_title_reactive_does_not_update_title_when_screen_title_is_set ____\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.title = \"new app title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='new app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n        async with app.run_test():\n            screen_id = id(app.screen)\n>           app.switch_screen(\"screen\")\n\ntests/test_screens.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2161: in switch_screen\n    top_screen._pop_result_callback()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default')\n\n    def _pop_result_callback(self) -> None:\n        \"\"\"Remove the latest result callback from the stack.\"\"\"\n>       self._result_callbacks.pop()\nE       IndexError: pop from empty list\n\nsrc/textual/screen.py:899: IndexError\n_________________ test_auto_focus_skips_non_focusable_widgets __________________\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.focused is not None\nE           AssertionError: assert None is not None\nE            +  where None = MyApp(title='MyApp', classes={'-dark-mode'}).focused\n\ntests/test_screens.py:289: AssertionError\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n_________________ test_pilot_exception_catching_widget_compose _________________\n\n    async def test_pilot_exception_catching_widget_compose():\n        class SomeScreen(Screen[None]):\n            def compose(self) -> ComposeResult:\n                1 / 0\n                yield Label(\"Beep\")\n    \n        class FailingApp(App[None]):\n            def on_mount(self) -> None:\n                self.push_screen(SomeScreen())\n    \n>       with pytest.raises(ZeroDivisionError):\nE       Failed: DID NOT RAISE <class 'ZeroDivisionError'>\n\ntests/test_pilot.py:85: Failed\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2102: in push_screen\n    await screen.mount()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyScreen(), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if self._closing:\n            return AwaitMount(self, [])\n        if not self.is_attached:\n>           raise MountError(f\"Can't mount widget(s) before {self!r} is mounted\")\nE           textual.widget.MountError: Can't mount widget(s) before MyScreen() is mounted\n\nsrc/textual/widget.py:947: MountError\n____________________ test_screen_title_overrides_app_title _____________________\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n=============================== warnings summary ===============================\ntests/test_header.py: 8 warnings\ntests/css/test_screen_css.py: 4 warnings\ntests/test_screens.py: 13 warnings\ntests/test_widget.py: 1 warning\ntests/test_unmount.py: 1 warning\ntests/test_pilot.py: 1 warning\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_header.py::test_screen_title_none_is_ignored\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/test_header.py::test_screen_title_none_is_ignored\n  /root/repos/py_data/textual/tests/test_header.py:15: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\n  /root/repos/py_data/textual/tests/test_focus.py:192: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    app.push_screen(Screen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\ntests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\ntests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:50: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(BaseScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_focus.py::test_allow_focus\n  /root/repos/py_data/textual/tests/test_focus.py:94: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    app.push_screen(Screen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_screen_sub_title_none_is_ignored\n  /root/repos/py_data/textual/tests/test_header.py:89: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_dismiss_action\n  /root/repos/py_data/textual/tests/test_screens.py:316: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(ConfirmScreen(), callback=self.callback)\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n  /root/repos/py_data/textual/tests/test_header.py:125: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:77: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(ScreenWithCSS())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n  /root/repos/py_data/textual/tests/test_header.py:107: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\n  /root/repos/py_data/textual/tests/test_screens.py:367: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(\"a\", self.callback)\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_screen_title_reactive_updates_title\n  /root/repos/py_data/textual/tests/test_header.py:51: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_screen_receives_mouse_move_events\n  /root/repos/py_data/textual/tests/test_screens.py:390: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(\"a\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_focus.py::test_focus_chain\n  /root/repos/py_data/textual/tests/test_focus.py:47: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    app.push_screen(Screen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n  /root/repos/py_data/textual/tests/test_header.py:145: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\n  /root/repos/py_data/textual/tests/test_screens.py:422: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(\"a\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n  /root/repos/py_data/textual/tests/test_header.py:71: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_switch_screen_no_op\n  /root/repos/py_data/textual/tests/test_screens.py:337: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(\"screen\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n  /root/repos/py_data/textual/tests/test_screens.py:285: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_pilot.py::test_pilot_exception_catching_widget_compose\n  /root/repos/py_data/textual/tests/test_pilot.py:83: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(SomeScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_header.py::test_screen_title_overrides_app_title\n  /root/repos/py_data/textual/tests/test_header.py:33: RuntimeWarning: coroutine 'App.push_screen' was never awaited\n    self.push_screen(MyScreen())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_header.py::test_screen_title_none_is_ignored - textual.css....\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - t...\nFAILED tests/test_focus.py::test_allow_focus - textual.app.ScreenStackError: ...\nFAILED tests/test_header.py::test_screen_sub_title_none_is_ignored - textual....\nFAILED tests/test_screens.py::test_dismiss_action - AssertionError: assert False\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker - t...\nFAILED tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_widget.py::test_compose_order - textual.widget.MountError: ...\nFAILED tests/test_header.py::test_screen_sub_title_overrides_app_sub_title - ...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss - textual.wor...\nFAILED tests/test_header.py::test_screen_title_reactive_updates_title - textu...\nFAILED tests/test_screens.py::test_auto_focus_inheritance - textual.widget.Mo...\nFAILED tests/test_screens.py::test_screen_receives_mouse_move_events - Assert...\nFAILED tests/test_focus.py::test_focus_chain - textual.app.ScreenStackError: ...\nFAILED tests/test_screens.py::test_screens - AttributeError: 'tuple' object h...\nFAILED tests/test_screens.py::test_dismiss_non_top_screen - textual.widget.Mo...\nFAILED tests/test_unmount.py::test_unmount - textual.widget.MountError: Can't...\nFAILED tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\nFAILED tests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\nFAILED tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\nFAILED tests/test_screens.py::test_switch_screen_no_op - IndexError: pop from...\nFAILED tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets - A...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/test_pilot.py::test_pilot_exception_catching_widget_compose - Fa...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/test_header.py::test_screen_title_overrides_app_title - textual....\n======================= 31 failed, 52 warnings in 3.27s ========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 7 errors\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting tests/test_header.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_header.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n_____________________ ERROR collecting tests/test_focus.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_focus.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n________________ ERROR collecting tests/css/test_screen_css.py _________________\nImportError while importing test module '/root/repos/py_data/textual/tests/css/test_screen_css.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n____________________ ERROR collecting tests/test_screens.py ____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_screens.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n____________________ ERROR collecting tests/test_widget.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_widget.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n____________________ ERROR collecting tests/test_unmount.py ____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_unmount.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n_____________________ ERROR collecting tests/test_pilot.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_pilot.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2079: in App\n    from textual.app import App, Compositor, CompositorView\nE   ImportError: cannot import name 'App' from partially initialized module 'textual.app' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/app.py)\n=========================== short test summary info ============================\nERROR tests/test_header.py\nERROR tests/test_focus.py\nERROR tests/css/test_screen_css.py\nERROR tests/test_screens.py\nERROR tests/test_widget.py\nERROR tests/test_unmount.py\nERROR tests/test_pilot.py\n============================== 7 errors in 0.41s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_allow_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_receives_mouse_move_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_exception_catching_widget_compose\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\n"], "textual-src/textual/app.py-switch_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_screens.py .F                                                 [ 33%]\ntests/css/test_screen_css.py FF                                          [ 66%]\ntests/test_screens.py F                                                  [ 83%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n>       await app.switch_screen(\"screen2\")\n\ntests/test_screens.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = 'screen2'\n\n    async def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"Switch to another [screen](/guide/screens) by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If screen is a string, assume it's a screen name and get the corresponding Screen object\n>           screen = await self._get_screen(screen)\nE           TypeError: object tuple can't be used in 'await' expression\n\nsrc/textual/app.py:2174: TypeError\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:202: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n            assert len(app.screen._result_callbacks) == 1\n            assert app.screen._result_callbacks[-1].callback(None) == 42\n    \n            app.switch_screen(\"b\")\n            assert len(app.screen._result_callbacks) == 1\n>           assert app.screen._result_callbacks[-1].callback is None\nE           AssertionError: assert <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})> is None\nE            +  where <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})> = ResultCallback(MyApp(title='MyApp', classes={'-dark-mode'}), <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>, future=<Future pending>).callback\n\ntests/test_screens.py:376: AssertionError\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n=============================== warnings summary ===============================\ntests/test_screens.py::test_switch_screen_no_op\ntests/test_screens.py::test_screens\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_screens.py::test_switch_screen_no_op\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/test_screens.py::test_switch_screen_no_op\n  /root/repos/py_data/textual/tests/test_screens.py:342: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    app.switch_screen(\"screen\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_switch_screen_no_op\n  /root/repos/py_data/textual/tests/test_screens.py:344: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    app.switch_screen(\"screen\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:172: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    self.switch_screen(ScreenWithCSS())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:193: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    self.switch_screen(\"screenwithcss\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\n  /root/repos/py_data/textual/tests/test_screens.py:374: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    app.switch_screen(\"b\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:214: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    self.switch_screen(\"screenwithcss\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_screens - TypeError: object tuple can't be...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n=================== 5 failed, 1 passed, 13 warnings in 0.51s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 2 errors\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting tests/test_screens.py ____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_screens.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2165: in App\n    from textual.events import AwaitComplete\nE   ImportError: cannot import name 'AwaitComplete' from 'textual.events' (/root/repos/py_data/textual/src/textual/events.py)\n________________ ERROR collecting tests/css/test_screen_css.py _________________\nImportError while importing test module '/root/repos/py_data/textual/tests/css/test_screen_css.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nsrc/textual/app.py:279: in <module>\n    class App(Generic[ReturnType], DOMNode):\nsrc/textual/app.py:2165: in App\n    from textual.events import AwaitComplete\nE   ImportError: cannot import name 'AwaitComplete' from 'textual.events' (/root/repos/py_data/textual/src/textual/events.py)\n=========================== short test summary info ============================\nERROR tests/test_screens.py\nERROR tests/css/test_screen_css.py\n============================== 2 errors in 0.21s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_screens.py .F                                                 [ 33%]\ntests/css/test_screen_css.py FF                                          [ 66%]\ntests/test_screens.py F                                                  [ 83%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n>       await app.switch_screen(\"screen2\")\n\ntests/test_screens.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = 'screen2'\n\n    async def switch_screen(self, screen: Screen | str) -> AwaitComplete:\n        \"\"\"\n        Switch to another [screen](/guide/screens) by replacing the top of the screen stack with a new screen.\n    \n        Args:\n            screen: Either a Screen object or screen name (the `name` argument when installed).\n        \"\"\"\n        if isinstance(screen, str):\n            # If screen is a string, find the Screen object by its name\n>           screen = self.find_screen(screen)\nE           AttributeError: 'App' object has no attribute 'find_screen'. Did you mean: '_get_screen'?\n\nsrc/textual/app.py:2175: AttributeError\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:202: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n            assert len(app.screen._result_callbacks) == 1\n            assert app.screen._result_callbacks[-1].callback(None) == 42\n    \n            app.switch_screen(\"b\")\n            assert len(app.screen._result_callbacks) == 1\n>           assert app.screen._result_callbacks[-1].callback is None\nE           AssertionError: assert <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})> is None\nE            +  where <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})> = ResultCallback(MyApp(title='MyApp', classes={'-dark-mode'}), <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>, future=<Future pending>).callback\n\ntests/test_screens.py:376: AssertionError\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            check_colors_before_screen_css(app)\n            await pilot.press(\"p\")\n>           check_colors_after_screen_css(app)\n\ntests/css/test_screen_css.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def check_colors_after_screen_css(app: BaseApp):\n        assert app.query_one(\"#app-css\").styles.background == GREEN\n>       assert app.query_one(\"#screen-css-path\").styles.background == BLUE\nE       AssertionError: assert Color(0, 255, 0) == Color(0, 0, 255)\nE         \nE         Omitting 2 identical items, use -vv to show\nE         Differing attributes:\nE         ['g', 'b']\nE         \nE         Drill down into differing attribute g:\nE           g: 255 != 0...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/css/test_screen_css.py:68: AssertionError\n=============================== warnings summary ===============================\ntests/test_screens.py::test_switch_screen_no_op\ntests/test_screens.py::test_screens\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_screens.py::test_switch_screen_no_op\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/test_screens.py::test_switch_screen_no_op\n  /root/repos/py_data/textual/tests/test_screens.py:342: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    app.switch_screen(\"screen\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_switch_screen_no_op\n  /root/repos/py_data/textual/tests/test_screens.py:344: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    app.switch_screen(\"screen\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:172: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    self.switch_screen(ScreenWithCSS())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:193: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    self.switch_screen(\"screenwithcss\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\n  /root/repos/py_data/textual/tests/test_screens.py:374: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    app.switch_screen(\"b\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:214: RuntimeWarning: coroutine 'App.switch_screen' was never awaited\n    self.switch_screen(\"screenwithcss\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_screens - AttributeError: 'App' object has...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n=================== 5 failed, 1 passed, 13 warnings in 0.53s ===================\n\n"], "textual-src/textual/app.py-pop_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/css/test_screen_css.py .                                           [  9%]\ntests/test_screens.py .FF                                                [ 36%]\ntests/css/test_screen_css.py .....                                       [ 81%]\ntests/test_screens.py F                                                  [ 90%]\ntests/css/test_screen_css.py .                                           [100%]\n\n=================================== FAILURES ===================================\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"Input\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"one\"\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"#two\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"two\"\n    \n            # If we push and pop another screen, focus should be preserved for #two.\n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n>           assert app.focused.id == \"two\"\nE           AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_screens.py:200: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n        await app.switch_screen(\"screen2\")\n        # Check it has changed the stack and that it is current\n        assert app.screen_stack == [screen2]\n        assert app.screen is screen2\n        assert app.children == (screen2,)\n    \n        # Push another screen\n        await app.push_screen(\"screen3\")\n        assert app.screen_stack == [screen2, screen3]\n        assert app.screen is screen3\n        # Only the current screen is in children\n        assert app.children == (screen3,)\n    \n        # Pop a screen\n        await app.pop_screen()\n>       assert app.screen is screen2\nE       AssertionError: assert Screen(name='screen3') is Screen(name='screen2')\nE        +  where Screen(name='screen3') = App(title='App', classes={'-dark-mode'}).screen\n\ntests/test_screens.py:137: AssertionError\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"Input\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"one\"\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"#two\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"two\"\n    \n            # If we push and pop another screen, focus should be preserved for #two.\n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n>           assert app.focused.id == \"two\"\nE           AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_screens.py:243: AttributeError\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py: 7 warnings\ntests/test_screens.py: 4 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:114: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_inheritance\n  /root/repos/py_data/textual/tests/test_screens.py:264: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_inheritance\n  /root/repos/py_data/textual/tests/test_screens.py:269: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_inheritance\n  /root/repos/py_data/textual/tests/test_screens.py:274: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:177: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:182: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:188: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:199: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:135: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:156: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:175: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:196: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:217: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:220: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:225: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:231: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:242: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:80: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_screens.py::test_screens - AssertionError: assert Screen(na...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n=================== 3 failed, 8 passed, 30 warnings in 1.66s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/css/test_screen_css.py F                                           [  9%]\ntests/test_screens.py FFF                                                [ 36%]\ntests/css/test_screen_css.py FFFFF                                       [ 81%]\ntests/test_screens.py F                                                  [ 90%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:114: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:114 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   111 \u2502   \u2502   \u2502   self.push_screen(ScreenWithCSS())                          \u2502\n\u2502   112 \u2502   \u2502                                                                  \u2502\n\u2502   113 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 114 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   115 \u2502                                                                      \u2502\n\u2502   116 \u2502   app = MyApp()                                                      \u2502\n\u2502   117 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n        async with app.run_test():\n            MyApp.AUTO_FOCUS = \"Input\"\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n>           app.pop_screen()\nE           AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/test_screens.py:264: AttributeError\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n>           app.pop_screen()\nE           AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/test_screens.py:177: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n        await app.switch_screen(\"screen2\")\n        # Check it has changed the stack and that it is current\n        assert app.screen_stack == [screen2]\n        assert app.screen is screen2\n        assert app.children == (screen2,)\n    \n        # Push another screen\n        await app.push_screen(\"screen3\")\n        assert app.screen_stack == [screen2, screen3]\n        assert app.screen is screen3\n        # Only the current screen is in children\n        assert app.children == (screen3,)\n    \n        # Pop a screen\n>       await app.pop_screen()\nE       AttributeError: 'App' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/test_screens.py:136: AttributeError\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:135: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:135 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   132 \u2502   \u2502   \u2502   self.push_screen(\"screenwithcss\")                          \u2502\n\u2502   133 \u2502   \u2502                                                                  \u2502\n\u2502   134 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 135 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   136 \u2502                                                                      \u2502\n\u2502   137 \u2502   app = MyApp()                                                      \u2502\n\u2502   138 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:156: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:156 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   153 \u2502   \u2502   \u2502   self.push_screen(\"screenwithcss\")                          \u2502\n\u2502   154 \u2502   \u2502                                                                  \u2502\n\u2502   155 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 156 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   157 \u2502                                                                      \u2502\n\u2502   158 \u2502   app = MyApp()                                                      \u2502\n\u2502   159 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:175: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:175 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   172 \u2502   \u2502   \u2502   self.switch_screen(ScreenWithCSS())                        \u2502\n\u2502   173 \u2502   \u2502                                                                  \u2502\n\u2502   174 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 175 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   176 \u2502                                                                      \u2502\n\u2502   177 \u2502   app = MyApp()                                                      \u2502\n\u2502   178 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:196: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:196 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   193 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   194 \u2502   \u2502                                                                  \u2502\n\u2502   195 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 196 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   197 \u2502                                                                      \u2502\n\u2502   198 \u2502   app = MyApp()                                                      \u2502\n\u2502   199 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:217: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:217 in key_o        \u2502\n\u2502                                                                              \u2502\n\u2502   214 \u2502   \u2502   \u2502   self.switch_screen(\"screenwithcss\")                        \u2502\n\u2502   215 \u2502   \u2502                                                                  \u2502\n\u2502   216 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771 217 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502   218 \u2502                                                                      \u2502\n\u2502   219 \u2502   app = MyApp()                                                      \u2502\n\u2502   220 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n>           app.pop_screen()\nE           AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/test_screens.py:220: AttributeError\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3117: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3288: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'})\n\n    def key_o(self):\n>       self.pop_screen()\nE       AttributeError: 'MyApp' object has no attribute 'pop_screen'. Did you mean: 'get_screen'?\n\ntests/css/test_screen_css.py:80: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:80 in key_o         \u2502\n\u2502                                                                              \u2502\n\u2502    77 \u2502   \u2502   \u2502   self.push_screen(ScreenWithCSS())                          \u2502\n\u2502    78 \u2502   \u2502                                                                  \u2502\n\u2502    79 \u2502   \u2502   def key_o(self):                                               \u2502\n\u2502 \u2771  80 \u2502   \u2502   \u2502   self.pop_screen()                                          \u2502\n\u2502    81 \u2502                                                                      \u2502\n\u2502    82 \u2502   counter = 0                                                        \u2502\n\u2502    83                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute 'pop_screen'\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py: 7 warnings\ntests/test_screens.py: 4 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - A...\nFAILED tests/test_screens.py::test_auto_focus_inheritance - AttributeError: '...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_screens.py::test_screens - AttributeError: 'App' object has...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n======================= 11 failed, 12 warnings in 2.23s ========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/css/test_screen_css.py .                                           [  9%]\ntests/test_screens.py .FF                                                [ 36%]\ntests/css/test_screen_css.py .....                                       [ 81%]\ntests/test_screens.py F                                                  [ 90%]\ntests/css/test_screen_css.py .                                           [100%]\n\n=================================== FAILURES ===================================\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"Input\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"one\"\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"#two\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"two\"\n    \n            # If we push and pop another screen, focus should be preserved for #two.\n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n>           assert app.focused.id == \"two\"\nE           AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_screens.py:200: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n        await app.switch_screen(\"screen2\")\n        # Check it has changed the stack and that it is current\n        assert app.screen_stack == [screen2]\n        assert app.screen is screen2\n        assert app.children == (screen2,)\n    \n        # Push another screen\n        await app.push_screen(\"screen3\")\n        assert app.screen_stack == [screen2, screen3]\n        assert app.screen is screen3\n        # Only the current screen is in children\n        assert app.children == (screen3,)\n    \n        # Pop a screen\n        await app.pop_screen()\n>       assert app.screen is screen2\nE       AssertionError: assert Screen(name='screen3') is Screen(name='screen2')\nE        +  where Screen(name='screen3') = App(title='App', classes={'-dark-mode'}).screen\n\ntests/test_screens.py:137: AssertionError\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Button)\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"Input\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"one\"\n            app.pop_screen()\n    \n            MyScreen.AUTO_FOCUS = \"#two\"\n            await app.push_screen(MyScreen())\n            assert isinstance(app.focused, Input)\n            assert app.focused.id == \"two\"\n    \n            # If we push and pop another screen, focus should be preserved for #two.\n            MyScreen.AUTO_FOCUS = None\n            await app.push_screen(MyScreen())\n            assert app.focused is None\n            app.pop_screen()\n>           assert app.focused.id == \"two\"\nE           AttributeError: 'NoneType' object has no attribute 'id'\n\ntests/test_screens.py:243: AttributeError\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py: 7 warnings\ntests/test_screens.py: 4 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:114: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_inheritance\n  /root/repos/py_data/textual/tests/test_screens.py:264: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_inheritance\n  /root/repos/py_data/textual/tests/test_screens.py:269: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_inheritance\n  /root/repos/py_data/textual/tests/test_screens.py:274: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:177: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:182: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:188: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n  /root/repos/py_data/textual/tests/test_screens.py:199: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:135: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:156: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:175: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:196: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:217: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:220: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:225: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:231: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n  /root/repos/py_data/textual/tests/test_screens.py:242: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    app.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n  /root/repos/py_data/textual/tests/css/test_screen_css.py:80: RuntimeWarning: coroutine 'App.pop_screen' was never awaited\n    self.pop_screen()\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_screens.py::test_screens - AssertionError: assert Screen(na...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n=================== 3 failed, 8 passed, 30 warnings in 1.66s ===================\n\n"], "textual-src/textual/app.py-run_action": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting tests/test_widget.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 3159\nE       \"\"\"\nE       ^^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_widget.py\n=============================== 1 error in 0.12s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_widget.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_remove __________________________________\n\n    async def test_remove():\n        class RemoveMeLabel(Label):\n            async def on_mount(self) -> None:\n                await self.run_action(\"app.remove_all\")\n    \n        class Container(Widget):\n            async def clear(self) -> None:\n                await self.query(\"*\").remove()\n    \n        class RemoveApp(App):\n            def compose(self) -> ComposeResult:\n                yield Container(RemoveMeLabel())\n    \n            async def action_remove_all(self) -> None:\n                await self.query_one(Container).clear()\n                self.exit(123)\n    \n        app = RemoveApp()\n>       async with app.run_test() as pilot:\n\ntests/test_widget.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:545: in _pre_process\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:223: in on_mount\n    await self.run_action(\"app.remove_all\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = RemoveMeLabel(), action = 'app.remove_all'\n\n    async def run_action(self, action: str) -> None:\n        \"\"\"Perform a given action, with this widget as the default namespace.\n    \n        Args:\n            action: Action encoded as a string.\n        \"\"\"\n>       await self.app.run_action(action, self)\nE       TypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/widget.py:3545: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:223 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   220 async def test_remove():                                               \u2502\n\u2502   221 \u2502   class RemoveMeLabel(Label):                                        \u2502\n\u2502   222 \u2502   \u2502   async def on_mount(self) -> None:                              \u2502\n\u2502 \u2771 223 \u2502   \u2502   \u2502   await self.run_action(\"app.remove_all\")                    \u2502\n\u2502   224 \u2502                                                                      \u2502\n\u2502   225 \u2502   class Container(Widget):                                           \u2502\n\u2502   226 \u2502   \u2502   async def clear(self) -> None:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = RemoveMeLabel() \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:3545 in run_action         \u2502\n\u2502                                                                              \u2502\n\u2502   3542 \u2502   \u2502   Args:                                                         \u2502\n\u2502   3543 \u2502   \u2502   \u2502   action: Action encoded as a string.                       \u2502\n\u2502   3544 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 3545 \u2502   \u2502   await self.app.run_action(action, self)                       \u2502\n\u2502   3546 \u2502                                                                     \u2502\n\u2502   3547 \u2502   def post_message(self, message: Message) -> bool:                 \u2502\n\u2502   3548 \u2502   \u2502   \"\"\"Post a message to this widget.                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                \u2502\n\u2502 \u2502 action = 'app.remove_all' \u2502                                                \u2502\n\u2502 \u2502   self = RemoveMeLabel()  \u2502                                                \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were \ngiven\n=============================== warnings summary ===============================\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget.py::test_remove - TypeError: App.run_action() takes ...\n======================== 1 failed, 2 warnings in 0.49s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_widget.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_remove __________________________________\n\n    async def test_remove():\n        class RemoveMeLabel(Label):\n            async def on_mount(self) -> None:\n                await self.run_action(\"app.remove_all\")\n    \n        class Container(Widget):\n            async def clear(self) -> None:\n                await self.query(\"*\").remove()\n    \n        class RemoveApp(App):\n            def compose(self) -> ComposeResult:\n                yield Container(RemoveMeLabel())\n    \n            async def action_remove_all(self) -> None:\n                await self.query_one(Container).clear()\n                self.exit(123)\n    \n        app = RemoveApp()\n>       async with app.run_test() as pilot:\n\ntests/test_widget.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:545: in _pre_process\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:223: in on_mount\n    await self.run_action(\"app.remove_all\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = RemoveMeLabel(), action = 'app.remove_all'\n\n    async def run_action(self, action: str) -> None:\n        \"\"\"Perform a given action, with this widget as the default namespace.\n    \n        Args:\n            action: Action encoded as a string.\n        \"\"\"\n>       await self.app.run_action(action, self)\nE       TypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/widget.py:3545: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:223 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   220 async def test_remove():                                               \u2502\n\u2502   221 \u2502   class RemoveMeLabel(Label):                                        \u2502\n\u2502   222 \u2502   \u2502   async def on_mount(self) -> None:                              \u2502\n\u2502 \u2771 223 \u2502   \u2502   \u2502   await self.run_action(\"app.remove_all\")                    \u2502\n\u2502   224 \u2502                                                                      \u2502\n\u2502   225 \u2502   class Container(Widget):                                           \u2502\n\u2502   226 \u2502   \u2502   async def clear(self) -> None:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = RemoveMeLabel() \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:3545 in run_action         \u2502\n\u2502                                                                              \u2502\n\u2502   3542 \u2502   \u2502   Args:                                                         \u2502\n\u2502   3543 \u2502   \u2502   \u2502   action: Action encoded as a string.                       \u2502\n\u2502   3544 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 3545 \u2502   \u2502   await self.app.run_action(action, self)                       \u2502\n\u2502   3546 \u2502                                                                     \u2502\n\u2502   3547 \u2502   def post_message(self, message: Message) -> bool:                 \u2502\n\u2502   3548 \u2502   \u2502   \"\"\"Post a message to this widget.                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                \u2502\n\u2502 \u2502 action = 'app.remove_all' \u2502                                                \u2502\n\u2502 \u2502   self = RemoveMeLabel()  \u2502                                                \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: App.run_action() takes from 1 to 2 positional arguments but 3 were \ngiven\n=============================== warnings summary ===============================\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget.py::test_remove - TypeError: App.run_action() takes ...\n======================== 1 failed, 2 warnings in 0.49s =========================\n\n"], "textual-src/textual/file_monitor.py-check": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_file_monitor.py F                                             [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_file_never_found _____________________________\n\n    def test_file_never_found():\n        path = \"doesnt_exist.tcss\"\n        file_monitor = FileMonitor([Path(path)], lambda: None)\n>       file_monitor.check()  # Ensuring no exceptions are raised.\nE       AttributeError: 'FileMonitor' object has no attribute 'check'\n\ntests/test_file_monitor.py:15: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_file_monitor.py::test_file_never_found - AttributeError: 'F...\n============================== 1 failed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_file_monitor.py F                                             [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_file_never_found _____________________________\n\n    def test_file_never_found():\n        path = \"doesnt_exist.tcss\"\n        file_monitor = FileMonitor([Path(path)], lambda: None)\n>       file_monitor.check()  # Ensuring no exceptions are raised.\nE       AttributeError: 'FileMonitor' object has no attribute 'check'\n\ntests/test_file_monitor.py:15: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_file_monitor.py::test_file_never_found - AttributeError: 'F...\n============================== 1 failed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_file_monitor.py F                                             [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_file_never_found _____________________________\n\n    def test_file_never_found():\n        path = \"doesnt_exist.tcss\"\n        file_monitor = FileMonitor([Path(path)], lambda: None)\n>       file_monitor.check()  # Ensuring no exceptions are raised.\nE       AttributeError: 'FileMonitor' object has no attribute 'check'\n\ntests/test_file_monitor.py:15: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_file_monitor.py::test_file_never_found - AttributeError: 'F...\n============================== 1 failed in 0.10s ===============================\n\n"], "textual-src/textual/expand_tabs.py-expand_tabs_inline": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 13 items\n\ntests/test_expand_tabs.py ..FFFFF.F.FF.                                  [100%]\n\n=================================== FAILURES ===================================\n__________________ test_expand_tabs_inline[\\tbar\\t-    bar ] ___________________\n\nline = '\\tbar\\t', expanded_line = '    bar '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '    bar    ' == '    bar '\nE         \nE         -     bar \nE         +     bar    \nE         ?         +++\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[\\tr\\t-    r   ] ____________________\n\nline = '\\tr\\t', expanded_line = '    r   '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '    r    ' == '    r   '\nE         \nE         -     r   \nE         +     r    \nE         ?         +\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[1\\tbar-1   bar] ____________________\n\nline = '1\\tbar', expanded_line = '1   bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '1    bar' == '1   bar'\nE         \nE         - 1   bar\nE         + 1    bar\nE         ?  +\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[12\\tbar-12  bar] ___________________\n\nline = '12\\tbar', expanded_line = '12  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '12    bar' == '12  bar'\nE         \nE         - 12  bar\nE         + 12    bar\nE         ?   ++\n\ntests/test_expand_tabs.py:25: AssertionError\n__________________ test_expand_tabs_inline[123\\tbar-123 bar] ___________________\n\nline = '123\\tbar', expanded_line = '123 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '123    bar' == '123 bar'\nE         \nE         - 123 bar\nE         + 123    bar\nE         ?     +++\n\ntests/test_expand_tabs.py:25: AssertionError\n___________ test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar] ___________\n\nline = '\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9    bar' == '\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9  bar\nE         + \ud83d\udca9    bar\nE         ?  ++\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9\ud83d\udca9    bar' == '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\nE         + \ud83d\udca9\ud83d\udca9\ud83d\udca9    bar\nE         ?      ++\n\ntests/test_expand_tabs.py:25: AssertionError\n__________ test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar] ___________\n\nline = 'F\ud83d\udca9\\tbar', expanded_line = 'F\ud83d\udca9 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9    bar' == 'F\ud83d\udca9 bar'\nE         \nE         - F\ud83d\udca9 bar\nE         + F\ud83d\udca9    bar\nE         ?   +++\n\ntests/test_expand_tabs.py:25: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tbar\\t-    bar ]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tr\\t-    r   ] - A...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[1\\tbar-1   bar] - A...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[12\\tbar-12  bar] - ...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[123\\tbar-123 bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar]\n========================= 8 failed, 5 passed in 0.12s ==========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 13 items\n\ntests/test_expand_tabs.py .FFFFFFFFFFFF                                  [100%]\n\n=================================== FAILURES ===================================\n____________________ test_expand_tabs_inline[\\tbar-    bar] ____________________\n\nline = '\\tbar', expanded_line = '    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '    ' == '    bar'\nE         \nE         Strings contain only whitespace, escaping them using repr()\nE         - '    bar'\nE         ?      ---\nE         + '    '\n\ntests/test_expand_tabs.py:25: AssertionError\n__________________ test_expand_tabs_inline[\\tbar\\t-    bar ] ___________________\n\nline = '\\tbar\\t', expanded_line = '    bar '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '        ' == '    bar '\nE         \nE         Strings contain only whitespace, escaping them using repr()\nE         - '    bar '\nE         + '        '\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[\\tr\\t-    r   ] ____________________\n\nline = '\\tr\\t', expanded_line = '    r   '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '    ' == '    r   '\nE         \nE         Strings contain only whitespace, escaping them using repr()\nE         - '    r   '\nE         ?      ----\nE         + '    '\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[1\\tbar-1   bar] ____________________\n\nline = '1\\tbar', expanded_line = '1   bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '1    ' == '1   bar'\nE         \nE         - 1   bar\nE         + 1\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[12\\tbar-12  bar] ___________________\n\nline = '12\\tbar', expanded_line = '12  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '12    ' == '12  bar'\nE         \nE         - 12  bar\nE         + 12\n\ntests/test_expand_tabs.py:25: AssertionError\n__________________ test_expand_tabs_inline[123\\tbar-123 bar] ___________________\n\nline = '123\\tbar', expanded_line = '123 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '123    ' == '123 bar'\nE         \nE         - 123 bar\nE         + 123\n\ntests/test_expand_tabs.py:25: AssertionError\n________________ test_expand_tabs_inline[1234\\tbar-1234    bar] ________________\n\nline = '1234\\tbar', expanded_line = '1234    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '1234    ' == '1234    bar'\nE         \nE         - 1234    bar\nE         ?         ---\nE         + 1234\n\ntests/test_expand_tabs.py:25: AssertionError\n___________ test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar] ___________\n\nline = '\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9    ' == '\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9  bar\nE         + \ud83d\udca9\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9    bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9    ' == '\ud83d\udca9\ud83d\udca9    bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9    bar\nE         ?       ---\nE         + \ud83d\udca9\ud83d\udca9\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9\ud83d\udca9    ' == '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\nE         + \ud83d\udca9\ud83d\udca9\ud83d\udca9\n\ntests/test_expand_tabs.py:25: AssertionError\n__________ test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar] ___________\n\nline = 'F\ud83d\udca9\\tbar', expanded_line = 'F\ud83d\udca9 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9    ' == 'F\ud83d\udca9 bar'\nE         \nE         - F\ud83d\udca9 bar\nE         + F\ud83d\udca9\n\ntests/test_expand_tabs.py:25: AssertionError\n________ test_expand_tabs_inline[F\\U0001f4a9O\\tbar-F\\U0001f4a9O    bar] ________\n\nline = 'F\ud83d\udca9O\\tbar', expanded_line = 'F\ud83d\udca9O    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9O    ' == 'F\ud83d\udca9O    bar'\nE         \nE         - F\ud83d\udca9O    bar\nE         ?        ---\nE         + F\ud83d\udca9O\n\ntests/test_expand_tabs.py:25: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tbar-    bar] - As...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tbar\\t-    bar ]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tr\\t-    r   ] - A...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[1\\tbar-1   bar] - A...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[12\\tbar-12  bar] - ...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[123\\tbar-123 bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[1234\\tbar-1234    bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9    bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9O\\tbar-F\\U0001f4a9O    bar]\n========================= 12 failed, 1 passed in 0.12s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 13 items\n\ntests/test_expand_tabs.py ........FFFFF                                  [100%]\n\n=================================== FAILURES ===================================\n___________ test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar] ___________\n\nline = '\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9   bar' == '\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9  bar\nE         + \ud83d\udca9   bar\nE         ?  +\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9    bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9  bar' == '\ud83d\udca9\ud83d\udca9    bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9    bar\nE         ?   --\nE         + \ud83d\udca9\ud83d\udca9  bar\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9\ud83d\udca9 bar' == '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\nE         ?     -\nE         + \ud83d\udca9\ud83d\udca9\ud83d\udca9 bar\n\ntests/test_expand_tabs.py:25: AssertionError\n__________ test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar] ___________\n\nline = 'F\ud83d\udca9\\tbar', expanded_line = 'F\ud83d\udca9 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9  bar' == 'F\ud83d\udca9 bar'\nE         \nE         - F\ud83d\udca9 bar\nE         + F\ud83d\udca9  bar\nE         ?   +\n\ntests/test_expand_tabs.py:25: AssertionError\n________ test_expand_tabs_inline[F\\U0001f4a9O\\tbar-F\\U0001f4a9O    bar] ________\n\nline = 'F\ud83d\udca9O\\tbar', expanded_line = 'F\ud83d\udca9O    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9O bar' == 'F\ud83d\udca9O    bar'\nE         \nE         - F\ud83d\udca9O    bar\nE         ?     ---\nE         + F\ud83d\udca9O bar\n\ntests/test_expand_tabs.py:25: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9    bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9O\\tbar-F\\U0001f4a9O    bar]\n========================= 5 failed, 8 passed in 0.11s ==========================\n\n"], "textual-src/textual/_resolve.py-resolve": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_resolve.py .FFFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_resolve[scalars0-100-0-result0] _____________________\n\nscalars = ['10'], total = 100, gutter = 0, result = [(0, 10)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(100, 100)] == [(0, 10)]\nE         \nE         At index 0 diff: (100, 100) != (0, 10)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n_____________________ test_resolve[scalars1-100-0-result1] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 0, result = [(0, 10), (10, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(50, 50), (100, 50)] == [(0, 10), (10, 20)]\nE         \nE         At index 0 diff: (50, 50) != (0, 10)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n_____________________ test_resolve[scalars2-100-1-result2] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 1, result = [(0, 10), (11, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(50, 49), (99, 49)] == [(0, 10), (11, 20)]\nE         \nE         At index 0 diff: (50, 49) != (0, 10)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n_____________________ test_resolve[scalars3-100-1-result3] _____________________\n\nscalars = ['10', '1fr'], total = 100, gutter = 1, result = [(0, 10), (11, 89)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(50, 49), (99, 49)] == [(0, 10), (11, 89)]\nE         \nE         At index 0 diff: (50, 49) != (0, 10)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n_____________________ test_resolve[scalars4-100-0-result4] _____________________\n\nscalars = ['1fr', '1fr'], total = 100, gutter = 0, result = [(0, 50), (50, 50)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(50, 50), (100, 50)] == [(0, 50), (50, 50)]\nE         \nE         At index 0 diff: (50, 50) != (0, 50)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n_____________________ test_resolve[scalars5-100-1-result5] _____________________\n\nscalars = ['3', '1fr', '1fr', '1'], total = 100, gutter = 1\nresult = [(0, 3), (4, 46), (51, 47), (99, 1)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(25, 24), (5...24), (99, 24)] == [(0, 3), (4, ... 47), (99, 1)]\nE         \nE         At index 0 diff: (25, 24) != (0, 3)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_resolve.py::test_resolve[scalars0-100-0-result0] - assert [...\nFAILED tests/test_resolve.py::test_resolve[scalars1-100-0-result1] - assert [...\nFAILED tests/test_resolve.py::test_resolve[scalars2-100-1-result2] - assert [...\nFAILED tests/test_resolve.py::test_resolve[scalars3-100-1-result3] - assert [...\nFAILED tests/test_resolve.py::test_resolve[scalars4-100-0-result4] - assert [...\nFAILED tests/test_resolve.py::test_resolve[scalars5-100-1-result5] - assert [...\n========================= 6 failed, 1 passed in 0.13s ==========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_resolve.py .FFFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_resolve[scalars0-100-0-result0] _____________________\n\nscalars = ['10'], total = 100, gutter = 0, result = [(0, 10)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: List of (<OFFSET>, <LENGTH>)\n        \"\"\"\n        result = []\n        current_offset = 0\n        current_length = 0\n        for dim in dimensions:\n>           if current_length + dim + gutter <= size:\nE           TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:36: TypeError\n_____________________ test_resolve[scalars1-100-0-result1] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 0, result = [(0, 10), (10, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=20.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: List of (<OFFSET>, <LENGTH>)\n        \"\"\"\n        result = []\n        current_offset = 0\n        current_length = 0\n        for dim in dimensions:\n>           if current_length + dim + gutter <= size:\nE           TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:36: TypeError\n_____________________ test_resolve[scalars2-100-1-result2] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 1, result = [(0, 10), (11, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=20.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: List of (<OFFSET>, <LENGTH>)\n        \"\"\"\n        result = []\n        current_offset = 0\n        current_length = 0\n        for dim in dimensions:\n>           if current_length + dim + gutter <= size:\nE           TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:36: TypeError\n_____________________ test_resolve[scalars3-100-1-result3] _____________________\n\nscalars = ['10', '1fr'], total = 100, gutter = 1, result = [(0, 10), (11, 89)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: List of (<OFFSET>, <LENGTH>)\n        \"\"\"\n        result = []\n        current_offset = 0\n        current_length = 0\n        for dim in dimensions:\n>           if current_length + dim + gutter <= size:\nE           TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:36: TypeError\n_____________________ test_resolve[scalars4-100-0-result4] _____________________\n\nscalars = ['1fr', '1fr'], total = 100, gutter = 0, result = [(0, 50), (50, 50)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: List of (<OFFSET>, <LENGTH>)\n        \"\"\"\n        result = []\n        current_offset = 0\n        current_length = 0\n        for dim in dimensions:\n>           if current_length + dim + gutter <= size:\nE           TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:36: TypeError\n_____________________ test_resolve[scalars5-100-1-result5] _____________________\n\nscalars = ['3', '1fr', '1fr', '1'], total = 100, gutter = 1\nresult = [(0, 3), (4, 46), (51, 47), (99, 1)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=3.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, per...nit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: List of (<OFFSET>, <LENGTH>)\n        \"\"\"\n        result = []\n        current_offset = 0\n        current_length = 0\n        for dim in dimensions:\n>           if current_length + dim + gutter <= size:\nE           TypeError: unsupported operand type(s) for +: 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:36: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_resolve.py::test_resolve[scalars0-100-0-result0] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars1-100-0-result1] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars2-100-1-result2] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars3-100-1-result3] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars4-100-0-result4] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars5-100-1-result5] - TypeErro...\n========================= 6 failed, 1 passed in 0.14s ==========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_resolve.py .FFFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_resolve[scalars0-100-0-result0] _____________________\n\nscalars = ['10'], total = 100, gutter = 0, result = [(0, 10)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: A list of tuples containing the offset and length of each dimension.\n        \"\"\"\n        # Calculate the total number of dimensions\n        num_dimensions = len(dimensions)\n    \n        # Initialize the current offset and length\n        current_offset = 0\n        current_length = 0\n    \n        # Initialize the result list\n        result = []\n    \n        # Iterate over the dimensions\n        for i, dimension in enumerate(dimensions):\n            # Calculate the available space for the current dimension\n            available_space = total - current_offset - gutter * (num_dimensions - i - 1) if i < num_dimensions - 1 else total - current_offset\n    \n            # Calculate the length of the current dimension\n>           length = min(dimension, available_space, size, viewport)\nE           TypeError: '<' not supported between instances of 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:48: TypeError\n_____________________ test_resolve[scalars1-100-0-result1] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 0, result = [(0, 10), (10, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=20.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: A list of tuples containing the offset and length of each dimension.\n        \"\"\"\n        # Calculate the total number of dimensions\n        num_dimensions = len(dimensions)\n    \n        # Initialize the current offset and length\n        current_offset = 0\n        current_length = 0\n    \n        # Initialize the result list\n        result = []\n    \n        # Iterate over the dimensions\n        for i, dimension in enumerate(dimensions):\n            # Calculate the available space for the current dimension\n            available_space = total - current_offset - gutter * (num_dimensions - i - 1) if i < num_dimensions - 1 else total - current_offset\n    \n            # Calculate the length of the current dimension\n>           length = min(dimension, available_space, size, viewport)\nE           TypeError: '<' not supported between instances of 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:48: TypeError\n_____________________ test_resolve[scalars2-100-1-result2] _____________________\n\nscalars = ['10', '20'], total = 100, gutter = 1, result = [(0, 10), (11, 20)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=20.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: A list of tuples containing the offset and length of each dimension.\n        \"\"\"\n        # Calculate the total number of dimensions\n        num_dimensions = len(dimensions)\n    \n        # Initialize the current offset and length\n        current_offset = 0\n        current_length = 0\n    \n        # Initialize the result list\n        result = []\n    \n        # Iterate over the dimensions\n        for i, dimension in enumerate(dimensions):\n            # Calculate the available space for the current dimension\n            available_space = total - current_offset - gutter * (num_dimensions - i - 1) if i < num_dimensions - 1 else total - current_offset\n    \n            # Calculate the length of the current dimension\n>           length = min(dimension, available_space, size, viewport)\nE           TypeError: '<' not supported between instances of 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:48: TypeError\n_____________________ test_resolve[scalars3-100-1-result3] _____________________\n\nscalars = ['10', '1fr'], total = 100, gutter = 1, result = [(0, 10), (11, 89)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=10.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: A list of tuples containing the offset and length of each dimension.\n        \"\"\"\n        # Calculate the total number of dimensions\n        num_dimensions = len(dimensions)\n    \n        # Initialize the current offset and length\n        current_offset = 0\n        current_length = 0\n    \n        # Initialize the result list\n        result = []\n    \n        # Iterate over the dimensions\n        for i, dimension in enumerate(dimensions):\n            # Calculate the available space for the current dimension\n            available_space = total - current_offset - gutter * (num_dimensions - i - 1) if i < num_dimensions - 1 else total - current_offset\n    \n            # Calculate the length of the current dimension\n>           length = min(dimension, available_space, size, viewport)\nE           TypeError: '<' not supported between instances of 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:48: TypeError\n_____________________ test_resolve[scalars4-100-0-result4] _____________________\n\nscalars = ['1fr', '1fr'], total = 100, gutter = 0, result = [(0, 50), (50, 50)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 0, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: A list of tuples containing the offset and length of each dimension.\n        \"\"\"\n        # Calculate the total number of dimensions\n        num_dimensions = len(dimensions)\n    \n        # Initialize the current offset and length\n        current_offset = 0\n        current_length = 0\n    \n        # Initialize the result list\n        result = []\n    \n        # Iterate over the dimensions\n        for i, dimension in enumerate(dimensions):\n            # Calculate the available space for the current dimension\n            available_space = total - current_offset - gutter * (num_dimensions - i - 1) if i < num_dimensions - 1 else total - current_offset\n    \n            # Calculate the length of the current dimension\n>           length = min(dimension, available_space, size, viewport)\nE           TypeError: '<' not supported between instances of 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:48: TypeError\n_____________________ test_resolve[scalars5-100-1-result5] _____________________\n\nscalars = ['3', '1fr', '1fr', '1'], total = 100, gutter = 1\nresult = [(0, 3), (4, 46), (51, 47), (99, 1)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\n\ntests/test_resolve.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndimensions = [Scalar(value=3.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.FRACTION: 2>, per...nit.FRACTION: 2>, percent_unit=<Unit.WIDTH: 4>), Scalar(value=1.0, unit=<Unit.CELLS: 1>, percent_unit=<Unit.WIDTH: 4>)]\ntotal = 100, gutter = 1, size = Size(width=40, height=20)\nviewport = Size(width=80, height=24)\n\n    def resolve(dimensions, total, gutter, size, viewport):\n        \"\"\"\n        Resolve a list of dimensions.\n    \n        Args:\n            dimensions (list): Scalars for column / row sizes.\n            total (int): Total space to divide.\n            gutter (int): Gutter between rows / columns.\n            size (int): Size of container.\n            viewport (int): Size of viewport.\n    \n        Returns:\n            list: A list of tuples containing the offset and length of each dimension.\n        \"\"\"\n        # Calculate the total number of dimensions\n        num_dimensions = len(dimensions)\n    \n        # Initialize the current offset and length\n        current_offset = 0\n        current_length = 0\n    \n        # Initialize the result list\n        result = []\n    \n        # Iterate over the dimensions\n        for i, dimension in enumerate(dimensions):\n            # Calculate the available space for the current dimension\n            available_space = total - current_offset - gutter * (num_dimensions - i - 1) if i < num_dimensions - 1 else total - current_offset\n    \n            # Calculate the length of the current dimension\n>           length = min(dimension, available_space, size, viewport)\nE           TypeError: '<' not supported between instances of 'int' and 'Scalar'\n\nsrc/textual/_resolve.py:48: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_resolve.py::test_resolve[scalars0-100-0-result0] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars1-100-0-result1] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars2-100-1-result2] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars3-100-1-result3] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars4-100-0-result4] - TypeErro...\nFAILED tests/test_resolve.py::test_resolve[scalars5-100-1-result5] - TypeErro...\n========================= 6 failed, 1 passed in 0.13s ==========================\n\n"], "textual-src/textual/widget.py-mount": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_mount.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_render_only_after_mount _________________________\n\n    async def test_render_only_after_mount():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2914\"\"\"\n        app = App()\n>       async with app.run_test() as pilot:\n\ntests/test_mount.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3056: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:2640: in _on_compose\n    await self.mount_all(widgets)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), before = None, after = None, widgets = ()\n\n    async def mount(\n        self,\n        *widgets: \"Widget\",\n        before: int | str | None = None,\n        after: int | str | None = None\n    ) -> \"awaitable\":\n        \"\"\"\n        Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n    \n        # Check if both before and after are provided, raise MountError if so\n        if before is not None and after is not None:\n            raise MountError(\"Cannot provide both before and after\")\n    \n        # Check if before is an integer and after is not provided\n        if isinstance(before, int) and after is None:\n            # Mount widgets before the specified index\n            # This is a placeholder, you would replace this with your actual implementation\n            # For example:\n            # await self._mount_before_index(widgets, before)\n            pass\n    \n        # Check if after is an integer and before is not provided\n        elif isinstance(after, int) and before is None:\n            # Mount widgets after the specified index\n            # This is a placeholder, you would replace this with your actual implementation\n            # For example:\n            # await self._mount_after_index(widgets, after)\n            pass\n    \n        # Check if before is a query and after is not provided\n        elif isinstance(before, str) and after is None:\n            # Mount widgets before the widget found by the query\n            # This is a placeholder, you would replace this with your actual implementation\n            # For example:\n            # await self._mount_before_query(widgets, before)\n            pass\n    \n        # Check if after is a query and before is not provided\n        elif isinstance(after, str) and before is None:\n            # Mount widgets after the widget found by the query\n            # This is a placeholder, you would replace this with your actual implementation\n            # For example:\n            # await self._mount_after_query(widgets, after)\n            pass\n    \n        # If none of the above conditions are met, raise MountError\n        else:\n>           raise MountError(\"Invalid mount request\")\nE           textual.widget.MountError: Invalid mount request\n\nsrc/textual/widget.py:984: MountError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:984 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    981 \u2502   \u2502                                                                 \u2502\n\u2502    982 \u2502   \u2502   # If none of the above conditions are met, raise MountError   \u2502\n\u2502    983 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771  984 \u2502   \u2502   \u2502   raise MountError(\"Invalid mount request\")                 \u2502\n\u2502    985 \u2502                                                                     \u2502\n\u2502    986 \u2502                                                                     \u2502\n\u2502    987 \u2502   def mount_all(                                                    \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                          \u2502\n\u2502 \u2502   after = None                  \u2502                                          \u2502\n\u2502 \u2502  before = None                  \u2502                                          \u2502\n\u2502 \u2502    self = Screen(id='_default') \u2502                                          \u2502\n\u2502 \u2502 widgets = ()                    \u2502                                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nMountError: Invalid mount request\n=============================== warnings summary ===============================\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\ntests/test_mount.py::test_render_only_after_mount\n  /root/repos/py_data/textual/tests/test_mount.py:25: RuntimeWarning: coroutine 'Widget.mount' was never awaited\n    app.mount(W())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_mount.py::test_render_only_after_mount\n  /root/repos/py_data/textual/tests/test_mount.py:26: RuntimeWarning: coroutine 'Widget.mount' was never awaited\n    app.mount(W())\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_mount.py::test_render_only_after_mount - textual.widget.Mou...\n======================== 1 failed, 4 warnings in 0.38s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_mount.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_mount.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:34: in <module>\n    from .containers import Horizontal, Vertical\nsrc/textual/containers.py:13: in <module>\n    from .widget import Widget\nsrc/textual/widget.py:260: in <module>\n    class Widget(DOMNode):\nsrc/textual/widget.py:918: in Widget\n    from textual.widget import Widget\nE   ImportError: cannot import name 'Widget' from partially initialized module 'textual.widget' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/widget.py)\n=========================== short test summary info ============================\nERROR tests/test_mount.py\n=============================== 1 error in 0.18s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_mount.py _____________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_mount.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:34: in <module>\n    from .containers import Horizontal, Vertical\nsrc/textual/containers.py:13: in <module>\n    from .widget import Widget\nsrc/textual/widget.py:260: in <module>\n    class Widget(DOMNode):\nsrc/textual/widget.py:918: in Widget\n    from .query import query_one\nE   ModuleNotFoundError: No module named 'textual.query'\n=========================== short test summary info ============================\nERROR tests/test_mount.py\n=============================== 1 error in 0.18s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\n"], "textual-src/textual/widget.py-move_child": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/test_widget_child_moving.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_child_moving.py:5: in <module>\n    from textual.app import App\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:34: in <module>\n    from .containers import Horizontal, Vertical\nsrc/textual/containers.py:13: in <module>\n    from .widget import Widget\nE     File \"/root/repos/py_data/textual/src/textual/widget.py\", line 1042\nE       \"\"\"Move a child widget within its parent's list of children.\nE       ^^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_widget_child_moving.py\n=============================== 1 error in 0.17s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_before_permutations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_child_after_last_child\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_past_end_of_child_list\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_after_permutations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_before_end_of_child_list\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/test_widget_child_moving.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_child_moving.py:5: in <module>\n    from textual.app import App\nsrc/textual/app.py:84: in <module>\n    from .command import CommandPalette, Provider\nsrc/textual/command.py:34: in <module>\n    from .containers import Horizontal, Vertical\nsrc/textual/containers.py:13: in <module>\n    from .widget import Widget\nE     File \"/root/repos/py_data/textual/src/textual/widget.py\", line 1041\nE       def move_child(\nE                     ^\nE   SyntaxError: '(' was never closed\n=========================== short test summary info ============================\nERROR tests/test_widget_child_moving.py\n=============================== 1 error in 0.16s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_before_permutations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_child_after_last_child\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_past_end_of_child_list\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_after_permutations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_child_moving.py::test_move_before_end_of_child_list\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_widget_child_moving.py FFFFFF                                 [100%]\n\n=================================== FAILURES ===================================\n________________________ test_move_before_permutations _________________________\n\n    async def test_move_before_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget before another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((1, 0), (widgets[1], 0), (1, widgets[0]), (widgets[1], widgets[0]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, before=target)\nE               TypeError: Widget.move_child() got multiple values for argument 'before'\n\ntests/test_widget_child_moving.py:145: TypeError\n_______________________ test_move_child_after_last_child _______________________\n\n    async def test_move_child_after_last_child() -> None:\n        \"\"\"Test moving after a child after the last child.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[-1])\n\ntests/test_widget_child_moving.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nchild = Widget(), before = Widget(id='widget-0'), after = Widget(id='widget-9')\n\n    def move_child(child, before=None, after=None):\n        \"\"\"\n        Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n>           raise WidgetError(\"Only one of 'before' or 'after' can be provided\")\nE           textual.widget.WidgetError: Only one of 'before' or 'after' can be provided\n\nsrc/textual/widget.py:1058: WidgetError\n_______________________ test_move_past_end_of_child_list _______________________\n\n    async def test_move_past_end_of_child_list() -> None:\n        \"\"\"Test attempting to move past the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=len(widgets) + 10)\nE               TypeError: Widget.move_child() got multiple values for argument 'before'\n\ntests/test_widget_child_moving.py:124: TypeError\n_________________ test_move_child_after_last_numeric_location __________________\n\n    async def test_move_child_after_last_numeric_location() -> None:\n        \"\"\"Test moving after a child after the last child's numeric position.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[9])\n\ntests/test_widget_child_moving.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nchild = Widget(), before = Widget(id='widget-0'), after = Widget(id='widget-9')\n\n    def move_child(child, before=None, after=None):\n        \"\"\"\n        Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n>           raise WidgetError(\"Only one of 'before' or 'after' can be provided\")\nE           textual.widget.WidgetError: Only one of 'before' or 'after' can be provided\n\nsrc/textual/widget.py:1058: WidgetError\n_________________________ test_move_after_permutations _________________________\n\n    async def test_move_after_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget after another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((0, 1), (widgets[0], 1), (0, widgets[1]), (widgets[0], widgets[1]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, after=target)\n\ntests/test_widget_child_moving.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nchild = Widget(), before = 0, after = 1\n\n    def move_child(child, before=None, after=None):\n        \"\"\"\n        Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n>           raise WidgetError(\"Only one of 'before' or 'after' can be provided\")\nE           textual.widget.WidgetError: Only one of 'before' or 'after' can be provided\n\nsrc/textual/widget.py:1058: WidgetError\n______________________ test_move_before_end_of_child_list ______________________\n\n    async def test_move_before_end_of_child_list() -> None:\n        \"\"\"Test attempting to move before the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=-(len(widgets) + 10))\nE               TypeError: Widget.move_child() got multiple values for argument 'before'\n\ntests/test_widget_child_moving.py:134: TypeError\n=============================== warnings summary ===============================\ntests/test_widget_child_moving.py::test_move_before_permutations\ntests/test_widget_child_moving.py::test_move_child_after_last_child\ntests/test_widget_child_moving.py::test_move_past_end_of_child_list\ntests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\ntests/test_widget_child_moving.py::test_move_after_permutations\ntests/test_widget_child_moving.py::test_move_before_end_of_child_list\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget_child_moving.py::test_move_before_permutations\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget_child_moving.py::test_move_before_permutations - Typ...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_child - ...\nFAILED tests/test_widget_child_moving.py::test_move_past_end_of_child_list - ...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\nFAILED tests/test_widget_child_moving.py::test_move_after_permutations - text...\nFAILED tests/test_widget_child_moving.py::test_move_before_end_of_child_list\n======================== 6 failed, 7 warnings in 0.28s =========================\n\n"], "textual-src/textual/widget.py-_get_box_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/test_box_model.py FFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_max ___________________________________\n\n    def test_max():\n        \"\"\"Check that max_width and max_height are respected.\"\"\"\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n        styles.width = 100\n        styles.height = 80\n        styles.max_width = 40\n        styles.max_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:166: TypeError\n__________________________________ test_width __________________________________\n\n    def test_width():\n        \"\"\"Test width settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:61: TypeError\n_________________________________ test_height __________________________________\n\n    def test_height():\n        \"\"\"Test height settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:111: TypeError\n___________________________________ test_min ___________________________________\n\n    def test_min():\n        \"\"\"Check that min_width and min_height are respected.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n        styles.width = 10\n        styles.height = 5\n        styles.min_width = 40\n        styles.min_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:189: TypeError\n_______________________________ test_content_box _______________________________\n\n    def test_content_box():\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n    \n        # border-box is default\n        assert widget.styles.box_sizing == \"border-box\"\n    \n        widget.styles.width = 10\n        widget.styles.height = 8\n        widget.styles.padding = 1\n        widget.styles.border = (\"solid\", \"red\")\n    \n>       box_model = widget._get_box_model(\n            Size(60, 20),\n            Size(80, 24),\n            one,\n            one,\n        )\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:30: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_box_model.py::test_max - TypeError: Widget._get_box_model()...\nFAILED tests/test_box_model.py::test_width - TypeError: Widget._get_box_model...\nFAILED tests/test_box_model.py::test_height - TypeError: Widget._get_box_mode...\nFAILED tests/test_box_model.py::test_min - TypeError: Widget._get_box_model()...\nFAILED tests/test_box_model.py::test_content_box - TypeError: Widget._get_box...\n============================== 5 failed in 0.14s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/test_box_model.py FFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_max ___________________________________\n\n    def test_max():\n        \"\"\"Check that max_width and max_height are respected.\"\"\"\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n        styles.width = 100\n        styles.height = 80\n        styles.max_width = 40\n        styles.max_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:166: TypeError\n__________________________________ test_width __________________________________\n\n    def test_width():\n        \"\"\"Test width settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:61: TypeError\n_________________________________ test_height __________________________________\n\n    def test_height():\n        \"\"\"Test height settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:111: TypeError\n___________________________________ test_min ___________________________________\n\n    def test_min():\n        \"\"\"Check that min_width and min_height are respected.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n        styles.width = 10\n        styles.height = 5\n        styles.min_width = 40\n        styles.min_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:189: TypeError\n_______________________________ test_content_box _______________________________\n\n    def test_content_box():\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n    \n        # border-box is default\n        assert widget.styles.box_sizing == \"border-box\"\n    \n        widget.styles.width = 10\n        widget.styles.height = 8\n        widget.styles.padding = 1\n        widget.styles.border = (\"solid\", \"red\")\n    \n>       box_model = widget._get_box_model(\n            Size(60, 20),\n            Size(80, 24),\n            one,\n            one,\n        )\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:30: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_box_model.py::test_max - TypeError: Widget._get_box_model()...\nFAILED tests/test_box_model.py::test_width - TypeError: Widget._get_box_model...\nFAILED tests/test_box_model.py::test_height - TypeError: Widget._get_box_mode...\nFAILED tests/test_box_model.py::test_min - TypeError: Widget._get_box_model()...\nFAILED tests/test_box_model.py::test_content_box - TypeError: Widget._get_box...\n============================== 5 failed in 0.14s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/test_box_model.py FFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_max ___________________________________\n\n    def test_max():\n        \"\"\"Check that max_width and max_height are respected.\"\"\"\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n        styles.width = 100\n        styles.height = 80\n        styles.max_width = 40\n        styles.max_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:166: TypeError\n__________________________________ test_width __________________________________\n\n    def test_width():\n        \"\"\"Test width settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:61: TypeError\n_________________________________ test_height __________________________________\n\n    def test_height():\n        \"\"\"Test height settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:111: TypeError\n___________________________________ test_min ___________________________________\n\n    def test_min():\n        \"\"\"Check that min_width and min_height are respected.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n        styles.width = 10\n        styles.height = 5\n        styles.min_width = 40\n        styles.min_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:189: TypeError\n_______________________________ test_content_box _______________________________\n\n    def test_content_box():\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n    \n        # border-box is default\n        assert widget.styles.box_sizing == \"border-box\"\n    \n        widget.styles.width = 10\n        widget.styles.height = 8\n        widget.styles.padding = 1\n        widget.styles.border = (\"solid\", \"red\")\n    \n>       box_model = widget._get_box_model(\n            Size(60, 20),\n            Size(80, 24),\n            one,\n            one,\n        )\nE       TypeError: Widget._get_box_model() takes 4 positional arguments but 5 were given\n\ntests/test_box_model.py:30: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_box_model.py::test_max - TypeError: Widget._get_box_model()...\nFAILED tests/test_box_model.py::test_width - TypeError: Widget._get_box_model...\nFAILED tests/test_box_model.py::test_height - TypeError: Widget._get_box_mode...\nFAILED tests/test_box_model.py::test_min - TypeError: Widget._get_box_model()...\nFAILED tests/test_box_model.py::test_content_box - TypeError: Widget._get_box...\n============================== 5 failed in 0.14s ===============================\n\n"], "textual-src/textual/widget.py-get_content_width": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n"], "textual-src/textual/widget.py-get_content_height": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/layouts/test_content_dimensions.py ___________\nImportError while importing test module '/root/repos/py_data/textual/tests/layouts/test_content_dimensions.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/layouts/test_content_dimensions.py:7: in <module>\n    from textual.widget import Widget\nsrc/textual/widget.py:260: in <module>\n    class Widget(DOMNode):\nsrc/textual/widget.py:1332: in Widget\n    from typing import Size\nE   ImportError: cannot import name 'Size' from 'typing' (/usr/local/lib/python3.10/typing.py)\n=========================== short test summary info ============================\nERROR tests/layouts/test_content_dimensions.py\n=============================== 1 error in 0.13s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/layouts/test_content_dimensions.py::test_empty_widget_height\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.11s ===============================\n\n"], "textual-src/textual/suggester.py-_get_suggestion": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/suggester/test_suggester.py F......FFFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_case_insensitive_cache_hits _______________________\n\n    async def test_case_insensitive_cache_hits():\n        count = 0\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                nonlocal count\n                count += 1\n                return value + \"abc\"\n    \n        suggester = MySuggester(use_cache=True, case_sensitive=False)\n        hellos = [\"hello\", \"HELLO\", \"HeLlO\", \"Hello\", \"hELLO\"]\n        for hello in hellos:\n            await suggester._get_suggestion(DOMNode(), hello)\n>       assert count == 1\nE       assert 0 == 1\n\ntests/suggester/test_suggester.py:111: AssertionError\n________________________________ test_cache_on _________________________________\n\n    async def test_cache_on():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=True)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:34: AssertionError\n__________________ test_suggestion_ready_message_on_cache_hit __________________\n\n    async def test_suggestion_ready_message_on_cache_hit():\n        log = []\n        suggester = FillSuggester(use_cache=True)\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:74: AssertionError\n________________________________ test_cache_off ________________________________\n\n    async def test_cache_off():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=False)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:49: AssertionError\n________________________ test_suggestion_ready_message _________________________\n\n    async def test_suggestion_ready_message():\n        log = []\n        suggester = FillSuggester()\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:58: AssertionError\n=============================== warnings summary ===============================\ntests/suggester/test_suggester.py: 11 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/suggester/test_suggester.py::test_case_insensitive_cache_hits\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_cache_hits - ...\nFAILED tests/suggester/test_suggester.py::test_cache_on - AssertionError: ass...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message_on_cache_hit\nFAILED tests/suggester/test_suggester.py::test_cache_off - AssertionError: as...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message - Ass...\n=================== 5 failed, 6 passed, 12 warnings in 0.12s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/suggester/test_suggester.py F......FFFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_case_insensitive_cache_hits _______________________\n\n    async def test_case_insensitive_cache_hits():\n        count = 0\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                nonlocal count\n                count += 1\n                return value + \"abc\"\n    \n        suggester = MySuggester(use_cache=True, case_sensitive=False)\n        hellos = [\"hello\", \"HELLO\", \"HeLlO\", \"Hello\", \"hELLO\"]\n        for hello in hellos:\n            await suggester._get_suggestion(DOMNode(), hello)\n>       assert count == 1\nE       assert 0 == 1\n\ntests/suggester/test_suggester.py:111: AssertionError\n________________________________ test_cache_on _________________________________\n\n    async def test_cache_on():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=True)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:34: AssertionError\n__________________ test_suggestion_ready_message_on_cache_hit __________________\n\n    async def test_suggestion_ready_message_on_cache_hit():\n        log = []\n        suggester = FillSuggester(use_cache=True)\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:74: AssertionError\n________________________________ test_cache_off ________________________________\n\n    async def test_cache_off():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=False)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:49: AssertionError\n________________________ test_suggestion_ready_message _________________________\n\n    async def test_suggestion_ready_message():\n        log = []\n        suggester = FillSuggester()\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:58: AssertionError\n=============================== warnings summary ===============================\ntests/suggester/test_suggester.py: 11 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/suggester/test_suggester.py::test_case_insensitive_cache_hits\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_cache_hits - ...\nFAILED tests/suggester/test_suggester.py::test_cache_on - AssertionError: ass...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message_on_cache_hit\nFAILED tests/suggester/test_suggester.py::test_cache_off - AssertionError: as...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message - Ass...\n=================== 5 failed, 6 passed, 12 warnings in 0.12s ===================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/suggester/test_suggester.py F......FFFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_case_insensitive_cache_hits _______________________\n\n    async def test_case_insensitive_cache_hits():\n        count = 0\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                nonlocal count\n                count += 1\n                return value + \"abc\"\n    \n        suggester = MySuggester(use_cache=True, case_sensitive=False)\n        hellos = [\"hello\", \"HELLO\", \"HeLlO\", \"Hello\", \"hELLO\"]\n        for hello in hellos:\n            await suggester._get_suggestion(DOMNode(), hello)\n>       assert count == 1\nE       assert 0 == 1\n\ntests/suggester/test_suggester.py:111: AssertionError\n________________________________ test_cache_on _________________________________\n\n    async def test_cache_on():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=True)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:34: AssertionError\n__________________ test_suggestion_ready_message_on_cache_hit __________________\n\n    async def test_suggestion_ready_message_on_cache_hit():\n        log = []\n        suggester = FillSuggester(use_cache=True)\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:74: AssertionError\n________________________________ test_cache_off ________________________________\n\n    async def test_cache_off():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=False)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:49: AssertionError\n________________________ test_suggestion_ready_message _________________________\n\n    async def test_suggestion_ready_message():\n        log = []\n        suggester = FillSuggester()\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:58: AssertionError\n=============================== warnings summary ===============================\ntests/suggester/test_suggester.py: 11 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/suggester/test_suggester.py::test_case_insensitive_cache_hits\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_cache_hits - ...\nFAILED tests/suggester/test_suggester.py::test_cache_on - AssertionError: ass...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message_on_cache_hit\nFAILED tests/suggester/test_suggester.py::test_cache_off - AssertionError: as...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message - Ass...\n=================== 5 failed, 6 passed, 12 warnings in 0.12s ===================\n\n"], "textual-src/textual/dom.py-add_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/css/test_stylesheet.py F                                           [100%]\n\n=================================== FAILURES ===================================\n________________ test_stylesheet_apply_user_css_over_widget_css ________________\n\n    def test_stylesheet_apply_user_css_over_widget_css():\n        user_css = \".a {color: red; tint: yellow;}\"\n    \n        class MyWidget(Widget):\n            DEFAULT_CSS = \".a {color: blue !important; background: lime;}\"\n    \n        node = MyWidget()\n>       node.add_class(\"a\")\n\ntests/css/test_stylesheet.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyWidget(), update = True, class_names = ('a',)\n\n    def add_class(self, *class_names: str, update: bool = True) -> 'Node':\n        \"\"\"\n        Add class names to this Node.\n    \n        Args:\n            *class_names: CSS class names to add.\n            update: Also update styles.\n    \n        Returns:\n            Self.\n        \"\"\"\n        # Your implementation here\n        # For example:\n        if update:\n            self._update_styles()\n>       self._class_names.extend(class_names)\nE       AttributeError: 'MyWidget' object has no attribute '_class_names'. Did you mean: '_css_bases'?\n\nsrc/textual/dom.py:1438: AttributeError\n=========================== short test summary info ============================\nFAILED tests/css/test_stylesheet.py::test_stylesheet_apply_user_css_over_widget_css\n============================== 1 failed in 0.17s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/css/test_stylesheet.py F                                           [100%]\n\n=================================== FAILURES ===================================\n________________ test_stylesheet_apply_user_css_over_widget_css ________________\n\n    def test_stylesheet_apply_user_css_over_widget_css():\n        user_css = \".a {color: red; tint: yellow;}\"\n    \n        class MyWidget(Widget):\n            DEFAULT_CSS = \".a {color: blue !important; background: lime;}\"\n    \n        node = MyWidget()\n>       node.add_class(\"a\")\n\ntests/css/test_stylesheet.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyWidget(), update = True, class_names = ('a',)\n\n    def add_class(self, *class_names: str, update: bool = True) -> 'Node':\n        \"\"\"\n        Add class names to this Node.\n    \n        Args:\n            *class_names: CSS class names to add.\n            update: Also update styles.\n    \n        Returns:\n            Self.\n        \"\"\"\n        # Add the class names to the Node's class list\n>       self.class_names.extend(class_names)\nE       AttributeError: 'MyWidget' object has no attribute 'class_names'\n\nsrc/textual/dom.py:1435: AttributeError\n=========================== short test summary info ============================\nFAILED tests/css/test_stylesheet.py::test_stylesheet_apply_user_css_over_widget_css\n============================== 1 failed in 0.15s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/css/test_stylesheet.py F                                           [100%]\n\n=================================== FAILURES ===================================\n________________ test_stylesheet_apply_user_css_over_widget_css ________________\n\n    def test_stylesheet_apply_user_css_over_widget_css():\n        user_css = \".a {color: red; tint: yellow;}\"\n    \n        class MyWidget(Widget):\n            DEFAULT_CSS = \".a {color: blue !important; background: lime;}\"\n    \n        node = MyWidget()\n>       node.add_class(\"a\")\n\ntests/css/test_stylesheet.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyWidget(), update = True, class_names = ('a',), class_name = 'a'\n\n    def add_class(self, *class_names: str, update: bool = True) -> 'Node':\n        \"\"\"\n        Add class names to this Node.\n    \n        Args:\n            *class_names: CSS class names to add.\n            update: Also update styles.\n    \n        Returns:\n            Self.\n        \"\"\"\n        # Add class names to the node\n        for class_name in class_names:\n>           self.class_names.add(class_name)\nE           AttributeError: 'MyWidget' object has no attribute 'class_names'\n\nsrc/textual/dom.py:1436: AttributeError\n=========================== short test summary info ============================\nFAILED tests/css/test_stylesheet.py::test_stylesheet_apply_user_css_over_widget_css\n============================== 1 failed in 0.14s ===============================\n\n"], "textual-src/textual/reactive.py-_initialize_object": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_reactive.py F                                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_reactive_inheritance ___________________________\n\n    async def test_reactive_inheritance():\n        \"\"\"Check that inheritance works as expected for reactives.\"\"\"\n    \n        class Primary(App):\n            foo = reactive(1)\n            bar = reactive(\"bar\")\n    \n        class Secondary(Primary):\n            foo = reactive(2)\n            egg = reactive(\"egg\")\n    \n        class Tertiary(Secondary):\n            baz = reactive(\"baz\")\n    \n        primary = Primary()\n        secondary = Secondary()\n        tertiary = Tertiary()\n    \n        primary_reactive_count = len(primary._reactives)\n    \n        # Secondary adds one new reactive\n        assert len(secondary._reactives) == primary_reactive_count + 1\n    \n>       Reactive._initialize_object(primary)\n\ntests/test_reactive.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'textual.reactive.Reactive'>\nobj = Primary(title='Primary', classes={'-dark-mode'})\n\n    @classmethod\n    def _initialize_object(cls, obj: 'Reactable') -> None:\n        \"\"\"\n        Set defaults and call any watchers / computes for the first time.\n    \n        Args:\n            obj: An object with Reactive descriptors\n        \"\"\"\n        # Set defaults for the object\n        # This is a placeholder, you would need to implement the actual default setting logic here\n        # For example:\n        obj.default_setting = \"default value\"\n    \n        # Call any watchers/computes for the object\n        # This is a placeholder, you would need to implement the actual watcher/compute logic here\n        # For example:\n>       obj.watchers_and_computes()\nE       AttributeError: 'Primary' object has no attribute 'watchers_and_computes'\n\nsrc/textual/reactive.py:194: AttributeError\n=============================== warnings summary ===============================\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_reactive.py::test_reactive_inheritance - AttributeError: 'P...\n======================== 1 failed, 2 warnings in 0.17s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_reactive.py F                                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_reactive_inheritance ___________________________\n\n    async def test_reactive_inheritance():\n        \"\"\"Check that inheritance works as expected for reactives.\"\"\"\n    \n        class Primary(App):\n            foo = reactive(1)\n            bar = reactive(\"bar\")\n    \n        class Secondary(Primary):\n            foo = reactive(2)\n            egg = reactive(\"egg\")\n    \n        class Tertiary(Secondary):\n            baz = reactive(\"baz\")\n    \n        primary = Primary()\n        secondary = Secondary()\n        tertiary = Tertiary()\n    \n        primary_reactive_count = len(primary._reactives)\n    \n        # Secondary adds one new reactive\n        assert len(secondary._reactives) == primary_reactive_count + 1\n    \n>       Reactive._initialize_object(primary)\n\ntests/test_reactive.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'textual.reactive.Reactive'>\nobj = Primary(title='Primary', classes={'-dark-mode'})\n\n    @classmethod\n    def _initialize_object(cls, obj: Reactable) -> None:\n        \"\"\"\n        Set defaults and call any watchers / computes for the first time.\n    \n        Args:\n            obj: An object with Reactive descriptors\n        \"\"\"\n        # Set defaults for the object\n        # This is a placeholder, the actual implementation depends on the specific requirements\n        # For example, setting default values for properties, initializing caches, etc.\n>       obj.set_defaults()\nE       AttributeError: 'Primary' object has no attribute 'set_defaults'. Did you mean: '_get_default_css'?\n\nsrc/textual/reactive.py:189: AttributeError\n=============================== warnings summary ===============================\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_reactive.py::test_reactive_inheritance - AttributeError: 'P...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_reactive.py F                                                 [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_reactive_inheritance ___________________________\n\n    async def test_reactive_inheritance():\n        \"\"\"Check that inheritance works as expected for reactives.\"\"\"\n    \n        class Primary(App):\n            foo = reactive(1)\n            bar = reactive(\"bar\")\n    \n        class Secondary(Primary):\n            foo = reactive(2)\n            egg = reactive(\"egg\")\n    \n        class Tertiary(Secondary):\n            baz = reactive(\"baz\")\n    \n>       primary = Primary()\n\ntests/test_reactive.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:427: in __init__\n    ansi_theme = self.ansi_theme_dark if self.dark else self.ansi_theme_light\nsrc/textual/reactive.py:260: in __get__\n    self._initialize_reactive(obj, self.name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'textual.reactive.Reactive'>\nobj = <[AttributeError(\"'Primary' object has no attribute 'set_default_values'\") raised in repr()] Primary object at 0x7f4afeb523b0>\nname = 'dark'\n\n    @classmethod\n    def _initialize_reactive(self, obj: Reactable, name: str) -> None:\n        \"\"\"\n        Set defaults and call any watchers / computes for the first time.\n    \n        Args:\n            obj (Reactable): An object with Reactive descriptors\n            name (str): The name of the object (not used in this implementation)\n        \"\"\"\n        # Set default values for the object's reactive attributes\n        # Assuming the object has a method to set default values\n>       obj.set_default_values()\nE       AttributeError: 'Primary' object has no attribute 'set_default_values'\n\nsrc/textual/reactive.py:189: AttributeError\n=============================== warnings summary ===============================\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_reactive.py::test_reactive_inheritance - AttributeError: 'P...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n"], "textual-src/textual/message_pump.py-call_after_refresh": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_call_after_refresh ____________________________\n\n    async def test_call_after_refresh() -> None:\n        \"\"\"Check that call later makes a call after a refresh.\"\"\"\n        app = CallLaterApp()\n    \n        display_count = -1\n    \n        called_event = asyncio.Event()\n    \n        callback_message_pump: MessagePump | None = None\n    \n        def callback() -> None:\n            nonlocal display_count\n            nonlocal callback_message_pump\n            called_event.set()\n            display_count = app.display_count\n            callback_message_pump = active_message_pump.get()\n    \n        async with app.run_test():\n>           app.call_after_refresh(callback)\nE           AttributeError: 'CallLaterApp' object has no attribute 'call_after_refresh'\n\ntests/test_call_x_schedulers.py:45: AttributeError\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_after_refresh - AttributeEr...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_call_after_refresh ____________________________\n\n    async def test_call_after_refresh() -> None:\n        \"\"\"Check that call later makes a call after a refresh.\"\"\"\n        app = CallLaterApp()\n    \n        display_count = -1\n    \n        called_event = asyncio.Event()\n    \n        callback_message_pump: MessagePump | None = None\n    \n        def callback() -> None:\n            nonlocal display_count\n            nonlocal callback_message_pump\n            called_event.set()\n            display_count = app.display_count\n            callback_message_pump = active_message_pump.get()\n    \n        async with app.run_test():\n>           app.call_after_refresh(callback)\n\ntests/test_call_x_schedulers.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <function test_call_after_refresh.<locals>.callback at 0x7f981e3b3f40>\nargs = (), kwargs = {}, Queue = <class 'queue.Queue'>\n\n    def call_after_refresh(self, callback: callable, *args: Any, **kwargs: Any) -> bool:\n        \"\"\"\n        Schedule a callback to run after all messages are processed and the screen\n        has been refreshed. Positional and keyword arguments are passed to the callable.\n    \n        Args:\n            callback: A callable.\n    \n        Returns:\n            `True` if the callback was scheduled, or `False` if the callback could not be\n                scheduled (may occur if the message pump was closed or closing).\n        \"\"\"\n        # Check if the callback is callable\n        if not callable(callback):\n            return False\n    \n        # Replace this comment with the actual code to schedule the callback\n        # For example, you can use a queue or a timer to schedule the callback\n        # Here's a simple example using a queue\n        from queue import Queue\n>       self.callback_queue = self.callback_queue or Queue()\nE       AttributeError: 'CallLaterApp' object has no attribute 'callback_queue'\n\nsrc/textual/message_pump.py:437: AttributeError\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_after_refresh - AttributeEr...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_call_after_refresh ____________________________\n\n    async def test_call_after_refresh() -> None:\n        \"\"\"Check that call later makes a call after a refresh.\"\"\"\n        app = CallLaterApp()\n    \n        display_count = -1\n    \n        called_event = asyncio.Event()\n    \n        callback_message_pump: MessagePump | None = None\n    \n        def callback() -> None:\n            nonlocal display_count\n            nonlocal callback_message_pump\n            called_event.set()\n            display_count = app.display_count\n            callback_message_pump = active_message_pump.get()\n    \n        async with app.run_test():\n>           app.call_after_refresh(callback)\nE           AttributeError: 'CallLaterApp' object has no attribute 'call_after_refresh'\n\ntests/test_call_x_schedulers.py:45: AttributeError\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_after_refresh - AttributeEr...\n======================== 1 failed, 2 warnings in 0.16s =========================\n\n"], "textual-src/textual/message_pump.py-call_later": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_call_later ________________________________\n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n>           await pilot._wait_for_screen()\n\nsrc/textual/app.py:1484: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pilot app=CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})>\ntimeout = 30.0\n\n    async def _wait_for_screen(self, timeout: float = 30.0) -> bool:\n        \"\"\"Wait for the current screen and its children to have processed all pending events.\n    \n        Args:\n            timeout: A timeout in seconds to wait.\n    \n        Returns:\n            `True` if all events were processed. `False` if an exception occurred,\n            meaning that not all events could be processed.\n    \n        Raises:\n            WaitForScreenTimeout: If the screen and its children didn't finish processing within the timeout.\n        \"\"\"\n        children = [self.app, *self.app.screen.walk_children(with_self=True)]\n        count = 0\n        count_zero_event = asyncio.Event()\n    \n        def decrement_counter() -> None:\n            \"\"\"Decrement internal counter, and set an event if it reaches zero.\"\"\"\n            nonlocal count\n            count -= 1\n            if count == 0:\n                # When count is zero, all messages queued at the start of the method have been processed\n                count_zero_event.set()\n    \n        # Increase the count for every successful call_later\n        for child in children:\n>           if child.call_later(decrement_counter):\nE           AttributeError: 'CallLaterApp' object has no attribute 'call_later'\n\nsrc/textual/pilot.py:383: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_call_later() -> None:\n        \"\"\"Check that call later makes a call.\"\"\"\n        app = CallLaterApp()\n        called_event = asyncio.Event()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:633: in _process_messages_loop\n    await invoke(method, event)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), event = Idle()\n\n    async def _on_idle(self, event: events.Idle) -> None:\n        # Check for any widgets marked as 'dirty' (needs a repaint)\n        event.prevent_default()\n    \n        try:\n            if not self.app._batch_count and self.is_current:\n                if (\n                    self._layout_required\n                    or self._scroll_required\n                    or self._repaint_required\n                    or self._recompose_required\n                    or self._dirty_widgets\n                ):\n                    self._update_timer.resume()\n                    return\n    \n            await self._invoke_and_clear_callbacks()\n        finally:\n            if self._bindings_updated:\n                self._bindings_updated = False\n>               self.app.call_later(self.bindings_updated_signal.publish, self)\nE               AttributeError: 'CallLaterApp' object has no attribute 'call_later'\n\nsrc/textual/screen.py:778: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/screen.py:778 in _on_idle            \u2502\n\u2502                                                                              \u2502\n\u2502    775 \u2502   \u2502   finally:                                                      \u2502\n\u2502    776 \u2502   \u2502   \u2502   if self._bindings_updated:                                \u2502\n\u2502    777 \u2502   \u2502   \u2502   \u2502   self._bindings_updated = False                        \u2502\n\u2502 \u2771  778 \u2502   \u2502   \u2502   \u2502   self.app.call_later(self.bindings_updated_signal.publ \u2502\n\u2502    779 \u2502                                                                     \u2502\n\u2502    780 \u2502   def _compositor_refresh(self) -> None:                            \u2502\n\u2502    781 \u2502   \u2502   \"\"\"Perform a compositor refresh.\"\"\"                           \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                            \u2502\n\u2502 \u2502 event = Idle()                \u2502                                            \u2502\n\u2502 \u2502  self = Screen(id='_default') \u2502                                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'CallLaterApp' object has no attribute 'call_later'\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_later - AttributeError: 'Ca...\n======================== 1 failed, 2 warnings in 0.30s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_call_later ________________________________\n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n>           await pilot._wait_for_screen()\n\nsrc/textual/app.py:1484: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pilot app=CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})>\ntimeout = 30.0\n\n    async def _wait_for_screen(self, timeout: float = 30.0) -> bool:\n        \"\"\"Wait for the current screen and its children to have processed all pending events.\n    \n        Args:\n            timeout: A timeout in seconds to wait.\n    \n        Returns:\n            `True` if all events were processed. `False` if an exception occurred,\n            meaning that not all events could be processed.\n    \n        Raises:\n            WaitForScreenTimeout: If the screen and its children didn't finish processing within the timeout.\n        \"\"\"\n        children = [self.app, *self.app.screen.walk_children(with_self=True)]\n        count = 0\n        count_zero_event = asyncio.Event()\n    \n        def decrement_counter() -> None:\n            \"\"\"Decrement internal counter, and set an event if it reaches zero.\"\"\"\n            nonlocal count\n            count -= 1\n            if count == 0:\n                # When count is zero, all messages queued at the start of the method have been processed\n                count_zero_event.set()\n    \n        # Increase the count for every successful call_later\n        for child in children:\n>           if child.call_later(decrement_counter):\nE           AttributeError: 'CallLaterApp' object has no attribute 'call_later'\n\nsrc/textual/pilot.py:383: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_call_later() -> None:\n        \"\"\"Check that call later makes a call.\"\"\"\n        app = CallLaterApp()\n        called_event = asyncio.Event()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:638: in _process_messages_loop\n    await invoke(method, event)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), event = Idle()\n\n    async def _on_idle(self, event: events.Idle) -> None:\n        # Check for any widgets marked as 'dirty' (needs a repaint)\n        event.prevent_default()\n    \n        try:\n            if not self.app._batch_count and self.is_current:\n                if (\n                    self._layout_required\n                    or self._scroll_required\n                    or self._repaint_required\n                    or self._recompose_required\n                    or self._dirty_widgets\n                ):\n                    self._update_timer.resume()\n                    return\n    \n            await self._invoke_and_clear_callbacks()\n        finally:\n            if self._bindings_updated:\n                self._bindings_updated = False\n>               self.app.call_later(self.bindings_updated_signal.publish, self)\nE               AttributeError: 'CallLaterApp' object has no attribute 'call_later'\n\nsrc/textual/screen.py:778: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/screen.py:778 in _on_idle            \u2502\n\u2502                                                                              \u2502\n\u2502    775 \u2502   \u2502   finally:                                                      \u2502\n\u2502    776 \u2502   \u2502   \u2502   if self._bindings_updated:                                \u2502\n\u2502    777 \u2502   \u2502   \u2502   \u2502   self._bindings_updated = False                        \u2502\n\u2502 \u2771  778 \u2502   \u2502   \u2502   \u2502   self.app.call_later(self.bindings_updated_signal.publ \u2502\n\u2502    779 \u2502                                                                     \u2502\n\u2502    780 \u2502   def _compositor_refresh(self) -> None:                            \u2502\n\u2502    781 \u2502   \u2502   \"\"\"Perform a compositor refresh.\"\"\"                           \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                            \u2502\n\u2502 \u2502 event = Idle()                \u2502                                            \u2502\n\u2502 \u2502  self = Screen(id='_default') \u2502                                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'CallLaterApp' object has no attribute 'call_later'\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_later - AttributeError: 'Ca...\n======================== 1 failed, 2 warnings in 0.31s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_call_later ________________________________\n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n>           await pilot._wait_for_screen()\n\nsrc/textual/app.py:1484: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pilot app=CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})>\ntimeout = 30.0\n\n    async def _wait_for_screen(self, timeout: float = 30.0) -> bool:\n        \"\"\"Wait for the current screen and its children to have processed all pending events.\n    \n        Args:\n            timeout: A timeout in seconds to wait.\n    \n        Returns:\n            `True` if all events were processed. `False` if an exception occurred,\n            meaning that not all events could be processed.\n    \n        Raises:\n            WaitForScreenTimeout: If the screen and its children didn't finish processing within the timeout.\n        \"\"\"\n        children = [self.app, *self.app.screen.walk_children(with_self=True)]\n        count = 0\n        count_zero_event = asyncio.Event()\n    \n        def decrement_counter() -> None:\n            \"\"\"Decrement internal counter, and set an event if it reaches zero.\"\"\"\n            nonlocal count\n            count -= 1\n            if count == 0:\n                # When count is zero, all messages queued at the start of the method have been processed\n                count_zero_event.set()\n    \n        # Increase the count for every successful call_later\n        for child in children:\n>           if child.call_later(decrement_counter):\nE           AttributeError: 'CallLaterApp' object has no attribute 'call_later'\n\nsrc/textual/pilot.py:383: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_call_later() -> None:\n        \"\"\"Check that call later makes a call.\"\"\"\n        app = CallLaterApp()\n        called_event = asyncio.Event()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:657: in _process_messages_loop\n    await invoke(method, event)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), event = Idle()\n\n    async def _on_idle(self, event: events.Idle) -> None:\n        # Check for any widgets marked as 'dirty' (needs a repaint)\n        event.prevent_default()\n    \n        try:\n            if not self.app._batch_count and self.is_current:\n                if (\n                    self._layout_required\n                    or self._scroll_required\n                    or self._repaint_required\n                    or self._recompose_required\n                    or self._dirty_widgets\n                ):\n                    self._update_timer.resume()\n                    return\n    \n            await self._invoke_and_clear_callbacks()\n        finally:\n            if self._bindings_updated:\n                self._bindings_updated = False\n>               self.app.call_later(self.bindings_updated_signal.publish, self)\nE               AttributeError: 'CallLaterApp' object has no attribute 'call_later'\n\nsrc/textual/screen.py:778: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/screen.py:778 in _on_idle            \u2502\n\u2502                                                                              \u2502\n\u2502    775 \u2502   \u2502   finally:                                                      \u2502\n\u2502    776 \u2502   \u2502   \u2502   if self._bindings_updated:                                \u2502\n\u2502    777 \u2502   \u2502   \u2502   \u2502   self._bindings_updated = False                        \u2502\n\u2502 \u2771  778 \u2502   \u2502   \u2502   \u2502   self.app.call_later(self.bindings_updated_signal.publ \u2502\n\u2502    779 \u2502                                                                     \u2502\n\u2502    780 \u2502   def _compositor_refresh(self) -> None:                            \u2502\n\u2502    781 \u2502   \u2502   \"\"\"Perform a compositor refresh.\"\"\"                           \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                            \u2502\n\u2502 \u2502 event = Idle()                \u2502                                            \u2502\n\u2502 \u2502  self = Screen(id='_default') \u2502                                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'CallLaterApp' object has no attribute 'call_later'\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_later - AttributeError: 'Ca...\n======================== 1 failed, 2 warnings in 0.30s =========================\n\n"], "textual-src/textual/message_pump.py-post_message": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\n============================ no tests ran in 0.09s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_reactive.py::watch_test_var\n(no match in any of [<Module test_reactive.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\n============================ no tests ran in 0.09s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_reactive.py::watch_test_var\n(no match in any of [<Module test_reactive.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\n============================ no tests ran in 0.09s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_reactive.py::watch_test_var\n(no match in any of [<Module test_reactive.py>])\n\n"], "textual-src/textual/_spatial_map.py-get_values_in_region": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_spatial_map.py F                                              [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_values_in_region ___________________________\n\n    def test_get_values_in_region() -> None:\n        spatial_map: SpatialMap[str] = SpatialMap(20, 10)\n    \n        spatial_map.insert(\n            [\n                (Region(10, 5, 5, 5), False, False, \"foo\"),\n                (Region(5, 20, 5, 5), False, False, \"bar\"),\n                (Region(0, 0, 40, 1), True, False, \"title\"),\n            ]\n        )\n    \n        assert spatial_map.get_values_in_region(Region(0, 0, 10, 5)) == [\n            \"title\",\n            \"foo\",\n>       ]\nE       AttributeError: 'SpatialMap' object has no attribute 'get_values_in_region'\n\ntests/test_spatial_map.py:56: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_spatial_map.py::test_get_values_in_region - AttributeError:...\n============================== 1 failed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_spatial_map.py F                                              [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_values_in_region ___________________________\n\n    def test_get_values_in_region() -> None:\n        spatial_map: SpatialMap[str] = SpatialMap(20, 10)\n    \n        spatial_map.insert(\n            [\n                (Region(10, 5, 5, 5), False, False, \"foo\"),\n                (Region(5, 20, 5, 5), False, False, \"bar\"),\n                (Region(0, 0, 40, 1), True, False, \"title\"),\n            ]\n        )\n    \n        assert spatial_map.get_values_in_region(Region(0, 0, 10, 5)) == [\n            \"title\",\n            \"foo\",\n>       ]\nE       AttributeError: 'SpatialMap' object has no attribute 'get_values_in_region'\n\ntests/test_spatial_map.py:56: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_spatial_map.py::test_get_values_in_region - AttributeError:...\n============================== 1 failed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_spatial_map.py F                                              [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_values_in_region ___________________________\n\n    def test_get_values_in_region() -> None:\n        spatial_map: SpatialMap[str] = SpatialMap(20, 10)\n    \n        spatial_map.insert(\n            [\n                (Region(10, 5, 5, 5), False, False, \"foo\"),\n                (Region(5, 20, 5, 5), False, False, \"bar\"),\n                (Region(0, 0, 40, 1), True, False, \"title\"),\n            ]\n        )\n    \n        assert spatial_map.get_values_in_region(Region(0, 0, 10, 5)) == [\n            \"title\",\n            \"foo\",\n>       ]\nE       AttributeError: 'SpatialMap' object has no attribute 'get_values_in_region'\n\ntests/test_spatial_map.py:56: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_spatial_map.py::test_get_values_in_region - AttributeError:...\n============================== 1 failed in 0.10s ===============================\n\n"], "textual-src/textual/validation.py-validate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 45 items\n\ntests/test_validation.py ...................................FFFFFFF...   [100%]\n\n=================================== FAILURES ===================================\n__________________ test_URL_validate[http://example.com-True] __________________\n\nvalue = 'http://example.com', expected_result = True\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n_________________ test_URL_validate[https://example.com-True] __________________\n\nvalue = 'https://example.com', expected_result = True\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n___________________ test_URL_validate[www.example.com-False] ___________________\n\nvalue = 'www.example.com', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n___________________ test_URL_validate[://example.com-False] ____________________\n\nvalue = '://example.com', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n____________________ test_URL_validate[https:///path-False] ____________________\n\nvalue = 'https:///path', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n_____ test_URL_validate[redis://username:pass[word@localhost:6379/0-False] _____\n\nvalue = 'redis://username:pass[word@localhost:6379/0', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n__________________________ test_URL_validate[-False] ___________________________\n\nvalue = '', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n>       validator = URL()\nE       TypeError: Can't instantiate abstract class URL with abstract method validate\n\ntests/test_validation.py:199: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_validation.py::test_URL_validate[http://example.com-True]\nFAILED tests/test_validation.py::test_URL_validate[https://example.com-True]\nFAILED tests/test_validation.py::test_URL_validate[www.example.com-False] - T...\nFAILED tests/test_validation.py::test_URL_validate[://example.com-False] - Ty...\nFAILED tests/test_validation.py::test_URL_validate[https:///path-False] - Typ...\nFAILED tests/test_validation.py::test_URL_validate[redis://username:pass[word@localhost:6379/0-False]\nFAILED tests/test_validation.py::test_URL_validate[-False] - TypeError: Can't...\n========================= 7 failed, 38 passed in 0.15s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________________ ERROR collecting tests/test_validation.py ___________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_validation.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_validation.py:5: in <module>\n    from textual.validation import (\nsrc/textual/validation.py:473: in <module>\n    class URL(Validator):\nsrc/textual/validation.py:480: in URL\n    from textual_validation import ValidationResult, Failure\nE   ModuleNotFoundError: No module named 'textual_validation'\n=========================== short test summary info ============================\nERROR tests/test_validation.py\n=============================== 1 error in 0.09s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Number_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Regex_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_parameter_and_description_inside_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Integer_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Integer_failure_description_when_NotANumber\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_priorities_parameter_only\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_priorities_parameter_and_describe_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Length_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_priorities_describe_failure_only\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_URL_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_describe_and_description_inside_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Function_validate\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________________ ERROR collecting tests/test_validation.py ___________________\nImportError while importing test module '/root/repos/py_data/textual/tests/test_validation.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_validation.py:5: in <module>\n    from textual.validation import (\nsrc/textual/validation.py:473: in <module>\n    class URL(Validator):\nsrc/textual/validation.py:481: in URL\n    from src.textual import ValidationResult\nE   ImportError: cannot import name 'ValidationResult' from 'src.textual' (/root/repos/py_data/textual/src/textual/__init__.py)\n=========================== short test summary info ============================\nERROR tests/test_validation.py\n=============================== 1 error in 0.10s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Number_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Regex_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_parameter_and_description_inside_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Integer_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Integer_failure_description_when_NotANumber\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_priorities_parameter_only\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_priorities_parameter_and_describe_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Length_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_priorities_describe_failure_only\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_URL_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Failure_description_describe_and_description_inside_validate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_validation.py::test_Function_validate\n\n"], "textual-src/textual/geometry.py-clamp": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_geometry.py .                                                 [100%]\n\n============================== 1 passed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_geometry.py .                                                 [100%]\n\n============================== 1 passed in 0.10s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_geometry.py .                                                 [100%]\n\n============================== 1 passed in 0.10s ===============================\n\n"], "textual-src/textual/constants.py-_get_textual_animations": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/animations/test_environment_variable.py ________\ntests/animations/test_environment_variable.py:3: in <module>\n    from textual import constants\nsrc/textual/__init__.py:9: in <module>\n    from . import constants\nsrc/textual/constants.py:131: in <module>\n    TEXTUAL_ANIMATIONS: AnimationLevel = _get_textual_animations()\nsrc/textual/constants.py:76: in _get_textual_animations\n    animation_level = AnimationLevel(value)\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n/usr/local/lib/python3.10/typing.py:386: in __call__\n    raise TypeError(f\"Cannot instantiate {self!r}\")\nE   TypeError: Cannot instantiate typing.Literal\n=========================== short test summary info ============================\nERROR tests/animations/test_environment_variable.py - TypeError: Cannot insta...\n=============================== 1 error in 0.09s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_environment_variable.py::test__get_textual_animations\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/animations/test_environment_variable.py ________\nImportError while importing test module '/root/repos/py_data/textual/tests/animations/test_environment_variable.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/animations/test_environment_variable.py:3: in <module>\n    from textual import constants\nsrc/textual/__init__.py:9: in <module>\n    from . import constants\nsrc/textual/constants.py:62: in <module>\n    from textual.app import AnimationLevel\nsrc/textual/app.py:56: in <module>\n    from . import (\nE   ImportError: cannot import name 'Logger' from partially initialized module 'textual' (most likely due to a circular import) (/root/repos/py_data/textual/src/textual/__init__.py)\n=========================== short test summary info ============================\nERROR tests/animations/test_environment_variable.py\n=============================== 1 error in 0.09s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_environment_variable.py::test__get_textual_animations\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/animations/test_environment_variable.py FFFFF                      [100%]\n\n=================================== FAILURES ===================================\n_____________________ test__get_textual_animations[-full] ______________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f74cf58cf40>\nenv_variable = '', value = 'full'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\nE       AssertionError: assert '' == 'full'\nE         \nE         - full\n\ntests/animations/test_environment_variable.py:21: AssertionError\n___________________ test__get_textual_animations[FULL-full] ____________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f74cf4e2dd0>\nenv_variable = 'FULL', value = 'full'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\n\ntests/animations/test_environment_variable.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/constants.py:82: in _get_textual_animations\n    if animation_level and not _is_valid_animation_level(animation_level):\nsrc/textual/constants.py:67: in _is_valid_animation_level\n    return value in AnimationLevel\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1041: in __getitem__\n    _check_generic(self, params, len(self.__parameters__))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = typing.Literal['none', 'basic', 'full'], parameters = (0,), elen = 0\n\n    def _check_generic(cls, parameters, elen=_marker):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n    \n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n>           raise TypeError(f\"{cls} is not a generic class\")\nE           TypeError: typing.Literal['none', 'basic', 'full'] is not a generic class\n\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:2878: TypeError\n__________________ test__get_textual_animations[BASIC-basic] ___________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f74cf467c40>\nenv_variable = 'BASIC', value = 'basic'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\n\ntests/animations/test_environment_variable.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/constants.py:82: in _get_textual_animations\n    if animation_level and not _is_valid_animation_level(animation_level):\nsrc/textual/constants.py:67: in _is_valid_animation_level\n    return value in AnimationLevel\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1041: in __getitem__\n    _check_generic(self, params, len(self.__parameters__))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = typing.Literal['none', 'basic', 'full'], parameters = (0,), elen = 0\n\n    def _check_generic(cls, parameters, elen=_marker):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n    \n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n>           raise TypeError(f\"{cls} is not a generic class\")\nE           TypeError: typing.Literal['none', 'basic', 'full'] is not a generic class\n\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:2878: TypeError\n___________________ test__get_textual_animations[NONE-none] ____________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f74cf1fbfa0>\nenv_variable = 'NONE', value = 'none'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\n\ntests/animations/test_environment_variable.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/constants.py:82: in _get_textual_animations\n    if animation_level and not _is_valid_animation_level(animation_level):\nsrc/textual/constants.py:67: in _is_valid_animation_level\n    return value in AnimationLevel\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1041: in __getitem__\n    _check_generic(self, params, len(self.__parameters__))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = typing.Literal['none', 'basic', 'full'], parameters = (0,), elen = 0\n\n    def _check_generic(cls, parameters, elen=_marker):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n    \n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n>           raise TypeError(f\"{cls} is not a generic class\")\nE           TypeError: typing.Literal['none', 'basic', 'full'] is not a generic class\n\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:2878: TypeError\n______________ test__get_textual_animations[garbanzo beans-full] _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f74cfd817b0>\nenv_variable = 'garbanzo beans', value = 'full'\n\n    @pytest.mark.parametrize(\n        [\"env_variable\", \"value\"],\n        [\n            (\"\", \"full\"),  # default\n            (\"FULL\", \"full\"),\n            (\"BASIC\", \"basic\"),\n            (\"NONE\", \"none\"),\n            (\"garbanzo beans\", \"full\"),  # fallback\n        ],\n    )\n    def test__get_textual_animations(monkeypatch, env_variable, value):  # type: ignore\n        \"\"\"Test that we parse the correct values from the env variable.\"\"\"\n        monkeypatch.setenv(\"TEXTUAL_ANIMATIONS\", env_variable)\n>       assert _get_textual_animations() == value\n\ntests/animations/test_environment_variable.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/constants.py:82: in _get_textual_animations\n    if animation_level and not _is_valid_animation_level(animation_level):\nsrc/textual/constants.py:67: in _is_valid_animation_level\n    return value in AnimationLevel\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1041: in __getitem__\n    _check_generic(self, params, len(self.__parameters__))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = typing.Literal['none', 'basic', 'full'], parameters = (0,), elen = 0\n\n    def _check_generic(cls, parameters, elen=_marker):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n    \n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n>           raise TypeError(f\"{cls} is not a generic class\")\nE           TypeError: typing.Literal['none', 'basic', 'full'] is not a generic class\n\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:2878: TypeError\n=========================== short test summary info ============================\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[-full]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[FULL-full]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[BASIC-basic]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[NONE-none]\nFAILED tests/animations/test_environment_variable.py::test__get_textual_animations[garbanzo beans-full]\n============================== 5 failed in 0.34s ===============================\n\n"], "textual-src/textual/color.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 14 errors\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_color.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_color.py:4: in <module>\n    from textual.color import Color, Gradient, Lab, lab_to_rgb, rgb_to_lab\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n_______________ ERROR collecting tests/test_style_importance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_importance.py:1: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n___________________ ERROR collecting tests/css/test_parse.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_parse.py:5: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n__________________ ERROR collecting tests/css/test_styles.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_styles.py:6: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n___________ ERROR collecting docs/examples/guide/testing/test_rgb.py ___________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ndocs/examples/guide/testing/test_rgb.py:1: in <module>\n    from rgb import RGBApp\ndocs/examples/guide/testing/rgb.py:1: in <module>\n    from textual import on\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n__________________ ERROR collecting tests/test_line_filter.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_line_filter.py:4: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n_________________ ERROR collecting tests/test_styles_cache.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_styles_cache.py:7: in <module>\n    from textual._styles_cache import StylesCache\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n________________ ERROR collecting tests/css/test_stylesheet.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_stylesheet.py:5: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n_____________________ ERROR collecting tests/test_strip.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_strip.py:5: in <module>\n    from textual._segment_tools import NoCellPositionForIndex\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n_______________ ERROR collecting tests/test_style_properties.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_properties.py:4: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 395\nE       from textual import Color\nE       ^^^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_color.py\nERROR tests/test_style_importance.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/css/test_nested_css.py\nERROR tests/css/test_parse.py\nERROR tests/css/test_styles.py\nERROR docs/examples/guide/testing/test_rgb.py\nERROR tests/css/test_initial.py\nERROR tests/css/test_inheritance.py\nERROR tests/test_line_filter.py\nERROR tests/test_styles_cache.py\nERROR tests/css/test_stylesheet.py\nERROR tests/test_strip.py\nERROR tests/test_style_properties.py\n============================== 14 errors in 0.82s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_input_has_spaces\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_importance.py::test_outline_importance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_render_styles_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_hsla_negative_degrees\n\nERROR: found no collectors for /root/repos/py_data/textual/docs/examples/guide/testing/test_rgb.py::test_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_merge\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_line_filter.py::test_dim_apply\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_crop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_outline\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_css_property_names\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_hsl_negative_degrees\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_color_names\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_set_rule\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_dirty_cache\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_merge_rules\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_color\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_get_rules\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_color_property_parsing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_strip.py::test_apply_filter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_padding_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_parse_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_importance.py::test_border_importance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_gradient_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/docs/examples/guide/testing/test_rgb.py::test_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_no_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_padding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_reset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_property_names_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector_with_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_properties.py::test_box_normalization\n\n", "FAILED: No code block", "FAILED: No code block"], "textual-src/textual/_slug.py-slug": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 34 items\n\ntests/test_slug.py ...................FFFF.FFFF.FFFFF                    [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_tracked_slugs[test-test-1] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 'test'\nexpected = 'test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-1'\nE         \nE         - test-1\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-2] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 'test'\nexpected = 'test-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-2'\nE         \nE         - test-2\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n______________________ test_tracked_slugs[-test---test-] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = '-test-'\nexpected = '-test-'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == '-test-'\nE         \nE         - -test-\nE         ? -    -\nE         + test\n\ntests/test_slug.py:62: AssertionError\n_____________________ test_tracked_slugs[-test---test--1] ______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = '-test-'\nexpected = '-test--1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == '-test--1'\nE         \nE         - -test--1\nE         + test\n\ntests/test_slug.py:62: AssertionError\n___ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1] ___\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-_test' == 'test-_test-1'\nE         \nE         - test-_test-1\nE         ?           --\nE         + test-_test\n\ntests/test_slug.py:62: AssertionError\n____________________ test_tracked_slugs[t\\xebst-t%C3%ABst] _____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 't\u00ebst'\nexpected = 't%C3%ABst'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 't%C3%ABst'\nE         \nE         - t%C3%ABst\nE         + test\n\ntests/test_slug.py:62: AssertionError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-1] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 't\u00ebst'\nexpected = 't%C3%ABst-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 't%C3%ABst-1'\nE         \nE         - t%C3%ABst-1\nE         + test\n\ntests/test_slug.py:62: AssertionError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-2] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 't\u00ebst'\nexpected = 't%C3%ABst-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 't%C3%ABst-2'\nE         \nE         - t%C3%ABst-2\nE         + test\n\ntests/test_slug.py:62: AssertionError\n______________ test_tracked_slugs[test\\U0001f937test-testtest-1] _______________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>\ntext = 'test\ud83e\udd37test', expected = 'testtest-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest' == 'testtest-1'\nE         \nE         - testtest-1\nE         ?         --\nE         + testtest\n\ntests/test_slug.py:62: AssertionError\n_ test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2] _\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>\ntext = 'test\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0ftest', expected = 'testtest-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest' == 'testtest-2'\nE         \nE         - testtest-2\nE         ?         --\nE         + testtest\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-3] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 'test'\nexpected = 'test-3'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-3'\nE         \nE         - test-3\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-4] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = 'test'\nexpected = 'test-4'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-4'\nE         \nE         - test-4\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n______________________ test_tracked_slugs[ test -test-5] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7f151a48ba30>, text = ' test '\nexpected = 'test-5'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert ' test ' == 'test-5'\nE         \nE         - test-5\nE         +  test\n\ntests/test_slug.py:62: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-1] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-2] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test-] - AssertionError...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test--1] - AssertionErr...\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1]\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst] - AssertionE...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-1] - Assertio...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-2] - Assertio...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937test-testtest-1]\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2]\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-3] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-4] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[ test -test-5] - AssertionError...\n======================== 13 failed, 21 passed in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 34 items\n\ntests/test_slug.py ..................FFFFFFFFFFFFFFFF                    [100%]\n\n=================================== FAILURES ===================================\n________________________ test_tracked_slugs[test-test] _________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 'test'\nexpected = 'test'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_______________________ test_tracked_slugs[test-test-1] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 'test'\nexpected = 'test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_______________________ test_tracked_slugs[test-test-2] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 'test'\nexpected = 'test-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n______________________ test_tracked_slugs[-test---test-] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = '-test-'\nexpected = '-test-'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_____________________ test_tracked_slugs[-test---test--1] ______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = '-test-'\nexpected = '-test--1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n____ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test] ____\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n___ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1] ___\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n____________________ test_tracked_slugs[t\\xebst-t%C3%ABst] _____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 't\u00ebst'\nexpected = 't%C3%ABst'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-1] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 't\u00ebst'\nexpected = 't%C3%ABst-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-2] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 't\u00ebst'\nexpected = 't%C3%ABst-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_______________ test_tracked_slugs[test\\U0001f642test-testtest] ________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>\ntext = 'test\ud83d\ude42test', expected = 'testtest'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n______________ test_tracked_slugs[test\\U0001f937test-testtest-1] _______________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>\ntext = 'test\ud83e\udd37test', expected = 'testtest-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_ test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2] _\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>\ntext = 'test\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0ftest', expected = 'testtest-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_______________________ test_tracked_slugs[test-test-3] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 'test'\nexpected = 'test-3'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n_______________________ test_tracked_slugs[test-test-4] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = 'test'\nexpected = 'test-4'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n______________________ test_tracked_slugs[ test -test-5] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fad5fac8790>, text = ' test '\nexpected = 'test-5'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       TypeError: TrackedSlugs.slug() takes 1 positional argument but 2 were given\n\ntests/test_slug.py:62: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_slug.py::test_tracked_slugs[test-test] - TypeError: Tracked...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-1] - TypeError: Track...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-2] - TypeError: Track...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test-] - TypeError: Tra...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test--1] - TypeError: T...\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test]\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1]\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst] - TypeError:...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-1] - TypeErro...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-2] - TypeErro...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f642test-testtest] - ...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937test-testtest-1]\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2]\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-3] - TypeError: Track...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-4] - TypeError: Track...\nFAILED tests/test_slug.py::test_tracked_slugs[ test -test-5] - TypeError: Tra...\n======================== 16 failed, 18 passed in 0.14s =========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 34 items\n\ntests/test_slug.py ...................FFFFFFFFF.FFFFF                    [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_tracked_slugs[test-test-1] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 'test'\nexpected = 'test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-1'\nE         \nE         - test-1\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-2] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 'test'\nexpected = 'test-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-2'\nE         \nE         - test-2\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n______________________ test_tracked_slugs[-test---test-] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = '-test-'\nexpected = '-test-'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == '-test-'\nE         \nE         - -test-\nE         ? -    -\nE         + test\n\ntests/test_slug.py:62: AssertionError\n_____________________ test_tracked_slugs[-test---test--1] ______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = '-test-'\nexpected = '-test--1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == '-test--1'\nE         \nE         - -test--1\nE         + test\n\ntests/test_slug.py:62: AssertionError\n____ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test] ____\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-test' == 'test-_test'\nE         \nE         - test-_test\nE         ?      -\nE         + test-test\n\ntests/test_slug.py:62: AssertionError\n___ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1] ___\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-test' == 'test-_test-1'\nE         \nE         - test-_test-1\nE         ?      -    --\nE         + test-test\n\ntests/test_slug.py:62: AssertionError\n____________________ test_tracked_slugs[t\\xebst-t%C3%ABst] _____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 't\u00ebst'\nexpected = 't%C3%ABst'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'tst' == 't%C3%ABst'\nE         \nE         - t%C3%ABst\nE         + tst\n\ntests/test_slug.py:62: AssertionError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-1] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 't\u00ebst'\nexpected = 't%C3%ABst-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'tst' == 't%C3%ABst-1'\nE         \nE         - t%C3%ABst-1\nE         + tst\n\ntests/test_slug.py:62: AssertionError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-2] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 't\u00ebst'\nexpected = 't%C3%ABst-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'tst' == 't%C3%ABst-2'\nE         \nE         - t%C3%ABst-2\nE         + tst\n\ntests/test_slug.py:62: AssertionError\n______________ test_tracked_slugs[test\\U0001f937test-testtest-1] _______________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>\ntext = 'test\ud83e\udd37test', expected = 'testtest-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest' == 'testtest-1'\nE         \nE         - testtest-1\nE         ?         --\nE         + testtest\n\ntests/test_slug.py:62: AssertionError\n_ test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2] _\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>\ntext = 'test\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0ftest', expected = 'testtest-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest' == 'testtest-2'\nE         \nE         - testtest-2\nE         ?         --\nE         + testtest\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-3] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 'test'\nexpected = 'test-3'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-3'\nE         \nE         - test-3\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-4] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = 'test'\nexpected = 'test-4'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-4'\nE         \nE         - test-4\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n______________________ test_tracked_slugs[ test -test-5] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa40621b130>, text = ' test '\nexpected = 'test-5'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test' == 'test-5'\nE         \nE         - test-5\nE         ?     --\nE         + test\n\ntests/test_slug.py:62: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-1] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-2] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test-] - AssertionError...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test--1] - AssertionErr...\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test]\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1]\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst] - AssertionE...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-1] - Assertio...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-2] - Assertio...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937test-testtest-1]\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2]\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-3] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-4] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[ test -test-5] - AssertionError...\n======================== 14 failed, 20 passed in 0.14s =========================\n\n"], "textual-src/textual/_styles_cache.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py FFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_no_styles ________________________________\n\n    def test_no_styles():\n        \"\"\"Test that empty style returns the content un-altered\"\"\"\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            \"\",\n            \"\",\n            content_size=Size(3, 3),\n        )\n        style = Style.from_color(bgcolor=Color.parse(\"green\").rich_color)\n        expected = [\n            Strip([Segment(\"foo\", style)], 3),\n            Strip([Segment(\"bar\", style)], 3),\n            Strip([Segment(\"baz\", style)], 3),\n        ]\n    \n>       assert lines == expected\nE       AssertionError: assert None == [Strip([Segment('foo', Style(bgcolor=Color('#008000', ColorType.TRUECOLOR, triplet=ColorTriplet(red=0, green=128, blue...ment('baz', Style(bgcolor=Color('#008000', ColorType.TRUECOLOR, triplet=ColorTriplet(red=0, green=128, blue=0))))], 3)]\n\ntests/test_styles_cache.py:56: AssertionError\n_________________________________ test_padding _________________________________\n\n    def test_padding():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_________________________________ test_border __________________________________\n\n    def test_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_____________________________ test_padding_border ______________________________\n\n    def test_padding_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n__________________________________ test_crop ___________________________________\n\n    def test_crop():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n            crop=Region(2, 2, 3, 3),\n        )\n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_________________________________ test_outline _________________________________\n\n    def test_outline():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.outline = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_______________________________ test_dirty_cache _______________________________\n\n    def test_dirty_cache() -> None:\n        \"\"\"Check that we only render content once or if it has been marked as dirty.\"\"\"\n    \n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        rendered_lines: list[int] = []\n    \n        def get_content_line(y: int) -> Strip:\n            rendered_lines.append(y)\n            return content[y]\n    \n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            get_content_line,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n>       assert rendered_lines == [0, 1, 2]\nE       assert [] == [0, 1, 2]\nE         \nE         Right contains 3 more items, first extra item: 0\nE         Use -v to get more diff\n\ntests/test_styles_cache.py:254: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_styles_cache.py::test_no_styles - AssertionError: assert No...\nFAILED tests/test_styles_cache.py::test_padding - TypeError: 'NoneType' objec...\nFAILED tests/test_styles_cache.py::test_border - TypeError: 'NoneType' object...\nFAILED tests/test_styles_cache.py::test_padding_border - TypeError: 'NoneType...\nFAILED tests/test_styles_cache.py::test_crop - TypeError: 'NoneType' object i...\nFAILED tests/test_styles_cache.py::test_outline - TypeError: 'NoneType' objec...\nFAILED tests/test_styles_cache.py::test_dirty_cache - assert [] == [0, 1, 2]\n============================== 7 failed in 0.13s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py FFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_no_styles ________________________________\n\n    def test_no_styles():\n        \"\"\"Test that empty style returns the content un-altered\"\"\"\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            \"\",\n            \"\",\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:38: AttributeError\n_________________________________ test_padding _________________________________\n\n    def test_padding():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:102: AttributeError\n_________________________________ test_border __________________________________\n\n    def test_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:68: AttributeError\n_____________________________ test_padding_border ______________________________\n\n    def test_padding_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:137: AttributeError\n__________________________________ test_crop ___________________________________\n\n    def test_crop():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n            crop=Region(2, 2, 3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:204: AttributeError\n_________________________________ test_outline _________________________________\n\n    def test_outline():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.outline = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:173: AttributeError\n_______________________________ test_dirty_cache _______________________________\n\n    def test_dirty_cache() -> None:\n        \"\"\"Check that we only render content once or if it has been marked as dirty.\"\"\"\n    \n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        rendered_lines: list[int] = []\n    \n        def get_content_line(y: int) -> Strip:\n            rendered_lines.append(y)\n            return content[y]\n    \n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            get_content_line,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:243: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_styles_cache.py::test_no_styles - AttributeError: 'StylesCa...\nFAILED tests/test_styles_cache.py::test_padding - AttributeError: 'StylesCach...\nFAILED tests/test_styles_cache.py::test_border - AttributeError: 'StylesCache...\nFAILED tests/test_styles_cache.py::test_padding_border - AttributeError: 'Sty...\nFAILED tests/test_styles_cache.py::test_crop - AttributeError: 'StylesCache' ...\nFAILED tests/test_styles_cache.py::test_outline - AttributeError: 'StylesCach...\nFAILED tests/test_styles_cache.py::test_dirty_cache - AttributeError: 'Styles...\n============================== 7 failed in 0.13s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py FFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_no_styles ________________________________\n\n    def test_no_styles():\n        \"\"\"Test that empty style returns the content un-altered\"\"\"\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            \"\",\n            \"\",\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:38: AttributeError\n_________________________________ test_padding _________________________________\n\n    def test_padding():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:102: AttributeError\n_________________________________ test_border __________________________________\n\n    def test_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:68: AttributeError\n_____________________________ test_padding_border ______________________________\n\n    def test_padding_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:137: AttributeError\n__________________________________ test_crop ___________________________________\n\n    def test_crop():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n            crop=Region(2, 2, 3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:204: AttributeError\n_________________________________ test_outline _________________________________\n\n    def test_outline():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.outline = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:173: AttributeError\n_______________________________ test_dirty_cache _______________________________\n\n    def test_dirty_cache() -> None:\n        \"\"\"Check that we only render content once or if it has been marked as dirty.\"\"\"\n    \n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        rendered_lines: list[int] = []\n    \n        def get_content_line(y: int) -> Strip:\n            rendered_lines.append(y)\n            return content[y]\n    \n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n>       lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            get_content_line,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\nE       AttributeError: 'StylesCache' object has no attribute 'render'\n\ntests/test_styles_cache.py:243: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_styles_cache.py::test_no_styles - AttributeError: 'StylesCa...\nFAILED tests/test_styles_cache.py::test_padding - AttributeError: 'StylesCach...\nFAILED tests/test_styles_cache.py::test_border - AttributeError: 'StylesCache...\nFAILED tests/test_styles_cache.py::test_padding_border - AttributeError: 'Sty...\nFAILED tests/test_styles_cache.py::test_crop - AttributeError: 'StylesCache' ...\nFAILED tests/test_styles_cache.py::test_outline - AttributeError: 'StylesCach...\nFAILED tests/test_styles_cache.py::test_dirty_cache - AttributeError: 'Styles...\n============================== 7 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_document.py-replace_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n\ntests/document/test_wrapped_document.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f6a1859b370>\nstart = (1, 0), end = (3, 0), text = '12 34567 8901'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Here you would put the actual logic to replace the text in the document\n        # For now, just return a dummy EditResult\n>       return EditResult(\"Replacement successful\")\nE       TypeError: EditResult.__init__() missing 1 required positional argument: 'replaced_text'\n\nsrc/textual/document/_document.py:271: TypeError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f6a135d9810>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Here you would put the actual logic to replace the text in the document\n        # For now, just return a dummy EditResult\n>       return EditResult(\"Replacement successful\")\nE       TypeError: EditResult.__init__() missing 1 required positional argument: 'replaced_text'\n\nsrc/textual/document/_document.py:271: TypeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f6a13617a60>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Here you would put the actual logic to replace the text in the document\n        # For now, just return a dummy EditResult\n>       return EditResult(\"Replacement successful\")\nE       TypeError: EditResult.__init__() missing 1 required positional argument: 'replaced_text'\n\nsrc/textual/document/_document.py:271: TypeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(start_location, old_end_location, \"123\")\n\ntests/document/test_wrapped_document.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f6a136ccb80>\nstart = (1, 0), end = (3, 0), text = '123'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Here you would put the actual logic to replace the text in the document\n        # For now, just return a dummy EditResult\n>       return EditResult(\"Replacement successful\")\nE       TypeError: EditResult.__init__() missing 1 required positional argument: 'replaced_text'\n\nsrc/textual/document/_document.py:271: TypeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - TypeErro...\n============================== 4 failed in 0.12s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n\ntests/document/test_wrapped_document.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7fe3235d33d0>\nstart = (1, 0), end = (3, 0), text = '12 34567 8901'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Implement the logic to replace the text at the given range\n        # This may involve updating the internal state of the document\n        # and returning an EditResult object with the result of the operation\n        # For example:\n>       result = EditResult()\nE       TypeError: EditResult.__init__() missing 2 required positional arguments: 'end_location' and 'replaced_text'\n\nsrc/textual/document/_document.py:273: TypeError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7fe31e8e3d90>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Implement the logic to replace the text at the given range\n        # This may involve updating the internal state of the document\n        # and returning an EditResult object with the result of the operation\n        # For example:\n>       result = EditResult()\nE       TypeError: EditResult.__init__() missing 2 required positional arguments: 'end_location' and 'replaced_text'\n\nsrc/textual/document/_document.py:273: TypeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7fe31e71d090>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Implement the logic to replace the text at the given range\n        # This may involve updating the internal state of the document\n        # and returning an EditResult object with the result of the operation\n        # For example:\n>       result = EditResult()\nE       TypeError: EditResult.__init__() missing 2 required positional arguments: 'end_location' and 'replaced_text'\n\nsrc/textual/document/_document.py:273: TypeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(start_location, old_end_location, \"123\")\n\ntests/document/test_wrapped_document.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7fe31e611ed0>\nstart = (1, 0), end = (3, 0), text = '123'\n\n    def replace_range(self, start: 'Location', end: 'Location', text: str) -> 'EditResult':\n        \"\"\"\n        Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        # Implement the logic to replace the text at the given range\n        # This may involve updating the internal state of the document\n        # and returning an EditResult object with the result of the operation\n        # For example:\n>       result = EditResult()\nE       TypeError: EditResult.__init__() missing 2 required positional arguments: 'end_location' and 'replaced_text'\n\nsrc/textual/document/_document.py:273: TypeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - TypeErro...\n============================== 4 failed in 0.12s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n>       document = Document(SIMPLE_TEXT)\nE       TypeError: Can't instantiate abstract class Document with abstract method replace_range\n\ntests/document/test_wrapped_document.py:64: TypeError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n>       document = Document(SIMPLE_TEXT)\nE       TypeError: Can't instantiate abstract class Document with abstract method replace_range\n\ntests/document/test_wrapped_document.py:105: TypeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n>       document = Document(SIMPLE_TEXT)\nE       TypeError: Can't instantiate abstract class Document with abstract method replace_range\n\ntests/document/test_wrapped_document.py:88: TypeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n>       document = Document(SIMPLE_TEXT)\nE       TypeError: Can't instantiate abstract class Document with abstract method replace_range\n\ntests/document/test_wrapped_document.py:43: TypeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - TypeErro...\n============================== 4 failed in 0.11s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-wrap_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting tests/document/test_wrapped_document.py ___________\nImportError while importing test module '/root/repos/py_data/textual/tests/document/test_wrapped_document.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/document/test_wrapped_document.py:4: in <module>\n    from textual.document._wrapped_document import WrappedDocument\nsrc/textual/document/_wrapped_document.py:18: in <module>\n    class WrappedDocument:\nsrc/textual/document/_wrapped_document.py:157: in WrappedDocument\n    from src.textual.geometry import clamp\nE   ModuleNotFoundError: No module named 'src'\n=========================== short test summary info ============================\nERROR tests/document/test_wrapped_document.py\n=============================== 1 error in 0.09s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting tests/document/test_wrapped_document.py ___________\nImportError while importing test module '/root/repos/py_data/textual/tests/document/test_wrapped_document.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/document/test_wrapped_document.py:4: in <module>\n    from textual.document._wrapped_document import WrappedDocument\nsrc/textual/document/_wrapped_document.py:18: in <module>\n    class WrappedDocument:\nsrc/textual/document/_wrapped_document.py:157: in WrappedDocument\n    from src.textual.geometry import clamp\nE   ModuleNotFoundError: No module named 'src'\n=========================== short test summary info ============================\nERROR tests/document/test_wrapped_document.py\n=============================== 1 error in 0.09s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_refresh_range\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location, old_end_location, edit_result.end_location\n        )\n\ntests/document/test_wrapped_document.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/document/_wrapped_document.py:220: in wrap_range\n    compute_wrap_offsets(self, start, old_end, new_end)\nsrc/textual/_wrap.py:58: in compute_wrap_offsets\n    tab_sections = get_tab_widths(text, tab_size)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nline = <textual.document._wrapped_document.WrappedDocument object at 0x7fcdbd4a73a0>\ntab_size = (1, 0)\n\n    def get_tab_widths(line: str, tab_size: int = 4) -> list[tuple[str, int]]:\n        \"\"\"Splits a string line into tuples (str, int).\n    \n        Each tuple represents a section of the line which precedes a tab character.\n        The string is the string text that appears before the tab character (excluding the tab).\n        The integer is the width that the tab character is expanded to.\n    \n        Args:\n            line: The text to expand tabs in.\n            tab_size: Number of cells in a tab.\n    \n        Returns:\n            A list of tuples representing the line split on tab characters,\n                and the widths of the tabs after tab expansion is applied.\n        \"\"\"\n    \n        parts: list[tuple[str, int]] = []\n        add_part = parts.append\n        cell_position = 0\n>       matches = _TABS_SPLITTER_RE.findall(line)\nE       TypeError: expected string or bytes-like object\n\nsrc/textual/expand_tabs.py:30: TypeError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n        edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n>       wrapped_document.wrap_range((3, 0), (3, 0), edit_result.end_location)\n\ntests/document/test_wrapped_document.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/document/_wrapped_document.py:220: in wrap_range\n    compute_wrap_offsets(self, start, old_end, new_end)\nsrc/textual/_wrap.py:58: in compute_wrap_offsets\n    tab_sections = get_tab_widths(text, tab_size)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nline = <textual.document._wrapped_document.WrappedDocument object at 0x7fcdbccdd690>\ntab_size = (3, 0)\n\n    def get_tab_widths(line: str, tab_size: int = 4) -> list[tuple[str, int]]:\n        \"\"\"Splits a string line into tuples (str, int).\n    \n        Each tuple represents a section of the line which precedes a tab character.\n        The string is the string text that appears before the tab character (excluding the tab).\n        The integer is the width that the tab character is expanded to.\n    \n        Args:\n            line: The text to expand tabs in.\n            tab_size: Number of cells in a tab.\n    \n        Returns:\n            A list of tuples representing the line split on tab characters,\n                and the widths of the tabs after tab expansion is applied.\n        \"\"\"\n    \n        parts: list[tuple[str, int]] = []\n        add_part = parts.append\n        cell_position = 0\n>       matches = _TABS_SPLITTER_RE.findall(line)\nE       TypeError: expected string or bytes-like object\n\nsrc/textual/expand_tabs.py:30: TypeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n>       wrapped_document.wrap_range((3, 0), (3, 0), edit_result.end_location)\n\ntests/document/test_wrapped_document.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/document/_wrapped_document.py:220: in wrap_range\n    compute_wrap_offsets(self, start, old_end, new_end)\nsrc/textual/_wrap.py:58: in compute_wrap_offsets\n    tab_sections = get_tab_widths(text, tab_size)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nline = <textual.document._wrapped_document.WrappedDocument object at 0x7fcdbcdfa860>\ntab_size = (3, 0)\n\n    def get_tab_widths(line: str, tab_size: int = 4) -> list[tuple[str, int]]:\n        \"\"\"Splits a string line into tuples (str, int).\n    \n        Each tuple represents a section of the line which precedes a tab character.\n        The string is the string text that appears before the tab character (excluding the tab).\n        The integer is the width that the tab character is expanded to.\n    \n        Args:\n            line: The text to expand tabs in.\n            tab_size: Number of cells in a tab.\n    \n        Returns:\n            A list of tuples representing the line split on tab characters,\n                and the widths of the tabs after tab expansion is applied.\n        \"\"\"\n    \n        parts: list[tuple[str, int]] = []\n        add_part = parts.append\n        cell_position = 0\n>       matches = _TABS_SPLITTER_RE.findall(line)\nE       TypeError: expected string or bytes-like object\n\nsrc/textual/expand_tabs.py:30: TypeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(start_location, old_end_location, \"123\")\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location,\n            old_end_location,\n            edit_result.end_location,\n        )\n\ntests/document/test_wrapped_document.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/document/_wrapped_document.py:220: in wrap_range\n    compute_wrap_offsets(self, start, old_end, new_end)\nsrc/textual/_wrap.py:58: in compute_wrap_offsets\n    tab_sections = get_tab_widths(text, tab_size)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nline = <textual.document._wrapped_document.WrappedDocument object at 0x7fcdbcdf5ed0>\ntab_size = (1, 0)\n\n    def get_tab_widths(line: str, tab_size: int = 4) -> list[tuple[str, int]]:\n        \"\"\"Splits a string line into tuples (str, int).\n    \n        Each tuple represents a section of the line which precedes a tab character.\n        The string is the string text that appears before the tab character (excluding the tab).\n        The integer is the width that the tab character is expanded to.\n    \n        Args:\n            line: The text to expand tabs in.\n            tab_size: Number of cells in a tab.\n    \n        Returns:\n            A list of tuples representing the line split on tab characters,\n                and the widths of the tabs after tab expansion is applied.\n        \"\"\"\n    \n        parts: list[tuple[str, int]] = []\n        add_part = parts.append\n        cell_position = 0\n>       matches = _TABS_SPLITTER_RE.findall(line)\nE       TypeError: expected string or bytes-like object\n\nsrc/textual/expand_tabs.py:30: TypeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - TypeErro...\n============================== 4 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-offset_to_location": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/document/test_wrapped_document.py FFFFFFFFFFFFFFFFFF               [100%]\n\n=================================== FAILURES ===================================\n_________ test_offset_to_location_wrapping_enabled[offset0-location0] __________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44420ecca0>\noffset = Offset(x=0, y=0)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset1-location1] __________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44420d3d30>\noffset = Offset(x=1, y=0)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset2-location2] __________\n\noffset = Offset(x=2, y=1), location = (0, 6)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44420eea10>\noffset = Offset(x=2, y=1)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset3-location3] __________\n\noffset = Offset(x=0, y=3), location = (1, 4)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442296110>\noffset = Offset(x=0, y=3)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset4-location4] __________\n\noffset = Offset(x=1, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442023d30>\noffset = Offset(x=1, y=3)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset5-location5] __________\n\noffset = Offset(x=200, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44422966b0>\noffset = Offset(x=200, y=3)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset6-location6] __________\n\noffset = Offset(x=0, y=6), location = (2, 8)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442021180>\noffset = Offset(x=0, y=6)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset7-location7] __________\n\noffset = Offset(x=0, y=7), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442297f40>\noffset = Offset(x=0, y=7)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_enabled[offset8-location8] __________\n\noffset = Offset(x=0, y=1000), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442022aa0>\noffset = Offset(x=0, y=1000)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0] _\n\noffset = Offset(x=-3, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442297910>\noffset = Offset(x=-3, y=0)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1] _\n\noffset = Offset(x=0, y=-10), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4441fdd360>\noffset = Offset(x=0, y=-10)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset0-location0] _________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442297af0>\noffset = Offset(x=0, y=0)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset1-location1] _________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f444279f190>\noffset = Offset(x=1, y=0)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset2-location2] _________\n\noffset = Offset(x=2, y=1), location = (1, 2)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44422977c0>\noffset = Offset(x=2, y=1)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset3-location3] _________\n\noffset = Offset(x=0, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44420ee9b0>\noffset = Offset(x=0, y=3)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset4-location4] _________\n\noffset = Offset(x=1, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442297d00>\noffset = Offset(x=1, y=3)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset5-location5] _________\n\noffset = Offset(x=200, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f44426a2380>\noffset = Offset(x=200, y=3)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n_________ test_offset_to_location_wrapping_disabled[offset6-location6] _________\n\noffset = Offset(x=200, y=200), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f4442297d00>\noffset = Offset(x=200, y=200)\n\n    def offset_to_location(self, offset: int) -> 'Location':\n        \"\"\"\n        Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        # Assuming Location is a class defined elsewhere in the codebase\n        # and has attributes for line, column, and row\n        # This is a simplified example and actual implementation may vary\n        # based on the actual structure of the document and the Location class\n        for i, line in enumerate(self.lines):\n>           if offset < len(line):\nE           TypeError: '<' not supported between instances of 'Offset' and 'int'\n\nsrc/textual/document/_wrapped_document.py:297: TypeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset6-location6]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset7-location7]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset8-location8]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset6-location6]\n============================== 18 failed in 0.21s ==============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/document/test_wrapped_document.py FFFFFFFFFFFFFFFFFF               [100%]\n\n=================================== FAILURES ===================================\n_________ test_offset_to_location_wrapping_enabled[offset0-location0] __________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset1-location1] __________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset2-location2] __________\n\noffset = Offset(x=2, y=1), location = (0, 6)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset3-location3] __________\n\noffset = Offset(x=0, y=3), location = (1, 4)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset4-location4] __________\n\noffset = Offset(x=1, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset5-location5] __________\n\noffset = Offset(x=200, y=3), location = (1, 5)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset6-location6] __________\n\noffset = Offset(x=0, y=6), location = (2, 8)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset7-location7] __________\n\noffset = Offset(x=0, y=7), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_________ test_offset_to_location_wrapping_enabled[offset8-location8] __________\n\noffset = Offset(x=0, y=1000), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:139: AttributeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0] _\n\noffset = Offset(x=-3, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:172: AttributeError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1] _\n\noffset = Offset(x=0, y=-10), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:172: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset0-location0] _________\n\noffset = Offset(x=0, y=0), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset1-location1] _________\n\noffset = Offset(x=1, y=0), location = (0, 1)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset2-location2] _________\n\noffset = Offset(x=2, y=1), location = (1, 2)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset3-location3] _________\n\noffset = Offset(x=0, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset4-location4] _________\n\noffset = Offset(x=1, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset5-location5] _________\n\noffset = Offset(x=200, y=3), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n_________ test_offset_to_location_wrapping_disabled[offset6-location6] _________\n\noffset = Offset(x=200, y=200), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\nE       AttributeError: 'WrappedDocument' object has no attribute 'offset_to_location'\n\ntests/document/test_wrapped_document.py:158: AttributeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset6-location6]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset7-location7]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset8-location8]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset0-location0]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset2-location2]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset3-location3]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset4-location4]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset5-location5]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset6-location6]\n============================== 18 failed in 0.18s ==============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting tests/document/test_wrapped_document.py ___________\ntests/document/test_wrapped_document.py:4: in <module>\n    from textual.document._wrapped_document import WrappedDocument\nsrc/textual/document/_wrapped_document.py:18: in <module>\n    class WrappedDocument:\nsrc/textual/document/_wrapped_document.py:339: in WrappedDocument\n    location = document.offset_to_location(offset)\nsrc/textual/document/_wrapped_document.py:330: in offset_to_location\n    return Location(i + 1, offset.y - (i * max_line_length) + 1)\n/usr/local/lib/python3.10/typing.py:941: in __call__\n    raise TypeError(f\"Type {self._name} cannot be instantiated; \"\nE   TypeError: Type Tuple cannot be instantiated; use tuple() instead\n=========================== short test summary info ============================\nERROR tests/document/test_wrapped_document.py - TypeError: Type Tuple cannot ...\n=============================== 1 error in 0.10s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled\n\n"], "textual-src/textual/css/parse.py-substitute_references": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_multi_value_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_reference_whitespace_trimming\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_transitive_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference_no_whitespace\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_definition_eof\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_empty_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_used_inside_property_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_undefined_variable\n(no match in any of [<Module test_parse.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.07s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_multi_value_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_reference_whitespace_trimming\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_transitive_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference_no_whitespace\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_definition_eof\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_empty_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_used_inside_property_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_undefined_variable\n(no match in any of [<Module test_parse.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_multi_value_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_reference_whitespace_trimming\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_transitive_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference_no_whitespace\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_definition_eof\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_empty_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_used_inside_property_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_undefined_variable\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/parse.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/css/test_nested_css.py FFFFFFFFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502  event = Compose()                                            \u2502            \u2502\n\u2502 \u2502 screen = Screen(id='_default')                                \u2502            \u2502\n\u2502 \u2502   self = NestedApp(title='NestedApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'NestedApp.CSS'),                                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502             self = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'NestedApp.CSS'                            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'NestedApp.CSS'                                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'NestedApp.CSS'                                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7f2cf028dec0>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = PseudoClassesInNestedApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='PseudoClassesInNestedApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'PseudoClassesInNestedApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7f2cefcada40>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                          \u2502\n\u2502 \u2502  event = Compose()                              \u2502                          \u2502\n\u2502 \u2502 screen = Screen(id='_default')                  \u2502                          \u2502\n\u2502 \u2502   self = DeclarationAfterNestedApp(             \u2502                          \u2502\n\u2502 \u2502          \u2502   title='DeclarationAfterNestedApp', \u2502                          \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}             \u2502                          \u2502\n\u2502 \u2502          )                                      \u2502                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'DeclarationAfterNestedApp.CSS'),                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7f2cf0068d40>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = ListOfNestedSelectorsApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='ListOfNestedSelectorsApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'ListOfNestedSelectorsApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7f2ceff56f80>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_parse_errors[Selector {-EOFError] ____________________\n\ncss = 'Selector {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {-EOFError] __________________\n\ncss = 'Selector{ Foo {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {}-EOFError] _________________\n\ncss = 'Selector{ Foo {}', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n______________________ test_parse_errors[> {}-TokenError] ______________________\n\ncss = '> {}', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&-TokenError] ________________________\n\ncss = '&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&&-TokenError] _______________________\n\ncss = '&&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[&.foo-TokenError] ______________________\n\ncss = '&.foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[& .foo-TokenError] _____________________\n\ncss = '& .foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[{-TokenError] ________________________\n\ncss = '{', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n________________________ test_parse_errors[*{-EOFError] ________________________\n\ncss = '*{', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n=============================== warnings summary ===============================\ntests/css/test_nested_css.py::test_nest_app\ntests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\ntests/css/test_nested_css.py::test_rule_declaration_after_nested\ntests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_nested_css.py::test_nest_app\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_nested_css.py::test_nest_app - textual.css.errors.Style...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - tex...\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {}-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[> {}-TokenError] - Typ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&&-TokenError] - TypeE...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&.foo-TokenError] - Ty...\nFAILED tests/css/test_nested_css.py::test_parse_errors[& .foo-TokenError] - T...\nFAILED tests/css/test_nested_css.py::test_parse_errors[{-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[*{-EOFError] - TypeErr...\n======================== 14 failed, 5 warnings in 1.84s ========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/css/test_nested_css.py FFFFFFFFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502  event = Compose()                                            \u2502            \u2502\n\u2502 \u2502 screen = Screen(id='_default')                                \u2502            \u2502\n\u2502 \u2502   self = NestedApp(title='NestedApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'NestedApp.CSS'),                                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502             self = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'NestedApp.CSS'                            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'NestedApp.CSS'                                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'NestedApp.CSS'                                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fa69b5aa200>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = PseudoClassesInNestedApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='PseudoClassesInNestedApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'PseudoClassesInNestedApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fa69afa2840>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                          \u2502\n\u2502 \u2502  event = Compose()                              \u2502                          \u2502\n\u2502 \u2502 screen = Screen(id='_default')                  \u2502                          \u2502\n\u2502 \u2502   self = DeclarationAfterNestedApp(             \u2502                          \u2502\n\u2502 \u2502          \u2502   title='DeclarationAfterNestedApp', \u2502                          \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}             \u2502                          \u2502\n\u2502 \u2502          )                                      \u2502                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'DeclarationAfterNestedApp.CSS'),                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fa69b263140>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = ListOfNestedSelectorsApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='ListOfNestedSelectorsApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'ListOfNestedSelectorsApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fa69b1bac00>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_parse_errors[Selector {-EOFError] ____________________\n\ncss = 'Selector {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {-EOFError] __________________\n\ncss = 'Selector{ Foo {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {}-EOFError] _________________\n\ncss = 'Selector{ Foo {}', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n______________________ test_parse_errors[> {}-TokenError] ______________________\n\ncss = '> {}', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&-TokenError] ________________________\n\ncss = '&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&&-TokenError] _______________________\n\ncss = '&&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[&.foo-TokenError] ______________________\n\ncss = '&.foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[& .foo-TokenError] _____________________\n\ncss = '& .foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[{-TokenError] ________________________\n\ncss = '{', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n________________________ test_parse_errors[*{-EOFError] ________________________\n\ncss = '*{', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n=============================== warnings summary ===============================\ntests/css/test_nested_css.py::test_nest_app\ntests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\ntests/css/test_nested_css.py::test_rule_declaration_after_nested\ntests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_nested_css.py::test_nest_app\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_nested_css.py::test_nest_app - textual.css.errors.Style...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - tex...\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {}-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[> {}-TokenError] - Typ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&&-TokenError] - TypeE...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&.foo-TokenError] - Ty...\nFAILED tests/css/test_nested_css.py::test_parse_errors[& .foo-TokenError] - T...\nFAILED tests/css/test_nested_css.py::test_parse_errors[{-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[*{-EOFError] - TypeErr...\n======================== 14 failed, 5 warnings in 1.84s ========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/css/test_nested_css.py FFFFFFFFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502  event = Compose()                                            \u2502            \u2502\n\u2502 \u2502 screen = Screen(id='_default')                                \u2502            \u2502\n\u2502 \u2502   self = NestedApp(title='NestedApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'NestedApp.CSS'),                                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502             self = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'NestedApp.CSS'                            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'NestedApp.CSS'                                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'NestedApp.CSS'                                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7efd47d7f1c0>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = PseudoClassesInNestedApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='PseudoClassesInNestedApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'PseudoClassesInNestedApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7efd47666c00>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                          \u2502\n\u2502 \u2502  event = Compose()                              \u2502                          \u2502\n\u2502 \u2502 screen = Screen(id='_default')                  \u2502                          \u2502\n\u2502 \u2502   self = DeclarationAfterNestedApp(             \u2502                          \u2502\n\u2502 \u2502          \u2502   title='DeclarationAfterNestedApp', \u2502                          \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}             \u2502                          \u2502\n\u2502 \u2502          )                                      \u2502                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'DeclarationAfterNestedApp.CSS'),                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7efd47a40d00>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = ListOfNestedSelectorsApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='ListOfNestedSelectorsApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'ListOfNestedSelectorsApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7efd47bf8e00>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_parse_errors[Selector {-EOFError] ____________________\n\ncss = 'Selector {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {-EOFError] __________________\n\ncss = 'Selector{ Foo {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_________________ test_parse_errors[Selector{ Foo {}-EOFError] _________________\n\ncss = 'Selector{ Foo {}', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n______________________ test_parse_errors[> {}-TokenError] ______________________\n\ncss = '> {}', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&-TokenError] ________________________\n\ncss = '&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[&&-TokenError] _______________________\n\ncss = '&&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[&.foo-TokenError] ______________________\n\ncss = '&.foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_____________________ test_parse_errors[& .foo-TokenError] _____________________\n\ncss = '& .foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n_______________________ test_parse_errors[{-TokenError] ________________________\n\ncss = '{', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n________________________ test_parse_errors[*{-EOFError] ________________________\n\ncss = '*{', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\nE           TypeError: parse() missing 2 required positional arguments: 'variables' and 'is_default_rules'\n\ntests/css/test_nested_css.py:112: TypeError\n=============================== warnings summary ===============================\ntests/css/test_nested_css.py::test_nest_app\ntests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\ntests/css/test_nested_css.py::test_rule_declaration_after_nested\ntests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_nested_css.py::test_nest_app\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_nested_css.py::test_nest_app - textual.css.errors.Style...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - tex...\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {}-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[> {}-TokenError] - Typ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&&-TokenError] - TypeE...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&.foo-TokenError] - Ty...\nFAILED tests/css/test_nested_css.py::test_parse_errors[& .foo-TokenError] - T...\nFAILED tests/css/test_nested_css.py::test_parse_errors[{-TokenError] - TypeEr...\nFAILED tests/css/test_nested_css.py::test_parse_errors[*{-EOFError] - TypeErr...\n======================== 14 failed, 5 warnings in 1.84s ========================\n\n"], "textual-src/textual/css/stylesheet.py-_parse_rules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/css/test_parse.py ___________________\ntests/css/test_parse.py:9: in <module>\n    from textual.css.stylesheet import Stylesheet, StylesheetParseError\nsrc/textual/css/stylesheet.py:140: in <module>\n    class Stylesheet:\nsrc/textual/css/stylesheet.py:240: in Stylesheet\n    class Parser(ABC):\nsrc/textual/css/stylesheet.py:241: in Parser\n    @abstractmethod\nE   NameError: name 'abstractmethod' is not defined\n=========================== short test summary info ============================\nERROR tests/css/test_parse.py - NameError: name 'abstractmethod' is not defined\n=============================== 1 error in 0.11s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/css/test_parse.py ___________________\ntests/css/test_parse.py:9: in <module>\n    from textual.css.stylesheet import Stylesheet, StylesheetParseError\nsrc/textual/css/stylesheet.py:140: in <module>\n    class Stylesheet:\nsrc/textual/css/stylesheet.py:222: in Stylesheet\n    class RuleSet(ABC):\nsrc/textual/css/stylesheet.py:223: in RuleSet\n    @abstractmethod\nE   NameError: name 'abstractmethod' is not defined\n=========================== short test summary info ============================\nERROR tests/css/test_parse.py - NameError: name 'abstractmethod' is not defined\n=============================== 1 error in 0.11s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n\n"], "textual-src/textual/css/stylesheet.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 2 errors\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/css/test_parse.py ___________________\ntests/css/test_parse.py:9: in <module>\n    from textual.css.stylesheet import Stylesheet, StylesheetParseError\nsrc/textual/css/stylesheet.py:140: in <module>\n    class Stylesheet:\nsrc/textual/css/stylesheet.py:357: in Stylesheet\n    class StylesheetParser(ABC):\nsrc/textual/css/stylesheet.py:360: in StylesheetParser\n    @abstractmethod\nE   NameError: name 'abstractmethod' is not defined\n______________ ERROR collecting tests/css/test_mega_stylesheet.py ______________\ntests/css/test_mega_stylesheet.py:3: in <module>\n    from textual.css.stylesheet import Stylesheet\nsrc/textual/css/stylesheet.py:140: in <module>\n    class Stylesheet:\nsrc/textual/css/stylesheet.py:357: in Stylesheet\n    class StylesheetParser(ABC):\nsrc/textual/css/stylesheet.py:360: in StylesheetParser\n    @abstractmethod\nE   NameError: name 'abstractmethod' is not defined\n=========================== short test summary info ============================\nERROR tests/css/test_parse.py - NameError: name 'abstractmethod' is not defined\nERROR tests/css/test_mega_stylesheet.py - NameError: name 'abstractmethod' is...\n============================== 2 errors in 0.12s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_mega_stylesheet.py::test_mega_stylesheet\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector_with_suggestion\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n(no match in any of [<Module test_parse.py>])\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n(no match in any of [<Module test_parse.py>])\n\n"], "gpt-engineer-gpt_engineer/core/chat_to_files.py-parse_diffs": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/core/test_chat_to_files.py _______________\nImportError while importing test module '/root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/core/test_chat_to_files.py:7: in <module>\n    from gpt_engineer.core.chat_to_files import parse_diffs\nE   ImportError: cannot import name 'parse_diffs' from 'gpt_engineer.core.chat_to_files' (/root/repos/py_data/gpt-engineer/gpt_engineer/core/chat_to_files.py)\n=========================== short test summary info ============================\nERROR tests/core/test_chat_to_files.py\n=============================== 1 error in 0.04s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_skipped_lines_and_number_correction\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_adding_one_file\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_changing_two_files\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_distorted_numbers\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_regex\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_skipped_lines\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_validate_diff_correct\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_changing_one_file\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/core/test_chat_to_files.py _______________\nImportError while importing test module '/root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/core/test_chat_to_files.py:7: in <module>\n    from gpt_engineer.core.chat_to_files import parse_diffs\nE   ImportError: cannot import name 'parse_diffs' from 'gpt_engineer.core.chat_to_files' (/root/repos/py_data/gpt-engineer/gpt_engineer/core/chat_to_files.py)\n=========================== short test summary info ============================\nERROR tests/core/test_chat_to_files.py\n=============================== 1 error in 0.04s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_skipped_lines_and_number_correction\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_adding_one_file\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_changing_two_files\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_distorted_numbers\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_regex\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_skipped_lines\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_validate_diff_correct\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_changing_one_file\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n______________ ERROR collecting tests/core/test_chat_to_files.py _______________\nImportError while importing test module '/root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/core/test_chat_to_files.py:7: in <module>\n    from gpt_engineer.core.chat_to_files import parse_diffs\nE   ImportError: cannot import name 'parse_diffs' from 'gpt_engineer.core.chat_to_files' (/root/repos/py_data/gpt-engineer/gpt_engineer/core/chat_to_files.py)\n=========================== short test summary info ============================\nERROR tests/core/test_chat_to_files.py\n=============================== 1 error in 0.04s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_skipped_lines_and_number_correction\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_adding_one_file\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_changing_two_files\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_distorted_numbers\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_regex\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_correct_skipped_lines\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_validate_diff_correct\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_chat_to_files.py::test_diff_changing_one_file\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-start": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/core/test_ai.py FFF                                                [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_start __________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f401620c730>\n\n    def test_start(monkeypatch):\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:156: in start\n    system_message = Message(system, 'System')\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'System'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f401620f640>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:156: in start\n    system_message = Message(system, 'System')\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'System'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f401620f1f0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:156: in start\n    system_message = Message(system, 'System')\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'System'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_start - TypeError: Cannot instantiate typi...\nFAILED tests/core/test_ai.py::test_token_logging - TypeError: Cannot instanti...\nFAILED tests/core/test_ai.py::test_next - TypeError: Cannot instantiate typin...\n============================== 3 failed in 0.99s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/core/test_ai.py FFF                                                [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_start __________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f1c899ec7c0>\n\n    def test_start(monkeypatch):\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:157: in start\n    Message(system, 'system'),\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'system'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f1c8925c460>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:157: in start\n    Message(system, 'system'),\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'system'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f1c8937fb80>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:157: in start\n    Message(system, 'system'),\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'system'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_start - TypeError: Cannot instantiate typi...\nFAILED tests/core/test_ai.py::test_token_logging - TypeError: Cannot instanti...\nFAILED tests/core/test_ai.py::test_next - TypeError: Cannot instantiate typin...\n============================== 3 failed in 0.92s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/core/test_ai.py FFF                                                [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_start __________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f5e72048550>\n\n    def test_start(monkeypatch):\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:156: in start\n    system_message = Message(system, 'System')\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'System'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f5e7204b5b0>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:156: in start\n    system_message = Message(system, 'System')\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'System'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f5e7204b6d0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:156: in start\n    system_message = Message(system, 'System')\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = typing.Union, args = ('system prompt', 'System'), kwds = {}\n\n    def __call__(self, *args, **kwds):\n>       raise TypeError(f\"Cannot instantiate {self!r}\")\nE       TypeError: Cannot instantiate typing.Union\n\n/usr/local/lib/python3.10/typing.py:386: TypeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_start - TypeError: Cannot instantiate typi...\nFAILED tests/core/test_ai.py::test_token_logging - TypeError: Cannot instanti...\nFAILED tests/core/test_ai.py::test_next - TypeError: Cannot instantiate typin...\n============================== 3 failed in 0.90s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/core/test_ai.py FF                                                 [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe14d98c700>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7fe14d98c640>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n    \n        messages: List[Message] = [\n            SystemMessage(content=system),\n            HumanMessage(content=user),\n        ]\n>       return self.next(messages, step_name=step_name)\nE       AttributeError: 'AI' object has no attribute 'next'\n\ngpt_engineer/core/ai.py:143: AttributeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe14d35e1d0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7fe14d35e140>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n    \n        messages: List[Message] = [\n            SystemMessage(content=system),\n            HumanMessage(content=user),\n        ]\n>       return self.next(messages, step_name=step_name)\nE       AttributeError: 'AI' object has no attribute 'next'\n\ngpt_engineer/core/ai.py:143: AttributeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_token_logging - AttributeError: 'AI' objec...\nFAILED tests/core/test_ai.py::test_next - AttributeError: 'AI' object has no ...\n============================== 2 failed in 0.83s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/core/test_ai.py FF                                                 [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f204cff0670>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7f204cff0550>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n    \n        messages: List[Message] = [\n            SystemMessage(content=system),\n            HumanMessage(content=user),\n        ]\n>       return self.next(messages, step_name=step_name)\nE       AttributeError: 'AI' object has no attribute 'next'\n\ngpt_engineer/core/ai.py:143: AttributeError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f204c9c5990>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <gpt_engineer.core.ai.AI object at 0x7f204c9c5930>\nsystem = 'system prompt', user = 'user prompt'\n\n    def start(self, system: str, user: Any, *, step_name: str) -> List[Message]:\n        \"\"\"\n        Start the conversation with a system message and a user message.\n    \n        Parameters\n        ----------\n        system : str\n            The content of the system message.\n        user : str\n            The content of the user message.\n        step_name : str\n            The name of the step.\n    \n        Returns\n        -------\n        List[Message]\n            The list of messages in the conversation.\n        \"\"\"\n    \n        messages: List[Message] = [\n            SystemMessage(content=system),\n            HumanMessage(content=user),\n        ]\n>       return self.next(messages, step_name=step_name)\nE       AttributeError: 'AI' object has no attribute 'next'\n\ngpt_engineer/core/ai.py:143: AttributeError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_token_logging - AttributeError: 'AI' objec...\nFAILED tests/core/test_ai.py::test_next - AttributeError: 'AI' object has no ...\n============================== 2 failed in 0.85s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting tests/core/test_ai.py ____________________\ntests/core/test_ai.py:4: in <module>\n    from gpt_engineer.core.ai import AI\ngpt_engineer/core/ai.py:50: in <module>\n    class AI:\ngpt_engineer/core/ai.py:245: in AI\n    updated_messages = conversation_manager.next(messages, 'I am fine, thank you.', 'Step 1')\ngpt_engineer/core/ai.py:237: in next\n    new_message = Message(response)\n/usr/local/lib/python3.10/typing.py:943: in __call__\n    result = self.__origin__(*args, **kwargs)\n/usr/local/lib/python3.10/typing.py:386: in __call__\n    raise TypeError(f\"Cannot instantiate {self!r}\")\nE   TypeError: Cannot instantiate typing.Union\n=========================== short test summary info ============================\nERROR tests/core/test_ai.py - TypeError: Cannot instantiate typing.Union\n=============================== 1 error in 0.69s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_ai.py::test_token_logging\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/core/test_ai.py::test_next\n\n"], "gpt-engineer-gpt_engineer/core/project_config.py-to_toml": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________________ ERROR collecting tests/test_project_config.py _________________\nImportError while importing test module '/root/repos/py_data/gpt-engineer/tests/test_project_config.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_project_config.py:5: in <module>\n    from gpt_engineer.core.project_config import (\ngpt_engineer/core/project_config.py:73: in <module>\n    class Config:\ngpt_engineer/core/project_config.py:125: in Config\n    import tomli_w\nE   ModuleNotFoundError: No module named 'tomli_w'\n=========================== short test summary info ============================\nERROR tests/test_project_config.py\n=============================== 1 error in 0.04s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_defaults\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_load_partial\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_update\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_load\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/test_project_config.py FFFF                                        [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_config_defaults _____________________________\n\n    def test_config_defaults():\n        config = Config()\n        assert config.paths.base is None\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n>           config.to_toml(f.name)\nE           AttributeError: 'Config' object has no attribute 'to_toml'. Did you mean: 'from_toml'?\n\ntests/test_project_config.py:49: AttributeError\n___________________________ test_config_load_partial ___________________________\n\n    def test_config_load_partial():\n        # Loads a partial config, and checks that the rest is not set (i.e. None)\n        example_config = \"\"\"\n    [gptengineer-app]\n    project_id = \"...\"\n    \"\"\".strip()\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n            f.write(example_config)\n    \n        config = Config.from_toml(f.name)\n        assert config.gptengineer_app\n        assert config.gptengineer_app.project_id == \"...\"\n        assert config.to_dict()\n>       toml_str = config.to_toml(f.name, save=False)\nE       AttributeError: 'Config' object has no attribute 'to_toml'. Did you mean: 'from_toml'?\n\ntests/test_project_config.py:103: AttributeError\n______________________________ test_config_update ______________________________\n\n    def test_config_update():\n        example_config = \"\"\"\n    [gptengineer-app]\n    project_id = \"...\"\n    \"\"\".strip()\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n            f.write(example_config)\n        config = Config.from_toml(f.name)\n        config.gptengineer_app = _GptEngineerAppConfig(\n            project_id=\"...\",\n            openapi=[_OpenApiConfig(url=\"https://api.gptengineer.app/openapi.json\")],\n        )\n>       config.to_toml(f.name)\nE       AttributeError: 'Config' object has no attribute 'to_toml'. Did you mean: 'from_toml'?\n\ntests/test_project_config.py:122: AttributeError\n_______________________________ test_config_load _______________________________\n\n    def test_config_load():\n        # write example config to a file\n        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n            f.write(example_config)\n    \n        # load the config from the file\n        config = Config.from_toml(f.name)\n    \n        assert config.paths.base == \"./frontend\"\n        assert config.paths.src == \"./src\"\n        assert config.run.build == \"npm run build\"\n        assert config.run.test == \"npm run test\"\n        assert config.run.lint == \"quick-lint-js\"\n        assert config.gptengineer_app\n        assert config.gptengineer_app.project_id == \"...\"\n        assert config.gptengineer_app.openapi\n        assert (\n            config.gptengineer_app.openapi[0].url\n            == \"https://api.gptengineer.app/openapi.json\"\n        )\n        assert (\n            config.gptengineer_app.openapi[1].url\n            == \"https://some-color-translating-api/openapi.json\"\n        )\n        assert config.to_dict()\n>       assert config.to_toml(f.name, save=False)\nE       AttributeError: 'Config' object has no attribute 'to_toml'. Did you mean: 'from_toml'?\n\ntests/test_project_config.py:39: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_project_config.py::test_config_defaults - AttributeError: '...\nFAILED tests/test_project_config.py::test_config_load_partial - AttributeErro...\nFAILED tests/test_project_config.py::test_config_update - AttributeError: 'Co...\nFAILED tests/test_project_config.py::test_config_load - AttributeError: 'Conf...\n============================== 4 failed in 0.07s ===============================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________________ ERROR collecting tests/test_project_config.py _________________\ntests/test_project_config.py:5: in <module>\n    from gpt_engineer.core.project_config import (\ngpt_engineer/core/project_config.py:73: in <module>\n    class Config:\ngpt_engineer/core/project_config.py:128: in Config\n    class ProjectConfig:\ngpt_engineer/core/project_config.py:134: in ProjectConfig\n    def read_config(config_file: Union[Path, str]) -> dict:\nE   NameError: name 'Union' is not defined\n=========================== short test summary info ============================\nERROR tests/test_project_config.py - NameError: name 'Union' is not defined\n=============================== 1 error in 0.04s ===============================\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_defaults\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_load_partial\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_update\n\nERROR: found no collectors for /root/repos/py_data/gpt-engineer/tests/test_project_config.py::test_config_load\n\n"], "gpt-engineer-gpt_engineer/core/diff.py-is_similar": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/core/test_chat_to_files.py F.FF                                    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_length_and_character_frequency ______________________\n\n    def test_length_and_character_frequency():\n>       assert is_similar(\"aabbc\", \"bacba\")\nE       AssertionError: assert False\nE        +  where False = is_similar('aabbc', 'bacba')\n\ntests/core/test_chat_to_files.py:163: AssertionError\n____________________________ test_basic_similarity _____________________________\n\n    def test_basic_similarity():\n>       assert is_similar(\"abc\", \"cab\")\nE       AssertionError: assert False\nE        +  where False = is_similar('abc', 'cab')\n\ntests/core/test_chat_to_files.py:153: AssertionError\n____________________ test_case_insensitivity_and_whitespace ____________________\n\n    def test_case_insensitivity_and_whitespace():\n>       assert is_similar(\"A b C\", \"c a b\")\nE       AssertionError: assert False\nE        +  where False = is_similar('A b C', 'c a b')\n\ntests/core/test_chat_to_files.py:158: AssertionError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_length_and_character_frequency\nFAILED tests/core/test_chat_to_files.py::test_basic_similarity - AssertionErr...\nFAILED tests/core/test_chat_to_files.py::test_case_insensitivity_and_whitespace\n========================= 3 failed, 1 passed in 0.06s ==========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/core/test_chat_to_files.py F.FF                                    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_length_and_character_frequency ______________________\n\n    def test_length_and_character_frequency():\n>       assert is_similar(\"aabbc\", \"bacba\")\nE       AssertionError: assert False\nE        +  where False = is_similar('aabbc', 'bacba')\n\ntests/core/test_chat_to_files.py:163: AssertionError\n____________________________ test_basic_similarity _____________________________\n\n    def test_basic_similarity():\n>       assert is_similar(\"abc\", \"cab\")\nE       AssertionError: assert False\nE        +  where False = is_similar('abc', 'cab')\n\ntests/core/test_chat_to_files.py:153: AssertionError\n____________________ test_case_insensitivity_and_whitespace ____________________\n\n    def test_case_insensitivity_and_whitespace():\n>       assert is_similar(\"A b C\", \"c a b\")\nE       AssertionError: assert False\nE        +  where False = is_similar('A b C', 'c a b')\n\ntests/core/test_chat_to_files.py:158: AssertionError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_length_and_character_frequency\nFAILED tests/core/test_chat_to_files.py::test_basic_similarity - AssertionErr...\nFAILED tests/core/test_chat_to_files.py::test_case_insensitivity_and_whitespace\n========================= 3 failed, 1 passed in 0.06s ==========================\n\n", "============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/core/test_chat_to_files.py F.FF                                    [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_length_and_character_frequency ______________________\n\n    def test_length_and_character_frequency():\n>       assert is_similar(\"aabbc\", \"bacba\")\nE       AssertionError: assert False\nE        +  where False = is_similar('aabbc', 'bacba')\n\ntests/core/test_chat_to_files.py:163: AssertionError\n____________________________ test_basic_similarity _____________________________\n\n    def test_basic_similarity():\n>       assert is_similar(\"abc\", \"cab\")\nE       AssertionError: assert False\nE        +  where False = is_similar('abc', 'cab')\n\ntests/core/test_chat_to_files.py:153: AssertionError\n____________________ test_case_insensitivity_and_whitespace ____________________\n\n    def test_case_insensitivity_and_whitespace():\n>       assert is_similar(\"A b C\", \"c a b\")\nE       AssertionError: assert False\nE        +  where False = is_similar('A b C', 'c a b')\n\ntests/core/test_chat_to_files.py:158: AssertionError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_length_and_character_frequency\nFAILED tests/core/test_chat_to_files.py::test_basic_similarity - AssertionErr...\nFAILED tests/core/test_chat_to_files.py::test_case_insensitivity_and_whitespace\n========================= 3 failed, 1 passed in 0.06s ==========================\n\n"]}